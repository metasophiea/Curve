 ------- ------- ------- ------- ------- ------- ------- ------- ------- -------
2017-07-06
  - fifth rewrite on the pianoroll, things are going pretty well this time. The
    'noteBlock' element has gotten an upgrade and the mouse interaction is being
    made a little nicer. So far there's alt-click to add, click-n-drag, 
    shift-click-n-drag to group select, click anyway to deselect, alt-drag to
    clone, right and left handle drag to lengthen, and all that springy
    boundries thing. Still playing with the interaction logic of it all till it
    feels natural.
  - fixed duplicate events problem in noteRegistry


2017-07-05
  - another draft started of the pianoroll (4) this time I'm trying to split
    more of the functionality into the block elements..we'll see how it goes


2017-07-04
  - re-wrote the pianoroll.noteRegistry for better storage and retrival
  - created rudimentary playback for pianoroll (seems to work rather well,
    there's no needle yet however)


2018-07-03
  - multi-delete note blocks in the piano roll editor
  - fixed problem in detectOverlap bounding box judgement (which just didn't 
    work)
  - click-n-drag group selection note blocks in the piano roll editor


2018-07-02
  - single block ctrl-drag duplication on the piano-roll editor
  - multi-block select, movement and length adjust
  - multi-block alt-drag duplication on the piano-roll editor (changed from 
    ctrl-drag)


2018-07-01
  - piano rool editor now uses the noteRegistry more vigorously, allowing it to
    set limitations such as maximum note length and maximum limit to an event on
    the right. Also added method that can return notes who have events between
    two defined times


2018-06-29
  - further development into the piano roll editor (which is starting life as an
    advanced launchpad)
    future development ideas
    - ctrl-drag to clone
    - ability to sectect groups of notes (and move around/clone)
    - shift-drag empty space to select area
    - shift/alt-drag used space to adjust velocity (and colour)
    - playfield that goes off the slides (zooming, panning, etc)


2018-06-28
  - fixed synthesizer octave adjust which wasn't doing anything (I'd changed the
    '__globals.audio.num2freq' argument list)
  - the basicSynthesizer and audio_duplicator have interesting backings. They]
    create the regular backing, bet set it's alpha colour to 0, then create a
    new shape with the same points to act as a backing with the desired colour. 
    This allows for the connection nodes to sit under the shape, thus saving on
    all that precise point placement.
  - began work on the piano roll editor


2018-06-27
  - fixed that lanuchpad sequence data duplication copy bug thing
  - added closure-compiler to build chain, creating a 'heavyComp' command along
    the way (to differentiate between the dev 'comp' command) 'heavyComp' runs 
    gravity on only 'main.js' (and can detect if an error occurs stopping the
    script if so) and produces 'workspace.js'. This file is given to the closure
    compiler, which produces 'workspace.min.js'
  - closure managed to find two places where things weren't written right; good
    job closure. (one where i was setting a value to null, then attempting to 
    delete that value; another where i was producing a string to print as a
    warning, but had never actually put that string in a printing function)
  - heavyComp now has a handy little report on the reduction performance
  - added sync button and connection node to pulseGenerator
  - created a musicalkeybaord object
  - fixed non-functional panic button in the basicSynthesizer
  - added musicalkeybaord object to 'finished objects' area
  - fixed universalreadout to interperate the 'data' segment a bit nicer (by
    converting things to JSON)


2018-06-26
  - updated oneShot_multi circuit to have a panic and playback rate features
  - added rate slider and panic button to oneShot_multi object
  - added rate slider and panic button to oneShot_multi_multiTrack object (also
    changed the 'dynamic design' section to use closures in functions instead of
    parsing the IDs of their parents)
  - accidentally left is possbible to set the playback to 0 in the oneShot_multi
    circuit (which the browser did not like) the minimum is now set at 1/1000000
  - loadURL interface added to the oneShot_multi object (these interfaces should
    save time when doing scripted jobs)
  - some more interface work on oneShot_multi_multiTrack and the pulse generator
  - reworded demo 1 a little bit, what with all these interface changes
  - updated demo 1 again, now including riffs from the old party calculator app
    and extra launchpads

  bug found
  - copying launchpads duplicates the internal sequence data, but doesn't copy it


2018-06-25
  - added light feature to the multitrack and single track miltishot audio file
    players
  - also added the ability to select a region to use within the audio track
  - forgot to hook up the fdail in the reverb object

  bug update: I'm really not sure of how to fix this missing playhead thing..
              it really seems like a processing issue; if you step through the
              program manually, everything is set..It seems to work fine
              sometimes and not others..I think I'll leave it for now. I've
              added lights to the multi track object anyway.

  future ideas
  - multi track multi shot thing, should have a panic button
  - zoom features on waveWorkspaces


2018-06-23
  - updated demo1 to have sound and sequencing
  - launchpad object importData method updated to deal with missing values
    (something that sould be done everywhere probably)
  - oneShot_multi circuit load method callback protected against missing 
    function
  - launchpad circuit now runs the pageChange callback after importPage or 
    importPages


2018-06-22
  - added symbols to the rest of the audio file players
  - pushed the audio players and circuits to the 'finished' folder
  - pushed audio recorder and circuit to the 'finished' folder
  - created and added a universalreadout and launchpad to the 'finished' folder
    ('launchpad' has been split up into the object and internal circuitry, in
    turn creating a parts.circuits.sequencing area, and 
    parts.circuits.sequencing.launchpad circuit (which probably needs a rename))
    (also the universal readout doesn't print to the console, but to some text
    in the viewport)
  - reated and added a puse generator
  - did import/export code for the launchpad
  - redid the comp command, so now there's two files produced; a 'test' edition
    thats the same as the old one, and a 'regular' one that has none of the test
    situation code. In this way I can now test and develop like normal, while
    having demo pages that are unaffected. Both still don't have the wrapping
    enabled, so, there's work to be done still.
  - created demo file of the multi-track audio file player hooked into a launchpad
    and pulse generator..still needs audio files ofcourse

  bug found
  - odd bug in audio file player looper, where hitting the play button
    repeatidly would always restart the audio, but sometimes the play head would
    disappear. Seems to be caused by the style of the needle not being set in 
    time before the request to move the needle to the other side of the viewbox
    occurs (the style has a transition setting). The commands are being performed
    in the correct order..it might be the browser not computing the style in time


2018-06-21
  - updated continuous dial callbacks to be wrapped in try/catch blocks
  - redid the distortion unit and moved it to the developed objects folder
  - jumped ahead and reorganised all the parts into 'elements' and 'circuits'. 
    Have to rewrite alot of stuff to use the elementMaker now
  - pushed distortion, reverb and filter into the "finished" objects area
  - added symbols to some of the audio file players

  future ideas
  - splitting up 'parts' into 'elements' and 'circuitry', where 'elements' are
    the graphical parts that a user would interact with (slides, dials, button,
    graphs, labels, lights, etc) and 'circuitry' are parts of pure code that do
    work (like distortion units and data processors)
      Right now, 'parts' is almost entirely 'elements', so I'll wait till the 
    circuitry parts come out of development more. I'd have to rewrite the element
    maker..though it's name and function is already correct


2018-06-20
  - created a rudimentary multi-track oneShot file player object. The idea is
    that one could load up drum beats, hook that into a launchpad or some pulse
    generator, and have it perform drum beats for you
  - added math.normalizeStretchArray to utilities (and fixed it up along the 
    way)
  - added math.curvePoint functions to utility, and fixed up other aspects of 
    curve generation
  - udpated smoothSet in the slider and continuous dial parts, in a bid to make
    them more efficient and time conscious..I think it's worked
  - started on revamping the testSituations folder

  future ideas
  - continue with 'testSituations' do-over, while updating partially developed
    objects, and pushing them to the main list


2018-06-18
  - wrote up a recorder object (with state lights and time readout)(the controls
    are honestly a little more clunkly that I'd like, but it works)


2018-06-15
  - added 'export' functionality into recorder2 (in prep for the audio disk)
  - little bit of development on audio disks (which I'm going to shelve for now)


2018-06-14
  future ideas
  - audio disks (that you can move in and out of audio recording devices and
    playback devices, etc)(they'd be a simple object that just contained one
    audio-encoded blob)


2018-06-13
  - developed audio recording object and circuitry to include pause/resume
    functionality, along with the ability to get the recording length at any 
    time. I've also simplified the input/output audio nodes somewhat. The object 
    is pretty sparse at current however.
  - worked on simplifing audio channels; turns out things are already pretty
    simple as they are (I was worried that the audio streams were mixing channel
    counts, and didn't know how that was effecting things. Seems only the audio
    file player was suffering from this. Need to be more vigilent about channels
    and streams in future)

2018-06-12
  - created rudimentary audio recording object. Currently all it does is record 
    the audio given to it, and then save that audio to a file when you  press
    the stop button.

  future ideas
  - going to have to change all audio connections to single channel, instead of
    this sudo-single channel we have currently


2018-06-08
  - there's now different types of oneShot circuitry; one that allows multiple 
    instances to play, and one that doesn't (named oneShot_single and 
    oneShot_multi)
  - wrote up looper circuitry and object. It just takes a file and always loops
    it while playing. The circuitry has the ability to loop a sub-section of the
    file, but the object doesn't have that feature
  - wrote up new verison of the generic audio file player, which is written a bit
    nicer, with some small changes
  - test situation 10 / 2 / 2 is looking good, now with each player type in an
    object (and labels)


2018-06-06
  - upgraded the needle-positioning on the oneShot player object. It now uses
    a transition instead of constant updates to the position.. I need to
    investigate whether a similar technique could be used for other players
  - needleOverlay now has the ability to disable regular selection and area
    selection
  - gave the oneShot object a trigger data input
    

2018-06-05
  - turns out there was a flaw in how 'positionFromMousePoint' was being used.
    'getCumulativeTransform' doesn't do a great job in getting the actual X/Y
    point, so 'getTruePoint' has been created which does much better
  - 'positionFromMousePoint' replaced with 'getPositionWithinFromMouse' which has
    the same functionality, but a nicer interface
  - updated grapher_audioScope and grapher_PeriodicWave to the new way of
    selecting what type of graph you want
  - updated testObject to have all the latest graphers
  - added 'loadAudioBuffer' to utility.audio
  - wrote up 'oneShot' audio file player circuit and object (object needs work)


2018-06-04
  - needleOverlay work complete, seems pretty solid now
  - worked on integrating the needleOverlay with the audioFilePlayer object. You
    can now select the loop region, move it around and disactivate it. It's a bit
    rickity, but it works (you might want to check up on the 'loopCompute' and 
    anything to do with getting the current time in the audioFilePlayer audio 
    part. It works on my machine!)
  - cleaned things up a bit in test situation 10 - 2


2018-06-03
  - more work on the needleOverlay; seem to have basic mouse interaction working
    now


2018-06-01
  - redid the original grapher to be more like the new canvas grapher, and
    subsequently made it possible (and easy) to switch between the two. Parts
    that use a grapher part, now give the ability to chose which you want to use
    (canvas is default)
  - upgraded the slider to to have 'click to go to this position' functionality. 
    Also the handle has a little more grapple area than is visible
  - began on overlay control object (which will be used with the waveWorkspace
    later)


2018-05-31
  - finished off canvas-based grapher, and put it into the audioFilePlayer object
    this move better now (as expected)
  - created wave form workspace with grapherCanvas. It's pretty nice too.
  - added rudimentary selection-area to grapher_waveWorkspace (need to work
    on backward selection)


2018-05-30
  - there's a problem with putting a canvas in a svg element. It appears to be a
    known bug on chrome, but no-one has dealt with it since 2015. There's a note
    on the bug reporting site that's from 2018-02-14 that seems to claim that 
    they'll be able to fix this bug..nothing after this though.
      It seems I can hack together a fix where an image element is actually used,
    and a canvas element is hidden. The canvas is drawn to, and then a 'print'
    command can be run which prints the canvas data to the image element. It's 
    essentially the same (I think). Problems now are to do with detail, but I think
    that can be fixed...probably user selected


2018-05-29
  - current time in audioFilePlayer now accounts for playback rate (but not
    detune, which is just a different way of changing the playback rate, so I've
    removed that feature)
  - developed rudimentary waveform viewer; but its causing a lot of strain of then
    browser. I'm working on integrating a canvas element to deal with this. There's
    still a lot of time spent on gathering the points to graph though..


2018-05-28
  - redid the slider and slider panel; things are simpler now and I've thrown out
    the horizontal and vertical versions of both, in favour of just using an
    angle value.
  - wrote up new version of the audioFilePlayer (developing with a new object)
    (the 'currentTime' method doesn't account for playback rate changes..need to
    fix that)


2018-05-25
  - added 'seconds2time' and 'padString' utilities under math (the second isn't
    really math though..I should make a 'string' catagory or something...)
  - fixed up play/pause/stop functionality in the audio file player, and added
    the ability to get the current time
  - horizontal slider has been updated to override programmactic 'set' calls
    when the user is pulling the handle..it works, but needs work. Also it needs
    to be copied to other such controls
  - audio file player object now has a scrubber (everything needs work)

  future ideas
  - theres some 'detune' and 'play rate' methods in the audio source buffer
    thing somewhere..


2018-05-24
  - got upload of audio files to work. there's features for looping, starting
    mid track and graphing the waveform too that need to be worked on now
  - expanding audio file playing object to display the name of the loaded track,
    and have play/stop buttons (pause is under development)


2018-05-23
  - began work on the overlay menu
  - updated svg element layout to have different global panes, also there's an
    improved system for finding the scale of those global panes
  - changed how object.requestInteraction works; now it requires a global pane
    name to work with. This is so one can differentiate between actions for the
    workspace and ones for the menu. Currently, most mouse actions aren't really
    necessary - buttons and sliders work by their own anyway, and menu items
    aren't moveable - but things change and things should be open to this.


2018-05-22
  - redid audio_scope and audio_duplicator in new style, and put them in the 
    objects folder
  - successfully got the audio producing node to split the loaded track into its
    left and right channels


2018-05-21
  - another day, another attempt at that shebang thing in gravity
  - redid the basic synthesizer object with the new object builder system
  - created basic audio playback object (still working on 'uploading' files)


2018-05-18
  - redid the paste fix from yesterday, to put the 'declareObjectGrapple' back
    into the object builder
  - fix in autio_meter_level, where not setting the angle value would produce
    the element upside-down. It now defaults to 0 so that doesn't happen.
  - redid object builder to have z position control, it's also just flatly
    better now
  - making all the element callbacks lower case (it was inconsistent before)
  - another attempt at making gravity work everywhere (now mac works..we'll 
    see)


2018-05-17
  - fixed keyboard interaction from yesterday (the logic was broken) there's
    now also the option of 'all' so you don't have to declare everything
  - fixed onmouseup problem in button_rect (it's that this/timeout thing)

  bugs
  - the new object-design concept has totally broken the paste functionality :/
  -> scratch that; I fixed it by pulling the 'declareObjectGrapple' function 
    out ..still a little wonky I feel


2018-05-16
  - created readout using sixteen segment display
  - wrote up a pretty snazzy audio-input object with input select

  bugs
  - the logic in keyboardInteraction/declareKeycaptureObject/keyProcessor is 
    broken


2018-05-15
  - created sixteen segment display


2018-05-14
  - updated gravity shebang so it'll work in other systems (hopefully)


2018-05-11
  - fixed preservation of indentation in gravity
  - wrote up objectBuilder (a bit crude, but it's there)

  future ideas
  - you could probably delete that 'parts/modifiers' folder


2018-05-10
  - test situation 10 "recorded audio" / 1 "microphones" works, and rather
    simply too. All very gentle and nice
  - created rudimentary audio-in object


2018-05-09
  future ideas
  - audio in / import-export / playback / record / edit
  - look into "DynamicsCompressorNode", "DelayNode" and "IIRFilterNode"


2018-05-08
  - seems the feedback problem was caused by the 'Q' being set way too high. It
    used to be at 10000, but now it's at 0.1 and things are much more 
    reasonable
  - wrote up simple filter object

  future ideas
  - none of that 'power on' stuff to get round the new "no auto-play" features,
    instead, I'll just rely on some other activation method external to the
    main system. Keeps things clean I think


2018-05-04
  - chrome's "no autoplay" feature has arrived, and it's causing problems. You
    can go into 'chrome://flags/' and turn it off, but this is only a 
    development solution. There's going to have to be some sort of activation
    method..perhaps a gain dial on the audio sink that's set to zero.
    - added a 'power' button to the audio sink, but this will have to be
      changed to something else eventually
  - wrote synthesizer 3 which is gainJourney based (though it accommodates the
    velocity of a note)
  - wrote up a reverb unit and object, which uses those impulse responses from
    before. There's an output gain dail, a method of selecting between the ~38
    types and a wet/dry dial

  - filter unit has strange feed-back loop I can't seem to find the root of ):/


2018-05-02
  - wrote a pile of notes on synthesizers
  - fixed a little problem in basicSynth_2 where setting the rate dials to max
    would stop the wobble completely
  - start test situation 9 "audio effect units"
  - pushed 'changeAudioParam' to '__globals.utility.audio.changeAudioParam'
  - wrote up simplistic distortion box (complete with in/out gain adjust,
    distortion, resolution and over-sample controls. Seems to work pretty well)
  - added 'onRelease' callback to 'dial_discrete'
  - the 'onChange' callback for 'dial_discrete' is now only called when the
    value actually changes
  
  future ideas
  - reverb unit
  - EQ unit
  - multi-band distortion unit
  - mixing units


2018-05-01
  - added adjustment dials to new gain-wobble synthesizer (for period and depth)
  - updated gravity to ignore files which have names that begin with a dot
  - created synthesizer 2 and it's object (which incorporates gain and detune
    wobble; with dials for depth and rate)

  future ideas
  - need to do layouts of potential new synthesizers


2018-04-30
  - rewrote basicSynth into new style (it's actually longer than the original)
  - pushed the new synthesizer into main place (should probably rename it)
  - renamed synthesizer to synthesizer_basic
  - wrote up prototype versions of a synthesizer with gain and detune wobble
    (much better efficiency) and a prototype synthesizer object with gain wobble

  future ideas
  - we're going to have to make more self-contained synthesizers instead of this
    multi-unit idea, as things are pretty heavy on the processor, and there 
    seems to be a lot of time spent on fixing things that aren't that necessary
    (like the warbler sending the correct gain adjust signals fast enough, and
    the dial being able to keep up..slow moves are pretty much fine)
      It goes slightly against my desire to do everything in atomic parts (or at
    least, have the option to) but here we are. Audiotool is contained like that.
    Logic, Acid, etc. all the same. I suppose its a battle between wanting to
    make things as open as possible, which led me to this everything-atomic way,
    but I think I can provide the same level of control with a more integrated
    (and efficient) units.


2018-04-27
  - new audio sink now has left and right audio channel input and a meter for 
    each
  - fixed a problem with cable redrawing which I hadn't noticed before
  - fixed slow duplication on the periodicWaveMaker, which had to do with
    calling update loops with the slidepanels. Slidepanels now use their own
    code more and don't rely on the individual sliders for panel-wide updates
  - audio meter part; complete with level; slow-moving background level and 
    markings (looks pretty pro too)
  - tried making a 'warbler' which changes the gain of a synthesizer a lot. 
    Seems to break manual control though, and if you go fast enough the dial
    doesn't move 
  

2018-04-26
  - finished redoing utility (that was bigger than I expected)
  - rearranged test situation 8 and some of the objects to look nicer
  - periodicWaveMaker now sends its settings on connecting
  - worked on redoing the audio sink to have an audio meter (working on an audio
    meter while I'm there)


2018-04-25
  - redoing utility


2018-04-24
  - redoing utility


2018-04-23
  - redoing utility


2018-04-20
  - updated keyboard interaction, so now objects have to declare what keys they
    want to use, and what modifiers will go with them (none, meta, control, alt
    and shift) The system behind handles everything else, and knows to run the
    global functions if nothing matches. Objects will also be told about 
    modifier keys that accompany a key.
  - wrote up an audio duplicator and added it to test situation 8

  future ideas
  - onmouseleave for objects?


2018-04-19
  - periodicWaveMaker's slides were entering values upside-down, so, fixed that
  - renamed 'compiler.py' to 'gravity' on Dylan's suggestion as it sounds cooler

  future ideas
  - make the audio connection nodes and cables flicker with the audio that they
    are carrying
  - redo keyboard capture, so object don't capture the entire thing when they
    only want one key. Have the objects declare what keys they want.


2018-04-18
  - fixed a problem with the dial_continuous, slide_horizontal and 
    slidePanel_vertical where applying overlapping smoothSets caused confusion
    in the animation. Now, the previous one is just cancelled and the new one
    takes over from where the old one left off
  - updated the synthesizer to incorporate different transition curves in attack
    and release (exponential still doesn't work though)
  - had to reverse sin/cos periodic wave input in the synthesizer..curious
  - began work on an audio scope, it can accept audio data and visualize it,
    there's also a 'hold' key and a dial for adjusting the refresh rate

  future ideas
  - audio duplicator
  - audio combiner


2018-04-17
  - fixed key_rect in test situation 1 test object (remember not to on
    onmouse-anything. It's all onkey-something)
  - added curve maker into utilities (linear, reverse_linear, sin, cos, s,
    exponential)
  - added smoothSet to dial_continuous, slide_vertical, slide_horizontal,
    slidePanel_vertical and slidePanel_horizontal
  - in test situation one, the rect_button now causes some new functions
  - updated the synthesizer to have smooth transition options when setting gain
    and detune (exponential doesn't seem to work though; but user-defined does
    ..curious)
  - updated basicSynth to accept smooth changing values for gain and detune, and
    adjust the dials and synthesizer accordingly along with the stored value for
    any new oscillators that are created during the time of transition

  future ideas
  - change attack and release in basicSynth and the synthesizer to incorporate
    different transition curves


2018-04-16
  - started log
  - added glowbox to test object in test situation one
  - deleted unneeded files
  - fixed up the first test situation a little to use the latest writings
  - looked into adding curve-based movement to the synth and continuous dials
    dials