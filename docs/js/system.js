(function() {
    const __canvasPrefix = 'system';
    const __canvasElements = document.getElementsByTagName('canvas');
    for(let __canvasElements_count = 0; __canvasElements_count < __canvasElements.length; __canvasElements_count++){
        if( __canvasElements[__canvasElements_count].hasAttribute(__canvasPrefix) ){
            const _canvas_ = __canvasElements[__canvasElements_count];
            _canvas_.layers = new function(){
                const layerRegistry = {};
            
                this.registerLayerLoaded = function(layerName, layer){
                    if(layerRegistry[layerName] == undefined){ layerRegistry[layerName] = {}; }
                    layerRegistry[layerName].isLoaded = true;
                    layerRegistry[layerName].versionInformation = layer.versionInformation;
                    if(this.onLayerLoad){this.onLayerLoad(layerName,layerRegistry);}
                };
                this.onLayerLoad = function(layerName,layerRegistry){};
            
                this.getVersionInformation = function(){
                    return Object.keys(layerRegistry).map(key => { return {name:key, data:layerRegistry[key].versionInformation} });
                };
            };
            _canvas_.library = new function(){
                this.versionInformation = { tick:0, lastDateModified:{y:2020,m:2,d:12} };
                const library = this;
            
                this.go = new function(){
                    const functionList = [];
            
                    this.add = function(newFunction){ functionList.push(newFunction); };
                    this.__activate = function(){ functionList.forEach(f => f()); };
                };
                
                const dev = {
                    prefix:'library',
                
                    active:{ math:false, structure:false, audio:false, font:false, misc:false },
                
                    log:{
                        math:function(){
                            if(!dev.active.math){return;}
                            console.log( dev.prefix+'.math'+arguments[0], ...(new Array(...arguments).slice(1)) );
                        },
                        structure:function(){
                            if(!dev.active.structure){return;}
                            console.log( dev.prefix+'.structure'+arguments[0], ...(new Array(...arguments).slice(1)) );
                        },
                        audio:function(){
                            if(!dev.active.audio){return;}
                            console.log( dev.prefix+'.audio'+arguments[0], ...(new Array(...arguments).slice(1)) );
                        },
                        font:function(){
                            if(!dev.active.font){return;}
                            console.log( dev.prefix+'.font'+arguments[0], ...(new Array(...arguments).slice(1)) );
                        },
                        misc:function(){
                            if(!dev.active.misc){return;}
                            console.log( dev.prefix+'.misc'+arguments[0], ...(new Array(...arguments).slice(1)) );
                        },
                    },
                
                    countActive:false,
                    countMemory:{},
                    count:function(commandTag){
                        if(!dev.countActive){return;}
                        if(commandTag in dev.countMemory){ dev.countMemory[commandTag]++; }
                        else{ dev.countMemory[commandTag] = 1; }
                    },
                    countResults:function(){return countMemory;},
                };
                
                this.math = new function(){
                    this.averageArray = function(array){
                    
                        // return array.reduce( ( p, c ) => p + c, 0 ) / array.length
                    
                        //this seems to be a little faster
                        let sum = array[0];
                        for(let a = 1; a < array.length; a++){ sum += array[a]; }
                        return sum/array.length;
                    };
                    this.averagePoint = function(points){
                    
                        const sum = points.reduce((a,b) => {return {x:(a.x+b.x),y:(a.y+b.y)};} );
                        return {x:sum.x/points.length,y:sum.y/points.length};
                    };
                    this.boundingBoxFromPoints = function(points){
                    
                        if(points.length == 0){
                            return { topLeft:{x:0,y:0}, bottomRight:{x:0,y:0} };
                        }
                    
                        if(points.length == 1){
                            return { topLeft:{x:points[0].x,y:points[0].y}, bottomRight:{x:points[0].x,y:points[0].y} };
                        }
                    
                        if(points.length == 2){
                            if(points[0].x < points[1].x){
                                if(points[0].y < points[1].y){
                                    return {
                                        topLeft:{x:points[0].x,y:points[0].y},
                                        bottomRight:{x:points[1].x,y:points[1].y},
                                    };
                                }else{
                                    return {
                                        topLeft:{x:points[0].x,y:points[1].y},
                                        bottomRight:{x:points[1].x,y:points[0].y},
                                    };
                                }
                            }else{
                                if(points[0].y < points[1].y){
                                    return {
                                        topLeft:{x:points[1].x,y:points[0].y},
                                        bottomRight:{x:points[0].x,y:points[1].y},
                                    };
                                }else{
                                    return {
                                        topLeft:{x:points[1].x,y:points[1].y},
                                        bottomRight:{x:points[0].x,y:points[0].y},
                                    };
                                }
                            }
                        }
                    
                        let left = points[0].x; let right = points[0].x;
                        let top = points[0].y;  let bottom = points[0].y;
                    
                        for(let a = 1; a < points.length; a++){
                            if( points[a].x < left ){ left = points[a].x; }
                            else if(points[a].x > right){ right = points[a].x; }
                    
                            if( points[a].y < top ){ top = points[a].y; }
                            else if(points[a].y > bottom){ bottom = points[a].y; }
                        }
                    
                        return {
                            topLeft:{x:left,y:top},
                            bottomRight:{x:right,y:bottom}
                        };
                    };
                    this.cartesianAngleAdjust = function(x,y,angle){
                    
                        // //v1    
                        //     if(angle == 0){ return {x:x,y:y}; }
                        //     if(angle == Math.PI){ return {x:-x,y:-y}; }
                        //     if(angle == Math.PI*0.5){ return {x:-y,y:x}; }
                        //     if(angle == Math.PI*1.5){ return {x:y,y:-x}; }
                    
                        //     const polar = library.math.cartesian2polar( x, y );
                        //     polar.ang += angle;
                        //     return library.math.polar2cartesian( polar.ang, polar.dis );
                        
                        //v2    
                            if(angle == 0){ return {x:x,y:y}; }
                            return { x:x*Math.cos(angle) - y*Math.sin(angle), y:y*Math.cos(angle) + x*Math.sin(angle) };
                    };
                    this.convertColour = new function(){
                        this.obj2rgba = function(obj){
                    
                            return 'rgba('+obj.r*255+','+obj.g*255+','+obj.b*255+','+obj.a+')';
                        };
                        this.rgba2obj = function(rgba){
                    
                            rgba = rgba.split(',');
                            rgba[0] = rgba[0].replace('rgba(', '');
                            rgba[3] = rgba[3].replace(')', '');
                            rgba = rgba.map(function(a){return parseFloat(a);})
                            return {r:rgba[0]/255,g:rgba[1]/255,b:rgba[2]/255,a:rgba[3]};
                        };
                    };
                    this.curveGenerator = new function(){
                        this.linear = function(stepCount=2, start=0, end=1){
                    
                            stepCount = Math.abs(stepCount)-1;
                            const outputArray = [0];
                            for(let a = 1; a < stepCount; a++){ 
                                outputArray.push(a/stepCount);
                            }
                            outputArray.push(1); 
                    
                            const mux = end-start;
                            for(let a = 0 ; a < outputArray.length; a++){
                                outputArray[a] = outputArray[a]*mux + start;
                            }
                    
                            return outputArray;
                        };
                        this.sin = function(stepCount=2, start=0, end=1){
                    
                            stepCount = Math.abs(stepCount) -1;
                            let outputArray = [0];
                            for(let a = 1; a < stepCount; a++){ 
                                outputArray.push(
                                    Math.sin( Math.PI/2*(a/stepCount) )
                                );
                            }
                            outputArray.push(1); 
                    
                            const mux = end-start;
                            for(let a = 0 ; a < outputArray.length; a++){
                                outputArray[a] = outputArray[a]*mux + start;
                            }
                    
                            return outputArray;		
                        };
                        this.cos = function(stepCount=2, start=0, end=1){
                    
                            stepCount = Math.abs(stepCount) -1;
                            let outputArray = [0];
                            for(let a = 1; a < stepCount; a++){ 
                                outputArray.push(
                                    1 - Math.cos( Math.PI/2*(a/stepCount) )
                                );
                            }
                            outputArray.push(1); 
                    
                            const mux = end-start;
                            for(let a = 0 ; a < outputArray.length; a++){
                                outputArray[a] = outputArray[a]*mux + start;
                            }
                    
                            return outputArray;	
                        };
                        this.s = function(stepCount=2, start=0, end=1, sharpness=8){
                    
                            if(sharpness == 0){sharpness = 1/1000000;}
                    
                            let curve = [];
                            for(let a = 0; a < stepCount; a++){
                                curve.push(
                                    1/( 1 + Math.exp(-sharpness*((a/stepCount)-0.5)) )
                                );
                            }
                    
                            const outputArray = library.math.normalizeStretchArray(curve);
                    
                            const mux = end-start;
                            for(let a = 0 ; a < outputArray.length; a++){
                                outputArray[a] = outputArray[a]*mux + start;
                            }
                    
                            return outputArray;
                        };
                        this.sigmoid = function(stepCount=2, start=0, end=1, sharpness=0.5){
                            if(sharpness < 0){sharpness = 0;}
                            if(sharpness > 1){sharpness = 1;}
                    
                            stepCount--;
                    
                            let curve = [];
                            for(let a = 0; a <= stepCount; a++){
                                const x = a/stepCount;
                                curve.push(
                                    0.5 + ( ((2*x) - 1) / ( 1 - sharpness + sharpness*Math.abs((2*x) - 1) ) )/2
                                );
                            }
                    
                            const mux = end-start;
                            for(let a = 0 ; a < curve.length; a++){
                                curve[a] = curve[a]*mux + start;
                            }
                    
                            return curve;
                        };
                        this.exponential = function(stepCount=2, start=0, end=1, sharpness=2){
                    
                            stepCount = stepCount-1;
                            let outputArray = [];
                            
                            for(let a = 0; a <= stepCount; a++){
                                outputArray.push( (Math.exp(sharpness*(a/stepCount))-1)/(Math.E-1) ); // Math.E == Math.exp(1)
                            }
                    
                            outputArray = library.math.normalizeStretchArray(outputArray);
                    
                            const mux = end-start;
                            for(let a = 0 ; a < outputArray.length; a++){
                                outputArray[a] = outputArray[a]*mux + start;
                            }
                    
                            return outputArray;
                        };
                    };
                    this.curvePoint = new function(){
                        this.linear = function(x=0.5, start=0, end=1){
                    
                            return x *(end-start)+start;
                        };
                        this.sin = function(x=0.5, start=0, end=1){
                    
                            return Math.sin(Math.PI/2*x) *(end-start)+start;
                        };
                        this.cos = function(x=0.5, start=0, end=1){
                    
                            return (1-Math.cos(Math.PI/2*x)) *(end-start)+start;
                        };
                        this.s = function(x=0.5, start=0, end=1, sharpness=8){
                    
                            const temp = library.math.normalizeStretchArray([
                                1/( 1 + Math.exp(-sharpness*(0-0.5)) ),
                                1/( 1 + Math.exp(-sharpness*(x-0.5)) ),
                                1/( 1 + Math.exp(-sharpness*(1-0.5)) ),
                            ]);
                            return temp[1] *(end-start)+start;
                        };
                        this.sigmoid = function(x=0.5, start=0, end=1, sharpness=0.5){
                    
                            return ( 0.5 + ( ((2*x) - 1) / ( 1 - sharpness + sharpness*Math.abs((2*x) - 1) ) )/2 ) *(end-start)+start;
                        };
                        this.exponential = function(x=0.5, start=0, end=1, sharpness=2){
                    
                            const temp = library.math.normalizeStretchArray([
                                (Math.exp(sharpness*0)-1)/(Math.E-1),
                                (Math.exp(sharpness*x)-1)/(Math.E-1),
                                (Math.exp(sharpness*1)-1)/(Math.E-1),
                            ]);
                            return temp[1] *(end-start)+start;
                        };
                    };
                    this.getAngleOfTwoPoints = function(point_1,point_2){
                    
                        if(point_1.x == point_2.x && point_1.y == point_2.y){return 0;}
                    
                        const xDelta = point_2.x - point_1.x;
                        const yDelta = point_2.y - point_1.y;
                        let angle = Math.atan( yDelta/xDelta );
                    
                        if(xDelta < 0){ angle = Math.PI + angle; }
                        else if(yDelta < 0){ angle = Math.PI*2 + angle; }
                    
                        return angle;
                    };
                    this.getIndexOfSequence = function(array,sequence){ 
                    
                        function comp(thing_A,thing_B){
                            const keys = Object.keys(thing_A);
                            if(keys.length == 0){ return thing_A == thing_B; }
                    
                            for(let a = 0; a < keys.length; a++){
                                if( !thing_B.hasOwnProperty(keys[a]) ){ return false; }
                                if( thing_A[keys[a]] != thing_B[keys[a]] ){ return false; }
                            }
                            return true;
                        }
                    
                        if(array.length == 0 || sequence.length == 0){return undefined;}
                    
                        let index = 0;
                        for(index = 0; index < array.length - sequence.length + 1; index++){
                            if( comp(array[index], sequence[0]) ){
                                let match = true;
                                for(let a = 1; a < sequence.length; a++){
                                    if( !comp(array[index+a],sequence[a]) ){
                                        match = false;
                                        break;
                                    }
                                }
                                if(match){return index;}
                            }
                        }
                    
                        return undefined;
                    };
                    this.largestValueFound = function(array){
                    
                        if(array.length == 0){return undefined;}
                        return array.reduce(function(max,current){
                            return Math.abs(max) > Math.abs(current) ? max : current;
                        });
                    };
                    this.normalizeStretchArray = function(array){
                    
                        //discover the largest number
                            const biggestIndex = array.reduce( function(oldIndex, currentValue, index, array){ return currentValue > array[oldIndex] ? index : oldIndex; }, 0);
                    
                        //divide everything by this largest number, making everything a ratio of this value 
                            const dux = Math.abs(array[biggestIndex]);
                            array = array.map(x => x / dux);
                    
                        //stretch the other side of the array to meet 0 or 1
                            if(array[0] == 0 && array[array.length-1] == 1){return array;}
                            const pertinentValue = array[0] != 0 ? array[0] : array[array.length-1];
                            array = array.map(x => (x-pertinentValue)/(1-pertinentValue) );
                    
                        return array;
                    };
                    this.relativeDistance = function(realLength, start,end, d, allowOverflow=false){
                    
                        const mux = (d - start)/(end - start);
                        if(!allowOverflow){ if(mux > 1){return realLength;}else if(mux < 0){return 0;} }
                        return mux*realLength;
                    };
                    this.seconds2time = function(seconds){
                    
                        const result = {h:0, m:0, s:0, ms:0, µs:0, ns:0, ps:0, fs:0};
                        
                        result.h = Math.floor(seconds/3600);
                        seconds = seconds - result.h*3600;
                        if(seconds <= 0){return result;}
                    
                        result.m = Math.floor(seconds/60);
                        seconds = seconds - result.m*60;
                        if(seconds <= 0){return result;}
                    
                        result.s = Math.floor(seconds);
                        seconds = seconds - result.s;
                        if(seconds <= 0){return result;}
                    
                        result.ms = Math.floor(seconds*1000);
                        seconds = seconds*1000 - result.ms;
                        if(seconds <= 0){return result;}
                    
                        result.µs = Math.floor(seconds*1000);
                        seconds = seconds*1000 - result.µs;
                        if(seconds <= 0){return result;}
                    
                        result.ns = Math.floor(seconds*1000);
                        seconds = seconds*1000 - result.ns;
                        if(seconds <= 0){return result;}
                    
                        result.ps = Math.floor(seconds*1000);
                        seconds = seconds*1000 - result.ps;
                        if(seconds <= 0){return result;}
                    
                        result.fs = seconds*1000;
                        
                        return result;
                    };
                    
                    this.distanceBetweenTwoPoints = function(point_a,point_b){
                        return Math.hypot(point_b.x-point_a.x, point_b.y-point_a.y);
                    };
                    this.cartesian2polar = function(x,y){
                    
                        const dis = Math.pow(Math.pow(x,2)+Math.pow(y,2),0.5);
                        let ang = 0;
                    
                        if(x === 0){
                            if(y === 0){ang = 0;}
                            else if(y > 0){ang = 0.5*Math.PI;}
                            else{ang = 1.5*Math.PI;}
                        }
                        else if(y === 0){
                            if(x >= 0){ang = 0;}else{ang = Math.PI;}
                        }
                        else if(x >= 0){ ang = Math.atan(y/x); }
                        else{ /*if(x < 0)*/ ang = Math.atan(y/x) + Math.PI; }
                    
                        return {'dis':dis,'ang':ang};
                    };
                    this.polar2cartesian = function(angle,distance){
                    
                        return {'x':(distance*Math.cos(angle)), 'y':(distance*Math.sin(angle))};
                    };
                    
                    this.blendColours = function(rgba_1,rgba_2,ratio){
                    
                        return {
                            r: (1-ratio)*rgba_1.r + ratio*rgba_2.r,
                            g: (1-ratio)*rgba_1.g + ratio*rgba_2.g,
                            b: (1-ratio)*rgba_1.b + ratio*rgba_2.b,
                            a: (1-ratio)*rgba_1.a + ratio*rgba_2.a,
                        };           
                    };
                    this.multiBlendColours = function(rgbaList,ratio){
                    
                        //special cases
                            if(ratio == 0){return rgbaList[0];}
                            if(ratio == 1){return rgbaList[rgbaList.length-1];}
                        //calculate the start colour and ratio(represented by as "colourIndex.ratio"), then blend
                            const p = ratio*(rgbaList.length-1);
                            return library.math.blendColours(rgbaList[~~p],rgbaList[~~p+1], p%1);
                    };
                    
                    
                    
                    this.polygonToSubTriangles = function(regions,inputFormat='XYArray'){
                    
                        if(inputFormat == 'flatArray'){
                            const tmp = [];
                            for(let a = 0; a < regions.length; a+=2){ tmp.push( {x:regions[a+0], y:regions[a+1]} ); }
                            regions = [tmp];
                        }
                    
                        const holes = regions.reverse().map(region => region.length);
                        holes.forEach((item,index) => { if(index > 0){ holes[index] = item + holes[index-1]; } });
                        holes.pop();
                    
                        return _thirdparty.earcut(regions.flat().map(item => [item.x,item.y]).flat(),holes);
                    };
                    this.unionPolygons = function(polygon1,polygon2){
                    
                        //martinez (not working)
                        // for(let a = 0; a < polygon1.length; a++){
                        //     polygon1[a].push( polygon1[a][0] );
                        // }
                        // for(let a = 0; a < polygon2.length; a++){
                        //     polygon2[a].push( polygon2[a][0] );
                        // }
                    
                        // const ans = _thirdparty.martinez.union(
                        //     polygon1.map(region => region.map(item => [item.x,item.y])  ),
                        //     polygon2.map(region => region.map(item => [item.x,item.y])  )
                        // );
                        // return ans.flat().map(region => region.map(item => ({x:item[0],y:item[1]})));
                    
                        //PolyBool
                        return _thirdparty.PolyBool.union(
                            {regions:polygon1.map(region => region.map(item => [item.x,item.y]))}, 
                            {regions:polygon2.map(region => region.map(item => [item.x,item.y]))}
                        ).regions.map(region => region.map(item => ({x:item[0],y:item[1]})));
                    }
                    this.detectIntersect = new function(){
                        this.boundingBoxes = function(box_a, box_b){
                    
                            return box_a.bottomRight.y >= box_b.topLeft.y && 
                                box_a.bottomRight.x >= box_b.topLeft.x && 
                                box_a.topLeft.y <= box_b.bottomRight.y && 
                                box_a.topLeft.x <= box_b.bottomRight.x;
                        };
                    
                        this.pointWithinBoundingBox = function(point,box){
                            return !(
                                point.x < box.topLeft.x     ||  point.y < box.topLeft.y     ||
                                point.x > box.bottomRight.x ||  point.y > box.bottomRight.y
                            );
                        };
                        this.pointOnLine = function(point,line){
                            
                            if( 
                                point.x < line[0].x && point.x < line[1].x ||
                                point.y < line[0].y && point.y < line[1].y ||
                                point.x > line[0].x && point.x > line[1].x ||
                                point.y > line[0].y && point.y > line[1].y
                            ){return false;}
                    
                            if(point.x == line[0].x && point.y == line[0].y){ return true; }
                            if(point.x == line[1].x && point.y == line[1].y){ return true; }
                            if(line[0].x == line[1].x && point.x == line[0].x){
                                return (line[0].y > point.y && point.y > line[1].y) || (line[1].y > point.y && point.y > line[0].y);
                            }
                            if(line[0].y == line[1].y && point.y == line[0].y){
                                return (line[0].x > point.x && point.x > line[1].x) || (line[1].x > point.x && point.x > line[0].x);
                            }
                    
                            return ((line[1].y - line[0].y) / (line[1].x - line[0].x))*(point.x - line[0].x) + line[0].y - point.y == 0;
                        }
                        this.pointWithinPoly = function(point,poly){
                    
                            if(poly.boundingBox == undefined){ poly.boundingBox = library.math.boundingBoxFromPoints(poly.points); }
                            if( !library.math.detectIntersect.boundingBoxes( library.math.boundingBoxFromPoints([point]), poly.boundingBox ) ){ return 'outside'; }
                    
                            // outside / onPoint / onEdge / inside
                    
                            //check if the point is on a point of the poly; bail and return 'onPoint'
                            for(let a = 0; a < poly.points.length; a++){
                                if( point.x == poly.points[a].x && point.y == poly.points[a].y ){
                                    return 'onPoint';
                                }
                            }
                    
                            function pointLevelWithPolyPointChecker(poly,point,a,b){
                                //only flip, if the point is not perfectly level with point a of the line 
                                //or if you can prove that the a's two adjacent points are higher and lower than the matching point's level
                                //(the system will come round to having this same point be point b)
                                if( poly.points[a].y != point.y && poly.points[b].y != point.y ){
                                    return true;
                                }else if(poly.points[a].y == point.y){
                                    const pointInFront = a+1 >= poly.points.length ? 0 : a+1;
                                    const pointBehind = a-1 <= 0 ? poly.points.length-1 : a-1;
                                    if(
                                        poly.points[pointBehind].y <= poly.points[a].y && poly.points[pointInFront].y <= poly.points[a].y ||
                                        poly.points[pointBehind].y >= poly.points[a].y && poly.points[pointInFront].y >= poly.points[a].y
                                    ){
                                    }else{
                                        return true;
                                    }
                                }
                    
                                return false;
                            }
                    
                            //Ray casting algorithm
                            let inside = false;
                            for(let a = 0, b = poly.points.length - 1; a < poly.points.length; b = a++){
                    
                                //point must be on the same level of the line
                                if( (poly.points[b].y >= point.y && poly.points[a].y <= point.y) || (poly.points[a].y >= point.y && poly.points[b].y <= point.y) ){
                                    //discover if the point is on the far right of the line
                                    if( poly.points[a].x < point.x && poly.points[b].x < point.x ){
                                        //only flip if the line is not perfectly level (which would make the ray skirt the line)
                                        if( poly.points[a].y != poly.points[b].y ){
                                            if( pointLevelWithPolyPointChecker(poly,point,a,b) ){
                                                inside = !inside;
                                            }
                                        }
                    
                                    //discover if the point is on the far left of the line, skip it if so
                                    }else if( poly.points[a].x > point.x && poly.points[b].x > point.x ){
                                        continue;
                                    }else{
                                        //calculate what side of the line this point is
                                            let areaLocation;
                                            if( poly.points[b].y > poly.points[a].y && poly.points[b].x > poly.points[a].x ){
                                                areaLocation = (point.x-poly.points[a].x)/(poly.points[b].x-poly.points[a].x) - (point.y-poly.points[a].y)/(poly.points[b].y-poly.points[a].y) + 1;
                                            }else if( poly.points[b].y <= poly.points[a].y && poly.points[b].x <= poly.points[a].x ){
                                                areaLocation = (point.x-poly.points[b].x)/(poly.points[a].x-poly.points[b].x) - (point.y-poly.points[b].y)/(poly.points[a].y-poly.points[b].y) + 1;
                                            }else if( poly.points[b].y > poly.points[a].y && poly.points[b].x < poly.points[a].x ){
                                                areaLocation = (point.x-poly.points[b].x)/(poly.points[a].x-poly.points[b].x) + (point.y-poly.points[a].y)/(poly.points[b].y-poly.points[a].y);
                                            }else if( poly.points[b].y <= poly.points[a].y && poly.points[b].x >= poly.points[a].x ){
                                                areaLocation = (point.x-poly.points[a].x)/(poly.points[b].x-poly.points[a].x) + (point.y-poly.points[b].y)/(poly.points[a].y-poly.points[b].y);
                                            }
                    
                                        //if its on the line, return 'onEdge' immediately, if it's above 1 do a flip
                                            if( areaLocation == 1 || isNaN(areaLocation) ){
                                                return 'onEdge';
                                            }else if(areaLocation > 1){
                                                if( pointLevelWithPolyPointChecker(poly,point,a,b) ){
                                                    inside = !inside;
                                                }
                                            }
                                    }
                                }else{
                                }
                            }
                    
                            return inside ? 'inside' : 'outside';
                        };
                    
                        this.lineOnLine = function(segment1,segment2){
                    
                            if( !library.math.detectIntersect.boundingBoxes( library.math.boundingBoxFromPoints(segment1), library.math.boundingBoxFromPoints(segment2) ) ){
                                return {x:undefined, y:undefined, intersect:false, contact:false};
                            }
                    
                            //identical segments
                            if(
                                (segment1[0].x == segment2[0].x && segment1[0].y == segment2[0].y) && (segment1[1].x == segment2[1].x && segment1[1].y == segment2[1].y) ||
                                (segment1[0].x == segment2[1].x && segment1[0].y == segment2[1].y) && (segment1[1].x == segment2[0].x && segment1[1].y == segment2[0].y)
                            ){
                                return {x:undefined, y:undefined, intersect:false, contact:true};
                            }
                                
                            //point on point
                            if( (segment1[0].x == segment2[0].x && segment1[0].y == segment2[0].y) || (segment1[0].x == segment2[1].x && segment1[0].y == segment2[1].y) ){
                                return {x:segment1[0].x, y:segment1[0].y, intersect:false, contact:true};
                            }
                            if( (segment1[1].x == segment2[0].x && segment1[1].y == segment2[0].y) || (segment1[1].x == segment2[1].x && segment1[1].y == segment2[1].y) ){
                                return {x:segment1[1].x, y:segment1[1].y, intersect:false, contact:true};
                            }
                    
                            //calculate denominator
                            const denominator = (segment2[1].y-segment2[0].y)*(segment1[1].x-segment1[0].x) - (segment2[1].x-segment2[0].x)*(segment1[1].y-segment1[0].y);
                            if(denominator == 0){
                                const points = [];
                                const output = {x1:undefined, y1:undefined, x2:undefined, y2:undefined, intersect:false, contact:true};
                                if( library.math.detectIntersect.pointOnLine(segment1[0],segment2) ){
                                    output.x1 = segment1[0].x;
                                    output.y1 = segment1[0].y;
                                }
                                if( library.math.detectIntersect.pointOnLine(segment1[1],segment2) ){
                                    if(output.x1 == undefined){
                                        output.x1 = segment1[1].x;
                                        output.y1 = segment1[1].y;
                                    }else{
                                        output.x2 = segment1[1].x;
                                        output.y2 = segment1[1].y;
                                        return output;
                                    }
                                }
                                if( library.math.detectIntersect.pointOnLine(segment2[0],segment1) ){
                                    if(output.x1 == undefined){
                                        output.x1 = segment2[0].x;
                                        output.y1 = segment2[0].y;
                                    }else{
                                        output.x2 = segment2[0].x;
                                        output.y2 = segment2[0].y;
                                        return output;
                                    }
                                }
                                if( library.math.detectIntersect.pointOnLine(segment2[1],segment1) ){
                                    if(output.x1 == undefined){
                                        output.x1 = segment2[1].x;
                                        output.y1 = segment2[1].y;
                                    }else{
                                        output.x2 = segment2[1].x;
                                        output.y2 = segment2[1].y;
                                        return output;
                                    }
                                }
                    
                                return output;
                            }
                                
                            //point on line
                            if( library.math.detectIntersect.pointOnLine(segment1[0],segment2) ){ return {x:segment1[0].x, y:segment1[0].y, intersect:false, contact:true}; }
                            if( library.math.detectIntersect.pointOnLine(segment1[1],segment2) ){ return {x:segment1[1].x, y:segment1[1].y, intersect:false, contact:true}; }
                            if( library.math.detectIntersect.pointOnLine(segment2[0],segment1) ){ return {x:segment2[0].x, y:segment2[0].y, intersect:false, contact:true}; }
                            if( library.math.detectIntersect.pointOnLine(segment2[1],segment1) ){ return {x:segment2[1].x, y:segment2[1].y, intersect:false, contact:true}; }
                    
                            //produce output
                            const u1 = ((segment2[1].x-segment2[0].x)*(segment1[0].y-segment2[0].y) - (segment2[1].y-segment2[0].y)*(segment1[0].x-segment2[0].x))/denominator;
                            const u2 = ((segment1[1].x-segment1[0].x)*(segment1[0].y-segment2[0].y) - (segment1[1].y-segment1[0].y)*(segment1[0].x-segment2[0].x))/denominator;
                            const intersect = (u1 >= 0 && u1 <= 1) && (u2 >= 0 && u2 <= 1);
                            return {
                                x:         (segment1[0].x + u1*(segment1[1].x-segment1[0].x)),
                                y:         (segment1[0].y + u1*(segment1[1].y-segment1[0].y)),
                                intersect: intersect,
                                contact:   intersect,
                            };
                        };
                        this.lineOnPoly = function(line,poly){
                    
                            if(poly.boundingBox == undefined){ poly.boundingBox = library.math.boundingBoxFromPoints(poly.points); }
                            if( !library.math.detectIntersect.boundingBoxes( library.math.boundingBoxFromPoints(line), poly.boundingBox ) ){
                                return { points:[], intersect:false, contact:false };
                            }
                    
                            function oneWhileTheOtherIs(val_1,val_2,a,b){
                                if( val_1 == a && val_2 == b ){return 1;}
                                if( val_2 == a && val_1 == b ){return 2;}
                                return 0;
                            }
                            function huntForIntersection(line,polyPoints){
                                for(let a = polyPoints.length-1, b = 0; b < polyPoints.length; a = b++){
                                    const result = library.math.detectIntersect.lineOnLine(line,[polyPoints[a],polyPoints[b]]);
                                    if(result.contact){
                                        output.contact = true;
                                        if(result.intersect){
                                            output.intersect = true;
                                        }
                    
                                        if( result.x != undefined && (result.x != line[0].x && result.x != line[1].x) ){
                                            output.intersect = true;
                                        }
                    
                                        //if the result is a range of values, add the ends of this range
                                            if( result.x2 != undefined ){
                                                if( output.points.find(item => item.x == result.x1 && item.y == result.y1 ) == undefined ){
                                                    output.points.push({x:result.x1,y:result.y1});
                                                }
                                                if( output.points.find(item => item.x == result.x2 && item.y == result.y2 ) == undefined ){
                                                    output.points.push({x:result.x2,y:result.y2});
                                                }
                                                break;
                                            }
                    
                                        //add point, but don't add duplicate points
                                            if( output.points.find(item => item.x == result.x && item.y == result.y ) == undefined ){
                                                output.points.push({x:result.x,y:result.y});
                                            }
                                    }
                                }
                    
                                //situation where the line passes perfectly through a point on the poly
                                if(output.points.length == 0){
                                    for(let a = 0; a < poly.points.length; a++){
                                        if( poly.points[a].x != line[0].x && poly.points[a].y != line[0].y && poly.points[a].x != line[1].x && poly.points[a].y != line[1].y){
                                            if( library.math.detectIntersect.pointOnLine(poly.points[a],line) ){
                                                output.points.push(poly.points[a]);
                                                output.intersect = true;
                                            }
                                        }
                                    }
                                }
                            }
                    
                            const output = { points:[], contact:false, intersect:false };
                            const point_a = library.math.detectIntersect.pointWithinPoly(line[0],poly);
                            const point_b = library.math.detectIntersect.pointWithinPoly(line[1],poly);
                    
                            let dir = 0;
                            if( oneWhileTheOtherIs(point_a,point_b,'outside','outside') ){
                                huntForIntersection(line,poly.points);
                            }else if( dir = oneWhileTheOtherIs(point_a,point_b,'outside','onPoint') ){
                                huntForIntersection(line,poly.points);
                                // if(dir == 1){
                                //     output.points.push(line[1]);
                                // }else if(dir == 2){
                                //     output.points.push(line[0]);
                                // }
                                output.contact = true;
                            }else if( dir = oneWhileTheOtherIs(point_a,point_b,'outside','onEdge') ){
                                huntForIntersection(line,poly.points);
                                // if(dir == 1){
                                //     output.points.push(line[1]);
                                // }else if(dir == 2){
                                //     output.points.push(line[0]);
                                // }
                                output.contact = true;
                            }else if( oneWhileTheOtherIs(point_a,point_b,'outside','inside') ){
                                huntForIntersection(line,poly.points);
                                output.intersect = true;
                                output.contact = true;
                            }else if( oneWhileTheOtherIs(point_a,point_b,'onPoint','onPoint') ){
                                output.points = [line[0],line[1]];
                                output.contact = true;
                                output.intersect = library.math.detectIntersect.pointWithinPoly({ x:(output.points[0].x + output.points[1].x)/2, y:(output.points[0].y + output.points[1].y)/2 }, poly) == 'inside';
                            }else if( oneWhileTheOtherIs(point_a,point_b,'onPoint','onEdge') ){
                                output.points = [line[0],line[1]];
                                output.contact = true;
                                output.intersect = library.math.detectIntersect.pointWithinPoly({ x:(output.points[0].x + output.points[1].x)/2, y:(output.points[0].y + output.points[1].y)/2 }, poly) == 'inside';
                            }else if( dir = oneWhileTheOtherIs(point_a,point_b,'onPoint','inside') ){
                                if(dir == 1){
                                    output.points.push(line[1]);
                                }else if(dir == 2){
                                    output.points.push(line[0]);
                                }
                                output.contact = true;
                                output.intersect = true;
                            }else if( oneWhileTheOtherIs(point_a,point_b,'onEdge','onEdge') ){
                                output.points = [line[0],line[1]];
                                output.contact = true;
                                output.intersect = library.math.detectIntersect.pointWithinPoly({ x:(output.points[0].x + output.points[1].x)/2, y:(output.points[0].y + output.points[1].y)/2 }, poly) == 'inside';
                            }else if( dir = oneWhileTheOtherIs(point_a,point_b,'onEdge','inside') ){
                                if(dir == 1){
                                    output.points.push(line[1]);
                                }else if(dir == 2){
                                    output.points.push(line[0]);
                                }
                                output.contact = true;
                                output.intersect = true;
                            }else if( oneWhileTheOtherIs(point_a,point_b,'inside','inside') ){
                                output.intersect = true;
                                output.contact = false;
                            }
                            
                            return output;
                        };
                    
                        this.polyOnPoly = function(poly_a,poly_b){
                    
                            if(poly_a.boundingBox == undefined){ 
                                poly_a.boundingBox = library.math.boundingBoxFromPoints(poly_a.points);
                            }
                            if(poly_b.boundingBox == undefined){ 
                                poly_b.boundingBox = library.math.boundingBoxFromPoints(poly_b.points);
                            }
                            if( !library.math.detectIntersect.boundingBoxes( poly_a.boundingBox, poly_b.boundingBox ) ){
                                return { points:[], intersect:false, contact:false };
                            }
                    
                    
                            const results = {
                                points:[],
                                contact:false,
                                intersect:false,
                            };
                    
                            //identical polys
                                const sudo_poly_a_points = Object.assign([],poly_a.points);
                                poly_b.points.forEach(point_b => {
                                    const index = sudo_poly_a_points.indexOf(sudo_poly_a_points.find(point_a => point_a.x==point_b.x && point_a.y==point_b.y) );
                                    if(index != -1){sudo_poly_a_points.splice(index, 1);}
                                });
                                if(sudo_poly_a_points.length == 0){
                                    return {
                                        points:Object.assign([],poly_a.points),
                                        contact:true,
                                        intersect:true,
                                    };
                                }
                    
                            //find all side intersection points
                                for(let a_a = poly_a.points.length-1, a_b = 0; a_b < poly_a.points.length; a_a = a_b++){
                                    const tmp = library.math.detectIntersect.lineOnPoly([poly_a.points[a_a],poly_a.points[a_b]],poly_b);
                    
                                    results.points = results.points.concat(
                                        tmp.points.filter(point => results.points.find(item => item.x == point.x && item.y == point.y ) == undefined )
                                    );
                    
                                    results.contact = results.contact || tmp.contact;
                                    results.intersect = results.intersect || tmp.intersect;
                                }
                        
                            //check if poly_a is totally inside poly_b (if necessary)
                                for(let a = 0; a < poly_b.points.length; a++){
                                    if( results.intersect ){break;}
                                    if( library.math.detectIntersect.pointWithinPoly(poly_b.points[a],poly_a) != 'outside' ){   
                                        results.intersect = true;
                                    }
                                }
                    
                            return results;
                        };
                    };
                    this.pathExtrapolation = function(path,thickness=10,capType='none',joinType='none',loopPath=false,detail=5,sharpLimit=thickness*4){
                        dev.log.math('.pathExtrapolation(',path,thickness,capType,joinType,loopPath,detail,sharpLimit);
                    
                        function loopThisPath(path){
                            dev.log.math('.pathExtrapolation::loopThisPath(',path);
                        
                            const joinPoint = [ (path[0]+path[2])/2, (path[1]+path[3])/2 ];
                            let loopingPath = [];
                        
                            loopingPath = loopingPath.concat(joinPoint);
                            for(let a = 2; a < path.length; a+=2){
                                loopingPath = loopingPath.concat( [path[a], path[a+1]] );
                            }
                            loopingPath = loopingPath.concat( [path[0], path[1]] );
                            loopingPath = loopingPath.concat(joinPoint);
                    
                            return loopingPath;
                        }
                        function calculateJointData(path,thickness){
                            dev.log.math('.pathExtrapolation::calculateJointData(',path,thickness);
                        
                            const jointData = [];
                            //parse path
                                for(let a = 0; a < path.length/2; a++){
                                    jointData.push({ point:{ x:path[a*2], y:path[a*2 +1] } });
                                }
                            //calculation of joint data
                                for(let a = 0; a < jointData.length; a++){
                                    //calculate segment angles    
                                        if( a != jointData.length-1 ){
                                            const tmp = library.math.getAngleOfTwoPoints( jointData[a].point, jointData[a+1].point );
                                            if(jointData[a] != undefined){jointData[a].departAngle = tmp;}
                                            if(jointData[a+1] != undefined){jointData[a+1].implementAngle = tmp;}
                                        }
                                    //wing angle and width
                                        if( jointData[a].departAngle != undefined && jointData[a].implementAngle != undefined ){
                                            jointData[a].joiningAngle = jointData[a].departAngle - jointData[a].implementAngle + Math.PI;
                                            while(jointData[a].joiningAngle < 0){jointData[a].joiningAngle += Math.PI*2;}
                                            while(jointData[a].joiningAngle >= Math.PI*2){jointData[a].joiningAngle -= Math.PI*2;} 
                                            jointData[a].wingAngle = jointData[a].implementAngle + jointData[a].joiningAngle/2 - Math.PI;
                                            while(jointData[a].wingAngle < 0){jointData[a].wingAngle += Math.PI*2;}
                                            while(jointData[a].wingAngle > Math.PI*2){jointData[a].wingAngle -= Math.PI*2;} 
                                            jointData[a].wingWidth = thickness / Math.sin(jointData[a].joiningAngle/2);
                                        }
                                }
                    
                            return jointData;
                        }
                        function path_to_rectangleSeries(path,thickness){
                            dev.log.math('.pathExtrapolation::path_to_rectangleSeries(',path,thickness);
                        
                            let outputPoints = [];
                            for(let a = 1; a < path.length/2; a++){
                                const angle = library.math.getAngleOfTwoPoints( {x:path[a*2-2], y:path[a*2 -1]}, {x:path[a*2], y:path[a*2 +1]});
                                const left =  library.math.cartesianAngleAdjust(thickness, 0, Math.PI/2 + angle);
                                const right = { x:-left.x, y:-left.y };
                        
                                outputPoints.push([
                                    {x:path[a*2-2]+left.x,  y:path[a*2-1]+left.y},
                                    {x:path[a*2-2]+right.x, y:path[a*2-1]+right.y},
                                    {x:path[a*2]+right.x,   y:path[a*2+1]+right.y},
                                    {x:path[a*2]+left.x,    y:path[a*2+1]+left.y},
                                ]);
                            }
                        
                            return outputPoints;
                        }
                    
                        function flatJoints(jointData,thickness){
                        
                            const polygons = [];
                    
                            let perpenL = library.math.cartesianAngleAdjust(thickness, 0, jointData[0].departAngle - Math.PI/2);
                            let perpenR = {x:-perpenL.x, y:-perpenL.y};
                            for(let a = 1; a < jointData.length-1; a++){
                                const last_perpenL = perpenL;
                                const last_perpenR = perpenR;
                                perpenL = library.math.cartesianAngleAdjust(thickness, 0, jointData[a].departAngle - Math.PI/2);
                                perpenR = {x:-perpenL.x, y:-perpenL.y};
                    
                                if(jointData[a].joiningAngle == Math.PI){
                                    //do nothing
                                }else if(jointData[a].joiningAngle < Math.PI){
                                    polygons.push([
                                        {x:jointData[a].point.x, y:jointData[a].point.y},
                                        {x:jointData[a].point.x + last_perpenR.x, y:jointData[a].point.y + last_perpenR.y},
                                        {x:jointData[a].point.x + perpenR.x, y:jointData[a].point.y + perpenR.y},
                                    ]);
                                }else if(jointData[a].joiningAngle > Math.PI){
                                    polygons.push([
                                        {x:jointData[a].point.x, y:jointData[a].point.y},
                                        {x:jointData[a].point.x + last_perpenL.x, y:jointData[a].point.y + last_perpenL.y},
                                        {x:jointData[a].point.x + perpenL.x, y:jointData[a].point.y + perpenL.y},
                                    ]);
                                }
                            }
                    
                            return polygons;
                        }
                        function roundJoints(jointData,thickness,detail=5){
                        
                            const polygons = [];
                            if(detail < 1){detail = 1;}
                    
                            let perpenL = library.math.cartesianAngleAdjust(thickness, 0, jointData[0].departAngle - Math.PI/2);
                            let perpenR = {x:-perpenL.x, y:-perpenL.y};
                            for(let a = 1; a < jointData.length-1; a++){
                                const newPolygon = [];
                                const last_perpenL = perpenL;
                                const last_perpenR = perpenR;
                                perpenL = library.math.cartesianAngleAdjust(thickness, 0, jointData[a].departAngle - Math.PI/2);
                                perpenR = {x:-perpenL.x, y:-perpenL.y};
                    
                                if(jointData[a].joiningAngle == Math.PI){
                                    //do nothing
                                }else if(jointData[a].joiningAngle < Math.PI){
                                    newPolygon.push( {x:jointData[a].point.x, y:jointData[a].point.y} );
                                    newPolygon.push( {x:jointData[a].point.x + last_perpenR.x, y:jointData[a].point.y + last_perpenR.y} );
                    
                                    const gapSize = Math.PI - jointData[a].joiningAngle;
                                    const partialDetail = Math.floor((2+detail)*(Math.abs(gapSize)/Math.PI));
                                    for(let b = 1; b < partialDetail; b++){
                                        const angle = b*(gapSize/partialDetail);
                                        const p = library.math.cartesianAngleAdjust(last_perpenR.x, last_perpenR.y, -angle);
                                        newPolygon.push( {x:jointData[a].point.x + p.x, y:jointData[a].point.y + p.y} );
                                    }
                    
                                    newPolygon.push( {x:jointData[a].point.x + perpenR.x, y:jointData[a].point.y + perpenR.y} );
                                }else if(jointData[a].joiningAngle > Math.PI){
                                    newPolygon.push( {x:jointData[a].point.x, y:jointData[a].point.y} );
                                    newPolygon.push( {x:jointData[a].point.x + last_perpenL.x, y:jointData[a].point.y + last_perpenL.y} );
                    
                                    const gapSize = Math.PI - jointData[a].joiningAngle;
                                    const partialDetail = Math.floor((2+detail)*(Math.abs(gapSize)/Math.PI));
                                    for(let b = 1; b < partialDetail; b++){
                                        const angle = b*(gapSize/partialDetail);
                                        const p = library.math.cartesianAngleAdjust(last_perpenL.x, last_perpenL.y, -angle);
                                        newPolygon.push( {x:jointData[a].point.x + p.x, y:jointData[a].point.y + p.y} );
                                    }
                    
                                    newPolygon.push( {x:jointData[a].point.x + perpenL.x, y:jointData[a].point.y + perpenL.y} );
                                }
                    
                                polygons.push(newPolygon);
                            }
                    
                            return polygons;
                        }
                        function sharpJoints(jointData,thickness,sharpLimit=thickness*4){
                        
                            const polygons = [];
                    
                            let perpenL = library.math.cartesianAngleAdjust(thickness, 0, jointData[0].departAngle - Math.PI/2);
                            let perpenR = {x:-perpenL.x, y:-perpenL.y};
                            for(let a = 1; a < jointData.length-1; a++){
                                const newPolygon = [];
                                const last_perpenL = perpenL;
                                const last_perpenR = perpenR;
                                perpenL = library.math.cartesianAngleAdjust(thickness, 0, jointData[a].departAngle - Math.PI/2);
                                perpenR = {x:-perpenL.x, y:-perpenL.y};
                    
                                if(jointData[a].joiningAngle == Math.PI){
                                    //do nothing
                                }else if(jointData[a].joiningAngle < Math.PI){
                                    if( Math.abs(jointData[a].wingWidth) <= sharpLimit ){
                                        const plus = library.math.cartesianAngleAdjust(0, jointData[a].wingWidth, Math.PI/2 + jointData[a].wingAngle);
                                        newPolygon.push( {x:plus.x + jointData[a].point.x, y:plus.y + jointData[a].point.y} );
                                        newPolygon.push( {x:jointData[a].point.x + last_perpenR.x, y:jointData[a].point.y + last_perpenR.y} );
                                        newPolygon.push( {x:jointData[a].point.x, y:jointData[a].point.y} );
                                        newPolygon.push( {x:jointData[a].point.x + perpenR.x, y:jointData[a].point.y + perpenR.y} );
                                    }else{
                                        const length = Math.cos(jointData[a].joiningAngle/2)*sharpLimit;
                                        const partialWingA = library.math.cartesianAngleAdjust(0, -length, Math.PI/2 + jointData[a].implementAngle);
                                        const partialWingB = library.math.cartesianAngleAdjust(0, length, Math.PI/2 + jointData[a].departAngle);
                    
                                        newPolygon.push( {x:jointData[a].point.x, y:jointData[a].point.y} );
                                        newPolygon.push( {x:jointData[a].point.x + last_perpenR.x, y:jointData[a].point.y + last_perpenR.y} );
                                        newPolygon.push( {x:jointData[a].point.x + last_perpenR.x + partialWingA.x, y:jointData[a].point.y + last_perpenR.y + partialWingA.y} );
                                        newPolygon.push( {x:jointData[a].point.x + perpenR.x + partialWingB.x, y:jointData[a].point.y + perpenR.y + partialWingB.y} );
                                        newPolygon.push( {x:jointData[a].point.x + perpenR.x, y:jointData[a].point.y + perpenR.y} );
                                    }
                                }else if(jointData[a].joiningAngle > Math.PI){
                                    if( Math.abs(jointData[a].wingWidth) <= sharpLimit ){
                                        const plus = library.math.cartesianAngleAdjust(0, -jointData[a].wingWidth, Math.PI/2 + jointData[a].wingAngle);
                                        newPolygon.push( {x:plus.x + jointData[a].point.x, y:plus.y + jointData[a].point.y} );
                                        newPolygon.push( {x:jointData[a].point.x + last_perpenL.x, y:jointData[a].point.y + last_perpenL.y} );
                                        newPolygon.push( {x:jointData[a].point.x, y:jointData[a].point.y} );
                                        newPolygon.push( {x:jointData[a].point.x + perpenL.x, y:jointData[a].point.y + perpenL.y} );
                                    }else{
                                        const length = Math.cos(jointData[a].joiningAngle/2)*sharpLimit;
                                        const partialWingA = library.math.cartesianAngleAdjust(0, length, Math.PI/2 + jointData[a].implementAngle);
                                        const partialWingB = library.math.cartesianAngleAdjust(0, -length, Math.PI/2 + jointData[a].departAngle);
                    
                                        newPolygon.push( {x:jointData[a].point.x, y:jointData[a].point.y} );
                                        newPolygon.push( {x:jointData[a].point.x + last_perpenL.x, y:jointData[a].point.y + last_perpenL.y} );
                                        newPolygon.push( {x:jointData[a].point.x + last_perpenL.x + partialWingA.x, y:jointData[a].point.y + last_perpenL.y + partialWingA.y} );
                                        newPolygon.push( {x:jointData[a].point.x + perpenL.x + partialWingB.x, y:jointData[a].point.y + perpenL.y + partialWingB.y} );
                                        newPolygon.push( {x:jointData[a].point.x + perpenL.x, y:jointData[a].point.y + perpenL.y} );
                                    }
                                }
                    
                                polygons.push(newPolygon);
                            }
                    
                            return polygons;
                        }
                    
                        function roundCaps(jointData,thickness,detail=5){
                        
                            if(detail < 1){detail = 1;}
                    
                            const polygons = [];
                    
                            //top
                                const newPolygon_top = [];
                                newPolygon_top.push( { x:jointData[0].point.x, y:jointData[0].point.y } );
                                for(let a = 0; a < detail+1; a++){
                                    const p = library.math.cartesianAngleAdjust(thickness, 0, jointData[0].departAngle + Math.PI/2 + (a/(detail))*(Math.PI) );
                                    newPolygon_top.push( {x:jointData[0].point.x + p.x, y:jointData[0].point.y + p.y} );
                                }
                                polygons.push(newPolygon_top);
                            //bottom
                                const newPolygon_bottom = [];
                                newPolygon_bottom.push( { x:jointData[jointData.length-1].point.x, y:jointData[jointData.length-1].point.y } );
                                for(let a = 0; a < detail+1; a++){
                                    const p = library.math.cartesianAngleAdjust(thickness, 0, jointData[jointData.length-1].implementAngle - Math.PI/2 + (a/(detail))*(Math.PI) );
                                    newPolygon_bottom.push( {x:jointData[jointData.length-1].point.x + p.x, y:jointData[jointData.length-1].point.y + p.y} );
                                }
                                polygons.push(newPolygon_bottom);
                    
                            return polygons;
                        }
                    
                    
                        if(loopPath){path = loopThisPath(path);}
                        const jointData = calculateJointData(path,thickness);
                        if(jointData.length == 0){return [];}
                    
                        //generate polygons
                            let polygons = path_to_rectangleSeries(path,thickness);
                            //joints
                            if(joinType == 'flat'){ polygons = polygons.concat(flatJoints(jointData,thickness)); }
                            if(joinType == 'round'){ polygons = polygons.concat(roundJoints(jointData,thickness,detail)); }
                            if(joinType == 'sharp'){ polygons = polygons.concat(sharpJoints(jointData,thickness,sharpLimit)); }
                            //caps
                            if(capType == 'round'){ polygons = polygons.concat(roundCaps(jointData,thickness,detail)); }
                    
                        //union all polygons, convert to triangles and return
                            return library.math.polygonToSubTriangles( polygons.map(a=>[a]).reduce((conglomerate,polygon) => library.math.unionPolygons(conglomerate, polygon) ) );
                    };

                    this.fitPolyIn = function(freshPoly,environmentPolys,snapping={active:false,x:10,y:10,angle:Math.PI/8},returnPathData=false){
                        dev.log.math('.fitPolyIn(',freshPoly,environmentPolys,snapping);
                    
                        function applyOffsetToPoints(offset,points){
                        
                            return points.map(a => { return{x:a.x+offset.x,y:a.y+offset.y} } );
                        };
                        function applyOffsetToPolygon(offset,poly){
                        
                            const newPolygon = { points: applyOffsetToPoints(offset,poly.points), boundingBox:{} };
                            newPolygon.boundingBox = library.math.boundingBoxFromPoints(newPolygon.points);
                            return newPolygon;
                        };
                        function polyOnPolys(polygon,environmentPolys){
                            for(let a = 0; a < environmentPolys.length; a++){
                                if(library.math.detectIntersect.polyOnPoly(polygon,environmentPolys[a]).intersect){
                                    return true;
                                }
                            }
                            return false;
                        }
                    
                        
                    
                        let offset = {x:0,y:0};
                        const paths = [[],[],[]];
                    
                        //get the middle ("average") point of freshPoly
                            const middlePoint = library.math.averagePoint(freshPoly.points);
                    
                        //circle out to find initial offsets
                            let successfulOffsets = [];
                            let stepCount = 1;
                            {
                                const maxIterationCount = 100;
                    
                                for(stepCount = 1; stepCount < maxIterationCount+1; stepCount++){
                                    successfulOffsets = [];
                                    const stepsInThisCircle = 2*stepCount + 1;
                                    const circularStepSizeInRad = (2*Math.PI) / stepsInThisCircle;
                                    const radius = Math.pow(stepCount,2);
                                    
                                    //head round the circle, testing each point as an offset
                                        for(let a = 0; a < stepsInThisCircle; a++){
                                            //calculate the current offset
                                                const tmpOffset = library.math.polar2cartesian( circularStepSizeInRad*a, radius );
                                                tmpOffset.x = snapping.active ? Math.round(tmpOffset.x/snapping.x)*snapping.x : tmpOffset.x;
                                                tmpOffset.y = snapping.active ? Math.round(tmpOffset.y/snapping.y)*snapping.y : tmpOffset.y;
                    
                                                if(dev){paths[0].push( {x:tmpOffset.x+middlePoint.x, y:tmpOffset.y+middlePoint.y} );}
                                            
                                            //if offsetting the shape in this way results in no collision; save this offset in 'successfulOffsets'
                                                if(!polyOnPolys(applyOffsetToPolygon(tmpOffset,freshPoly),environmentPolys)){
                                                    successfulOffsets.push( {ang:circularStepSizeInRad*a, dis:radius} );
                                                }
                                        }
                    
                                    //if on this circle we've found at least one possible location; break out of this section and move on to the next
                                        if( successfulOffsets.length != 0 ){break;}
                                }
                            }
                    
                    
                        //use midpointing from these points to find the single closest circular offset
                            let successfulOffset;
                            {
                                const maxIterationCount = 10;
                                if(successfulOffsets.length == 1){
                                    successfulOffset = successfulOffsets[0];
                                }else{
                                    //there was more than one possible offset for this radius, so we need to edge each of them closer
                                    //to the original point, to whittle them down to the one angle that can provide the smallest radius
                    
                                    let maxRadius = Math.pow(stepCount,2);
                                    let minRadius = Math.pow(stepCount-1,2);
                    
                                    const provenFunctionalOffsets = [];
                                    for(let i = 0; i < maxIterationCount; i++){
                                        const tmp_successfulOffsets = [];
                                        const midRadius = (maxRadius - minRadius)/2 + minRadius;
                    
                                        //check this new midpoint radius with the successfulOffset values 
                                            for(let a = 0; a < successfulOffsets.length; a++){
                                                //calculate the current offset using the midpoint value
                                                    const tmpOffset = library.math.polar2cartesian( successfulOffsets[a].ang, midRadius );
                                                    tmpOffset.x = snapping.active ? Math.round(tmpOffset.x/snapping.x)*snapping.x : tmpOffset.x;
                                                    tmpOffset.y = snapping.active ? Math.round(tmpOffset.y/snapping.y)*snapping.y : tmpOffset.y;
                                                    if(dev){paths[1].push( {x:tmpOffset.x+middlePoint.x, y:tmpOffset.y+middlePoint.y} );}
                                                            
                                                //if offsetting the shape in this way results in no collision; save this offset in 'tmp_successfulOffsets'
                                                    if(!polyOnPolys(applyOffsetToPolygon(tmpOffset,freshPoly),environmentPolys)){
                                                        tmp_successfulOffsets.push( {ang:successfulOffsets[a].ang, dis:midRadius} );
                                                        provenFunctionalOffsets.push( {ang:successfulOffsets[a].ang, dis:midRadius} );
                                                    }
                                            }
                    
                                        //check if there's only one offset left
                                            if( tmp_successfulOffsets.length == 1 ){ successfulOffset = tmp_successfulOffsets[0]; break; }
                    
                                        //decide whether to check further out or closer in
                                            if( tmp_successfulOffsets.length == 0 ){
                                                minRadius = midRadius; //somewhere further out
                                            }else{
                                                maxRadius = midRadius; //somewhere further in
                                            }
                                    }
                    
                                    //if everything goes wrong with the midpoint method; and we end up with no offsets, use whatever the last proven functional offset was
                                        if(successfulOffset == undefined){ successfulOffset = provenFunctionalOffsets.pop(); }
                                }
                            }
                    
                        //adjust along x and y to find the closest offset
                            {
                                const maxIterationCount = 10;
                    
                                offset = library.math.polar2cartesian( successfulOffset.ang, successfulOffset.dis );
                                if(dev){paths[2].push( {x:offset.x+middlePoint.x, y:offset.y+middlePoint.y} );}
                                const max = {x:offset.x, y:offset.y};
                                const min = {x:0, y:0};
                                
                                //use midpoint methods to edge the shape (over x and y) to as close as it can be to the original point
                                    for(let i = 0; i < maxIterationCount; i++){
                                        const midpoint = { x:(max.x-min.x)/2 + min.x, y:(max.y-min.y)/2 + min.y };
                                        midpoint.x = snapping.active ? Math.round(midpoint.x/snapping.x)*snapping.x : midpoint.x;
                                        midpoint.y = snapping.active ? Math.round(midpoint.y/snapping.y)*snapping.y : midpoint.y;
                    
                                        //can you make a x movement? you can? then do it
                                            if(dev){paths[2].push( {x:midpoint.x+middlePoint.x, y:max.y+middlePoint.y} );}
                                            if(!polyOnPolys(applyOffsetToPolygon({x:midpoint.x, y:max.y},freshPoly),environmentPolys)){
                                                max.x = midpoint.x; //too far
                                            }else{ 
                                                min.x = midpoint.x; //too close
                                            }
                    
                                        //can you make a y movement? you can? then do it
                                            if(dev){paths[2].push( {x:max.x+middlePoint.x, y:midpoint.y+middlePoint.y} );}
                                            if(!polyOnPolys(applyOffsetToPolygon({x:max.x, y:midpoint.y},freshPoly),environmentPolys)){
                                                max.y = midpoint.y; //too far
                                            }else{
                                                min.y = midpoint.y; //too close
                                            }
                                    }
                    
                                offset = {x:max.x, y:max.y};
                            }
                    
                        return returnPathData ? {offset:offset,paths:paths} : offset;
                    };
                    this.polygonsToVisibilityGraph = function(polys){
                        const graph = polys.flatMap((poly,polyIndex) => {
                            return poly.points.map((point,pointIndex) => ({
                                polyIndex:polyIndex,
                                pointIndex:pointIndex,
                                destination:[ /*{index:n, polyIndex:n, pointIndex:n, distance:n} */ ],
                            }))
                        });
                    
                        const scannedRoutes = {};
                    
                        graph.forEach((graphPoint_source,index_source) => {
                            graph.forEach((graphPoint_destination,index_destination) => {
                                if(index_source == index_destination){return;}
                                // if( index_source != 4 ){return;} if( index_destination != 2 ){return;}
                    
                                const route_source = graphPoint_source.polyIndex+'_'+graphPoint_source.pointIndex;
                                const route_destination = graphPoint_destination.polyIndex+'_'+graphPoint_destination.pointIndex;
                    
                                //check to see if we've scanned this route before
                                if( scannedRoutes[route_destination] != undefined && scannedRoutes[route_destination][route_source] != undefined ){ return; }
                    
                                //convert for convenience
                                const point_source = polys[graphPoint_source.polyIndex].points[graphPoint_source.pointIndex];
                                const point_destination = polys[graphPoint_destination.polyIndex].points[graphPoint_destination.pointIndex];
                    
                                //scan route
                                let addRoute = true;
                                for(let a = 0; a < polys.length; a++){
                                    const result = library.math.detectIntersect.lineOnPoly( [point_source,point_destination], polys[a] );
                                    if( result.intersect ){
                                        addRoute = false;
                                        break;
                                    }
                                }
                    
                                //if route is valid, add to graph
                                if(addRoute){
                                    const distance = library.math.distanceBetweenTwoPoints(point_source,point_destination);
                    
                                    //forward route
                                    if(scannedRoutes[route_source] == undefined){ scannedRoutes[route_source] = {}; }
                                    scannedRoutes[route_source][route_destination] = {
                                        index: index_destination,
                                        polyIndex: graphPoint_destination.polyIndex, 
                                        pointIndex: graphPoint_destination.pointIndex,
                                        distance: distance,
                                    };
                                    graphPoint_source.destination.push( scannedRoutes[route_source][route_destination] );
                    
                                    //backward route
                                    if(scannedRoutes[route_destination] == undefined){ scannedRoutes[route_destination] = {}; }
                                    scannedRoutes[route_destination][route_source] = {
                                        index: index_source,
                                        polyIndex: graphPoint_source.polyIndex, 
                                        pointIndex: graphPoint_source.pointIndex,
                                        distance: distance,
                                    };
                                    graphPoint_destination.destination.push( scannedRoutes[route_destination][route_source] );
                                }
                            });
                        });
                    
                        return graph;
                    };
                    this.shortestRouteFromVisibilityGraph = function(visibilityGraph,start,end){
                    
                        //if the starting location or ending location are totally inaccessible, bail on this whole thing
                        //though return the point (if any) that was ok
                            if( visibilityGraph[start].destination.length == 0 && visibilityGraph[end].destination.length == 0 ){
                                return [];
                            }
                            if( visibilityGraph[start].destination.length == 0 ){
                                return [end];
                            }
                            if( visibilityGraph[end].destination.length == 0 ){ 
                                return [start];
                            }
                    
                        //set the 'current' location as the start
                            let current = start;
                    
                        //if in a cruel twist of fate, the ending location is the starting location;
                        //create a new starting location with all the same data, and set that as
                        //the 'current' location
                            if(start == end){
                                visibilityGraph['_'+start] = JSON.parse(JSON.stringify(visibilityGraph[start]));
                                current = '_'+start;
                            }
                    
                        //generate the location set
                        //(don't forget to set the current location's distance to zero)
                            const locationSet = Object.keys(visibilityGraph).map( () => ({ distance:Infinity, visited:false, route:'' }) );
                            locationSet[current].distance = 0;
                    
                        //loop through locations, until the end location has been visited
                            let limit = 100;
                            do{
                                if(limit <= 0){console.error('.shortestRouteFromVisibilityGraph has encountered an overflow'); break;}
                                limit--;
                    
                    
                                //update unvisited distance values
                                    for(let a = 0; a < visibilityGraph[current].destination.length; a++){
                                        if( locationSet[visibilityGraph[current].destination[a].index].visited ){
                                            continue;
                                        }
                    
                                        //only update the value if this new value is smaller than the one it already has
                                        const newValue = locationSet[current].distance + visibilityGraph[current].destination[a].distance;
                                        if( newValue < locationSet[visibilityGraph[current].destination[a].index].distance ){
                                            locationSet[visibilityGraph[current].destination[a].index].route = current;
                                            locationSet[visibilityGraph[current].destination[a].index].distance = newValue;
                                        }
                                    }
                    
                                //mark current location as visited
                                    locationSet[current].visited = true;
                    
                                //find location with smallest distance value - that is unvisited - and set it as the current
                                    let smallest = Infinity;
                                    Object.keys(locationSet).forEach(location => {
                                        if(!locationSet[location].visited && locationSet[location].distance < smallest ){
                                            smallest = locationSet[location].distance;
                                            current = location;
                                        }
                                    });
                            }while( !locationSet[end].visited )
                        
                        //go back through the location set to discover the shortest route
                            let route = [];
                            current = end;
                            while(current != start){
                                route.unshift(parseInt(current));
                                current = locationSet[current].route;
                            }
                            route.unshift(parseInt(current));
                    
                        return route;
                    };

                };
                this.glsl = new function(){
                    this.geometry = `
                        #define PI 3.141592653589793
                    
                        vec2 cartesian2polar(vec2 xy){
                            float dis = pow(pow(xy.x,2.0)+pow(xy.y,2.0),0.5);
                            float ang = 0.0;
                    
                            if(xy.x == 0.0){
                                if(xy.y == 0.0){ang = 0.0;}
                                else if(xy.y > 0.0){ang = 0.5*PI;}
                                else{ang = 1.5*PI;}
                            }
                            else if(xy.y == 0.0){
                                if(xy.x >= 0.0){ang = 0.0;}else{ang = PI;}
                            }
                            else if(xy.x >= 0.0){ ang = atan(xy.y/xy.x); }
                            else{ /*if(xy.x < 0.0)*/ ang = atan(xy.y/xy.x) + PI; }
                    
                            return vec2(ang,dis);
                        }
                        vec2 polar2cartesian(vec2 ad){
                            return vec2( ad[1]*cos(ad[0]), ad[1]*sin(ad[0]) );
                        }
                        vec2 cartesianAngleAdjust(vec2 xy, float angle){
                            // //v1
                            // if(angle == 0.0 || mod(angle,PI*2.0) == 0.0){ return xy; }
                            //
                            // vec2 polar = cartesian2polar( xy );
                            // polar[0] += angle;
                            // return polar2cartesian( polar );
                    
                            //v2
                            if(angle == 0.0 || mod(angle,PI*2.0) == 0.0){ return xy; }
                            return vec2( xy.x*cos(angle) - xy.y*sin(angle), xy.y*cos(angle) + xy.x*sin(angle) ); 
                        }
                    `;
                };
                this.structure = new function(){
                    this.functionListRunner = function(list,activeKeys){
                    
                        //function builder for working with the 'functionList' format
                    
                        return function(event,data){
                            //run through function list, and activate functions where necessary
                                for(let a = 0; a < list.length; a++){
                                    let shouldRun = true;
                    
                                    //determine if the requirements of this function are met
                                        for(let b = 0; b < list[a].requiredKeys.length; b++){
                                            shouldRun = true;
                                            for(let c = 0; c < list[a].requiredKeys[b].length; c++){
                                                shouldRun = shouldRun && activeKeys[ list[a].requiredKeys[b][c] ];
                                                if(!shouldRun){break;} //(one is already not a match, so save time and just skip to the next one)
                                            }
                                            if(shouldRun){ break; } //one of the collections worked, so save time and skip the rest
                                        }
                    
                                    //if requirements were met, run the function
                    	            if(shouldRun){  
                                        //if the function returns 'false', continue with the list; otherwise stop here
                            	            if( list[a].function(event,data) ){ break; }
                                    }
                                }
                        }
                    };
                    
                    this.signalRegistry = function(rightLimit=-1,bottomLimit=-1,signalLengthLimit=-1){
                    
                        let signals = [];
                        let selectedSignals = [];
                        let events = [];
                        let events_byID = [];
                        let events_byPosition = {};
                        let positions = [];
                    
                        this.__dump = function(){
                        
                            console.log('---- signalRegistry dump ----');
                    
                            console.log('\tsignals');
                            for(let a = 0; a < signals.length; a++){ 
                                console.log( '\t\t', a, ' ' + JSON.stringify(signals[a]) );
                            }
                    
                            console.log('\tselectedSignals');
                            for(let a = 0; a < tselectedSignals.length; a++){ 
                                console.log( '\t\t', a, ' ' + JSON.stringify(tselectedSignals[a]) );
                            }
                    
                            console.log('\tevents');
                            for(let a = 0; a < events.length; a++){ 
                                console.log( '\t\t', a, ' ' + JSON.stringify(events[a]) );
                            }
                    
                            console.log('\tevents_byID');
                            for(let a = 0; a < events_byID.length; a++){ 
                                console.log( '\t\t', a, ' ' + JSON.stringify(events_byID[a]) );
                            }
                    
                            console.log('\tevents_byPosition');
                            const keys = Object.keys(events_byPosition);
                            for(let a = 0; a < keys.length; a++){ 
                                console.log( '\t\t', keys[a], ' ' + JSON.stringify(events_byPosition[keys[a]]) );
                            }
                    
                            console.log('\tpositions');
                            for(let a = 0; a < positions.length; a++){ 
                                console.log( '\t\t', a, ' ' + JSON.stringify(positions[a]) );
                            }
                        };
                    
                        this.export = function(){
                        
                            return JSON.parse(JSON.stringify(
                                {
                                    signals:            signals,
                                    selectedSignals:    selectedSignals,
                                    events:             events,
                                    events_byID:        events_byID,
                                    events_byPosition:  events_byPosition,
                                    positions:          positions,
                                }
                            ));
                        };
                        this.import = function(data){
                        
                            signals =           JSON.parse(JSON.stringify(data.signals));
                            selectedSignals =   JSON.parse(JSON.stringify(data.selectedSignals));
                            events =            JSON.parse(JSON.stringify(data.events));
                            events_byID =       JSON.parse(JSON.stringify(data.events_byID));
                            events_byPosition = JSON.parse(JSON.stringify(data.events_byPosition));
                            positions =         JSON.parse(JSON.stringify(data.positions));
                        };
                    
                        this.getAllSignals = function(){ 
                        
                            return JSON.parse(JSON.stringify(signals));
                        };
                        this.getAllEvents = function(){ 
                        
                            return JSON.parse(JSON.stringify(events));
                        };
                        this.getSignal = function(id){
                        
                            if( signals[id] == undefined ){return;}
                            return JSON.parse(JSON.stringify(signals[id]));
                        };
                        this.eventsBetween = function(start,end){
                        
                            //depending on whether theres an end position or not; get all the events positions that 
                            //lie on the start positions, or get all the events that how positions which lie between
                            //the start and end positions
                            const eventNumbers = end == undefined ? 
                                Array.from(new Set(positions.filter(function(a){return a == start;}))) : 
                                Array.from(new Set(positions.filter(function(a){return a >= start && a < end;}))) ;
                    
                            //for each position, convert the number to a string, and gather the associated event number arrays
                            //then, for each array, get each event and place that into the output array
                            const compiledEvents = [];
                            for(let a = 0; a < eventNumbers.length; a++){
                                eventNumbers[a] = events_byPosition[String(eventNumbers[a])];
                                for(let b = 0; b < eventNumbers[a].length; b++){
                                    compiledEvents.push(events[eventNumbers[a][b]]);
                                }
                            }
                    
                            //sort array by position (soonest first)
                            return compiledEvents.sort(function(a, b){
                                if(a.position < b.position) return -1;
                                if(a.position > b.position) return 1;
                                return 0;
                            });
                        };
                        this.add = function(data,forceID){
                        
                            //clean up data
                                if(data == undefined || !('line' in data) || !('position' in data) || !('length' in data)){return;}
                                if(!('strength' in data)){data.strength = 1;}
                            //check for and correct disallowed data
                                if(data.line < 0){data.line = 0;}
                                if(data.length < 0){data.length = 0;}
                                if(data.position < 0){data.position = 0;}
                                if(data.strength < 0){data.strength = 0;}
                    
                                if(bottomLimit > -1 && (data.line > bottomLimit-1)){data.line = bottomLimit-1;}
                                if(signalLengthLimit > -1 && (data.length > signalLengthLimit)){data.length = signalLengthLimit;}
                                if(rightLimit > -1 && (data.position > rightLimit) ){data.position = rightLimit-data.length;}
                                if(rightLimit > -1 && (data.position+data.length > rightLimit)){ data.length = rightLimit-data.position; }
                                if(rightLimit > -1 && (data.position+data.length > rightLimit)){data.position = rightLimit-data.length;}
                                if(data.strength > 1){data.strength = 1;}
                    
                            //generate signal ID
                                let newID = 0;
                                if(forceID == undefined){
                                    while(signals[newID] != undefined){newID++;}
                                }else{newID = forceID;}
                    
                            //add signal to storage
                                signals[newID] = JSON.parse(JSON.stringify(data));
                    
                            //generate event data
                                const newEvents = [
                                    {signalID:newID, line:data.line, position:data.position,               strength:data.strength},
                                    {signalID:newID, line:data.line, position:(data.position+data.length), strength:0}
                                ];
                    
                            //add event data to storage
                                let eventLocation = 0;
                                //start event
                                    while(events[eventLocation] != undefined){eventLocation++;}
                                    events[eventLocation] = newEvents[0];
                                    events_byID[newID] = [eventLocation];
                                    if( events_byPosition[newEvents[0].position] == undefined ){
                                        events_byPosition[newEvents[0].position] = [eventLocation];
                                    }else{
                                        events_byPosition[newEvents[0].position].push(eventLocation);
                                    }
                                    positions.push(newEvents[0].position);
                                //end event
                                    while(events[eventLocation] != undefined){eventLocation++;}
                                    events[eventLocation] = newEvents[1];
                                    events_byID[newID] = events_byID[newID].concat(eventLocation);
                                    if( events_byPosition[newEvents[1].position] == undefined ){
                                        events_byPosition[newEvents[1].position] = [eventLocation];
                                    }else{
                                        events_byPosition[newEvents[1].position].push(eventLocation);
                                    }
                                    positions.push(newEvents[1].position);
                    
                            return newID;
                        };
                        this.remove = function(id){
                        
                            if( signals[id] == undefined ){return;}
                    
                            delete signals[id];
                    
                            for(let a = 0; a < events_byID[id].length; a++){
                                const tmp = events_byID[id][a];
                                events_byPosition[events[tmp].position].splice( events_byPosition[events[tmp].position].indexOf(tmp) ,1);
                                positions.splice(positions.indexOf(events[tmp].position),1);
                                if( events_byPosition[events[tmp].position].length == 0 ){delete events_byPosition[events[tmp].position];}
                                delete events[tmp];
                            }
                    
                            delete events_byID[id];
                        };
                        this.update = function(id,data){
                        
                            //clean input
                                if(data == undefined){return;}
                                if(!('line' in data)){data.line = signals[id].line;}
                    
                                //Special cases where either by movement or lengthening, the signal stretches further than the rightLimit
                                //will allow. In these cases the signal either has to be clipped, or prevented from moving further to the
                                //right. In the case where a signal is being lengthened and moved to the right; the system should opt to
                                //clip it's length
                                //Obviously, if there's no right limit don't bother
                                if(rightLimit > -1){
                                    if('position' in data && 'length' in data){//clip length
                                        if(data.length+data.position > rightLimit){ data.length = rightLimit-data.position; }
                                    }else{
                                        if('position' in data){//prevent movement
                                            if(signals[id].length+data.position >= rightLimit){ data.position = rightLimit - signals[id].length; }
                                        }else{ data.position = signals[id].position; }
                                        if('length' in data){//clip length
                                            if(data.length+data.position > rightLimit){ data.length = rightLimit-data.position; }
                                        }else{ data.length = signals[id].length; }
                                    }
                                }
                    
                                if(!('strength' in data)){data.strength = signals[id].strength;}
                            
                            this.remove(id);
                            this.add(data,id);
                        };
                        this.reset = function(){
                        
                            signals = [];
                            selectedSignals = [];
                            events = [];
                            events_byID = [];
                            events_byPosition = {};
                            positions = [];
                        };
                    };
                };
                this.font = new function(){
                    this.listAllAvailableGlyphs = function(fontFileData){
                    
                        const font = this.decodeFont(fontFileData);
                        return Object.keys(font.glyphs.glyphs).map(a => String.fromCharCode(font.glyphs.glyphs[a].unicode));
                    };
                    this.decodeFont = function(fontFileData){
                    
                        return _thirdparty.opentype.parse(fontFileData);
                    };
                    this.getAllAvailableGlyphDrawingPaths = function(font,reducedGlyphSet){
                    
                        const glyphs = reducedGlyphSet != undefined ? reducedGlyphSet : Object.keys(font.glyphs.glyphs).map(a => String.fromCharCode(font.glyphs.glyphs[a].unicode));
                        const paths = glyphs.map( a => font.getPath(a,0,0,1) );
                    
                        let outputData = {};
                        for(let a = 0; a < glyphs.length; a++){
                            outputData[glyphs[a]] = paths[a].commands;
                        }
                    
                        return outputData;
                    };
                    this.convertPathToPoints = function(path,detail=2){
                    
                        let output = [];
                        let currentPoints = [];
                    
                        path.forEach(function(element){
                            switch(element.type){
                                case 'M': currentPoints.push( {x:element.x,y:element.y} ); break;
                                case 'L': currentPoints.push( {x:element.x,y:element.y} ); break;
                    
                                case 'H': break;
                                case 'V': break;
                                case 'C': break;
                                case 'S': break;
                    
                                case 'Q':
                                    const p = {
                                        start:{x:currentPoints[currentPoints.length-1].x, y:currentPoints[currentPoints.length-1].y},
                                        control:{x:element.x1,y:element.y1},
                                        end:{x:element.x,y:element.y},
                                    };
                                    
                                    for(let a = 1; a <= detail; a++){
                                        let mux = a/detail;
                                        currentPoints.push({
                                            x: p.start.x + mux*(2*(p.control.x - p.start.x) + mux*(p.end.x - 2*p.control.x + p.start.x)),
                                            y: p.start.y + mux*(2*(p.control.y - p.start.y) + mux*(p.end.y - 2*p.control.y + p.start.y)),
                                        });
                                    }
                                break;
                    
                                case 'T': break;
                                case 'A': break;
                    
                                case 'Z': case 'z': 
                                    output = output.concat(currentPoints);
                                    currentPoints = [];
                                break;
                            }
                        });
                    
                        return output;
                    };
                    this.getTrianglesFromGlyphPath = function(glyphPath,detail=2){
                    
                        //input checking
                            if(glyphPath.length == 0){return [];}
                    
                        //convert glyphPath into segments with holes
                            const minmax = {top:Infinity,left:Infinity,bottom:0,right:0};
                    
                            //gather minmax
                                glyphPath.forEach(a => {
                                    if(a.x < minmax.left){minmax.left = a.x;}
                                    if(a.y < minmax.top){minmax.top = a.y;}
                                    if(a.x > minmax.right){minmax.right = a.x;}
                                    if(a.y > minmax.bottom){minmax.bottom = a.y;}
                                });
                            //split glyph paths up
                                let paths = [];
                                let tmpPath = [];
                                glyphPath.forEach(pathSegment => {
                                    tmpPath.push(pathSegment);
                                    if(pathSegment.type == 'Z'){ paths.push(tmpPath); tmpPath = []; }
                                });
                            //convert paths to points
                                paths = paths.map(a => library.font.convertPathToPoints(a,detail) );
                    
                            //reorder paths in order of size
                                paths = paths.map(a => {
                                    const tmp = library.math.boundingBoxFromPoints(a); 
                                    return {vector:a, size:(tmp.bottomRight.x-tmp.topLeft.x) * (tmp.bottomRight.y-tmp.topLeft.y)};
                                }).sort(function(a,b){ return a.size <= b.size ? 1 : -1; 
                                }).map(a => a.vector);
                    
                            //sort point collections into segments with paths and holes
                                let segments = [];
                                paths.forEach(path => {
                                    let isHole = false;
                                    for(let a = 0; a < segments.length; a++){
                                        if( library.math.detectIntersect.polyOnPoly({points:path},{points:segments[a].path}).intersect ){
                                            segments[a].path = segments[a].path.concat(path);
                                            segments[a].regions.unshift(path);
                                            isHole = true;
                                            break;
                                        }
                                    }
                                    if(!isHole){ segments.push({ path:path, regions:[path] }); }
                                });
                    
                        //produce triangles from points
                            return segments.flatMap(segment => library.math.polygonToSubTriangles(segment.regions) );
                    };
                    this.extractGlyphs = function(fontFileData,reducedGlyphSet){
                    
                        //decode font data
                            const font = library.font.decodeFont(fontFileData);
                        //collect all glyph paths
                            const tmp = library.font.getAllAvailableGlyphDrawingPaths(font,reducedGlyphSet);
                        //convert all glyph paths to triangles
                            const outputObject = {};
                            Object.keys(tmp).forEach(glyph => { 
                                const extraData = font.glyphs.glyphs[glyph.charCodeAt(0)];
                    
                                outputObject[glyph] = {
                                    vector:library.font.getTrianglesFromGlyphPath(tmp[glyph]),
                                    ascender:font.ascender,
                                    descender:font.descender,
                                    leftSideBearing: extraData.leftSideBearing,
                                    advanceWidth: extraData.advanceWidth,
                                    xMax: extraData.xMax,
                                    yMax: extraData.yMax,
                                    xMin: extraData.xMin,
                                    yMin: extraData.yMin,
                                    top:Infinity,
                                    left:Infinity,
                                    bottom:0,
                                    right:0,
                                };
                                
                                //determine extremities for this glyph
                                    for(let a = 0; a < outputObject[glyph].vector.length; a+=2){
                                        if( outputObject[glyph].vector[a] < outputObject[glyph].left ){
                                            outputObject[glyph].left = outputObject[glyph].vector[a];
                                        }else if( outputObject[glyph].vector[a] > outputObject[glyph].right ){
                                            outputObject[glyph].right = outputObject[glyph].vector[a];
                                        }
                    
                                        if( outputObject[glyph].vector[a+1] < outputObject[glyph].top ){
                                            outputObject[glyph].top = outputObject[glyph].vector[a+1];
                                        }else if( outputObject[glyph].vector[a+1] > outputObject[glyph].bottom ){
                                            outputObject[glyph].bottom = outputObject[glyph].vector[a+1];
                                        }
                                    }
                            });
                    
                        //normalize all glyph vectors for this font
                            //establish ratio
                                const ratio = {height:0,width:0,master:0};
                                Object.keys(outputObject).forEach(glyph => {
                                    const height = outputObject[glyph].bottom - outputObject[glyph].top;
                                    if(height > ratio.height){ratio.height = height;}
                                    const width = outputObject[glyph].right - outputObject[glyph].left;
                                    if(width > ratio.width){ratio.width = width;}
                                });
                                ratio.master = ratio.height < ratio.width ? ratio.height : ratio.width;
                            //adjust vectors and extremity values with ratios
                                Object.keys(outputObject).forEach(glyph => {
                                    for(let a = 0; a < outputObject[glyph].vector.length; a+=2){
                                        outputObject[glyph].vector[a] /= ratio.master;
                                        outputObject[glyph].vector[a+1] /= ratio.master;
                                    }
                                    outputObject[glyph].top /= ratio.master;
                                    outputObject[glyph].bottom /= ratio.master;
                                    outputObject[glyph].left /= ratio.master;
                                    outputObject[glyph].right  /= ratio.master;
                                });
                    
                        return outputObject;
                    };
                    
                    
                    
                    
                    const vectorLibrary = {};
                    const reducedGlyphSet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,:;?!/\\()[]{}#-_\'"|><+=&*~%^'.split('');
                    const fontFilesLocation = '/fonts/';
                    const systemFonts = [
                        'defaultThick',
                        'defaultThin',
                    ];
                    const fontFileNames = [
                        'Roboto/Roboto-Regular.ttf',
                        'Roboto/Roboto-Italic.ttf',
                        'Roboto/Roboto-Black.ttf',
                        'Roboto/Roboto-BlackItalic.ttf',
                        'Roboto/Roboto-Bold.ttf',
                        'Roboto/Roboto-BoldItalic.ttf',
                        'Roboto/Roboto-Light.ttf',
                        'Roboto/Roboto-LightItalic.ttf',
                        'Roboto/Roboto-Medium.ttf',
                        'Roboto/Roboto-MediumItalic.ttf',
                        'Roboto/Roboto-Thin.ttf',
                        'Roboto/Roboto-ThinItalic.ttf',
                    
                        'Helvetica/Helvetica-Bold.ttf',
                        'Helvetica/Helvetica-BoldItalic.ttf',
                        'Helvetica/Helvetica-Italic.ttf',
                        'Helvetica/Helvetica-Light.ttf',
                        'Helvetica/Helvetica.ttf',
                        
                        'Arial/Arial.ttf',
                    
                        'Cute_Font/CuteFont-Regular.ttf',
                    
                        'Lobster/Lobster-Regular.ttf',
                    
                        'AppleGaramond/AppleGaramond.ttf',
                    ];
                    //create locations in the vector library for these fonts
                    fontFileNames.forEach(name => {
                        const fontName = name.split('.').slice(0,-1)[0].split('/').slice(1,2)[0]; //produce font name from file name
                        vectorLibrary[fontName] = { fileName:name, loadAttempted:false, isLoaded:false };
                    });
                    vectorLibrary.defaultThick = {
                        loadAttempted:true,
                        isLoaded:true,
                        'default':{ 
                            //vector: [ 0,0, 1,0, 1,1, 0,1, 0,0, 0.2,0.2,  0.2,0.8, 0.8,0.8, 0.8,0.2, 0.2,0.2 ]
                            vector:[0.8,0.2,0.2,0.2,0,0,0,1,0,0,0.2,0.2,0.8,0.2,0,0,1,0,0,1,0.2,0.2,0.2,0.8,0.8,0.8,0.8,0.2,1,0,1,1,0,1,0.2,0.8,0.8,0.8,1,0,1,1,1,1,0.2,0.8,0.8,0.8],
                        },
                        '':{ 
                            //vector: [ 0,0, 1,0, 1,1, 0,1, 0,0, 0.2,0.2,  0.2,0.8, 0.8,0.8, 0.8,0.2, 0.2,0.2 ]
                            vector:[0.8,0.2,0.2,0.2,0,0,0,1,0,0,0.2,0.2,0.8,0.2,0,0,1,0,0,1,0.2,0.2,0.2,0.8,0.8,0.8,0.8,0.2,1,0,1,1,0,1,0.2,0.8,0.8,0.8,1,0,1,1,1,1,0.2,0.8,0.8,0.8],
                        },
                    
                    
                        'A':{ 
                            //vector: [ 0,1, 0.4,0, 0.6,0, 1,1, 0.8,1, 0.5,0.2, 0.4,0.5, 0.65,0.5, 0.7,0.7, 0.3,0.7, 0.2,1 ] 
                            vector:[0.3,0.7,0.2,1,0,1,0,1,0.4,0,0.6,0,0.6,0,1,1,0.8,1,0.4,0.5,0.65,0.5,0.7,0.7,0.6,0,0.8,1,0.5,0.2,0.4,0.5,0.7,0.7,0.3,0.7,0,1,0.6,0,0.5,0.2,0.5,0.2,0.4,0.5,0.3,0.7,0.3,0.7,0,1,0.5,0.2],
                        },
                        'B':{ 
                            //vector: [ 0,0, 0.2,0, 0.2,0.8, 0.7,0.8, 0.8,0.7, 0.8,0.6, 0.7,0.5, 0.2,0.5, 0.2,0.3, 0.7,0.3, 0.7,0.2, 0.2,0.2, 0.2,0, 0.8,0, 0.9,0.1, 0.9,0.3, 0.8,0.4, 1,0.6, 1,0.8, 0.8,1, 0,1 ] 
                            vector:[0,1,0,0,0.2,0,0.7,0.5,0.2,0.5,0.2,0.3,0.7,0.2,0.2,0.2,0.2,0,0.2,0,0.8,0,0.9,0.1,0.9,0.1,0.9,0.3,0.8,0.4,0.8,0.4,1,0.6,1,0.8,1,0.8,0.8,1,0,1,0,1,0.2,0,0.2,0.8,0.7,0.5,0.2,0.3,0.7,0.3,0.7,0.2,0.2,0,0.9,0.1,0,1,0.2,0.8,0.7,0.8,0.8,0.6,0.7,0.5,0.7,0.3,0.7,0.3,0.7,0.2,0.9,0.1,1,0.8,0,1,0.7,0.8,0.7,0.3,0.9,0.1,0.8,0.4,1,0.8,0.7,0.8,0.8,0.7,0.8,0.6,0.7,0.3,0.8,0.4,1,0.8,0.8,0.7,0.8,0.6,0.8,0.6,0.8,0.4,1,0.8],
                        },
                        'C':{ 
                            //vector: [ 0.3,0, 0.8,0, 1,0.2, 0.8,0.3, 0.7,0.2, 0.4,0.2, 0.2,0.4, 0.2,0.6, 0.4,0.8, 0.7,0.8, 0.8,0.7, 1,0.8, 0.8,1, 0.3,1, 0,0.7, 0,0.3 ] 
                            vector:[0,0.7,0,0.3,0.3,0,0.3,0,0.8,0,1,0.2,1,0.2,0.8,0.3,0.7,0.2,0.7,0.8,0.8,0.7,1,0.8,1,0.8,0.8,1,0.3,1,0.3,0,1,0.2,0.7,0.2,0.7,0.8,1,0.8,0.3,1,0.3,0,0.7,0.2,0.4,0.2,0.4,0.8,0.7,0.8,0.3,1,0.3,0,0.4,0.2,0.2,0.4,0.2,0.6,0.4,0.8,0.3,1,0,0.7,0.3,0,0.2,0.4,0.2,0.6,0.3,1,0,0.7,0,0.7,0.2,0.4,0.2,0.6],
                        },
                        'D':{ 
                            //vector: [ 0,0, 0.2,0, 0.2,0.8, 0.7,0.8, 0.8,0.7, 0.8,0.3, 0.7,0.2, 0.2,0.2, 0.2,0, 0.8,0, 1,0.2, 1,0.8, 0.8,1, 0,1 ] 
                            vector:[0,1,0,0,0.2,0,0.7,0.2,0.2,0.2,0.2,0,0.2,0,0.8,0,1,0.2,1,0.2,1,0.8,0.8,1,0,1,0.2,0,0.2,0.8,0.7,0.2,0.2,0,1,0.2,0.8,1,0,1,0.2,0.8,0.8,0.3,0.7,0.2,1,0.2,0.8,1,0.2,0.8,0.7,0.8,0.8,0.7,0.8,0.3,1,0.2,0.8,1,0.7,0.8,0.8,0.7,0.8,0.7,1,0.2,0.8,1],
                        },
                        'E':{ 
                            //vector: [ 0,0, 1,0, 1,0.2, 0.2,0.2, 0.2,0.4, 1,0.4, 1,0.6, 0.2,0.6, 0.2,0.8, 1,0.8, 1,1, 0,1 ] 
                            vector:[0,0,1,0,1,0.2,0.2,0.4,1,0.4,1,0.6,0.2,0.8,1,0.8,1,1,0,0,1,0.2,0.2,0.2,0.2,0.4,1,0.6,0.2,0.6,0.2,0.8,1,1,0,1,0,1,0,0,0.2,0.2,0.2,0.6,0.2,0.8,0,1,0,1,0.2,0.2,0.2,0.4,0.2,0.4,0.2,0.6,0,1],
                        },
                        'F':{ 
                            //vector: [ 0,0, 1,0, 1,0.2, 0.2,0.2, 0.2,0.4, 1,0.4, 1,0.6, 0.2,0.6, 0.2,1, 0,1 ] 
                            vector:[0.2,1,0,1,0,0,0,0,1,0,1,0.2,0.2,0.4,1,0.4,1,0.6,0.2,0.6,0.2,1,0,0,0,0,1,0.2,0.2,0.2,0.2,0.4,1,0.6,0.2,0.6,0,0,0.2,0.2,0.2,0.4,0.2,0.4,0.2,0.6,0,0],
                        },
                        'G':{ 
                            //vector: [ 0.3,0, 0.8,0, 1,0.2, 0.8,0.3, 0.7,0.2, 0.4,0.2, 0.2,0.4, 0.2,0.6, 0.4,0.8, 0.8,0.8, 0.8,0.6, 1,0.6, 1,1, 0.3,1, 0,0.7, 0,0.3 ] 
                            vector:[0,0.7,0,0.3,0.3,0,0.3,0,0.8,0,1,0.2,1,0.2,0.8,0.3,0.7,0.2,0.8,0.8,0.8,0.6,1,0.6,1,1,0.3,1,0,0.7,0.3,0,1,0.2,0.7,0.2,0.8,0.8,1,0.6,1,1,0.3,0,0.7,0.2,0.4,0.2,0.4,0.8,0.8,0.8,1,1,0.3,0,0.4,0.2,0.2,0.4,0.4,0.8,1,1,0,0.7,0,0.7,0.3,0,0.2,0.4,0.2,0.6,0.4,0.8,0,0.7,0,0.7,0.2,0.4,0.2,0.6],
                        },
                        'H':{ 
                            //vector: [ 0,0, 0.2,0, 0.2,0.4, 0.8,0.4, 0.8,0, 1,0, 1,1, 0.8,1, 0.8,0.6, 0.2,0.6, 0.2,1, 0,1 ] 
                            vector:[0.2,1,0,1,0,0,0,0,0.2,0,0.2,0.4,0.8,0.4,0.8,0,1,0,1,0,1,1,0.8,1,0.2,0.6,0.2,1,0,0,1,0,0.8,1,0.8,0.6,0.2,0.6,0,0,0.2,0.4,0.8,0.4,1,0,0.8,0.6,0.8,0.6,0.2,0.6,0.2,0.4,0.2,0.4,0.8,0.4,0.8,0.6],
                        },
                        'I':{ 
                            //vector: [ 0,0, 1,0, 1,0.2, 0.6,0.2, 0.6,0.8, 1,0.8, 1,1, 0,1, 0,0.8, 0.4,0.8, 0.4,0.2, 0,0.2 ] 
                            vector:[0.4,0.2,0,0.2,0,0,0,0,1,0,1,0.2,0.6,0.8,1,0.8,1,1,1,1,0,1,0,0.8,0,0,1,0.2,0.6,0.2,1,1,0,0.8,0.4,0.8,0.4,0.2,0,0,0.6,0.2,0.6,0.8,1,1,0.4,0.8,0.4,0.8,0.4,0.2,0.6,0.2,0.6,0.2,0.6,0.8,0.4,0.8],
                        },
                        'J':{ 
                            //vector: [ 0,0, 1,0, 1,0.2, 0.6,0.2, 0.6,0.8, 0.4,1, 0,1, 0,0.8, 0.3,0.8, 0.4,0.7, 0.4,0.2, 0,0.2 ] 
                            vector:[0.4,0.2,0,0.2,0,0,0,0,1,0,1,0.2,0.6,0.2,0.6,0.8,0.4,1,0.4,1,0,1,0,0.8,0,0,1,0.2,0.6,0.2,0.4,1,0,0.8,0.3,0.8,0.4,0.2,0,0,0.6,0.2,0.4,1,0.3,0.8,0.4,0.7,0.4,0.7,0.4,0.2,0.6,0.2,0.6,0.2,0.4,1,0.4,0.7],
                        },
                        'K':{ 
                            //vector: [ 0,0, 0.2,0, 0.2,0.3, 1,0, 1,0.2, 0.5,0.4, 1,1, 0.75,1, 0.3,0.45, 0.2,0.5, 0.2,1, 0,1 ] 
                            vector:[0.2,1,0,1,0,0,0,0,0.2,0,0.2,0.3,0.2,0.3,1,0,1,0.2,0.5,0.4,1,1,0.75,1,0.2,0.5,0.2,1,0,0,0.2,0.3,1,0.2,0.5,0.4,0.5,0.4,0.75,1,0.3,0.45,0.3,0.45,0.2,0.5,0,0,0.2,0.3,0.5,0.4,0.3,0.45,0.3,0.45,0,0,0.2,0.3],
                        },
                        'L':{ 
                            //vector: [ 0,0, 0.2,0, 0.2,0.8, 1,0.8, 1,1, 0,1 ] 
                            vector:[0,1,0,0,0.2,0,0.2,0.8,1,0.8,1,1,0,1,0.2,0,0.2,0.8,0.2,0.8,1,1,0,1],
                        },
                        'M':{ 
                            //vector: [ 0,0, 0.2,0, 0.5,0.4, 0.8,0, 1,0, 1,1, 0.8,1, 0.8,0.3, 0.5,0.7, 0.2,0.3, 0.2,1, 0,1 ] 
                            vector:[0.2,1,0,1,0,0,0,0,0.2,0,0.5,0.4,0.5,0.4,0.8,0,1,0,1,0,1,1,0.8,1,0.2,0.3,0.2,1,0,0,1,0,0.8,1,0.8,0.3,0.5,0.7,0.2,0.3,0,0,0.5,0.4,1,0,0.8,0.3,0.5,0.7,0,0,0.5,0.4,0.5,0.4,0.8,0.3,0.5,0.7],
                        },
                        'N':{ 
                            //vector: [ 0,0, 0.2,0, 0.8,0.7, 0.8,0, 1,0, 1,1, 0.8,1, 0.2,0.3, 0.2,1, 0,1 ] 
                            vector:[0.2,1,0,1,0,0,0,0,0.2,0,0.8,0.7,0.8,0.7,0.8,0,1,0,1,0,1,1,0.8,1,0.2,0.3,0.2,1,0,0,0.8,0.7,1,0,0.8,1,0.8,1,0.2,0.3,0,0,0,0,0.8,0.7,0.8,1],
                        },
                        'O':{ 
                            //vector: [ 0.3,0, 0.7,0, 1,0.3, 1,0.7, 0.7,1, 0.3,1, 0,0.7, 0,0.3, 0.3,0, 0.4,0.2, 0.2,0.4, 0.2,0.6, 0.4,0.8, 0.6,0.8, 0.8,0.6, 0.8,0.4, 0.6,0.2, 0.4,0.2 ] 
                            vector:[0.6,0.2,0.4,0.2,0.3,0,0.3,0,0.7,0,1,0.3,1,0.3,1,0.7,0.7,1,0.7,1,0.3,1,0,0.7,0,0.7,0,0.3,0.3,0,0.3,0,0.4,0.2,0.2,0.4,0.6,0.2,0.3,0,1,0.3,0,0.7,0.3,0,0.2,0.4,0.8,0.4,0.6,0.2,1,0.3,0,0.7,0.2,0.4,0.2,0.6,0.8,0.6,0.8,0.4,1,0.3,0,0.7,0.2,0.6,0.4,0.8,0.8,0.6,1,0.3,0.7,1,0.7,1,0,0.7,0.4,0.8,0.6,0.8,0.8,0.6,0.7,1,0.7,1,0.4,0.8,0.6,0.8],
                        },
                        'P':{ 
                            //vector: [ 0,0, 0.8,0, 1,0.2, 1,0.4, 0.8,0.6, 0.2,0.6, 0.2,0.4, 0.7,0.4, 0.8,0.3, 0.7,0.2, 0.2,0.2, 0.2,1, 0,1 ] 
                            vector:[0.2,1,0,1,0,0,0,0,0.8,0,1,0.2,1,0.2,1,0.4,0.8,0.6,0.8,0.6,0.2,0.6,0.2,0.4,0.2,0.2,0.2,1,0,0,0.8,0.6,0.2,0.4,0.7,0.4,0.7,0.2,0.2,0.2,0,0,1,0.2,0.8,0.6,0.7,0.4,0.7,0.2,0,0,1,0.2,1,0.2,0.7,0.4,0.8,0.3,0.8,0.3,0.7,0.2,1,0.2],
                        },
                        'Q':{ 
                            //vector: [ 0.3,0, 0.7,0, 1,0.3, 1,0.7, 0.95,0.75, 1,0.8, 1,1, 0.8,1, 0.5,0.7, 0.5,0.5, 0.7,0.5, 0.8,0.6, 0.8,0.4, 0.6,0.2, 0.4,0.2, 0.2,0.4, 0.2,0.6, 0.4,0.8, 0.6,0.8, 0.75,0.95, 0.7,1, 0.3,1, 0,0.7, 0,0.3 ] 
                            vector:[0,0.7,0,0.3,0.3,0,0.3,0,0.7,0,1,0.3,1,0.3,1,0.7,0.95,0.75,0.95,0.75,1,0.8,1,1,1,1,0.8,1,0.5,0.7,0.5,0.7,0.5,0.5,0.7,0.5,0.4,0.8,0.6,0.8,0.75,0.95,0.75,0.95,0.7,1,0.3,1,0.95,0.75,1,1,0.5,0.7,0.5,0.7,0.7,0.5,0.8,0.6,0.4,0.8,0.75,0.95,0.3,1,0.95,0.75,0.5,0.7,0.8,0.6,0.2,0.6,0.4,0.8,0.3,1,1,0.3,0.95,0.75,0.8,0.6,0.2,0.6,0.3,1,0,0.7,1,0.3,0.8,0.6,0.8,0.4,0.2,0.4,0.2,0.6,0,0.7,1,0.3,0.8,0.4,0.6,0.2,0.2,0.4,0,0.7,0.3,0,0.3,0,1,0.3,0.6,0.2,0.4,0.2,0.2,0.4,0.3,0,0.3,0,0.6,0.2,0.4,0.2],
                            encroach:{'{':1},
                        },
                        'R':{ 
                            //vector: [ 0,0, 0.8,0, 1,0.2, 1,0.4, 0.8,0.6, 0.6,0.6, 1,1, 0.75,1, 0.35,0.6, 0.2,0.6, 0.2,0.4, 0.7,0.4, 0.8,0.3, 0.7,0.2, 0.2,0.2, 0.2,1, 0,1 ] 
                            vector:[0.2,1,0,1,0,0,0,0,0.8,0,1,0.2,1,0.2,1,0.4,0.8,0.6,0.6,0.6,1,1,0.75,1,0.35,0.6,0.2,0.6,0.2,0.4,0.2,0.2,0.2,1,0,0,1,0.2,0.8,0.6,0.6,0.6,0.6,0.6,0.75,1,0.35,0.6,0.35,0.6,0.2,0.4,0.7,0.4,0.7,0.2,0.2,0.2,0,0,0.6,0.6,0.35,0.6,0.7,0.4,0.7,0.2,0,0,1,0.2,1,0.2,0.6,0.6,0.7,0.4,0.8,0.3,0.7,0.2,1,0.2,1,0.2,0.7,0.4,0.8,0.3],
                        },
                        'S':{ 
                            //vector: [ 0.2,0, 0.8,0, 1,0.2, 1,0.3, 0.8,0.3, 0.7,0.2, 0.3,0.2, 0.2,0.3, 0.3,0.4, 0.8,0.4, 1,0.6, 1,0.8, 0.8,1, 0.2,1, 0,0.8, 0,0.7, 0.2,0.7, 0.3,0.8, 0.7,0.8, 0.8,0.7, 0.7,0.6, 0.2,0.6, 0,0.4, 0,0.2 ] 
                            vector:[0,0.4,0,0.2,0.2,0,0.2,0,0.8,0,1,0.2,1,0.2,1,0.3,0.8,0.3,0.3,0.4,0.8,0.4,1,0.6,1,0.6,1,0.8,0.8,1,0.8,1,0.2,1,0,0.8,0,0.8,0,0.7,0.2,0.7,0.7,0.6,0.2,0.6,0,0.4,1,0.2,0.8,0.3,0.7,0.2,0,0.8,0.2,0.7,0.3,0.8,0.2,0,1,0.2,0.7,0.2,0.8,1,0,0.8,0.3,0.8,0.2,0,0.7,0.2,0.3,0.2,0.8,1,0.3,0.8,0.7,0.8,0,0.4,0.2,0,0.3,0.2,1,0.6,0.8,1,0.7,0.8,0,0.4,0.3,0.2,0.2,0.3,1,0.6,0.7,0.8,0.8,0.7,0,0.4,0.2,0.3,0.3,0.4,1,0.6,0.8,0.7,0.7,0.6,0.7,0.6,0,0.4,0.3,0.4,0.3,0.4,1,0.6,0.7,0.6],
                        },
                        'T':{ 
                            //vector: [ 0,0, 1,0, 1,0.2, 0.6,0.2, 0.6,1, 0.4,1, 0.4,0.2, 0,0.2 ] 
                            vector:[0.4,0.2,0,0.2,0,0,0,0,1,0,1,0.2,0.6,0.2,0.6,1,0.4,1,0,0,1,0.2,0.6,0.2,0.6,0.2,0.4,1,0.4,0.2,0.4,0.2,0,0,0.6,0.2],
                        },
                        'U':{ 
                            //vector: [ 0,0, 0.2,0, 0.2,0.6, 0.4,0.8, 0.6,0.8, 0.8,0.6, 0.8,0, 1,0, 1,0.7, 0.7,1, 0.3,1, 0,0.7 ] 
                            vector:[0.3,1,0,0.7,0,0,0,0,0.2,0,0.2,0.6,0.8,0.6,0.8,0,1,0,1,0,1,0.7,0.7,1,0.3,1,0,0,0.2,0.6,0.8,0.6,1,0,0.7,1,0.3,1,0.2,0.6,0.4,0.8,0.6,0.8,0.8,0.6,0.7,1,0.7,1,0.3,1,0.4,0.8,0.4,0.8,0.6,0.8,0.7,1],
                        },
                        'V':{ 
                            //vector: [ 0,0, 0.2,0, 0.5,0.7, 0.8,0, 1,0, 0.6,1, 0.4,1 ] 
                            vector:[0.6,1,0.4,1,0,0,0,0,0.2,0,0.5,0.7,0.5,0.7,0.8,0,1,0,0.6,1,0,0,0.5,0.7,0.5,0.7,1,0,0.6,1],
                        },
                        'W':{ 
                            //vector: [ 0,1, 0.2,1, 0.5,0.6, 0.8,1, 1,1, 1,0, 0.8,0, 0.8,0.7, 0.5,0.3, 0.2,0.7, 0.2,0, 0,0 ] 
                            vector:[0.2,1,0,1,0,0,0,0,0.2,0,0.2,0.7,0.8,0.7,0.8,0,1,0,1,0,1,1,0.8,1,0.2,1,0,0,0.2,0.7,0.8,0.7,1,0,0.8,1,0.5,0.6,0.2,1,0.2,0.7,0.5,0.3,0.8,0.7,0.8,1,0.5,0.6,0.2,0.7,0.5,0.3,0.5,0.3,0.8,1,0.5,0.6],
                        },
                        'X':{ 
                            //vector: [ 0,0, 0.25,0, 0.5,0.35, 0.75,0, 1,0, 0.6,0.5, 1,1, 0.75,1, 0.5,0.65, 0.25,1, 0,1, 0.4,0.5 ] 
                            vector:[0.4,0.5,0,0,0.25,0,0.5,0.35,0.75,0,1,0,0.6,0.5,1,1,0.75,1,0.5,0.65,0.25,1,0,1,0.4,0.5,0.25,0,0.5,0.35,0.5,0.35,1,0,0.6,0.5,0.6,0.5,0.75,1,0.5,0.65,0.5,0.65,0,1,0.4,0.5,0.4,0.5,0.5,0.35,0.6,0.5,0.6,0.5,0.5,0.65,0.4,0.5],
                        },
                        'Y':{ 
                            //vector: [ 0,0, 0.25,0, 0.5,0.35, 0.75,0, 1,0, 0.25,1, 0,1, 0.35,0.5 ] 
                            vector:[0.35,0.5,0,0,0.25,0,0.5,0.35,0.75,0,1,0,1,0,0.25,1,0,1,0.35,0.5,0.25,0,0.5,0.35,0.5,0.35,1,0,0,1,0,1,0.35,0.5,0.5,0.35],
                        },
                        'Z':{ 
                            //vector: [ 0,0, 1,0, 1,0.2, 0.3,0.2, 1,0.8, 1,1, 0,1, 0,0.8, 0.7,0.8, 0,0.2 ] 
                            vector:[0.7,0.8,0,0.2,0,0,0,0,1,0,1,0.2,0.3,0.2,1,0.8,1,1,1,1,0,1,0,0.8,0,0,1,0.2,0.3,0.2,1,1,0,0.8,0.7,0.8,0.7,0.8,0,0,0.3,0.2,0.3,0.2,1,1,0.7,0.8],
                        },
                    
                    
                        'a':{
                            //vector: [ 0.2/0.8,0.0/0.6, 0.5/0.8,0.0/0.6, 0.7/0.8,0.2/0.6, 0.7/0.8,0.5/0.6, 0.8/0.8,0.6/0.6, 0.5/0.8,0.6/0.6, 0.5/0.8,0.3/0.6, 0.4/0.8,0.2/0.6, 0.3/0.8,0.2/0.6, 0.2/0.8,0.3/0.6, 0.3/0.8,0.4/0.6, 0.5/0.8,0.4/0.6, 0.5/0.8,0.6/0.6, 0.2/0.8,0.6/0.6, 0.0/0.8,0.4/0.6, 0.0/0.8,0.2/0.6 ]
                            vector:[0,0.6666666666666667,0,0.33333333333333337,0.25,0,0.25,0,0.625,0,0.8749999999999999,0.33333333333333337,0.8749999999999999,0.8333333333333334,1,1,0.625,1,0.37499999999999994,0.6666666666666667,0.625,0.6666666666666667,0.625,1,0.625,1,0.25,1,0,0.6666666666666667,0.8749999999999999,0.33333333333333337,0.8749999999999999,0.8333333333333334,0.625,1,0.37499999999999994,0.6666666666666667,0.625,1,0,0.6666666666666667,0.8749999999999999,0.33333333333333337,0.625,1,0.625,0.5,0.25,0.5,0.37499999999999994,0.6666666666666667,0,0.6666666666666667,0.25,0,0.8749999999999999,0.33333333333333337,0.625,0.5,0.37499999999999994,0.33333333333333337,0.25,0.5,0,0.6666666666666667,0.25,0,0.625,0.5,0.5,0.33333333333333337,0.37499999999999994,0.33333333333333337,0,0.6666666666666667,0.25,0,0.25,0,0.5,0.33333333333333337,0.37499999999999994,0.33333333333333337],
                            ratio:{x:0.8,y:0.6}, offset:{y:0.4},
                            encroach:{'a':1,'t':1,'Y':3},
                        },
                        'b':{
                            //vector: [ 0,0, 0.2/0.7,0, 0.2/0.7,0.8, 0.4/0.7,0.8, 0.5/0.7,0.7, 0.4/0.7,0.6, 0.2/0.7,0.6, 0.2/0.7,0.4, 0.5/0.7,0.4, 0.7/0.7,0.6, 0.7/0.7,0.8, 0.5/0.7,1, 0,1 ]
                            vector:[0,1,0,0,0.28571428571428575,0,0.5714285714285715,0.6,0.28571428571428575,0.6,0.28571428571428575,0.4,0.28571428571428575,0.4,0.7142857142857143,0.4,1,0.6,1,0.6,1,0.8,0.7142857142857143,1,0,1,0.28571428571428575,0,0.28571428571428575,0.8,0.5714285714285715,0.6,0.28571428571428575,0.4,1,0.6,0.7142857142857143,1,0,1,0.28571428571428575,0.8,0.7142857142857143,0.7,0.5714285714285715,0.6,1,0.6,0.7142857142857143,1,0.28571428571428575,0.8,0.5714285714285715,0.8,0.5714285714285715,0.8,0.7142857142857143,0.7,1,0.6,1,0.6,0.7142857142857143,1,0.5714285714285715,0.8],
                            ratio:{x:0.7}
                        },
                        'c':{
                            //vector: [ 0.2/0.7,0.0/0.6, 0.7/0.7,0.0/0.6, 0.7/0.7,0.2/0.6, 0.3/0.7,0.2/0.6, 0.2/0.7,0.3/0.6, 0.3/0.7,0.4/0.6, 0.7/0.7,0.4/0.6, 0.7/0.7,0.6/0.6, 0.2/0.7,0.6/0.6, 0.0/0.7,0.4/0.6, 0.0/0.7,0.2/0.6 ]
                            vector:[0,0.6666666666666667,0,0.33333333333333337,0.28571428571428575,0,0.28571428571428575,0,1,0,1,0.33333333333333337,0.4285714285714286,0.6666666666666667,1,0.6666666666666667,1,1,1,1,0.28571428571428575,1,0,0.6666666666666667,0.28571428571428575,0,1,0.33333333333333337,0.4285714285714286,0.33333333333333337,0.4285714285714286,0.6666666666666667,1,1,0,0.6666666666666667,0,0.6666666666666667,0.28571428571428575,0,0.4285714285714286,0.33333333333333337,0.28571428571428575,0.5,0.4285714285714286,0.6666666666666667,0,0.6666666666666667,0,0.6666666666666667,0.4285714285714286,0.33333333333333337,0.28571428571428575,0.5],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                            encroach:{'a':1},
                        },
                        'd':{
                            //vector: [ 0.0/0.7,0.6, 0.2/0.7,0.4, 0.5/0.7,0.4, 0.5/0.7,0.6, 0.3/0.7,0.6, 0.2/0.7,0.7, 0.3/0.7,0.8, 0.5/0.7,0.8, 0.5/0.7,0.0, 0.7/0.7,0.0, 0.7/0.7,1.0, 0.2/0.7,1.0, 0.0/0.7,0.8 ]
                            vector:[0.28571428571428575,1,0,0.8,0,0.6,0,0.6,0.28571428571428575,0.4,0.7142857142857143,0.4,0.7142857142857143,0.4,0.7142857142857143,0.6,0.4285714285714286,0.6,0.7142857142857143,0.8,0.7142857142857143,0,1,0,0,0.6,0.7142857142857143,0.4,0.4285714285714286,0.6,0.7142857142857143,0.8,1,0,1,1,0,0.6,0.4285714285714286,0.6,0.28571428571428575,0.7,0.4285714285714286,0.8,0.7142857142857143,0.8,1,1,0.28571428571428575,1,0,0.6,0.28571428571428575,0.7,0.4285714285714286,0.8,1,1,0.28571428571428575,1,0.28571428571428575,1,0.28571428571428575,0.7,0.4285714285714286,0.8],
                            ratio:{x:0.7},
                            encroach:{'a':1},
                        },
                        'e':{
                            //vector: [ 0.2,0.0/0.8, 0.8,0.0/0.8, 1.0,0.2/0.8, 1.0,0.4/0.8, 0.9,0.5/0.8, 0.2,0.5/0.8, 0.2,0.3/0.8, 0.8,0.3/0.8, 0.7,0.2/0.8, 0.3,0.2/0.8, 0.2,0.3/0.8, 0.2,0.5/0.8, 0.3,0.6/0.8, 1.0,0.6/0.8, 0.8,0.8/0.8, 0.2,0.8/0.8, 0.0,0.6/0.8, 0.0,0.2/0.8 ]
                            vector:[0,0.7499999999999999,0,0.25,0.2,0,0.2,0,0.8,0,1,0.25,1,0.25,1,0.5,0.9,0.625,0.3,0.7499999999999999,1,0.7499999999999999,0.8,1,0.8,1,0.2,1,0,0.7499999999999999,0.3,0.7499999999999999,0.8,1,0,0.7499999999999999,0.2,0.625,0.3,0.7499999999999999,0,0.7499999999999999,0.2,0.37499999999999994,0.2,0.625,0,0.7499999999999999,0.2,0.37499999999999994,0,0.7499999999999999,0.2,0,0.9,0.625,0.2,0.625,0.2,0.37499999999999994,0.3,0.25,0.2,0.37499999999999994,0.2,0,0.9,0.625,0.2,0.37499999999999994,0.8,0.37499999999999994,0.7,0.25,0.3,0.25,0.2,0,1,0.25,0.9,0.625,0.8,0.37499999999999994,0.7,0.25,0.2,0,1,0.25,1,0.25,0.8,0.37499999999999994,0.7,0.25],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                            encroach:{'K':1,'t':1,'v':0.5,'x':1},
                        },
                        'f':{
                            //vector: [ 0.3/0.4,0.0, 0.4/0.4,0.0, 0.4/0.4,0.2, 0.3/0.4,0.3, 0.3/0.4,0.4, 0.4/0.4,0.4, 0.4/0.4,0.6, 0.3/0.4,0.6, 0.3/0.4,1.0, 0.1/0.4,1.0, 0.1/0.4,0.6, 0.0/0.4,0.6, 0.0/0.4,0.4, 0.1/0.4,0.4, 0.1/0.4,0.2 ]
                            vector:[0.25,0.4,0.25,0.2,0.7499999999999999,0,0.7499999999999999,0,1,0,1,0.2,0.7499999999999999,0.4,1,0.4,1,0.6,0.7499999999999999,0.6,0.7499999999999999,1,0.25,1,0.25,0.6,0,0.6,0,0.4,0.25,0.4,0.7499999999999999,0,1,0.2,0.7499999999999999,0.4,1,0.6,0.7499999999999999,0.6,0.7499999999999999,0.6,0.25,1,0.25,0.6,0.25,0.6,0,0.4,0.25,0.4,0.25,0.4,1,0.2,0.7499999999999999,0.3,0.7499999999999999,0.4,0.7499999999999999,0.6,0.25,0.6,0.25,0.6,0.25,0.4,0.7499999999999999,0.3,0.7499999999999999,0.3,0.7499999999999999,0.4,0.25,0.6],
                            ratio:{x:0.4}, 
                        },
                        'g':{
                            //vector: [ 0.2/0.7,0.0/1.1, 0.6/0.7,0.0/1.1, 0.7/0.7,0.1/1.1, 0.7/0.7,0.9/1.1, 0.5/0.7,1.1/1.1, 0.2/0.7,1.1/1.1, 0.0/0.7,0.9/1.1, 0.0/0.7,0.8/1.1, 0.2/0.7,0.8/1.1, 0.3/0.7,0.9/1.1, 0.4/0.7,0.9/1.1, 0.5/0.7,0.8/1.1, 0.5/0.7,0.2/1.1, 0.3/0.7,0.2/1.1, 0.2/0.7,0.3/1.1, 0.3/0.7,0.4/1.1, 0.5/0.7,0.4/1.1, 0.5/0.7,0.6/1.1, 0.2/0.7,0.6/1.1, 0.0/0.7,0.4/1.1, 0.0/0.7,0.2/1.1 ]
                            vector:[0,0.36363636363636365,0,0.18181818181818182,0.28571428571428575,0,0.28571428571428575,0,0.8571428571428572,0,1,0.09090909090909091,1,0.09090909090909091,1,0.8181818181818181,0.7142857142857143,1,0.7142857142857143,1,0.28571428571428575,1,0,0.8181818181818181,0,0.8181818181818181,0,0.7272727272727273,0.28571428571428575,0.7272727272727273,0.4285714285714286,0.36363636363636365,0.7142857142857143,0.36363636363636365,0.7142857142857143,0.5454545454545454,0.7142857142857143,0.5454545454545454,0.28571428571428575,0.5454545454545454,0,0.36363636363636365,0.7142857142857143,1,0,0.8181818181818181,0.28571428571428575,0.7272727272727273,0.4285714285714286,0.36363636363636365,0.7142857142857143,0.5454545454545454,0,0.36363636363636365,0.7142857142857143,1,0.28571428571428575,0.7272727272727273,0.4285714285714286,0.8181818181818181,0.28571428571428575,0.2727272727272727,0.4285714285714286,0.36363636363636365,0,0.36363636363636365,0.7142857142857143,1,0.4285714285714286,0.8181818181818181,0.5714285714285715,0.8181818181818181,0.4285714285714286,0.18181818181818182,0.28571428571428575,0.2727272727272727,0,0.36363636363636365,0.7142857142857143,1,0.5714285714285715,0.8181818181818181,0.7142857142857143,0.7272727272727273,0.4285714285714286,0.18181818181818182,0,0.36363636363636365,0.28571428571428575,0,1,0.09090909090909091,0.7142857142857143,1,0.7142857142857143,0.7272727272727273,0.7142857142857143,0.18181818181818182,0.4285714285714286,0.18181818181818182,0.28571428571428575,0,1,0.09090909090909091,0.7142857142857143,0.7272727272727273,0.7142857142857143,0.18181818181818182,0.7142857142857143,0.18181818181818182,0.28571428571428575,0,1,0.09090909090909091],
                            ratio:{x:0.7,y:1.1}, offset:{y:0.4},
                        },
                        'h':{
                            //vector: [ 0.0/0.7,0.0, 0.2/0.7,0.0, 0.2/0.7,0.4, 0.5/0.7,0.4, 0.7/0.7,0.6, 0.7/0.7,1.0, 0.5/0.7,1.0, 0.5/0.7,0.7, 0.4/0.7,0.6, 0.2/0.7,0.6, 0.2/0.7,1.0, 0.0/0.7,1.0 ]
                            vector:[0.28571428571428575,1,0,1,0,0,0,0,0.28571428571428575,0,0.28571428571428575,0.4,0.28571428571428575,0.4,0.7142857142857143,0.4,1,0.6,1,0.6,1,1,0.7142857142857143,1,0.28571428571428575,0.6,0.28571428571428575,1,0,0,1,0.6,0.7142857142857143,1,0.7142857142857143,0.7,0.28571428571428575,0.6,0,0,0.28571428571428575,0.4,1,0.6,0.7142857142857143,0.7,0.5714285714285715,0.6,0.5714285714285715,0.6,0.28571428571428575,0.6,0.28571428571428575,0.4,0.28571428571428575,0.4,1,0.6,0.5714285714285715,0.6],
                            ratio:{x:0.7}
                        },
                        'i':{
                            //vector: [ 0.0/0.2,0.0/0.9, 0.2/0.2,0.0/0.9, 0.2/0.2,0.2/0.9, 0.0/0.2,0.2/0.9, 0.0/0.2,0.3/0.9, 0.2/0.2,0.3/0.9, 0.2/0.2,0.9/0.9, 0.0/0.2,0.9/0.9 ]
                            vector:[0,0,1,0,1,0.22222222222222224,0,0.3333333333333333,1,0.3333333333333333,1,1,0,0,1,0.22222222222222224,0,0.22222222222222224,0,0.3333333333333333,1,1,0,1],
                            ratio:{x:0.2,y:0.9}, offset:{y:0.1},
                        },
                        'j':{
                            //vector: [ 0.2/0.4,0.0/1.2, 0.4/0.4,0.0/1.2, 0.4/0.4,0.2/1.2, 0.2/0.4,0.2/1.2, 0.2/0.4,0.3/1.2, 0.4/0.4,0.3/1.2, 0.4/0.4,1.0/1.2, 0.2/0.4,1.2/1.2, 0.0/0.4,1.2/1.2, 0.0/0.4,1.0/1.2, 0.1/0.4,1.0/1.2, 0.2/0.4,0.9/1.2 ]
                            vector:[0.5,0,1,0,1,0.16666666666666669,0.5,0.25,1,0.25,1,0.8333333333333334,1,0.8333333333333334,0.5,1,0,1,0,1,0,0.8333333333333334,0.25,0.8333333333333334,0.5,0,1,0.16666666666666669,0.5,0.16666666666666669,1,0.8333333333333334,0,1,0.25,0.8333333333333334,1,0.8333333333333334,0.25,0.8333333333333334,0.5,0.75,0.5,0.25,1,0.8333333333333334,0.5,0.75],
                            ratio:{x:0.4,y:1.2}, offset:{y:0.1},
                            encroach:{
                                'A':1,'B':1,'C':1,'D':1,'E':1,'F':1,'G':1,'H':1,'I':1,'J':1,'L':1,'K':1,'M':1,'N':1,'O':1,'P':1,'Q':1,'R':1,'S':1,'T':1,'U':1,'V':1,'W':1,'X':1,'Y':1,'Z':1,
                                'a':2,'b':1,'c':1,'d':1,'e':1,'f':1,'h':1,'i':1,'k':1,'l':1,'n':1,'m':1,'o':1,'p':1,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,'z':1,
                            },
                        },
                        'k':{
                            //vector: [ 0.0/0.75,0.0, 0.2/0.75,0.0, 0.2/0.75,0.5, 0.5/0.75,0.3, 0.75/0.75,0.3, 0.35/0.75,0.6, 0.75/0.75,1.0, 0.5/0.75,1.0, 0.2/0.75,0.7, 0.2/0.75,1.0, 0.0/0.75,1.0 ]
                            vector:[0.26666666666666666,1,0,1,0,0,0,0,0.26666666666666666,0,0.26666666666666666,0.5,0.26666666666666666,0.5,0.6666666666666666,0.3,1,0.3,0.4666666666666666,0.6,1,1,0.6666666666666666,1,0.26666666666666666,0.7,0.26666666666666666,1,0,0,0.26666666666666666,0.5,1,0.3,0.4666666666666666,0.6,0.4666666666666666,0.6,0.6666666666666666,1,0.26666666666666666,0.7,0.26666666666666666,0.7,0,0,0.26666666666666666,0.5,0.26666666666666666,0.5,0.4666666666666666,0.6,0.26666666666666666,0.7],
                            ratio:{x:0.75}
                        },
                        'l':{
                            //vector: [ 0.0/0.5,0.0, 0.2/0.5,0.0, 0.2/0.5,0.7, 0.3/0.5,0.8, 0.5/0.5,0.8, 0.5/0.5,1.0, 0.2/0.5,1.0, 0.0/0.5,0.8 ]
                            vector:[0.4,1,0,0.8,0,0,0,0,0.4,0,0.4,0.7,0.6,0.8,1,0.8,1,1,0.4,1,0,0,0.4,0.7,0.6,0.8,1,1,0.4,1,0.4,1,0.4,0.7,0.6,0.8],
                            ratio:{x:0.5},
                            encroach:{'a':1},
                        },
                        'm':{
                            //vector: [ 0.0/1.2,0.0/0.6, 1.0/1.2,0.0/0.6, 1.2/1.2,0.2/0.6, 1.2/1.2,0.6/0.6, 1.0/1.2,0.6/0.6, 1.0/1.2,0.3/0.6, 0.9/1.2,0.2/0.6, 0.7/1.2,0.2/0.6, 0.7/1.2,0.6/0.6, 0.5/1.2,0.6/0.6, 0.5/1.2,0.3/0.6, 0.4/1.2,0.2/0.6, 0.2/1.2,0.2/0.6, 0.2/1.2,0.6/0.6, 0.0/1.2,0.6/0.6 ]
                            vector:[0.16666666666666669,1,0,1,0,0,0,0,0.8333333333333334,0,1,0.33333333333333337,1,0.33333333333333337,1,1,0.8333333333333334,1,0.5833333333333334,0.33333333333333337,0.5833333333333334,1,0.4166666666666667,1,0.16666666666666669,0.33333333333333337,0.16666666666666669,1,0,0,1,0.33333333333333337,0.8333333333333334,1,0.8333333333333334,0.5,0.5833333333333334,0.33333333333333337,0.4166666666666667,1,0.4166666666666667,0.5,0.33333333333333337,0.33333333333333337,0.16666666666666669,0.33333333333333337,0,0,1,0.33333333333333337,0.8333333333333334,0.5,0.75,0.33333333333333337,0.5833333333333334,0.33333333333333337,0.4166666666666667,0.5,0.33333333333333337,0.33333333333333337,0,0,1,0.33333333333333337,0.75,0.33333333333333337,0.5833333333333334,0.33333333333333337,0.33333333333333337,0.33333333333333337,0,0,0,0,0.75,0.33333333333333337,0.5833333333333334,0.33333333333333337],
                            ratio:{x:1.2,y:0.6}, offset:{y:0.4},
                        },
                        'n':{
                            //vector: [ 0.0/0.7,0.0/0.6, 0.5/0.7,0.0/0.6, 0.7/0.7,0.2/0.6, 0.7/0.7,0.6/0.6, 0.5/0.7,0.6/0.6, 0.5/0.7,0.3/0.6, 0.4/0.7,0.2/0.6, 0.2/0.7,0.2/0.6, 0.2/0.7,0.6/0.6, 0.0/0.7,0.6/0.6 ]
                            vector:[0.28571428571428575,1,0,1,0,0,0,0,0.7142857142857143,0,1,0.33333333333333337,1,0.33333333333333337,1,1,0.7142857142857143,1,0.28571428571428575,0.33333333333333337,0.28571428571428575,1,0,0,1,0.33333333333333337,0.7142857142857143,1,0.7142857142857143,0.5,0.5714285714285715,0.33333333333333337,0.28571428571428575,0.33333333333333337,0,0,1,0.33333333333333337,0.7142857142857143,0.5,0.5714285714285715,0.33333333333333337,0.5714285714285715,0.33333333333333337,0,0,1,0.33333333333333337],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                        },
                        'o':{
                            //vector: [ 0.2/0.6,0.0/0.6, 0.4/0.6,0.0/0.6, 0.6/0.6,0.2/0.6, 0.6/0.6,0.4/0.6, 0.4/0.6,0.6/0.6, 0.2/0.6,0.6/0.6, 0.0/0.6,0.4/0.6, 0.0/0.6,0.2/0.6, 0.2/0.6,0.3/0.6, 0.3/0.6,0.4/0.6, 0.4/0.6,0.3/0.6, 0.3/0.6,0.2/0.6, 0.2/0.6,0.3/0.6, 0.0/0.6,0.2/0.6 ]
                            vector:[0.33333333333333337,0.5,0,0.33333333333333337,0.33333333333333337,0,0.33333333333333337,0,0.6666666666666667,0,1,0.33333333333333337,1,0.33333333333333337,1,0.6666666666666667,0.6666666666666667,1,0.6666666666666667,1,0.33333333333333337,1,0,0.6666666666666667,0,0.6666666666666667,0,0.33333333333333337,0.33333333333333337,0.5,0.5,0.33333333333333337,0.33333333333333337,0.5,0.33333333333333337,0,0.6666666666666667,1,0,0.6666666666666667,0.33333333333333337,0.5,0.6666666666666667,0.5,0.5,0.33333333333333337,0.33333333333333337,0,0.6666666666666667,1,0.33333333333333337,0.5,0.5,0.6666666666666667,0.6666666666666667,0.5,0.33333333333333337,0,1,0.33333333333333337,1,0.33333333333333337,0.6666666666666667,1,0.5,0.6666666666666667,0.5,0.6666666666666667,0.6666666666666667,0.5,1,0.33333333333333337],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                            encroach:{'T':1,'a':1,'t':1,'v':1,'x':1},
                        },
                        'p':{
                            //vector: [ 0.0/0.7,0.0, 0.5/0.7,0.0, 0.7/0.7,0.2, 0.7/0.7,0.4, 0.5/0.7,0.6, 0.2/0.7,0.6, 0.2/0.7,0.4, 0.4/0.7,0.4, 0.5/0.7,0.3, 0.4/0.7,0.2, 0.2/0.7,0.2, 0.2/0.7,1.0, 0.0/0.7,1.0 ]
                            vector:[0.28571428571428575,1,0,1,0,0,0,0,0.7142857142857143,0,1,0.2,1,0.2,1,0.4,0.7142857142857143,0.6,0.7142857142857143,0.6,0.28571428571428575,0.6,0.28571428571428575,0.4,0.28571428571428575,0.2,0.28571428571428575,1,0,0,0.7142857142857143,0.6,0.28571428571428575,0.4,0.5714285714285715,0.4,0.5714285714285715,0.2,0.28571428571428575,0.2,0,0,1,0.2,0.7142857142857143,0.6,0.5714285714285715,0.4,0.5714285714285715,0.2,0,0,1,0.2,1,0.2,0.5714285714285715,0.4,0.7142857142857143,0.3,0.7142857142857143,0.3,0.5714285714285715,0.2,1,0.2],
                            ratio:{x:0.7}, offset:{y:0.4},
                        },
                        'q':{
                            //vector: [ 0.2/0.7,0.0, 0.7/0.7,0.0, 0.7/0.7,1.0, 0.5/0.7,1.0, 0.5/0.7,0.2, 0.3/0.7,0.2, 0.2/0.7,0.3, 0.3/0.7,0.4, 0.5/0.7,0.4, 0.5/0.7,0.6, 0.2/0.7,0.6, 0.0/0.7,0.4, 0.0/0.7,0.2 ]
                            vector:[0,0.4,0,0.2,0.28571428571428575,0,1,0,1,1,0.7142857142857143,1,0.4285714285714286,0.4,0.7142857142857143,0.4,0.7142857142857143,0.6,0.7142857142857143,0.6,0.28571428571428575,0.6,0,0.4,1,0,0.7142857142857143,1,0.7142857142857143,0.2,0.4285714285714286,0.4,0.7142857142857143,0.6,0,0.4,0.28571428571428575,0,1,0,0.7142857142857143,0.2,0.28571428571428575,0.3,0.4285714285714286,0.4,0,0.4,0.28571428571428575,0,0.7142857142857143,0.2,0.4285714285714286,0.2,0.4285714285714286,0.2,0.28571428571428575,0.3,0,0.4,0,0.4,0.28571428571428575,0,0.4285714285714286,0.2],
                            ratio:{x:0.7}, offset:{y:0.4},
                        },
                        'r':{
                            //vector: [ 0.0/0.7,0.0/0.6, 0.2/0.7,0.0/0.6, 0.2/0.7,0.1/0.6, 0.4/0.7,0.0/0.6, 0.7/0.7,0.1/0.6, 0.7/0.7,0.3/0.6, 0.4/0.7,0.2/0.6, 0.2/0.7,0.3/0.6, 0.2/0.7,0.6/0.6, 0.0/0.7,0.6/0.6 ]
                            vector:[0.28571428571428575,1,0,1,0,0,0,0,0.28571428571428575,0,0.28571428571428575,0.16666666666666669,0.28571428571428575,0.16666666666666669,0.5714285714285715,0,1,0.16666666666666669,1,0.16666666666666669,1,0.5,0.5714285714285715,0.33333333333333337,0.28571428571428575,0.5,0.28571428571428575,1,0,0,0.28571428571428575,0.16666666666666669,1,0.16666666666666669,0.5714285714285715,0.33333333333333337,0.28571428571428575,0.5,0,0,0.28571428571428575,0.16666666666666669,0.28571428571428575,0.16666666666666669,0.5714285714285715,0.33333333333333337,0.28571428571428575,0.5],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                        },
                        's':{
                            //vector: [ 0.2/0.8,0.0/0.8, 0.7/0.8,0.0/0.8, 0.8/0.8,0.2/0.8, 0.3/0.8,0.2/0.8, 0.25/0.8,0.3/0.8, 0.7/0.8,0.3/0.8, 0.8/0.8,0.6/0.8, 0.6/0.8,0.8/0.8, 0.1/0.8,0.8/0.8, 0.0/0.8,0.6/0.8, 0.5/0.8,0.6/0.8, 0.55/0.8,0.5/0.8, 0.1/0.8,0.5/0.8, 0.0/0.8,0.2/0.8 ]
                            vector:[0.125,0.625,0,0.25,0.25,0,0.25,0,0.8749999999999999,0,1,0.25,0.3125,0.37499999999999994,0.8749999999999999,0.37499999999999994,1,0.7499999999999999,1,0.7499999999999999,0.7499999999999999,1,0.125,1,0.125,1,0,0.7499999999999999,0.625,0.7499999999999999,0.25,0,1,0.25,0.37499999999999994,0.25,1,0.7499999999999999,0.125,1,0.625,0.7499999999999999,0.125,0.625,0.25,0,0.37499999999999994,0.25,1,0.7499999999999999,0.625,0.7499999999999999,0.6875,0.625,0.125,0.625,0.37499999999999994,0.25,0.3125,0.37499999999999994,0.3125,0.37499999999999994,1,0.7499999999999999,0.6875,0.625,0.6875,0.625,0.125,0.625,0.3125,0.37499999999999994],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                        },
                        't':{
                            //vector: [ 0.2/0.6,0.0, 0.4/0.6,0.0, 0.4/0.6,0.2, 0.6/0.6,0.2, 0.6/0.6,0.4, 0.4/0.6,0.4, 0.4/0.6,1.0, 0.2/0.6,1.0, 0.2/0.6,0.4, 0.0/0.6,0.4, 0.0/0.6,0.2, 0.2/0.6,0.2 ]
                            vector:[0.33333333333333337,0.2,0.33333333333333337,0,0.6666666666666667,0,0.6666666666666667,0.2,1,0.2,1,0.4,0.6666666666666667,0.4,0.6666666666666667,1,0.33333333333333337,1,0.33333333333333337,0.4,0,0.4,0,0.2,0.33333333333333337,0.2,0.6666666666666667,0,0.6666666666666667,0.2,0.6666666666666667,0.2,1,0.4,0.6666666666666667,0.4,0.6666666666666667,0.4,0.33333333333333337,1,0.33333333333333337,0.4,0.33333333333333337,0.4,0,0.2,0.33333333333333337,0.2,0.33333333333333337,0.2,0.6666666666666667,0.2,0.6666666666666667,0.4,0.6666666666666667,0.4,0.33333333333333337,0.4,0.33333333333333337,0.2],
                            ratio:{x:0.6},
                            encroach:{'a':1,'h':1,'l':1,'n':1,'o':1,'p':1,'r':1,'s':1,'u':1},
                        },
                        'u':{
                            //vector: [ 0.0/0.7,0.0/0.6, 0.2/0.7,0.0/0.6, 0.2/0.7,0.3/0.6, 0.3/0.7,0.4/0.6, 0.5/0.7,0.4/0.6, 0.5/0.7,0.0/0.6, 0.7/0.7,0.0/0.6, 0.7/0.7,0.6/0.6, 0.2/0.7,0.6/0.6, 0.0/0.7,0.4/0.6 ]
                            vector:[0.28571428571428575,1,0,0.6666666666666667,0,0,0,0,0.28571428571428575,0,0.28571428571428575,0.5,0.7142857142857143,0.6666666666666667,0.7142857142857143,0,1,0,0.28571428571428575,1,0,0,0.28571428571428575,0.5,0.7142857142857143,0.6666666666666667,1,0,1,1,0.28571428571428575,1,0.28571428571428575,0.5,0.4285714285714286,0.6666666666666667,0.4285714285714286,0.6666666666666667,0.7142857142857143,0.6666666666666667,1,1,1,1,0.28571428571428575,1,0.4285714285714286,0.6666666666666667],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                            encroach:{'A':1,'a':0.5},
                        },
                        'v':{
                            //vector: [ 0.0/0.7,0.0/0.6, 0.2/0.7,0.0/0.6, 0.35/0.7,0.35/0.6, 0.5/0.7,0.0/0.6, 0.7/0.7,0.0/0.6, 0.45/0.7,0.6/0.6, 0.25/0.7,0.6/0.6 ]
                            vector:[0.6428571428571429,1,0.35714285714285715,1,0,0,0,0,0.28571428571428575,0,0.5,0.5833333333333334,0.5,0.5833333333333334,0.7142857142857143,0,1,0,0.6428571428571429,1,0,0,0.5,0.5833333333333334,0.5,0.5833333333333334,1,0,0.6428571428571429,1],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                            encroach:{'a':1},
                        },
                        'w':{
                            //vector: [ 0.0/1.2,0.0/0.6, 0.2/1.2,0.0/0.6, 0.2/1.2,0.3/0.6, 0.3/1.2,0.4/0.6, 0.5/1.2,0.4/0.6, 0.5/1.2,0.0/0.6, 0.7/1.2,0.0/0.6, 0.7/1.2,0.3/0.6, 0.8/1.2,0.4/0.6, 1.0/1.2,0.4/0.6, 1.0/1.2,0.0/0.6, 1.2/1.2,0.0/0.6, 1.2/1.2,0.6/0.6, 0.2/1.2,0.6/0.6, 0.0/1.2,0.4/0.6 ]
                            vector:[0.16666666666666669,1,0,0.6666666666666667,0,0,0,0,0.16666666666666669,0,0.16666666666666669,0.5,0.4166666666666667,0.6666666666666667,0.4166666666666667,0,0.5833333333333334,0,0.8333333333333334,0.6666666666666667,0.8333333333333334,0,1,0,0.16666666666666669,1,0,0,0.16666666666666669,0.5,0.4166666666666667,0.6666666666666667,0.5833333333333334,0,0.5833333333333334,0.5,0.8333333333333334,0.6666666666666667,1,0,1,1,0.16666666666666669,1,0.16666666666666669,0.5,0.25,0.6666666666666667,0.4166666666666667,0.6666666666666667,0.5833333333333334,0.5,0.6666666666666667,0.6666666666666667,0.6666666666666667,0.6666666666666667,0.8333333333333334,0.6666666666666667,1,1,1,1,0.16666666666666669,1,0.25,0.6666666666666667,0.4166666666666667,0.6666666666666667,0.6666666666666667,0.6666666666666667,1,1,1,1,0.25,0.6666666666666667,0.4166666666666667,0.6666666666666667],
                            ratio:{x:1.2,y:0.6}, offset:{y:0.4},
                        },
                        'x':{
                            //vector: [ 0.0/0.7,0.0/0.6, 0.2/0.7,0.0/0.6, 0.35/0.7,0.175/0.6, 0.5/0.7,0.0/0.6, 0.7/0.7,0.0/0.6, 0.45/0.7,0.3/0.6, 0.7/0.7,0.6/0.6, 0.5/0.7,0.6/0.6, 0.35/0.7,0.425/0.6, 0.2/0.7,0.6/0.6, 0.0/0.7,0.6/0.6, 0.25/0.7,0.3/0.6 ]
                            vector:[0.35714285714285715,0.5,0,0,0.28571428571428575,0,0.5,0.2916666666666667,0.7142857142857143,0,1,0,0.6428571428571429,0.5,1,1,0.7142857142857143,1,0.5,0.7083333333333334,0.28571428571428575,1,0,1,0.35714285714285715,0.5,0.28571428571428575,0,0.5,0.2916666666666667,0.5,0.2916666666666667,1,0,0.6428571428571429,0.5,0.6428571428571429,0.5,0.7142857142857143,1,0.5,0.7083333333333334,0.5,0.7083333333333334,0,1,0.35714285714285715,0.5,0.35714285714285715,0.5,0.5,0.2916666666666667,0.6428571428571429,0.5,0.6428571428571429,0.5,0.5,0.7083333333333334,0.35714285714285715,0.5],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                        },
                        'y':{
                            //vector: [ 0.0/0.7,0.0/1.1, 0.2/0.7,0.0/1.1, 0.2/0.7,0.3/1.1, 0.3/0.7,0.4/1.1, 0.5/0.7,0.4/1.1, 0.5/0.7,0.0/1.1, 0.7/0.7,0.0/1.1, 0.7/0.7,0.9/1.1, 0.5/0.7,1.1/1.1, 0.2/0.7,1.1/1.1, 0.0/0.7,0.9/1.1, 0.0/0.7,0.8/1.1, 0.2/0.7,0.8/1.1, 0.3/0.7,0.9/1.1, 0.4/0.7,0.9/1.1, 0.5/0.7,0.8/1.1, 0.5/0.7,0.6/1.1, 0.2/0.7,0.6/1.1, 0.0/0.7,0.4/1.1 ]
                            vector:[0.28571428571428575,0.5454545454545454,0,0.36363636363636365,0,0,0,0,0.28571428571428575,0,0.28571428571428575,0.2727272727272727,0.7142857142857143,0.36363636363636365,0.7142857142857143,0,1,0,1,0,1,0.8181818181818181,0.7142857142857143,1,0.7142857142857143,1,0.28571428571428575,1,0,0.8181818181818181,0,0.8181818181818181,0,0.7272727272727273,0.28571428571428575,0.7272727272727273,0.28571428571428575,0.5454545454545454,0,0,0.28571428571428575,0.2727272727272727,0.7142857142857143,1,0,0.8181818181818181,0.28571428571428575,0.7272727272727273,0.28571428571428575,0.5454545454545454,0.28571428571428575,0.2727272727272727,0.4285714285714286,0.36363636363636365,0.7142857142857143,1,0.28571428571428575,0.7272727272727273,0.4285714285714286,0.8181818181818181,0.7142857142857143,0.5454545454545454,0.28571428571428575,0.5454545454545454,0.4285714285714286,0.36363636363636365,0.7142857142857143,1,0.4285714285714286,0.8181818181818181,0.5714285714285715,0.8181818181818181,0.7142857142857143,0.5454545454545454,0.4285714285714286,0.36363636363636365,0.7142857142857143,0.36363636363636365,0.7142857142857143,1,0.5714285714285715,0.8181818181818181,0.7142857142857143,0.7272727272727273,0.7142857142857143,0.5454545454545454,0.7142857142857143,0.36363636363636365,1,0,1,0,0.7142857142857143,1,0.7142857142857143,0.7272727272727273,0.7142857142857143,0.7272727272727273,0.7142857142857143,0.5454545454545454,1,0],
                            ratio:{x:0.7,y:1.1}, offset:{y:0.4},
                            encroach:{'a':1},
                        },
                        'z':{
                            //vector: [ 0.0/0.7,0.0/0.6, 0.7/0.7,0.0/0.6, 0.7/0.7,0.2/0.6, 0.35/0.7,0.2/0.6, 0.7/0.7,0.4/0.6, 0.7/0.7,0.6/0.6, 0.0/0.7,0.6/0.6, 0.0/0.7,0.4/0.6, 0.35/0.7,0.4/0.6, 0.0/0.7,0.2/0.6 ]
                            vector:[0.5,0.6666666666666667,0,0.33333333333333337,0,0,0,0,1,0,1,0.33333333333333337,0.5,0.33333333333333337,1,0.6666666666666667,1,1,1,1,0,1,0,0.6666666666666667,0,0,1,0.33333333333333337,0.5,0.33333333333333337,1,1,0,0.6666666666666667,0.5,0.6666666666666667,0.5,0.6666666666666667,0,0,0.5,0.33333333333333337,0.5,0.33333333333333337,1,1,0.5,0.6666666666666667],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                        },
                    
                    
                        '0':{ 
                            //vector: [ 0.2,0, 0.8,0, 1,0.3, 1,0.7, 0.8,1, 0.2,1, 0,0.7, 0,0.3, 0.2,0, 0.3,0.2, 0.2,0.4, 0.2,0.6, 0.3,0.8, 0.7,0.8, 0.8,0.6, 0.8,0.4, 0.7,0.2, 0.3,0.2 ] 
                            vector:[0.7,0.2,0.3,0.2,0.2,0,0.2,0,0.8,0,1,0.3,1,0.3,1,0.7,0.8,1,0.8,1,0.2,1,0,0.7,0,0.7,0,0.3,0.2,0,0.2,0,0.3,0.2,0.2,0.4,0.7,0.2,0.2,0,1,0.3,0,0.7,0.2,0,0.2,0.4,0.8,0.4,0.7,0.2,1,0.3,0,0.7,0.2,0.4,0.2,0.6,0.8,0.6,0.8,0.4,1,0.3,0,0.7,0.2,0.6,0.3,0.8,0.7,0.8,0.8,0.6,1,0.3,0.8,1,0,0.7,0.3,0.8,0.7,0.8,1,0.3,0.8,1,0.8,1,0.3,0.8,0.7,0.8],
                        },
                        '1':{ 
                            //vector: [ 1/2,0, 2/3,0, 2/3,0.8, 1,0.8, 1,1, 0,1, 0,0.8, 1/3,0.8, 1/3,0.3, 0,0.3, 0,0.2 ] ratio:{x:2/3} 
                            vector:[0,0.3,0,0.2,0.5,0,0.5,0,0.6666666666666666,0,0.6666666666666666,0.8,0.6666666666666666,0.8,1,0.8,1,1,1,1,0,1,0,0.8,0.3333333333333333,0.3,0,0.3,0.5,0,1,1,0,0.8,0.3333333333333333,0.8,0.3333333333333333,0.8,0.3333333333333333,0.3,0.5,0,0.6666666666666666,0.8,1,1,0.3333333333333333,0.8,0.3333333333333333,0.8,0.5,0,0.6666666666666666,0.8],
                        },
                        '2':{ 
                            //vector: [ 0,0.2, 0.2,0, 0.8,0, 1,0.2, 1,0.5, 0.4,0.8, 1,0.8, 1,1, 0,1, 0,0.8, 0.8,0.4, 0.7,0.2, 0.3,0.2, 0.2,0.3, 0,0.3 ] 
                            vector:[0.2,0.3,0,0.3,0,0.2,0,0.2,0.2,0,0.8,0,0.8,0,1,0.2,1,0.5,0.4,0.8,1,0.8,1,1,1,1,0,1,0,0.8,0.3,0.2,0.2,0.3,0,0.2,0.4,0.8,1,1,0,0.8,0.3,0.2,0,0.2,0.8,0,1,0.5,0.4,0.8,0,0.8,0.7,0.2,0.3,0.2,0.8,0,1,0.5,0,0.8,0.8,0.4,0.8,0.4,0.7,0.2,0.8,0,0.8,0,1,0.5,0.8,0.4],
                        },
                        '3':{ 
                            //vector: [ 0,0.2, 0.2,0, 0.8,0, 1,0.2, 1,0.4, 0.9,0.5, 1,0.6, 1,0.8, 0.8,1, 0.2,1, 0,0.8, 0.2,0.7, 0.3,0.8, 0.7,0.8, 0.8,0.7, 0.7,0.6, 0.4,0.6, 0.4,0.4, 0.7,0.4, 0.8,0.3, 0.7,0.2, 0.3,0.2, 0.2,0.3 ] 
                            vector:[0.3,0.2,0.2,0.3,0,0.2,0,0.2,0.2,0,0.8,0,0.8,0,1,0.2,1,0.4,0.9,0.5,1,0.6,1,0.8,1,0.8,0.8,1,0.2,1,0.2,1,0,0.8,0.2,0.7,0.7,0.6,0.4,0.6,0.4,0.4,0.3,0.2,0,0.2,0.8,0,0.8,0,1,0.4,0.9,0.5,0.2,1,0.2,0.7,0.3,0.8,0.7,0.6,0.4,0.4,0.7,0.4,0.7,0.2,0.3,0.2,0.8,0,0.2,1,0.3,0.8,0.7,0.8,0.8,0.7,0.7,0.6,0.7,0.4,0.8,0.3,0.7,0.2,0.8,0,1,0.8,0.2,1,0.7,0.8,0.8,0.7,0.7,0.4,0.8,0.3,0.8,0.3,0.8,0,0.9,0.5,1,0.8,0.7,0.8,0.8,0.7,0.8,0.7,0.8,0.3,0.9,0.5,0.9,0.5,1,0.8,0.8,0.7],
                        },
                        '4':{ 
                            //vector: [ 0.6,0, 0.8,0, 0.8,0.6, 1,0.6, 1,0.8, 0.8,0.8, 0.8,1, 0.6,1, 0.6,0.3, 0.3,0.6, 0.6,0.6, 0.6,0.8, 0,0.8, 0,0.6 ] 
                            vector:[0,0.8,0,0.6,0.6,0,0.6,0,0.8,0,0.8,0.6,0.8,0.6,1,0.6,1,0.8,0.8,0.8,0.8,1,0.6,1,0.3,0.6,0.6,0.6,0.6,0.8,0.8,0.6,1,0.8,0.8,0.8,0.8,0.8,0.6,1,0.6,0.3,0.3,0.6,0.6,0.8,0,0.8,0.6,0,0.8,0.6,0.8,0.8,0.6,0.3,0.3,0.6,0,0.8,0.6,0,0.8,0.8,0.6,0.3,0.6,0.3,0,0.8,0.6,0],
                        },
                        '5':{ 
                            //vector: [ 0,0, 1,0, 1,0.2, 0.2,0.2, 0.2,0.4, 0.9,0.4, 1,0.5, 1,0.8, 0.8,1, 0.1,1, 0,0.9, 0,0.7, 0.2,0.7, 0.2,0.8, 0.7,0.8, 0.8,0.7, 0.8,0.6, 0,0.6 ] 
                            vector:[0,0,1,0,1,0.2,0.2,0.4,0.9,0.4,1,0.5,1,0.5,1,0.8,0.8,1,0.8,1,0.1,1,0,0.9,0,0.9,0,0.7,0.2,0.7,0,0,1,0.2,0.2,0.2,0,0.9,0.2,0.7,0.2,0.8,0,0.6,0,0,0.2,0.2,0.8,1,0,0.9,0.2,0.8,0,0.6,0.2,0.2,0.2,0.4,0.8,1,0.2,0.8,0.7,0.8,0.8,0.6,0,0.6,0.2,0.4,0.8,1,0.7,0.8,0.8,0.7,0.8,0.6,0.2,0.4,1,0.5,1,0.5,0.8,1,0.8,0.7,0.8,0.7,0.8,0.6,1,0.5],
                        },
                        '6':{ 
                            //vector: [ 0.2,0, 0.8,0, 1,0.2, 1,0.3, 0.8,0.3, 0.7,0.2, 0.3,0.2, 0.2,0.3, 0.3,0.4, 0.8,0.4, 1,0.6, 1,0.8, 0.8,1, 0.2,1, 0,0.8, 0,0.2, 0.2,0.6, 0.2,0.7, 0.3,0.8, 0.7,0.8, 0.8,0.7, 0.7,0.6, 0.2,0.6, 0,0.2 ] 
                            vector:[0,0.2,0.2,0,0.8,0,0.8,0,1,0.2,1,0.3,1,0.3,0.8,0.3,0.7,0.2,0.3,0.4,0.8,0.4,1,0.6,1,0.6,1,0.8,0.8,1,0.8,1,0.2,1,0,0.8,0,0.8,0,0.2,0.2,0.6,0.8,0,1,0.3,0.7,0.2,0,0.8,0.2,0.6,0.2,0.7,0.8,0,0.7,0.2,0.3,0.2,0,0.8,0.2,0.7,0.3,0.8,0,0.2,0.8,0,0.3,0.2,0.8,1,0,0.8,0.3,0.8,0,0.2,0.3,0.2,0.2,0.3,0.8,1,0.3,0.8,0.7,0.8,0.2,0.6,0,0.2,0.2,0.3,1,0.6,0.8,1,0.7,0.8,0.2,0.6,0.2,0.3,0.3,0.4,1,0.6,0.7,0.8,0.8,0.7,0.7,0.6,0.2,0.6,0.3,0.4,1,0.6,0.8,0.7,0.7,0.6,0.7,0.6,0.3,0.4,1,0.6],
                        },
                        '7':{ 
                            //vector: [ 0,0, 1,0, 1,0.2, 0.5,1, 0.25,1, 0.75,0.2, 0,0.2 ] 
                            vector:[0.75,0.2,0,0.2,0,0,0,0,1,0,1,0.2,1,0.2,0.5,1,0.25,1,0.75,0.2,0,0,1,0.2,1,0.2,0.25,1,0.75,0.2],
                        },
                        '8':{ 
                            //vector: [ 0.2,0, 0.8,0, 1,0.2, 1,0.4, 0.9,0.5, 1,0.6, 1,0.8, 0.8,1, 0.2,1, 0,0.8, 0,0.6, 0.2,0.7, 0.3,0.8, 0.7,0.8, 0.8,0.7, 0.7,0.6, 0.3,0.6, 0.2,0.7, 0,0.6, 0.1,0.5, 0,0.4, 0,0.2, 0.2,0.3, 0.3,0.4, 0.7,0.4, 0.8,0.3, 0.7,0.2, 0.3,0.2, 0.2,0.3, 0,0.2 ] 
                            vector:[0.2,0.3,0,0.2,0.2,0,0.2,0,0.8,0,1,0.2,1,0.2,1,0.4,0.9,0.5,0.9,0.5,1,0.6,1,0.8,1,0.8,0.8,1,0.2,1,0.2,1,0,0.8,0,0.6,0,0.6,0.2,0.7,0.3,0.8,0.3,0.6,0.2,0.7,0,0.6,0.1,0.5,0,0.4,0,0.2,0,0.2,0.2,0.3,0.3,0.4,0.3,0.2,0.2,0.3,0.2,0,0.2,1,0,0.6,0.3,0.8,0.3,0.6,0,0.6,0.1,0.5,0.1,0.5,0,0.2,0.3,0.4,0.7,0.2,0.3,0.2,0.2,0,0.2,1,0.3,0.8,0.7,0.8,0.7,0.6,0.3,0.6,0.1,0.5,0.1,0.5,0.3,0.4,0.7,0.4,0.7,0.2,0.2,0,1,0.2,1,0.8,0.2,1,0.7,0.8,0.7,0.6,0.1,0.5,0.7,0.4,0.8,0.3,0.7,0.2,1,0.2,1,0.8,0.7,0.8,0.8,0.7,0.8,0.7,0.7,0.6,0.7,0.4,0.7,0.4,0.8,0.3,1,0.2,0.9,0.5,1,0.8,0.8,0.7,0.8,0.7,0.7,0.4,1,0.2,1,0.2,0.9,0.5,0.8,0.7],
                        },
                        '9':{ 
                            //vector: [ 0.8,1, 0.2,1, 0,0.8, 0,0.7, 0.2,0.7, 0.3,0.8, 0.7,0.8, 0.8,0.7, 0.7,0.6, 0.2,0.6, 0,0.4, 0,0.2, 0.2,0, 0.8,0, 1,0.2, 1,0.8, 0.8,0.4, 0.8,0.3, 0.7,0.2, 0.3,0.2, 0.2,0.3, 0.3,0.4, 0.8,0.4, 1,0.8 ] 
                            vector:[1,0.8,0.8,1,0.2,1,0.2,1,0,0.8,0,0.7,0,0.7,0.2,0.7,0.3,0.8,0.7,0.6,0.2,0.6,0,0.4,0,0.4,0,0.2,0.2,0,0.2,0,0.8,0,1,0.2,1,0.2,1,0.8,0.8,0.4,0.2,1,0,0.7,0.3,0.8,1,0.2,0.8,0.4,0.8,0.3,0.2,1,0.3,0.8,0.7,0.8,1,0.2,0.8,0.3,0.7,0.2,1,0.8,0.2,1,0.7,0.8,0.2,0,1,0.2,0.7,0.2,1,0.8,0.7,0.8,0.8,0.7,0.2,0,0.7,0.2,0.3,0.2,0.8,0.4,1,0.8,0.8,0.7,0,0.4,0.2,0,0.3,0.2,0.8,0.4,0.8,0.7,0.7,0.6,0,0.4,0.3,0.2,0.2,0.3,0.3,0.4,0.8,0.4,0.7,0.6,0,0.4,0.2,0.3,0.3,0.4,0.3,0.4,0.7,0.6,0,0.4],
                        },
                    
                    
                        '.':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.2, y:0.2}, offset:{y:0.8},
                        },
                        ',':{
                            //vector: [ 0.2,0., 1,0, 0.8,1, 0,1 ]
                            vector:[0.8,1,0,1,0.2,0,0.2,0,1,0,0.8,1],
                            ratio:{x:0.2, y:0.4}, offset:{y:0.8},
                        },
                        ':':{
                            //vector: [ 0,0, 1,0, 1,0.3, 0,0.3, 0,0.7, 1,0.7, 1,1, 0,1 ]
                            vector:[0,0,1,0,1,0.3,0,0.7,1,0.7,1,1,0,0,1,0.3,0,0.3,0,0.7,1,1,0,1],
                            ratio:{x:0.2, y:0.8}, offset:{y:0.1},
                        },
                        ';':{
                            //vector: [ 0.2,0, 1,0, 1,0.3, 0.2,0.3, 0.2,0.7, 1,0.7, 0.8,1, 0,1, 0.2,0.7 ]
                            vector:[0.2,0,1,0,1,0.3,1,0.7,0.8,1,0,1,0.2,0,1,0.3,0.2,0.3,1,0.7,0,1,0.2,0.7],
                            ratio:{x:0.2, y:0.8}, offset:{y:0.1},
                        },
                        '?':{
                            //vector: [ 0,0.4, 0,0.1, 0.1,0, 0.9,0, 1,0.1, 1,0.5, 0.9,0.6, 0.6,0.6, 0.6,0.7, 0.4,0.7, 0.4,0.8, 0.6,0.8, 0.6,1, 0.4,1, 0.4,0.8, 0.4,0.7, 0.4,0.5, 0.5,0.4, 0.8,0.4, 0.8,0.2, 0.2,0.2, 0.2,0.4 ]
                            vector:[0.2,0.2,0.2,0.4,0,0.4,0,0.4,0,0.1,0.1,0,0.1,0,0.9,0,1,0.1,1,0.1,1,0.5,0.9,0.6,0.6,0.8,0.6,1,0.4,1,0.4,0.5,0.5,0.4,0.8,0.4,0.2,0.2,0,0.4,0.1,0,0.8,0.2,0.2,0.2,0.1,0,0.8,0.2,0.1,0,1,0.1,0.8,0.4,0.8,0.2,1,0.1,0.8,0.4,1,0.1,0.9,0.6,0.4,0.5,0.8,0.4,0.9,0.6,0.4,0.5,0.9,0.6,0.6,0.6,0.4,0.5,0.6,0.6,0.6,0.7,0.4,0.5,0.6,0.7,0.4,0.7,0.4,0.8,0.6,0.8,0.4,1],
                            encroach:{'a':2},
                        },
                        '!':{
                            //vector: [ 0,0, 1,0, 1,0.7, 0,0.7, 0,0.8, 1,0.8, 1,1, 0,1 ]
                            vector:[0,0,1,0,1,0.7,0,0.8,1,0.8,1,1,0,0,1,0.7,0,0.7,0,0.8,1,1,0,1],
                            ratio:{x:0.2},
                        },
                        '/':{
                            //vector: [ 0.3,0, 1,0, 0.7,1, 0,1 ]
                            vector:[0.7,1,0,1,0.3,0,0.3,0,1,0,0.7,1],
                            ratio:{x:1/4},
                        },
                       '\\':{
                            //vector: [ 0.7,0, 0,0, 0.3,1, 1,1 ]
                            vector:[0,0,0.7,0,1,1,1,1,0.3,1,0,0],
                            ratio:{x:1/4},
                        },
                        '(':{
                            //vector: [ 0.6,0, 1,0, 0.6,0.2, 0.4,0.5, 0.6,0.8, 1,1, 0.6,1, 0.2,0.8, 0,0.5, 0.2,0.2 ]
                            vector:[0,0.5,0.2,0.2,0.6,0,0.6,0,1,0,0.6,0.2,0.6,0.8,1,1,0.6,1,0.6,1,0.2,0.8,0,0.5,0,0.5,0.6,0,0.6,0.2,0.4,0.5,0.6,0.8,0.6,1,0,0.5,0.6,0.2,0.4,0.5,0.4,0.5,0.6,1,0,0.5],
                            ratio:{x:0.4},
                        },
                        ')':{
                            //vector: [ 0.4,0, 0,0, 0.4,0.2, 0.6,0.5, 0.4,0.8, 0,1, 0.4,1, 0.8,0.8, 1,0.5, 0.8,0.2 ]
                            vector:[0,0,0.4,0,0.8,0.2,0.8,0.2,1,0.5,0.8,0.8,0.8,0.8,0.4,1,0,1,0.4,0.2,0,0,0.8,0.2,0.8,0.8,0,1,0.4,0.8,0.6,0.5,0.4,0.2,0.8,0.2,0.8,0.2,0.8,0.8,0.4,0.8,0.4,0.8,0.6,0.5,0.8,0.2],
                            ratio:{x:0.4},
                            encroach:{'p':1},
                        },
                        '[':{
                            //vector: [ 0,0, 1,0, 1,0.2, 0.4,0.2, 0.4,0.8, 1,0.8, 1,1, 0,1 ]
                            vector:[0,0,1,0,1,0.2,0.4,0.8,1,0.8,1,1,0,0,1,0.2,0.4,0.2,0.4,0.8,1,1,0,1,0,1,0,0,0.4,0.2,0.4,0.2,0.4,0.8,0,1],
                            ratio:{x:0.4},
                        },
                        ']':{
                            //vector: [ 1,0, 0,0, 0,0.2, 0.6,0.2, 0.6,0.8, 0,0.8, 0,1, 1,1 ]
                            vector:[1,1,0,1,0,0.8,0.6,0.2,0,0.2,0,0,1,1,0,0.8,0.6,0.8,0.6,0.2,0,0,1,0,1,0,1,1,0.6,0.8,0.6,0.8,0.6,0.2,1,0],
                            ratio:{x:0.4},
                        },
                        '#':{
                            //vector: [ 0.2,0, 0.4,0, 0.38,0.2, 0.68,0.2, 0.7,0, 0.9,0, 0.88,0.2, 1,0.2, 1,0.4, 0.86,0.4, 0.84,0.6, 1,0.6, 1,0.8, 0.82,0.8, 0.8,1, 0.6,1, 0.62,0.8, 0.32,0.8, 0.3,1, 0.1,1, 0.12,0.8, 0,0.8, 0,0.6, 0.14,0.6, 0.16,0.4, 0,0.4, 0,0.2, 0.18,0.2, 0.36,0.4, 0.34,0.6, 0.64,0.6, 0.66,0.4, 0.36,0.4, 0.18,0.2 ]
                            vector:[0.36,0.4,0.18,0.2,0.2,0,0.2,0,0.4,0,0.38,0.2,0.68,0.2,0.7,0,0.9,0,0.88,0.2,1,0.2,1,0.4,0.84,0.6,1,0.6,1,0.8,0.82,0.8,0.8,1,0.6,1,0.32,0.8,0.3,1,0.1,1,0.12,0.8,0,0.8,0,0.6,0.16,0.4,0,0.4,0,0.2,0,0.2,0.18,0.2,0.36,0.4,0.36,0.4,0.2,0,0.38,0.2,0.68,0.2,0.9,0,0.88,0.2,0.88,0.2,1,0.4,0.86,0.4,0.84,0.6,1,0.8,0.82,0.8,0.82,0.8,0.6,1,0.62,0.8,0.32,0.8,0.1,1,0.12,0.8,0.12,0.8,0,0.6,0.14,0.6,0.16,0.4,0,0.2,0.36,0.4,0.66,0.4,0.36,0.4,0.38,0.2,0.68,0.2,0.88,0.2,0.86,0.4,0.84,0.6,0.82,0.8,0.62,0.8,0.32,0.8,0.12,0.8,0.14,0.6,0.14,0.6,0.16,0.4,0.36,0.4,0.66,0.4,0.38,0.2,0.68,0.2,0.68,0.2,0.86,0.4,0.84,0.6,0.84,0.6,0.62,0.8,0.32,0.8,0.32,0.8,0.14,0.6,0.36,0.4,0.66,0.4,0.68,0.2,0.84,0.6,0.32,0.8,0.36,0.4,0.34,0.6,0.64,0.6,0.66,0.4,0.84,0.6,0.32,0.8,0.34,0.6,0.64,0.6,0.64,0.6,0.84,0.6,0.32,0.8],
                        },
                        '-':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.5, y:0.2}, offset:{y:0.4},
                        },
                        '_':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{y:0.2}, offset:{y:1},
                        },
                        "'":{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.2, y:0.4},
                        },
                        '"':{
                            //vector: [ 0.4,0, 0,0, 0,1, 0.4,1, 0.4,0, 0.6,0, 0.6,1, 1,1, 1,0 ]
                            vector:[1,0,1,1,0.6,1,0.4,1,0,1,0,0,1,0,0.6,1,0.6,0,0.4,1,0,0,0.4,0],
                            ratio:{x:0.5, y:0.4},
                        },
                        '|':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.2},
                        },
                        '>':{
                            //vector: [ 0,0, 1,0.4, 1,0.6, 0,1, 0,0.8, 0.7,0.5, 0,0.2 ]
                            vector:[0.7,0.5,0,0.2,0,0,0,0,1,0.4,1,0.6,1,0.6,0,1,0,0.8,0.7,0.5,0,0,1,0.6,1,0.6,0,0.8,0.7,0.5],
                        },
                        '<':{
                            //vector: [ 1,0, 0,0.4, 0,0.6, 1,1, 1,0.8, 0.3,0.5, 1,0.2 ]
                            vector:[0,0.4,1,0,1,0.2,0.3,0.5,1,0.8,1,1,1,1,0,0.6,0,0.4,0,0.4,1,0.2,0.3,0.5,0.3,0.5,1,1,0,0.4],
                        },
                        '+':{
                            //vector: [ 0.3,0, 0.7,0, 0.7,0.3, 1,0.3, 1,0.7, 0.7,0.7, 0.7,1, 0.3,1, 0.3,0.7, 0,0.7, 0,0.3, 0.3,0.3 ]
                            vector:[0.3,0.3,0.3,0,0.7,0,0.7,0.3,1,0.3,1,0.7,0.7,0.7,0.7,1,0.3,1,0.3,0.7,0,0.7,0,0.3,0.3,0.3,0.7,0,0.7,0.3,0.7,0.3,1,0.7,0.7,0.7,0.7,0.7,0.3,1,0.3,0.7,0.3,0.7,0,0.3,0.3,0.3,0.3,0.3,0.7,0.3,0.7,0.7,0.7,0.7,0.3,0.7,0.3,0.3],
                            ratio:{x:0.5, y:0.5}, offset:{y:0.25}
                        },
                        '=':{
                            //vector: [ 0,0, 1,0, 1,0.3, 0,0.3, 0,0.7, 1,0.7, 1,1, 0,1 ]
                            vector:[0,0,1,0,1,0.3,0,0.7,1,0.7,1,1,0,0,1,0.3,0,0.3,0,0.7,1,1,0,1],
                            ratio:{x:0.8, y:0.5}, offset:{y:0.25}
                        },
                        '&':{
                            //vector: [ 0.1,0, 0.6,0, 0.7,0.2, 0.7,0.4, 0.6,0.5, 0.4,0.6, 0.6,0.7, 0.8,0.5, 0.9,0.6, 0.9,0.7, 0.8,0.8, 1,0.8, 1,1, 0.8,1, 0.6,0.9, 0.5,1, 0.1,1, 0,0.9, 0,0.6, 0.1,0.5, 0.2,0.65, 0.2,0.8, 0.4,0.8, 0.2,0.65, 0,0.4, 0,0.3, 0.1,0, 0.2,0.2, 0.2,0.3, 0.3,0.4, 0.5,0.4, 0.5,0.2, 0.2,0.2 ]
                            vector:[0.5,0.2,0.2,0.2,0.1,0,0.1,0,0.6,0,0.7,0.2,0.7,0.2,0.7,0.4,0.6,0.5,0.6,0.7,0.8,0.5,0.9,0.6,0.9,0.6,0.9,0.7,0.8,0.8,0.8,0.8,1,0.8,1,1,1,1,0.8,1,0.6,0.9,0.6,0.9,0.5,1,0.1,1,0.1,1,0,0.9,0,0.6,0,0.6,0.1,0.5,0.2,0.65,0.4,0.8,0.2,0.65,0,0.4,0,0.4,0,0.3,0.1,0,0.1,0,0.2,0.2,0.2,0.3,0.5,0.2,0.1,0,0.7,0.2,0.7,0.2,0.6,0.5,0.4,0.6,0.6,0.7,0.9,0.6,0.8,0.8,0.8,0.8,1,1,0.6,0.9,0.1,1,0,0.6,0.2,0.65,0,0.4,0.1,0,0.2,0.3,0.5,0.4,0.5,0.2,0.7,0.2,0.4,0.6,0.6,0.7,0.8,0.8,0.8,0.8,0.6,0.9,0.1,1,0.1,1,0.2,0.65,0.2,0.8,0.4,0.8,0,0.4,0.2,0.3,0.5,0.4,0.7,0.2,0.4,0.6,0.1,1,0.2,0.8,0.4,0.8,0.4,0.8,0.2,0.3,0.3,0.4,0.3,0.4,0.5,0.4,0.4,0.6,0.8,0.8,0.1,1,0.4,0.8,0.4,0.8,0.3,0.4,0.4,0.6,0.4,0.6,0.8,0.8,0.4,0.8],
                        },
                        '*':{
                            //vector: [ 0.4,0, 0.6,0, 0.6,0.25, 0.775,0.075, 0.925,0.225, 0.75,0.4, 1,0.4, 1,0.6, 0.75,0.6, 0.925,0.775, 0.775,0.925, 0.6,0.75, 0.6,1, 0.4,1, 0.4,0.75, 0.225,0.925, 0.075,0.775, 0.25,0.6, 0,0.6, 0,0.4, 0.25,0.4, 0.075,0.225, 0.225,0.075, 0.4,0.25 ]
                            vector:[0.4,0.25,0.4,0,0.6,0,0.6,0.25,0.775,0.075,0.925,0.225,0.75,0.4,1,0.4,1,0.6,0.75,0.6,0.925,0.775,0.775,0.925,0.6,0.75,0.6,1,0.4,1,0.4,0.75,0.225,0.925,0.075,0.775,0.25,0.6,0,0.6,0,0.4,0.25,0.4,0.075,0.225,0.225,0.075,0.4,0.25,0.6,0,0.6,0.25,0.6,0.25,0.925,0.225,0.75,0.4,0.75,0.4,1,0.6,0.75,0.6,0.75,0.6,0.775,0.925,0.6,0.75,0.6,0.75,0.4,1,0.4,0.75,0.4,0.75,0.075,0.775,0.25,0.6,0.25,0.6,0,0.4,0.25,0.4,0.25,0.4,0.225,0.075,0.4,0.25,0.4,0.25,0.6,0.25,0.75,0.4,0.75,0.4,0.75,0.6,0.6,0.75,0.6,0.75,0.4,0.75,0.25,0.6,0.25,0.6,0.25,0.4,0.4,0.25,0.4,0.25,0.75,0.4,0.6,0.75,0.6,0.75,0.25,0.6,0.4,0.25],
                            ratio:{x:0.5, y:0.5}, offset:{y:0.25}
                        },
                        '~':{
                            //vector: [ 0,0.25, 0.25,0.0, 0.75,0.5, 1,0.25, 1,0.75, 0.75,1, 0.25,0.5, 0,0.75 ]
                            vector:[0.25,0.5,0,0.75,0,0.25,0,0.25,0.25,0,0.75,0.5,0.75,0.5,1,0.25,1,0.75,1,0.75,0.75,1,0.25,0.5,0.25,0.5,0,0.25,0.75,0.5,0.75,0.5,1,0.75,0.25,0.5],
                            ratio:{x:0.8, y:0.4}, offset:{y:0.25},
                        },
                        '%':{
                            //vector: [ 0.8,0, 1,0.2, 0.2,1, 0,0.8, 0,0.2, 0,0.1, 0.1,0, 0.2,0, 0.3,0.1, 0.3,0.2, 0.3,0.2, 0.2,0.3, 0.1,0.3, 0,0.2, 0,0.8, 0.2,1, 0.8,1, 0.7,0.9, 0.7,0.8, 0.8,0.7, 0.9,0.7, 1,0.8, 1,0.9, 0.9,1, 0.8,1, 0.2,1, 0,0.8 ]
                            vector:[0,0.1,0.1,0,0.2,0,0.7,0.9,0.7,0.8,0.8,0.7,0.8,0.7,0.9,0.7,1,0.8,1,0.8,1,0.9,0.9,1,0,0.1,0.2,0,0.3,0.1,0.7,0.9,0.8,0.7,1,0.8,0.7,0.9,1,0.8,0.9,1,0,0.1,0.3,0.1,0.3,0.2,0.3,0.2,0.2,0.3,0.1,0.3,0.8,1,0.7,0.9,0.9,1,0,0.1,0.3,0.2,0.1,0.3,0,0.1,0.1,0.3,0,0.2,1,0.2,0.2,1,0,0.8,0,0.8,0.8,0,1,0.2],
                        },
                        '{':{
                            //vector: [ 0.3/0.45,0.0, 0.45/0.45,0.0, 0.45/0.45,0.1, 0.3/0.45,0.2, 0.3/0.45,0.4, 0.225/0.45,0.5, 0.3/0.45,0.6, 0.3/0.45,0.8, 0.45/0.45,0.9, 0.45/0.45,1.0, 0.3/0.45,1.0, 0.15/0.45,0.9, 0.15/0.45,0.6, 0.0/0.45,0.5, 0.15/0.45,0.4, 0.15/0.45,0.1 ]
                            vector:[0.3333333333333333,0.4,0.3333333333333333,0.1,0.6666666666666666,0,0.6666666666666666,0,1,0,1,0.1,0.6666666666666666,0.2,0.6666666666666666,0.4,0.5,0.5,0.5,0.5,0.6666666666666666,0.6,0.6666666666666666,0.8,0.6666666666666666,0.8,1,0.9,1,1,1,1,0.6666666666666666,1,0.3333333333333333,0.9,0.3333333333333333,0.6,0,0.5,0.3333333333333333,0.4,0.6666666666666666,0,1,0.1,0.6666666666666666,0.2,0.6666666666666666,0.8,1,1,0.3333333333333333,0.9,0.3333333333333333,0.6,0.3333333333333333,0.4,0.6666666666666666,0,0.6666666666666666,0,0.6666666666666666,0.2,0.5,0.5,0.5,0.5,0.6666666666666666,0.8,0.3333333333333333,0.9,0.3333333333333333,0.9,0.3333333333333333,0.6,0.6666666666666666,0,0.6666666666666666,0,0.5,0.5,0.3333333333333333,0.9],
                            ratio:{x:0.45},
                        },
                        '}':{
                            //vector: [ 0.15/0.45,0.0, 0.0/0.45,0.0, 0.0/0.45,0.1, 0.15/0.45,0.2, 0.15/0.45,0.4, 0.225/0.45,0.5, 0.15/0.45,0.6, 0.15/0.45,0.8, 0.0/0.45,0.9, 0.0/0.45,1.0, 0.15/0.45,1.0, 0.3/0.45,0.9, 0.3/0.45,0.6, 0.45/0.45,0.5, 0.3/0.45,0.4, 0.3/0.45,0.1 ]
                            vector:[0,0,0.3333333333333333,0,0.6666666666666666,0.1,0.6666666666666666,0.4,1,0.5,0.6666666666666666,0.6,0.6666666666666666,0.6,0.6666666666666666,0.9,0.3333333333333333,1,0.3333333333333333,1,0,1,0,0.9,0.3333333333333333,0.8,0.3333333333333333,0.6,0.5,0.5,0.5,0.5,0.3333333333333333,0.4,0.3333333333333333,0.2,0.3333333333333333,0.2,0,0.1,0,0,0.6666666666666666,0.4,0.6666666666666666,0.6,0.3333333333333333,1,0.3333333333333333,1,0,0.9,0.3333333333333333,0.8,0.3333333333333333,0.2,0,0,0.6666666666666666,0.1,0.6666666666666666,0.1,0.6666666666666666,0.4,0.3333333333333333,1,0.3333333333333333,1,0.3333333333333333,0.8,0.5,0.5,0.5,0.5,0.3333333333333333,0.2,0.6666666666666666,0.1,0.6666666666666666,0.1,0.3333333333333333,1,0.5,0.5],
                            ratio:{x:0.45},
                        },
                        '^':{
                            //vector: [ 0.0/0.6,0.3/0.3, 0.3/0.6,0.0/0.3, 0.6/0.6,0.3/0.3, 0.4/0.6,0.3/0.3, 0.3/0.6,0.2/0.3, 0.2/0.6,0.3/0.3],'flatArray'),
                            vector:[0.5, 0.6666666666666667, 0.33333333333333337, 1, 0, 1, 0.5, 0, 1, 1, 0.6666666666666667, 1, 0.5, 0.6666666666666667, 0, 1, 0.5, 0, 0.5, 0, 0.6666666666666667, 1, 0.5, 0.6666666666666667],
                            ratio:{x:0.6,y:0.3},
                        },
                    };
                    
                    //correct font to be compatible with the new way of fonting
                    reducedGlyphSet.concat(['default','']).forEach(key => {
                        if(vectorLibrary.defaultThick[key] == undefined){return;}
                    
                        //generate limits
                            vectorLibrary.defaultThick[key].top = vectorLibrary.defaultThick[key].ratio != undefined && vectorLibrary.defaultThick[key].ratio.y != undefined ? -vectorLibrary.defaultThick[key].ratio.y : -1;
                            vectorLibrary.defaultThick[key].right = vectorLibrary.defaultThick[key].ratio != undefined && vectorLibrary.defaultThick[key].ratio.x != undefined ? vectorLibrary.defaultThick[key].ratio.x + 0.1 : 1.1;
                            vectorLibrary.defaultThick[key].bottom = 0;
                            vectorLibrary.defaultThick[key].left = 0;
                    
                        //adjust for ratio and offset
                            for(let a = 0; a < vectorLibrary.defaultThick[key].vector.length; a+=2){
                                //ratio correction
                                    if( vectorLibrary.defaultThick[key].ratio != undefined ){
                                        if(vectorLibrary.defaultThick[key].ratio.x != undefined){
                                            vectorLibrary.defaultThick[key].vector[a] *= vectorLibrary.defaultThick[key].ratio.x;
                                        }
                                        if(vectorLibrary.defaultThick[key].ratio.y != undefined){
                                            vectorLibrary.defaultThick[key].vector[a+1] *= vectorLibrary.defaultThick[key].ratio.y;
                                        }
                                    }
                                //offset correction
                                    if( vectorLibrary.defaultThick[key].offset != undefined ){
                                        if(vectorLibrary.defaultThick[key].offset.x != undefined){
                                            vectorLibrary.defaultThick[key].vector[a] += vectorLibrary.defaultThick[key].offset.x;
                                        }
                                        if(vectorLibrary.defaultThick[key].offset.y != undefined){
                                            vectorLibrary.defaultThick[key].vector[a+1] += vectorLibrary.defaultThick[key].offset.y;
                                        }
                                    }
                            }
                    
                        //flip y axis
                            for(let a = 0; a < vectorLibrary.defaultThick[key].vector.length; a+=2){
                                vectorLibrary.defaultThick[key].vector[a+1] -= 1;
                            }
                    });
                    vectorLibrary.defaultThin = {
                        loadAttempted:true,
                        isLoaded:true,
                        'default':{ 
                            //vector: [ 0.0,0.0, 1.0,0.0, 1.0,1.0, 0.0,1.0, 0.0,0.0, 0.1,0.1,  0.1,0.9, 0.9,0.9, 0.9,0.1, 0.1,0.1 ]
                            vector:[0.9,0.1,0.1,0.1,0,0,0,1,0,0,0.1,0.1,0.9,0.1,0,0,1,0,0,1,0.1,0.1,0.1,0.9,0.9,0.9,0.9,0.1,1,0,1,1,0,1,0.1,0.9,0.9,0.9,1,0,1,1,1,1,0.1,0.9,0.9,0.9],
                        },
                        '':{ 
                            //vector: [ 0.0,0.0, 1.0,0.0, 1.0,1.0, 0.0,1.0, 0.0,0.0, 0.1,0.1,  0.1,0.9, 0.9,0.9, 0.9,0.1, 0.1,0.1 ]
                            vector:[0.9,0.1,0.1,0.1,0,0,0,1,0,0,0.1,0.1,0.9,0.1,0,0,1,0,0,1,0.1,0.1,0.1,0.9,0.9,0.9,0.9,0.1,1,0,1,1,0,1,0.1,0.9,0.9,0.9,1,0,1,1,1,1,0.1,0.9,0.9,0.9],
                        },
                    
                        'A':{
                            //vector: [ 0.2,0.0, 0.5,0.0, 1.0,1.0, 0.9,1.0, 0.65,0.5, 0.1,0.5, 0.1,0.4, 0.6,0.4, 0.45,0.1, 0.25,0.1, 0.1,0.25, 0.1,1.0, 0.0,1.0, 0.0,0.2 ]
                            vector:[0.5,0,1,1,0.9,1,0.65,0.5,0.1,0.5,0.1,0.4,0.1,0.25,0.1,1,0,1,0.5,0,0.9,1,0.65,0.5,0.65,0.5,0.1,0.4,0.6,0.4,0.1,0.25,0,1,0,0.2,0.5,0,0.65,0.5,0.6,0.4,0.25,0.1,0.1,0.25,0,0.2,0.5,0,0.6,0.4,0.45,0.1,0.25,0.1,0,0.2,0.2,0,0.2,0,0.5,0,0.45,0.1,0.45,0.1,0.25,0.1,0.2,0],
                        },
                        'B':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.1,0.9, 0.75,0.9, 0.9,0.75, 0.9,0.65, 0.75,0.5, 0.1,0.5, 0.1,0.4, 0.7,0.4, 0.8,0.3, 0.8,0.2, 0.65,0.1, 0.1,0.1, 0.1,0.0, 0.7,0.0, 0.9,0.15, 0.9,0.35, 0.825,0.425, 1.0,0.6, 1.0,0.8, 0.8,1.0, 0.0,1.0 ]
                            vector:[0,1,0,0,0.1,0,0.75,0.5,0.1,0.5,0.1,0.4,0.65,0.1,0.1,0.1,0.1,0,0.7,0,0.9,0.15,0.9,0.35,0.825,0.425,1,0.6,1,0.8,0,1,0.1,0,0.1,0.9,0.75,0.5,0.1,0.4,0.7,0.4,0.65,0.1,0.1,0,0.7,0,0.8,1,0,1,0.1,0.9,0.9,0.65,0.75,0.5,0.7,0.4,0.8,0.2,0.65,0.1,0.7,0,0.8,1,0.1,0.9,0.75,0.9,0.8,0.2,0.7,0,0.9,0.35,1,0.8,0.8,1,0.75,0.9,0.8,0.3,0.8,0.2,0.9,0.35,1,0.8,0.75,0.9,0.9,0.75,0.7,0.4,0.8,0.3,0.9,0.35,1,0.8,0.9,0.75,0.9,0.65,0.7,0.4,0.9,0.35,0.825,0.425,0.825,0.425,1,0.8,0.9,0.65,0.9,0.65,0.7,0.4,0.825,0.425],
                        },
                        'C':{
                            //vector: [ 0.2,0.0, 0.8,0.0, 1.0,0.2, 0.9,0.25, 0.75,0.1, 0.25,0.1, 0.1,0.25, 0.1,0.75, 0.25,0.9, 0.75,0.9, 0.9,0.75, 1.0,0.8, 0.8,1.0, 0.2,1.0, 0.0,0.8, 0.0,0.2 ]
                            vector:[0.8,0,1,0.2,0.9,0.25,0.75,0.9,0.9,0.75,1,0.8,0.8,0,0.9,0.25,0.75,0.1,0.75,0.9,1,0.8,0.8,1,0.2,0,0.8,0,0.75,0.1,0.25,0.9,0.75,0.9,0.8,1,0.2,0,0.75,0.1,0.25,0.1,0.25,0.9,0.8,1,0.2,1,0,0.2,0.2,0,0.25,0.1,0.1,0.75,0.25,0.9,0.2,1,0,0.2,0.25,0.1,0.1,0.25,0.1,0.75,0.2,1,0,0.8,0,0.8,0,0.2,0.1,0.25,0.1,0.25,0.1,0.75,0,0.8],
                        },
                        'D':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.1,0.9, 0.75,0.9, 0.9,0.75, 0.9,0.25, 0.75,0.1, 0.1,0.1, 0.1,0.0, 0.8,0.0, 1.0,0.2, 1.0,0.8, 0.8,1.0, 0.0,1.0 ]
                            vector:[0,1,0,0,0.1,0,0.75,0.1,0.1,0.1,0.1,0,0,1,0.1,0,0.1,0.9,0.75,0.1,0.1,0,0.8,0,0.8,1,0,1,0.1,0.9,0.9,0.25,0.75,0.1,0.8,0,0.8,1,0.1,0.9,0.75,0.9,0.9,0.25,0.8,0,1,0.2,1,0.8,0.8,1,0.75,0.9,0.9,0.75,0.9,0.25,1,0.2,1,0.8,0.75,0.9,0.9,0.75,0.9,0.75,1,0.2,1,0.8],
                        },
                        'E':{
                            //vector: [ 0.0,0.0, 1.0,0.0, 1.0,0.1, 0.1,0.1, 0.1,0.4, 0.9,0.4, 0.9,0.5, 0.1,0.5, 0.1,0.9, 1.0,0.9, 1.0,1.0, 0.0,1.0 ]
                            vector:[0,0,1,0,1,0.1,0.1,0.4,0.9,0.4,0.9,0.5,0.1,0.9,1,0.9,1,1,0,0,1,0.1,0.1,0.1,0.1,0.4,0.9,0.5,0.1,0.5,0.1,0.9,1,1,0,1,0,1,0,0,0.1,0.1,0.1,0.5,0.1,0.9,0,1,0,1,0.1,0.1,0.1,0.4,0.1,0.4,0.1,0.5,0,1],
                        },
                        'F':{
                            //vector: [ 0.0,0.0, 1.0,0.0, 1.0,0.1, 0.1,0.1, 0.1,0.4, 0.9,0.4, 0.9,0.5, 0.1,0.5, 0.1,1.0, 0.0,1.0 ]
                            vector:[0.1,1,0,1,0,0,0,0,1,0,1,0.1,0.1,0.4,0.9,0.4,0.9,0.5,0.1,0.5,0.1,1,0,0,0,0,1,0.1,0.1,0.1,0.1,0.4,0.9,0.5,0.1,0.5,0,0,0.1,0.1,0.1,0.4,0.1,0.4,0.1,0.5,0,0],
                        },
                        'G':{
                            //vector: [ 0.2,0.0, 1.0,0.0, 1.0,0.1, 0.25,0.1, 0.1,0.25, 0.1,0.75, 0.25,0.9, 0.75,0.9, 0.9,0.75, 0.9,0.55, 0.85,0.5, 0.5,0.5, 0.5,0.4, 0.9,0.4, 1.0,0.5, 1.0,0.8, 0.8,1.0, 0.2,1.0, 0.0,0.8, 0.0,0.2 ]
                            vector:[0.2,0,1,0,1,0.1,0.85,0.5,0.5,0.5,0.5,0.4,0.5,0.4,0.9,0.4,1,0.5,0.2,0,1,0.1,0.25,0.1,0.85,0.5,0.5,0.4,1,0.5,0,0.2,0.2,0,0.25,0.1,0.9,0.55,0.85,0.5,1,0.5,0,0.2,0.25,0.1,0.1,0.25,0.9,0.75,0.9,0.55,1,0.5,0,0.8,0,0.2,0.1,0.25,0.9,0.75,1,0.5,1,0.8,0,0.8,0.1,0.25,0.1,0.75,0.75,0.9,0.9,0.75,1,0.8,0.2,1,0,0.8,0.1,0.75,0.75,0.9,1,0.8,0.8,1,0.2,1,0.1,0.75,0.25,0.9,0.25,0.9,0.75,0.9,0.8,1,0.8,1,0.2,1,0.25,0.9],
                        },
                        'H':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.1,0.4, 0.9,0.4, 0.9,0.0, 1.0,0.0, 1.0,1.0, 0.9,1.0, 0.9,0.5, 0.1,0.5, 0.1,1.0, 0.0,1.0 ]
                            vector:[0.1,1,0,1,0,0,0,0,0.1,0,0.1,0.4,0.9,0.4,0.9,0,1,0,1,0,1,1,0.9,1,0.1,0.5,0.1,1,0,0,1,0,0.9,1,0.9,0.5,0.1,0.5,0,0,0.1,0.4,0.9,0.4,1,0,0.9,0.5,0.9,0.5,0.1,0.5,0.1,0.4,0.1,0.4,0.9,0.4,0.9,0.5],
                        },
                        'I':{
                            //vector: [ 0.0,0.0, 1.0,0.0, 1.0,0.1, 0.55,0.1, 0.55,0.9, 1.0,0.9, 1.0,1.0, 0.0,1.0, 0.0,0.9, 0.45,0.9, 0.45,0.1, 0.0,0.1 ]
                            vector:[0.45,0.1,0,0.1,0,0,0,0,1,0,1,0.1,0.55,0.9,1,0.9,1,1,1,1,0,1,0,0.9,0,0,1,0.1,0.55,0.1,1,1,0,0.9,0.45,0.9,0.45,0.1,0,0,0.55,0.1,0.55,0.9,1,1,0.45,0.9,0.45,0.9,0.45,0.1,0.55,0.1,0.55,0.1,0.55,0.9,0.45,0.9],
                        },
                        'J':{
                            //vector: [ 0.5,0.0, 1.0,0.0, 1.0,0.8, 0.8,1.0, 0.0,1.0, 0.0,0.9, 0.75,0.9, 0.9,0.75, 0.9,0.1, 0.5,0.1 ]
                            vector:[0.9,0.1,0.5,0.1,0.5,0,0.8,1,0,1,0,0.9,0.9,0.1,0.5,0,1,0,0.8,1,0,0.9,0.75,0.9,0.9,0.75,0.9,0.1,1,0,1,0.8,0.8,1,0.75,0.9,0.9,0.75,1,0,1,0.8,1,0.8,0.75,0.9,0.9,0.75],
                        },
                        'K':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.1,0.4, 0.7,0.4, 0.9,0.2, 0.9,0.0, 1.0,0.0, 1.0,0.25, 0.8,0.45, 1.0,0.65, 1.0,1.0, 0.9,1.0, 0.9,0.7, 0.7,0.5, 0.1,0.5, 0.1,1.0, 0.0,1.0 ]
                            vector:[0.1,1,0,1,0,0,0,0,0.1,0,0.1,0.4,0.9,0.2,0.9,0,1,0,1,0,1,0.25,0.8,0.45,1,0.65,1,1,0.9,1,0.1,0.5,0.1,1,0,0,0.9,0.2,1,0,0.8,0.45,1,0.65,0.9,1,0.9,0.7,0.1,0.5,0,0,0.1,0.4,0.7,0.4,0.9,0.2,0.8,0.45,0.8,0.45,1,0.65,0.9,0.7,0.7,0.5,0.1,0.5,0.1,0.4,0.1,0.4,0.7,0.4,0.8,0.45,0.8,0.45,0.9,0.7,0.7,0.5,0.7,0.5,0.1,0.4,0.8,0.45],
                        },
                        'L':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.1,0.9, 1.0,0.9, 1.0,1.0, 0.0,1.0 ]
                            vector:[0,1,0,0,0.1,0,0.1,0.9,1,0.9,1,1,0,1,0.1,0,0.1,0.9,0.1,0.9,1,1,0,1],
                        },
                        'M':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.5,0.4, 0.9,0.0, 1.0,0.0, 1.0,1.0, 0.9,1.0, 0.9,0.15, 0.5,0.55, 0.1,0.15, 0.1,1.0, 0.0,1.0 ]
                            vector:[0.1,1,0,1,0,0,0,0,0.1,0,0.5,0.4,0.5,0.4,0.9,0,1,0,1,0,1,1,0.9,1,0.1,0.15,0.1,1,0,0,1,0,0.9,1,0.9,0.15,0.5,0.55,0.1,0.15,0,0,0.5,0.4,1,0,0.9,0.15,0.5,0.55,0,0,0.5,0.4,0.5,0.4,0.9,0.15,0.5,0.55],
                        },
                        'N':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.9,0.85, 0.9,0.0, 1.0,0.0, 1.0,1.0, 0.9,1.0, 0.1,0.15, 0.1,1.0, 0.0,1.0 ]
                            vector:[0.1,1,0,1,0,0,0,0,0.1,0,0.9,0.85,0.9,0.85,0.9,0,1,0,1,0,1,1,0.9,1,0.1,0.15,0.1,1,0,0,0.9,0.85,1,0,0.9,1,0.9,1,0.1,0.15,0,0,0,0,0.9,0.85,0.9,1],
                        },
                        'O':{
                            //vector: [ 0.2,0.0, 0.8,0.0, 1.0,0.2, 1.0,0.8, 0.8,1.0, 0.2,1.0, 0.0,0.8, 0.0,0.2, 0.2,0.0, 0.25,0.1, 0.1,0.25, 0.1,0.75, 0.25,0.9, 0.75,0.9, 0.9,0.75, 0.9,0.25, 0.75,0.1, 0.25,0.1 ]
                            vector:[0.75,0.1,0.25,0.1,0.2,0,0,0.2,0.2,0,0.25,0.1,0.75,0.1,0.2,0,0.8,0,0,0.2,0.25,0.1,0.1,0.25,0.9,0.25,0.75,0.1,0.8,0,0,0.8,0,0.2,0.1,0.25,0.9,0.25,0.8,0,1,0.2,0,0.8,0.1,0.25,0.1,0.75,0.9,0.75,0.9,0.25,1,0.2,0.2,1,0,0.8,0.1,0.75,0.9,0.75,1,0.2,1,0.8,0.2,1,0.1,0.75,0.25,0.9,0.75,0.9,0.9,0.75,1,0.8,0.8,1,0.2,1,0.25,0.9,0.75,0.9,1,0.8,0.8,1,0.8,1,0.25,0.9,0.75,0.9],
                        },
                        'P':{
                            //vector: [ 0.0,0.0, 0.8,0.0, 1.0,0.2, 1.0,0.3, 0.8,0.5, 0.1,0.5, 0.1,0.4, 0.75,0.4, 0.9,0.25, 0.75,0.1, 0.1,0.1, 0.1,1.0, 0.0,1.0 ]
                            vector:[0.1,1,0,1,0,0,0.8,0,1,0.2,1,0.3,0.8,0.5,0.1,0.5,0.1,0.4,0.1,0.1,0.1,1,0,0,0.8,0.5,0.1,0.4,0.75,0.4,0.75,0.1,0.1,0.1,0,0,1,0.3,0.8,0.5,0.75,0.4,0.75,0.1,0,0,0.8,0,1,0.3,0.75,0.4,0.9,0.25,0.9,0.25,0.75,0.1,0.8,0,0.8,0,1,0.3,0.9,0.25],
                        },
                        'Q':{
                            //vector: [ 0.2,0.0, 0.8,0.0, 1.0,0.2, 1.0,0.6, 0.84,0.76, 1.0,0.92, 0.92,1.0, 0.76,0.84, 0.6,1.0, 0.2,1.0, 0.0,0.8, 0.0,0.2, 0.2,0.0, 0.25,0.1, 0.1,0.25, 0.1,0.75, 0.25,0.9, 0.55,0.9, 0.68,0.76, 0.51,0.59, 0.59,0.51, 0.76,0.68, 0.9,0.55, 0.9,0.25, 0.75,0.1, 0.25,0.1 ]
                            vector:[0.75,0.1,0.25,0.1,0.2,0,0.84,0.76,1,0.92,0.92,1,0,0.2,0.2,0,0.25,0.1,0.68,0.76,0.51,0.59,0.59,0.51,0.75,0.1,0.2,0,0.8,0,0.84,0.76,0.92,1,0.76,0.84,0,0.2,0.25,0.1,0.1,0.25,0.68,0.76,0.59,0.51,0.76,0.68,0.9,0.25,0.75,0.1,0.8,0,0,0.8,0,0.2,0.1,0.25,0.55,0.9,0.68,0.76,0.76,0.68,0.9,0.25,0.8,0,1,0.2,0,0.8,0.1,0.25,0.1,0.75,0.55,0.9,0.76,0.68,0.9,0.55,0.9,0.55,0.9,0.25,1,0.2,0.2,1,0,0.8,0.1,0.75,0.9,0.55,1,0.2,1,0.6,0.2,1,0.1,0.75,0.25,0.9,0.55,0.9,0.9,0.55,1,0.6,0.6,1,0.2,1,0.25,0.9,0.55,0.9,1,0.6,0.84,0.76,0.6,1,0.25,0.9,0.55,0.9,0.55,0.9,0.84,0.76,0.76,0.84,0.76,0.84,0.6,1,0.55,0.9],
                        },
                        'R':{
                            //vector: [ 0.0,0.0, 0.8,0.0, 1.0,0.2, 1.0,0.3, 0.8,0.5, 1.0,0.7, 1.0,1.0, 0.9,1.0, 0.9,0.75, 0.65,0.5, 0.1,0.5, 0.1,0.4, 0.75,0.4, 0.9,0.25, 0.75,0.1, 0.1,0.1, 0.1,1.0, 0.0,1.0 ]
                            vector:[0.1,1,0,1,0,0,0.8,0,1,0.2,1,0.3,1,0.7,1,1,0.9,1,0.65,0.5,0.1,0.5,0.1,0.4,0.1,0.1,0.1,1,0,0,1,0.7,0.9,1,0.9,0.75,0.65,0.5,0.1,0.4,0.75,0.4,0.75,0.1,0.1,0.1,0,0,0.8,0.5,1,0.7,0.9,0.75,0.9,0.75,0.65,0.5,0.75,0.4,0.75,0.1,0,0,0.8,0,0.8,0.5,0.9,0.75,0.75,0.4,0.9,0.25,0.75,0.1,0.8,0,1,0.3,0.8,0.5,0.75,0.4,0.9,0.25,0.8,0,1,0.3,1,0.3,0.75,0.4,0.9,0.25],
                        },
                        'S':{
                            //vector: [ 0.3,0.0, 1.0,0.0, 1.0,0.1, 0.35,0.1, 0.1,0.35, 0.1,0.4, 1.0,0.4, 1.0,0.6, 0.6,1.0, 0.0,1.0, 0.0,0.9, 0.55,0.9, 0.9,0.55, 0.9,0.5, 0.0,0.5, 0.0,0.3 ]
                            vector:[0,0.5,0,0.3,0.3,0,0.3,0,1,0,1,0.1,0.6,1,0,1,0,0.9,0.3,0,1,0.1,0.35,0.1,0.6,1,0,0.9,0.55,0.9,0.3,0,0.35,0.1,0.1,0.35,1,0.6,0.6,1,0.55,0.9,0,0.5,0.3,0,0.1,0.35,1,0.6,0.55,0.9,0.9,0.55,0,0.5,0.1,0.35,0.1,0.4,1,0.4,1,0.6,0.9,0.55,0.9,0.5,0,0.5,0.1,0.4,1,0.4,0.9,0.55,0.9,0.5,0.9,0.5,0.1,0.4,1,0.4],
                        },
                        'T':{
                            //vector: [ 0.0,0.0, 1.0,0.0, 1.0,0.1, 0.55,0.1, 0.55,1.0, 0.45,1.0, 0.45,0.1, 0.0,0.1 ]
                            vector:[0.45,0.1,0,0.1,0,0,0,0,1,0,1,0.1,0.55,0.1,0.55,1,0.45,1,0,0,1,0.1,0.55,0.1,0.55,0.1,0.45,1,0.45,0.1,0.45,0.1,0,0,0.55,0.1],
                            encroach:{'t':1},
                        },
                        'U':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.1,0.75, 0.25,0.9, 0.75,0.9, 0.9,0.75, 0.9,0.0, 1.0,0.0, 1.0,0.8, 0.8,1.0, 0.2,1.0, 0.0,0.8 ]
                            vector:[0,0.8,0,0,0.1,0,0.9,0.75,0.9,0,1,0,0,0.8,0.1,0,0.1,0.75,0.9,0.75,1,0,1,0.8,0.2,1,0,0.8,0.1,0.75,0.75,0.9,0.9,0.75,1,0.8,0.2,1,0.1,0.75,0.25,0.9,0.75,0.9,1,0.8,0.8,1,0.8,1,0.2,1,0.25,0.9,0.25,0.9,0.75,0.9,0.8,1],
                        },
                        'V':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.5,0.85, 0.9,0.0, 1.0,0.0, 0.55,1.0, 0.45,1.0 ]
                            vector:[0.55,1,0.45,1,0,0,0,0,0.1,0,0.5,0.85,0.5,0.85,0.9,0,1,0,0.55,1,0,0,0.5,0.85,0.5,0.85,1,0,0.55,1],
                        },
                        'W':{
                            //vector: [ 0.0,0.0, 0.1,0.0, 0.1,0.85, 0.5,0.4, 0.9,0.85, 0.9,0.0, 1.0,0.0, 1.0,1.0, 0.9,1.0, 0.5,0.55, 0.1,1.0, 0.0,1.0 ]
                            vector:[0.1,1,0,1,0,0,0,0,0.1,0,0.1,0.85,0.9,0.85,0.9,0,1,0,1,0,1,1,0.9,1,0.1,1,0,0,0.1,0.85,0.9,0.85,1,0,0.9,1,0.5,0.55,0.1,1,0.1,0.85,0.5,0.4,0.9,0.85,0.9,1,0.5,0.55,0.1,0.85,0.5,0.4,0.5,0.4,0.9,1,0.5,0.55],
                        },
                        'X':{
                            //vector: [ 0.0,0.0, 0.12,0.0, 0.5,0.44, 0.88,0.0, 1.0,0.0, 0.56,0.5, 1.0,1.0, 0.88,1.0, 0.5,0.56, 0.12,1.0, 0.0,1.0, 0.44,0.5 ]
                            vector:[0.44,0.5,0,0,0.12,0,0.5,0.44,0.88,0,1,0,0.56,0.5,1,1,0.88,1,0.5,0.56,0.12,1,0,1,0.44,0.5,0.12,0,0.5,0.44,0.5,0.44,1,0,0.56,0.5,0.56,0.5,0.88,1,0.5,0.56,0.5,0.56,0,1,0.44,0.5,0.44,0.5,0.5,0.44,0.56,0.5,0.56,0.5,0.5,0.56,0.44,0.5],
                        },
                        'Y':{
                            //vector: [ 0.0,0.0, 0.15,0.0, 0.5,0.35, 0.85,0.0, 1.0,0.0, 0.0,1.0, 0.0,0.85, 0.42,0.42 ]
                            vector:[0.42,0.42,0,0,0.15,0,0.5,0.35,0.85,0,1,0,1,0,0,1,0,0.85,0.42,0.42,0.15,0,0.5,0.35,0.5,0.35,1,0,0,0.85,0,0.85,0.42,0.42,0.5,0.35],
                        },
                        'Z':{
                            //vector: [ 0.0,0.0, 1.0,0.0, 1.0,0.1, 0.15,0.9, 1.0,0.9, 1.0,1.0, 0.0,1.0, 0.0,0.9, 0.85,0.1, 0.0,0.1 ]
                            vector:[0.85,0.1,0,0.1,0,0,0,0,1,0,1,0.1,0.15,0.9,1,0.9,1,1,1,1,0,1,0,0.9,0.85,0.1,0,0,1,0.1,0.15,0.9,1,1,0,0.9,0,0.9,0.85,0.1,1,0.1,1,0.1,0.15,0.9,0,0.9],
                        },
                    
                        'a':{
                            //vector: [ 0.2/0.7,0.0/0.6, 0.4/0.7,0.0/0.6, 0.6/0.7,0.2/0.6, 0.6/0.7,0.5/0.6, 0.7/0.7,0.6/0.6, 0.5/0.7,0.6/0.6, 0.5/0.7,0.25/0.6, 0.35/0.7,0.1/0.6, 0.25/0.7,0.1/0.6, 0.1/0.7,0.25/0.6, 0.1/0.7,0.35/0.6, 0.25/0.7,0.5/0.6, 0.5/0.7,0.5/0.6, 0.5/0.7,0.6/0.6, 0.2/0.7,0.6/0.6, 0.0/0.7,0.4/0.6, 0.0/0.7,0.2/0.6 ]
                            vector:[0,0.6666666666666667,0,0.33333333333333337,0.28571428571428575,0,0.28571428571428575,0,0.5714285714285715,0,0.8571428571428572,0.33333333333333337,0.8571428571428572,0.8333333333333334,1,1,0.7142857142857143,1,0.35714285714285715,0.8333333333333334,0.7142857142857143,0.8333333333333334,0.7142857142857143,1,0.8571428571428572,0.33333333333333337,0.8571428571428572,0.8333333333333334,0.7142857142857143,1,0.35714285714285715,0.8333333333333334,0.7142857142857143,1,0.28571428571428575,1,0.8571428571428572,0.33333333333333337,0.7142857142857143,1,0.7142857142857143,0.4166666666666667,0.14285714285714288,0.5833333333333334,0.35714285714285715,0.8333333333333334,0.28571428571428575,1,0.8571428571428572,0.33333333333333337,0.7142857142857143,0.4166666666666667,0.5,0.16666666666666669,0.14285714285714288,0.5833333333333334,0.28571428571428575,1,0,0.6666666666666667,0.28571428571428575,0,0.8571428571428572,0.33333333333333337,0.5,0.16666666666666669,0.14285714285714288,0.4166666666666667,0.14285714285714288,0.5833333333333334,0,0.6666666666666667,0.28571428571428575,0,0.5,0.16666666666666669,0.35714285714285715,0.16666666666666669,0.14285714285714288,0.4166666666666667,0,0.6666666666666667,0.28571428571428575,0,0.28571428571428575,0,0.35714285714285715,0.16666666666666669,0.14285714285714288,0.4166666666666667],
                            ratio:{x:0.7,y:0.6}, offset:{y:0.4},
                            encroach:{'f':1},
                        },
                        'b':{
                            //vector: [ 0.0/0.6,0.0, 0.1/0.6,0.0, 0.1/0.6,0.9, 0.35/0.6,0.9, 0.5/0.6,0.75, 0.5/0.6,0.65, 0.35/0.6,0.5, 0.1/0.6,0.5, 0.1/0.6,0.4, 0.4/0.6,0.4, 0.6/0.6,0.6, 0.6/0.6,0.8, 0.4/0.6,1.0, 0.0/0.6,1.0 ]
                            vector:[0,1,0,0,0.16666666666666669,0,0.5833333333333334,0.5,0.16666666666666669,0.5,0.16666666666666669,0.4,0.6666666666666667,0.4,1,0.6,1,0.8,0,1,0.16666666666666669,0,0.16666666666666669,0.9,0.5833333333333334,0.5,0.16666666666666669,0.4,0.6666666666666667,0.4,0.6666666666666667,1,0,1,0.16666666666666669,0.9,0.8333333333333334,0.65,0.5833333333333334,0.5,0.6666666666666667,0.4,0.6666666666666667,1,0.16666666666666669,0.9,0.5833333333333334,0.9,0.8333333333333334,0.65,0.6666666666666667,0.4,1,0.8,1,0.8,0.6666666666666667,1,0.5833333333333334,0.9,0.8333333333333334,0.75,0.8333333333333334,0.65,1,0.8,1,0.8,0.5833333333333334,0.9,0.8333333333333334,0.75],
                            ratio:{x:0.6},
                        },
                        'c':{
                            //vector: [ 0.2/0.6,0.0/0.6, 0.6/0.6,0.0/0.6, 0.6/0.6,0.1/0.6, 0.25/0.6,0.1/0.6, 0.1/0.6,0.25/0.6, 0.1/0.6,0.35/0.6, 0.25/0.6,0.5/0.6, 0.6/0.6,0.5/0.6, 0.6/0.6,0.6/0.6, 0.2/0.6,0.6/0.6, 0.0/0.6,0.4/0.6, 0.0/0.6,0.2/0.6 ]
                            vector:[0,0.6666666666666667,0,0.33333333333333337,0.33333333333333337,0,0.33333333333333337,0,1,0,1,0.16666666666666669,0.4166666666666667,0.8333333333333334,1,0.8333333333333334,1,1,0.33333333333333337,0,1,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.4166666666666667,0.8333333333333334,1,1,0.33333333333333337,1,0.33333333333333337,0,0.4166666666666667,0.16666666666666669,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.5833333333333334,0.4166666666666667,0.8333333333333334,0.33333333333333337,1,0,0.6666666666666667,0.33333333333333337,0,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.5833333333333334,0.33333333333333337,1,0,0.6666666666666667,0,0.6666666666666667,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.5833333333333334],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                        },
                        'd':{
                            //vector: [ 0.5/0.6,0.0, 0.6/0.6,0.0, 0.6/0.6,1.0, 0.2/0.6,1.0, 0.0/0.6,0.8, 0.0/0.6,0.6, 0.2/0.6,0.4, 0.5/0.6,0.4, 0.5/0.6,0.5, 0.25/0.6,0.5, 0.1/0.6,0.65, 0.1/0.6,0.75, 0.25/0.6,0.9, 0.5/0.6,0.9 ]
                            vector:[0.8333333333333334,0.9,0.8333333333333334,0,1,0,0.33333333333333337,1,0,0.8,0,0.6,0.33333333333333337,0.4,0.8333333333333334,0.4,0.8333333333333334,0.5,0.8333333333333334,0.9,1,0,1,1,0.33333333333333337,0.4,0.8333333333333334,0.5,0.4166666666666667,0.5,0.4166666666666667,0.9,0.8333333333333334,0.9,1,1,0,0.6,0.33333333333333337,0.4,0.4166666666666667,0.5,0.4166666666666667,0.9,1,1,0.33333333333333337,1,0,0.6,0.4166666666666667,0.5,0.16666666666666669,0.65,0.16666666666666669,0.75,0.4166666666666667,0.9,0.33333333333333337,1,0,0.6,0.16666666666666669,0.65,0.16666666666666669,0.75,0.16666666666666669,0.75,0.33333333333333337,1,0,0.6],
                            ratio:{x:0.6},
                            encroach:{'c':1},
                        },
                        'e':{
                            //vector: [ 0.15/0.6,0.0/0.6, 0.45/0.6,0.0/0.6, 0.6/0.6,0.15/0.6, 0.6/0.6,0.35/0.6, 0.1/0.6,0.35/0.6, 0.1/0.6,0.25/0.6, 0.5/0.6,0.25/0.6, 0.5/0.6,0.2/0.6, 0.4/0.6,0.1/0.6, 0.2/0.6,0.1/0.6, 0.1/0.6,0.2/0.6, 0.1/0.6,0.4/0.6, 0.2/0.6,0.5/0.6, 0.4/0.6,0.5/0.6, 0.45/0.6,0.45/0.6, 0.6/0.6,0.45/0.6, 0.45/0.6,0.6/0.6, 0.15/0.6,0.6/0.6, 0.0/0.6,0.45/0.6, 0.0/0.6,0.15/0.6 ]
                            vector:[0,0.75,0,0.25,0.25,0,0.25,0,0.75,0,1,0.25,1,0.5833333333333334,0.16666666666666669,0.5833333333333334,0.16666666666666669,0.4166666666666667,0.6666666666666667,0.8333333333333334,0.75,0.75,1,0.75,1,0.75,0.75,1,0.25,1,1,0.5833333333333334,0.16666666666666669,0.4166666666666667,0.8333333333333334,0.4166666666666667,0.6666666666666667,0.8333333333333334,1,0.75,0.25,1,1,0.25,1,0.5833333333333334,0.8333333333333334,0.4166666666666667,0.33333333333333337,0.8333333333333334,0.6666666666666667,0.8333333333333334,0.25,1,1,0.25,0.8333333333333334,0.4166666666666667,0.8333333333333334,0.33333333333333337,0.16666666666666669,0.6666666666666667,0.33333333333333337,0.8333333333333334,0.25,1,1,0.25,0.8333333333333334,0.33333333333333337,0.6666666666666667,0.16666666666666669,0.16666666666666669,0.6666666666666667,0.25,1,0,0.75,0.25,0,1,0.25,0.6666666666666667,0.16666666666666669,0.16666666666666669,0.33333333333333337,0.16666666666666669,0.6666666666666667,0,0.75,0.25,0,0.6666666666666667,0.16666666666666669,0.33333333333333337,0.16666666666666669,0.16666666666666669,0.33333333333333337,0,0.75,0.25,0,0.25,0,0.33333333333333337,0.16666666666666669,0.16666666666666669,0.33333333333333337],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                        },
                        'f':{
                            //vector: [ 0.35/0.5,0.0, 0.5/0.5,0.0, 0.5/0.5,0.1, 0.4/0.5,0.1, 0.3/0.5,0.2, 0.3/0.5,0.4, 0.5/0.5,0.4, 0.5/0.5,0.5, 0.3/0.5,0.5, 0.3/0.5,1.0, 0.2/0.5,1.0, 0.2/0.5,0.5, 0.0/0.5,0.5, 0.0/0.5,0.4, 0.2/0.5,0.4, 0.2/0.5,0.15 ]
                            vector:[0.4,0.4,0.4,0.15,0.7,0,0.7,0,1,0,1,0.1,0.6,0.4,1,0.4,1,0.5,0.6,0.5,0.6,1,0.4,1,0.4,0.5,0,0.5,0,0.4,0.7,0,1,0.1,0.8,0.1,0.6,0.4,1,0.5,0.6,0.5,0.6,0.5,0.4,1,0.4,0.5,0.4,0.5,0,0.4,0.4,0.4,0.7,0,0.8,0.1,0.6,0.2,0.6,0.4,0.6,0.5,0.4,0.5,0.4,0.5,0.4,0.4,0.7,0,0.6,0.2,0.6,0.4,0.4,0.5,0.4,0.5,0.7,0,0.6,0.2],
                            ratio:{x:0.5},
                            encroach:{'e':1},
                        },
                        'g':{
                            //vector: [ 0.2/0.6,0.0/1.1, 0.4/0.6,0.0/1.1, 0.6/0.6,0.2/1.1, 0.6/0.6,0.9/1.1, 0.4/0.6,1.1/1.1, 0.2/0.6,1.1/1.1, 0.0/0.6,0.9/1.1, 0.0/0.6,0.8/1.1, 0.1/0.6,0.8/1.1, 0.1/0.6,0.85/1.1, 0.25/0.6,1.0/1.1, 0.35/0.6,1.0/1.1, 0.5/0.6,0.85/1.1, 0.5/0.6,0.25/1.1, 0.35/0.6,0.1/1.1, 0.25/0.6,0.1/1.1, 0.1/0.6,0.25/1.1, 0.1/0.6,0.35/1.1, 0.25/0.6,0.5/1.1, 0.5/0.6,0.5/1.1, 0.5/0.6,0.6/1.1, 0.2/0.6,0.6/1.1, 0.0/0.6,0.4/1.1, 0.0/0.6,0.2/1.1 ],'flatArray'),
                            vector:[0,0.364,0,0.182,0.333,0,0.333,0,0.667,0,1,0.182,1,0.818,0.667,1,0.333,1,0.333,1,0,0.818,0,0.727,0,0.727,0.167,0.727,0.167,0.773,0.417,0.455,0.833,0.455,0.833,0.545,0.333,1,0,0.727,0.167,0.773,0.417,0.455,0.833,0.545,0.333,0.545,0.333,1,0.167,0.773,0.417,0.909,0.167,0.318,0.417,0.455,0.333,0.545,0.333,1,0.417,0.909,0.583,0.909,0.167,0.318,0.333,0.545,0,0.364,1,0.818,0.333,1,0.583,0.909,0.167,0.227,0.167,0.318,0,0.364,1,0.818,0.583,0.909,0.833,0.773,0.167,0.227,0,0.364,0.333,0,1,0.182,1,0.818,0.833,0.773,0.417,0.091,0.167,0.227,0.333,0,1,0.182,0.833,0.773,0.833,0.227,0.583,0.091,0.417,0.091,0.333,0,1,0.182,0.833,0.227,0.583,0.091,0.583,0.091,0.333,0,1,0.182],
                            ratio:{x:0.6,y:1.1}, offset:{y:0.4},
                            encroach:{'f':1},
                        },
                        'h':{
                            //vector: [ 0.0/0.6,0.0, 0.1/0.6,0.0, 0.1/0.6,0.4, 0.4/0.6,0.4, 0.6/0.6,0.6, 0.6/0.6,1.0, 0.5/0.6,1.0, 0.5/0.6,0.65, 0.35/0.6,0.5, 0.1/0.6,0.5, 0.1/0.6,1.0, 0.0/0.6,1.0 ]
                            vector:[0.16666666666666669,1,0,1,0,0,0,0,0.16666666666666669,0,0.16666666666666669,0.4,1,0.6,1,1,0.8333333333333334,1,0.16666666666666669,0.5,0.16666666666666669,1,0,0,1,0.6,0.8333333333333334,1,0.8333333333333334,0.65,0.16666666666666669,0.5,0,0,0.16666666666666669,0.4,0.6666666666666667,0.4,1,0.6,0.8333333333333334,0.65,0.5833333333333334,0.5,0.16666666666666669,0.5,0.16666666666666669,0.4,0.6666666666666667,0.4,0.8333333333333334,0.65,0.5833333333333334,0.5,0.5833333333333334,0.5,0.16666666666666669,0.4,0.6666666666666667,0.4],
                            ratio:{x:0.6},
                        },
                        'i':{
                            //vector: [ 0.0/0.1,0.0/0.9, 0.1/0.1,0.0/0.9, 0.1/0.1,0.2/0.9, 0.0/0.1,0.2/0.9, 0.0/0.1,0.3/0.9, 0.1/0.1,0.3/0.9, 0.1/0.1,0.9/0.9, 0.0/0.1,0.9/0.9 ]
                            vector:[0,0,1,0,1,0.22222222222222224,0,0.3333333333333333,1,0.3333333333333333,1,1,0,0,1,0.22222222222222224,0,0.22222222222222224,0,0.3333333333333333,1,1,0,1],
                            ratio:{x:0.1,y:0.9}, offset:{y:0.1},
                        },
                        'j':{
                            //vector: [ 0.2/0.3,0.0/1.1, 0.3/0.3,0.0/1.1, 0.3/0.3,0.2/1.1, 0.2/0.3,0.2/1.1, 0.2/0.3,0.3/1.1, 0.3/0.3,0.3/1.1, 0.3/0.3,0.95/1.1, 0.15/0.3,1.1/1.1,  0.0/0.3,1.1/1.1, 0.0/0.3,1.0/1.1,  0.1/0.3,1.0/1.1, 0.2/0.3,0.9/1.1 ]
                            vector:[0.6666666666666667,0,1,0,1,0.18181818181818182,0.6666666666666667,0.2727272727272727,1,0.2727272727272727,1,0.8636363636363635,1,0.8636363636363635,0.5,1,0,1,0,1,0,0.9090909090909091,0.33333333333333337,0.9090909090909091,0.6666666666666667,0,1,0.18181818181818182,0.6666666666666667,0.18181818181818182,1,0.8636363636363635,0,1,0.33333333333333337,0.9090909090909091,1,0.8636363636363635,0.33333333333333337,0.9090909090909091,0.6666666666666667,0.8181818181818181,0.6666666666666667,0.2727272727272727,1,0.8636363636363635,0.6666666666666667,0.8181818181818181],
                            ratio:{x:0.3,y:1.1}, offset:{y:0.1},
                            encroach:{
                                'A':1,'B':1,'C':1,'D':1,'E':1,'F':1,'G':1,'H':1,'I':1,'J':1,'L':1,'K':1,'M':1,'N':1,'O':1,'P':1,'Q':1,'R':1,'S':1,'T':1,'U':1,'V':1,'W':1,'X':1,'Y':1,'Z':1,
                                'a':2,'b':1,'c':1,'d':1,'e':1,'f':1,'h':1,'i':1,'k':1,'l':1,'n':1,'m':1,'o':1,'p':1,'r':1,'s':1,'t':1,'u':1,'v':1,'w':1,'x':1,'z':1,
                            },
                        },
                        'k':{
                            //vector: [ 0.0/0.6,0.0, 0.1/0.6,0.0, 0.1/0.6,0.4, 0.6/0.6,0.4, 0.6/0.6,0.5, 0.4/0.6,0.5, 0.6/0.6,1.0, 0.5/0.6,1.0, 0.3/0.6,0.5, 0.1/0.6,0.5, 0.1/0.6,1.0, 0.0/0.6,1.0 ]
                            vector:[0.16666666666666669,1,0,1,0,0,0,0,0.16666666666666669,0,0.16666666666666669,0.4,0.16666666666666669,0.4,1,0.4,1,0.5,0.6666666666666667,0.5,1,1,0.8333333333333334,1,0.16666666666666669,0.5,0.16666666666666669,1,0,0,0.16666666666666669,0.4,1,0.5,0.6666666666666667,0.5,0.6666666666666667,0.5,0.8333333333333334,1,0.5,0.5,0.16666666666666669,0.5,0,0,0.16666666666666669,0.4,0.16666666666666669,0.4,0.6666666666666667,0.5,0.5,0.5,0.5,0.5,0.16666666666666669,0.5,0.16666666666666669,0.4],
                            ratio:{x:0.6},
                        },
                        'l':{
                            //vector: [ 0.0/0.4,0.0, 0.1/0.4,0.0, 0.1/0.4,0.75, 0.25/0.4,0.9, 0.4/0.4,0.9, 0.4/0.4,1.0, 0.2/0.4,1.0, 0.0/0.4,0.8 ]
                            vector:[0,0.8,0,0,0.25,0,0.625,0.9,1,0.9,1,1,1,1,0.5,1,0,0.8,0,0.8,0.25,0,0.25,0.75,0.625,0.9,1,1,0,0.8,0,0.8,0.25,0.75,0.625,0.9],
                            ratio:{x:0.4},
                        },
                        'm':{
                            //vector: [ 0.0/1.1,0.0/0.6, 0.4/1.1,0.0/0.6,0.5/1.1,0.1/0.6, 0.5/1.1,0.0/0.6, 0.9/1.1,0.0/0.6, 1.1/1.1,0.2/0.6, 1.1/1.1,0.6/0.6, 1.0/1.1,0.6/0.6, 1.0/1.1,0.25/0.6, 0.85/1.1,0.1/0.6, 0.6/1.1,0.1/0.6, 0.6/1.1,0.6/0.6, 0.5/1.1,0.6/0.6, 0.5/1.1,0.25/0.6, 0.35/1.1,0.1/0.6, 0.1/1.1,0.1/0.6, 0.1/1.1,0.6/0.6, 0.0/1.1,0.6/0.6 ]
                            vector:[0.09090909090909091,1,0,1,0,0,0,0,0.36363636363636365,0,0.45454545454545453,0.16666666666666669,0.45454545454545453,0.16666666666666669,0.45454545454545453,0,0.8181818181818181,0,1,0.33333333333333337,1,1,0.9090909090909091,1,0.5454545454545454,0.16666666666666669,0.5454545454545454,1,0.45454545454545453,1,0.09090909090909091,0.16666666666666669,0.09090909090909091,1,0,0,1,0.33333333333333337,0.9090909090909091,1,0.9090909090909091,0.4166666666666667,0.5454545454545454,0.16666666666666669,0.45454545454545453,1,0.45454545454545453,0.4166666666666667,0.3181818181818181,0.16666666666666669,0.09090909090909091,0.16666666666666669,0,0,0.8181818181818181,0,1,0.33333333333333337,0.9090909090909091,0.4166666666666667,0.3181818181818181,0.16666666666666669,0,0,0.45454545454545453,0.16666666666666669,0.8181818181818181,0,0.9090909090909091,0.4166666666666667,0.7727272727272726,0.16666666666666669,0.45454545454545453,0.4166666666666667,0.3181818181818181,0.16666666666666669,0.45454545454545453,0.16666666666666669,0.8181818181818181,0,0.7727272727272726,0.16666666666666669,0.5454545454545454,0.16666666666666669,0.5454545454545454,0.16666666666666669,0.45454545454545453,0.4166666666666667,0.45454545454545453,0.16666666666666669,0.45454545454545453,0.16666666666666669,0.8181818181818181,0,0.5454545454545454,0.16666666666666669],
                            ratio:{x:1.1,y:0.6}, offset:{y:0.4},
                        },
                        'n':{
                            //vector: [ 0.0/0.6,0.0/0.6, 0.4/0.6,0.0/0.6, 0.6/0.6,0.2/0.6, 0.6/0.6,0.6/0.6, 0.5/0.6,0.6/0.6, 0.5/0.6,0.25/0.6, 0.35/0.6,0.1/0.6, 0.1/0.6,0.1/0.6, 0.1/0.6,0.6/0.6, 0.0/0.6,0.6/0.6 ]
                            vector:[0.16666666666666669,1,0,1,0,0,1,0.33333333333333337,1,1,0.8333333333333334,1,0.16666666666666669,0.16666666666666669,0.16666666666666669,1,0,0,1,0.33333333333333337,0.8333333333333334,1,0.8333333333333334,0.4166666666666667,0.5833333333333334,0.16666666666666669,0.16666666666666669,0.16666666666666669,0,0,0.6666666666666667,0,1,0.33333333333333337,0.8333333333333334,0.4166666666666667,0.5833333333333334,0.16666666666666669,0,0,0.6666666666666667,0,0.6666666666666667,0,0.8333333333333334,0.4166666666666667,0.5833333333333334,0.16666666666666669],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                        },
                        'o':{
                            //vector: [ 0.2/0.6,0.0/0.6, 0.4/0.6,0.0/0.6, 0.6/0.6,0.2/0.6, 0.6/0.6,0.4/0.6, 0.4/0.6,0.6/0.6, 0.2/0.6,0.6/0.6, 0.0/0.6,0.4/0.6, 0.0/0.6,0.2/0.6, 0.2/0.6,0.0/0.6, 0.25/0.6,0.1/0.6, 0.1/0.6,0.25/0.6, 0.1/0.6,0.35/0.6, 0.25/0.6,0.5/0.6, 0.35/0.6,0.5/0.6, 0.5/0.6,0.35/0.6, 0.5/0.6,0.25/0.6, 0.35/0.6,0.1/0.6, 0.25/0.6,0.1/0.6 ]
                            vector:[0.5833333333333334,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.33333333333333337,0,0.33333333333333337,0,0.6666666666666667,0,1,0.33333333333333337,1,0.33333333333333337,1,0.6666666666666667,0.6666666666666667,1,0.6666666666666667,1,0.33333333333333337,1,0,0.6666666666666667,0,0.6666666666666667,0,0.33333333333333337,0.33333333333333337,0,0.33333333333333337,0,0.4166666666666667,0.16666666666666669,0.16666666666666669,0.4166666666666667,0.5833333333333334,0.16666666666666669,0.33333333333333337,0,1,0.33333333333333337,0,0.6666666666666667,0.33333333333333337,0,0.16666666666666669,0.4166666666666667,0.8333333333333334,0.4166666666666667,0.5833333333333334,0.16666666666666669,1,0.33333333333333337,0,0.6666666666666667,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.5833333333333334,0.8333333333333334,0.5833333333333334,0.8333333333333334,0.4166666666666667,1,0.33333333333333337,0,0.6666666666666667,0.16666666666666669,0.5833333333333334,0.4166666666666667,0.8333333333333334,0.8333333333333334,0.5833333333333334,1,0.33333333333333337,0.6666666666666667,1,0.6666666666666667,1,0,0.6666666666666667,0.4166666666666667,0.8333333333333334,0.5833333333333334,0.8333333333333334,0.8333333333333334,0.5833333333333334,0.6666666666666667,1,0.6666666666666667,1,0.4166666666666667,0.8333333333333334,0.5833333333333334,0.8333333333333334],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                        },
                        'p':{
                            //vector: [ 0.0/0.6,0.0, 0.4/0.6,0.0, 0.6/0.6,0.2, 0.6/0.6,0.4, 0.4/0.6,0.6, 0.1/0.6,0.6, 0.1/0.6,0.5, 0.35/0.6,0.5, 0.5/0.6,0.35, 0.5/0.6,0.25, 0.35/0.6,0.1, 0.1/0.6,0.1, 0.1/0.6,1.0, 0.0/0.6,1.0 ]
                            vector:[0.16666666666666669,1,0,1,0,0,0.6666666666666667,0,1,0.2,1,0.4,0.6666666666666667,0.6,0.16666666666666669,0.6,0.16666666666666669,0.5,0.16666666666666669,0.1,0.16666666666666669,1,0,0,0.6666666666666667,0.6,0.16666666666666669,0.5,0.5833333333333334,0.5,0.5833333333333334,0.1,0.16666666666666669,0.1,0,0,1,0.4,0.6666666666666667,0.6,0.5833333333333334,0.5,0.5833333333333334,0.1,0,0,0.6666666666666667,0,1,0.4,0.5833333333333334,0.5,0.8333333333333334,0.35,0.8333333333333334,0.25,0.5833333333333334,0.1,0.6666666666666667,0,1,0.4,0.8333333333333334,0.35,0.8333333333333334,0.25,0.8333333333333334,0.25,0.6666666666666667,0,1,0.4],
                            ratio:{x:0.6}, offset:{y:0.4},
                        },
                        'q':{
                            //vector: [ 0.6/0.6,0.0, 0.2/0.6,0.0, 0.0/0.6,0.2, 0.0/0.6,0.4, 0.2/0.6,0.6, 0.5/0.6,0.6, 0.5/0.6,0.5, 0.25/0.6,0.5, 0.1/0.6,0.35, 0.1/0.6,0.25, 0.25/0.6,0.1, 0.5/0.6,0.1, 0.5/0.6,1.0, 0.6/0.6,1.0 ]
                            vector:[1,0,1,1,0.8333333333333334,1,0.4166666666666667,0.5,0.8333333333333334,0.5,0.8333333333333334,0.6,0.33333333333333337,0.6,0,0.4,0,0.2,1,0,0.8333333333333334,1,0.8333333333333334,0.1,0.4166666666666667,0.5,0.8333333333333334,0.6,0.33333333333333337,0.6,0.33333333333333337,0,1,0,0.8333333333333334,0.1,0.16666666666666669,0.35,0.4166666666666667,0.5,0.33333333333333337,0.6,0.33333333333333337,0,0.8333333333333334,0.1,0.4166666666666667,0.1,0.16666666666666669,0.35,0.33333333333333337,0.6,0,0.2,0,0.2,0.33333333333333337,0,0.4166666666666667,0.1,0.16666666666666669,0.25,0.16666666666666669,0.35,0,0.2,0,0.2,0.4166666666666667,0.1,0.16666666666666669,0.25],
                            ratio:{x:0.6}, offset:{y:0.4},
                        },
                        'r':{
                            //vector: [ 0.0/0.6,0.0/0.6, 0.1/0.6,0.0/0.6, 0.1/0.6,0.1/0.6, 0.2/0.6,0.0/0.6, 0.6/0.6,0.0/0.6, 0.6/0.6,0.1/0.6, 0.25/0.6,0.1/0.6, 0.1/0.6,0.25/0.6, 0.1/0.6,0.6/0.6, 0.0/0.6,0.6/0.6 ]
                            vector:[0.16666666666666669,1,0,1,0,0,0,0,0.16666666666666669,0,0.16666666666666669,0.16666666666666669,0.16666666666666669,0.16666666666666669,0.33333333333333337,0,1,0,1,0,1,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.16666666666666669,0.4166666666666667,0.16666666666666669,1,0,0,0.16666666666666669,0.16666666666666669,1,0,0.4166666666666667,0.16666666666666669,0.16666666666666669,0.4166666666666667,0,0,0.16666666666666669,0.16666666666666669,0.16666666666666669,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.16666666666666669,0.4166666666666667],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                        },
                        's':{
                            //vector: [ 0.2/0.6,0.0/0.6, 0.6/0.6,0.0/0.6, 0.6/0.6,0.1/0.6, 0.25/0.6,0.1/0.6, 0.1/0.6,0.25/0.6, 0.6/0.6,0.25/0.6, 0.6/0.6,0.4/0.6, 0.4/0.6,0.6/0.6, 0.0/0.6,0.6/0.6, 0.0/0.6,0.5/0.6, 0.35/0.6,0.5/0.6, 0.5/0.6,0.35/0.6, 0.0/0.6,0.35/0.6, 0.0/0.6,0.2/0.6 ]
                            vector:[0,0.5833333333333334,0,0.33333333333333337,0.33333333333333337,0,0.33333333333333337,0,1,0,1,0.16666666666666669,1,0.4166666666666667,1,0.6666666666666667,0.6666666666666667,1,0.6666666666666667,1,0,1,0,0.8333333333333334,0.33333333333333337,0,1,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.6666666666666667,1,0,0.8333333333333334,0.5833333333333334,0.8333333333333334,0.33333333333333337,0,0.4166666666666667,0.16666666666666669,0.16666666666666669,0.4166666666666667,0.6666666666666667,1,0.5833333333333334,0.8333333333333334,0.8333333333333334,0.5833333333333334,0,0.5833333333333334,0.33333333333333337,0,0.16666666666666669,0.4166666666666667,1,0.4166666666666667,0.6666666666666667,1,0.8333333333333334,0.5833333333333334,0.8333333333333334,0.5833333333333334,0,0.5833333333333334,0.16666666666666669,0.4166666666666667,0.16666666666666669,0.4166666666666667,1,0.4166666666666667,0.8333333333333334,0.5833333333333334],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                            encroach:{'r':1},
                        },
                        't':{
                            //vector: [ 0.2/0.5,0.0, 0.3/0.5,0.0, 0.3/0.5,0.4, 0.5/0.5,0.4, 0.5/0.5,0.5, 0.3/0.5,0.5, 0.3/0.5,1.0, 0.2/0.5,1.0, 0.2/0.5,0.5, 0.0/0.5,0.5, 0.0/0.5,0.4, 0.2/0.5,0.4 ]
                            vector:[0.4,0.4,0.4,0,0.6,0,0.6,0.4,1,0.4,1,0.5,0.6,0.5,0.6,1,0.4,1,0.4,0.5,0,0.5,0,0.4,0.4,0.4,0.6,0,0.6,0.4,0.6,0.4,1,0.5,0.6,0.5,0.6,0.5,0.4,1,0.4,0.5,0.4,0.5,0,0.4,0.4,0.4,0.4,0.4,0.6,0.4,0.6,0.5,0.6,0.5,0.4,0.5,0.4,0.4],
                            ratio:{x:0.5},
                            encroach:{'l':1},
                        },
                        'u':{
                            //vector: [ 0.0/0.6,0.0/0.6, 0.1/0.6,0.0/0.6, 0.1/0.6,0.35/0.6, 0.25/0.6,0.5/0.6, 0.5/0.6,0.5/0.6, 0.5/0.6,0.0/0.6, 0.6/0.6,0.0/0.6, 0.6/0.6,0.6/0.6, 0.2/0.6,0.6/0.6, 0.0/0.6,0.4/0.6 ]
                            vector:[0,0.6666666666666667,0,0,0.16666666666666669,0,0.8333333333333334,0.8333333333333334,0.8333333333333334,0,1,0,0,0.6666666666666667,0.16666666666666669,0,0.16666666666666669,0.5833333333333334,0.8333333333333334,0.8333333333333334,1,0,1,1,0.33333333333333337,1,0,0.6666666666666667,0.16666666666666669,0.5833333333333334,0.4166666666666667,0.8333333333333334,0.8333333333333334,0.8333333333333334,1,1,0.33333333333333337,1,0.16666666666666669,0.5833333333333334,0.4166666666666667,0.8333333333333334,0.4166666666666667,0.8333333333333334,1,1,0.33333333333333337,1],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                            encroach:{'a':1},
                        },
                        'v':{
                            //vector: [ 0.0/0.6,0.0/0.6, 0.1/0.6,0.0/0.6, 0.3/0.6,0.45/0.6, 0.5/0.6,0.0/0.6, 0.6/0.6,0.0/0.6, 0.35/0.6,0.6/0.6, 0.25/0.6,0.6/0.6 ]
                            vector:[0.5833333333333334,1,0.4166666666666667,1,0,0,0,0,0.16666666666666669,0,0.5,0.75,0.5,0.75,0.8333333333333334,0,1,0,0.5833333333333334,1,0,0,0.5,0.75,0.5,0.75,1,0,0.5833333333333334,1],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                        },
                        'w':{
                            //vector: [ 0.0/1.1,0.0/0.6, 0.1/1.1,0.0/0.6, 0.1/1.1,0.35/0.6, 0.25/1.1,0.5/0.6, 0.5/1.1,0.5/0.6, 0.5/1.1,0.0/0.6, 0.6/1.1,0.0/0.6, 0.6/1.1,0.35/0.6, 0.75/1.1,0.5/0.6, 1.0/1.1,0.5/0.6, 1.0/1.1,0.0/0.6, 1.1/1.1,0.0/0.6, 1.1/1.1,0.6/0.6, 0.7/1.1,0.6/0.6, 0.6/1.1,0.5/0.6, 0.6/1.1,0.6/0.6, 0.2/1.1,0.6/0.6, 0.0/1.1,0.4/0.6 ]
                            vector:[0,0.6666666666666667,0,0,0.09090909090909091,0,0.45454545454545453,0.8333333333333334,0.45454545454545453,0,0.5454545454545454,0,0.9090909090909091,0.8333333333333334,0.9090909090909091,0,1,0,1,1,0.6363636363636362,1,0.5454545454545454,0.8333333333333334,0.5454545454545454,0.8333333333333334,0.5454545454545454,1,0.18181818181818182,1,0,0.6666666666666667,0.09090909090909091,0,0.09090909090909091,0.5833333333333334,0.45454545454545453,0.8333333333333334,0.5454545454545454,0,0.5454545454545454,0.5833333333333334,0.9090909090909091,0.8333333333333334,1,0,1,1,0.18181818181818182,1,0,0.6666666666666667,0.09090909090909091,0.5833333333333334,0.6818181818181818,0.8333333333333334,0.9090909090909091,0.8333333333333334,1,1,0.18181818181818182,1,0.09090909090909091,0.5833333333333334,0.22727272727272727,0.8333333333333334,0.6818181818181818,0.8333333333333334,1,1,0.5454545454545454,0.8333333333333334,0.18181818181818182,1,0.22727272727272727,0.8333333333333334,0.45454545454545453,0.8333333333333334,0.5454545454545454,0.5833333333333334,0.6818181818181818,0.8333333333333334,0.5454545454545454,0.8333333333333334,0.5454545454545454,0.8333333333333334,0.18181818181818182,1,0.45454545454545453,0.8333333333333334,0.45454545454545453,0.8333333333333334,0.5454545454545454,0.5833333333333334,0.5454545454545454,0.8333333333333334],
                            ratio:{x:1.1,y:0.6}, offset:{y:0.4},
                        },
                        'x':{
                            //vector: [ 0.0/0.6,0.0/0.6, 0.125/0.6,0.0/0.6, 0.3/0.6,0.225/0.6, 0.475/0.6,0.0/0.6, 0.6/0.6,0.0/0.6, 0.366/0.6,0.3/0.6, 0.6/0.6,0.6/0.6, 0.475/0.6,0.6/0.6, 0.3/0.6,0.375/0.6, 0.125/0.6,0.6/0.6, 0.0/0.6,0.6/0.6, 0.233/0.6,0.3/0.6 ]
                            vector:[0.38833333333333336,0.5,0,0,0.20833333333333334,0,0.5,0.375,0.7916666666666666,0,1,0,0.61,0.5,1,1,0.7916666666666666,1,0.5,0.625,0.20833333333333334,1,0,1,0.38833333333333336,0.5,0.20833333333333334,0,0.5,0.375,0.5,0.375,1,0,0.61,0.5,0.61,0.5,0.7916666666666666,1,0.5,0.625,0.5,0.625,0,1,0.38833333333333336,0.5,0.38833333333333336,0.5,0.5,0.375,0.61,0.5,0.61,0.5,0.5,0.625,0.38833333333333336,0.5],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                        },
                        'y':{
                            //vector: [ 0.0/0.6,0.0/1.1, 0.1/0.6,0.0/1.1, 0.1/0.6,0.35/1.1, 0.25/0.6,0.5/1.1, 0.5/0.6,0.5/1.1, 0.5/0.6,0.0/1.1, 0.6/0.6,0.0/1.1, 0.6/0.6,0.9/1.1, 0.4/0.6,1.1/1.1, 0.2/0.6,1.1/1.1, 0.0/0.6,0.9/1.1, 0.0/0.6,0.8/1.1, 0.1/0.6,0.8/1.1, 0.1/0.6,0.85/1.1, 0.25/0.6,1.0/1.1, 0.35/0.6,1.0/1.1, 0.5/0.6,0.85/1.1, 0.5/0.6,0.6/1.1,0.2/0.6,0.6/1.1, 0.0/0.6,0.4/1.1 ]
                            vector:[0,0.36363636363636365,0,0,0.16666666666666669,0,0.8333333333333334,0.45454545454545453,0.8333333333333334,0,1,0,1,0.8181818181818181,0.6666666666666667,1,0.33333333333333337,1,0.33333333333333337,1,0,0.8181818181818181,0,0.7272727272727273,0,0.7272727272727273,0.16666666666666669,0.7272727272727273,0.16666666666666669,0.7727272727272726,0,0.36363636363636365,0.16666666666666669,0,0.16666666666666669,0.3181818181818181,0.8333333333333334,0.45454545454545453,1,0,1,0.8181818181818181,0.33333333333333337,1,0,0.7272727272727273,0.16666666666666669,0.7727272727272726,0.33333333333333337,0.5454545454545454,0,0.36363636363636365,0.16666666666666669,0.3181818181818181,0.33333333333333337,1,0.16666666666666669,0.7727272727272726,0.4166666666666667,0.9090909090909091,0.33333333333333337,0.5454545454545454,0.16666666666666669,0.3181818181818181,0.4166666666666667,0.45454545454545453,0.33333333333333337,1,0.4166666666666667,0.9090909090909091,0.5833333333333334,0.9090909090909091,0.8333333333333334,0.5454545454545454,0.33333333333333337,0.5454545454545454,0.4166666666666667,0.45454545454545453,1,0.8181818181818181,0.33333333333333337,1,0.5833333333333334,0.9090909090909091,0.8333333333333334,0.5454545454545454,0.4166666666666667,0.45454545454545453,0.8333333333333334,0.45454545454545453,1,0.8181818181818181,0.5833333333333334,0.9090909090909091,0.8333333333333334,0.7727272727272726,0.8333333333333334,0.5454545454545454,0.8333333333333334,0.45454545454545453,1,0.8181818181818181,1,0.8181818181818181,0.8333333333333334,0.7727272727272726,0.8333333333333334,0.5454545454545454],
                            ratio:{x:0.6,y:1.1}, offset:{y:0.4},
                        },
                        'z':{
                            //vector: [ 0.0/0.6,0.0/0.6, 0.6/0.6,0.0/0.6, 0.6/0.6,0.1/0.6, 0.15/0.6,0.5/0.6, 0.6/0.6,0.5/0.6, 0.6/0.6,0.6/0.6, 0.0/0.6,0.6/0.6, 0.0/0.6,0.5/0.6, 0.45/0.6,0.1/0.6, 0.0/0.6,0.1/0.6 ]
                            vector:[0.75,0.16666666666666669,0,0.16666666666666669,0,0,0,0,1,0,1,0.16666666666666669,0.25,0.8333333333333334,1,0.8333333333333334,1,1,1,1,0,1,0,0.8333333333333334,0.75,0.16666666666666669,0,0,1,0.16666666666666669,0.25,0.8333333333333334,1,1,0,0.8333333333333334,0,0.8333333333333334,0.75,0.16666666666666669,1,0.16666666666666669,1,0.16666666666666669,0.25,0.8333333333333334,0,0.8333333333333334],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.4},
                        },
                    
                        '0':{
                            //vector: [ 0.2/0.8,0.0, 0.6/0.8,0.0, 0.8/0.8,0.2, 0.8/0.8,0.8, 0.6/0.8,1.0, 0.2/0.8,1.0, 0.0/0.8,0.8, 0.0/0.8,0.2, 0.2/0.8,0.0, 0.25/0.8,0.1, 0.1/0.8,0.25, 0.1/0.8,0.75, 0.25/0.8,0.9, 0.55/0.8,0.9, 0.7/0.8,0.75, 0.7/0.8,0.25, 0.55/0.8,0.1, 0.25/0.8,0.1 ]
                            vector:[0.6875,0.1,0.3125,0.1,0.25,0,0,0.2,0.25,0,0.3125,0.1,0.6875,0.1,0.25,0,0.7499999999999999,0,0,0.2,0.3125,0.1,0.125,0.25,0.8749999999999999,0.25,0.6875,0.1,0.7499999999999999,0,0,0.8,0,0.2,0.125,0.25,0.8749999999999999,0.25,0.7499999999999999,0,1,0.2,0,0.8,0.125,0.25,0.125,0.75,0.8749999999999999,0.75,0.8749999999999999,0.25,1,0.2,0.25,1,0,0.8,0.125,0.75,0.8749999999999999,0.75,1,0.2,1,0.8,0.25,1,0.125,0.75,0.3125,0.9,0.6875,0.9,0.8749999999999999,0.75,1,0.8,0.7499999999999999,1,0.25,1,0.3125,0.9,0.6875,0.9,1,0.8,0.7499999999999999,1,0.7499999999999999,1,0.3125,0.9,0.6875,0.9],
                            ratio:{x:0.8},
                        },
                        '1':{
                            //vector: [ 0.0/0.5,0.0, 0.3/0.5,0.0, 0.3/0.5,0.9, 0.5/0.5,0.9, 0.5/0.5,1.0, 0.0/0.5,1.0, 0.0/0.5,0.9, 0.2/0.5,0.9, 0.2/0.5,0.1, 0.0/0.5,0.1 ]
                            vector:[0.4,0.1,0,0.1,0,0,0.6,0.9,1,0.9,1,1,1,1,0,1,0,0.9,0.4,0.1,0,0,0.6,0,1,1,0,0.9,0.4,0.9,0.4,0.9,0.4,0.1,0.6,0,0.6,0.9,1,1,0.4,0.9,0.4,0.9,0.6,0,0.6,0.9],
                            ratio:{x:0.5},
                        },
                        '2':{
                            //vector: [ 0.2/0.8,0.0, 0.6/0.8,0.0, 0.8/0.8,0.2, 0.8/0.8,0.5, 0.2/0.8,0.9, 0.8/0.8,0.9, 0.8/0.8,1.0, 0.0/0.8,1.0, 0.0/0.8,0.9, 0.7/0.8,0.45, 0.7/0.8,0.25, 0.55/0.8,0.1, 0.25/0.8,0.1, 0.08/0.8,0.26, 0.0/0.8,0.2 ]
                            vector:[0.09999999999999999,0.26,0,0.2,0.25,0,0.7499999999999999,0,1,0.2,1,0.5,0.25,0.9,1,0.9,1,1,1,1,0,1,0,0.9,0.3125,0.1,0.09999999999999999,0.26,0.25,0,0.25,0.9,1,1,0,0.9,0.6875,0.1,0.3125,0.1,0.25,0,1,0.5,0.25,0.9,0,0.9,0.6875,0.1,0.25,0,0.7499999999999999,0,1,0.5,0,0.9,0.8749999999999999,0.45,0.8749999999999999,0.25,0.6875,0.1,0.7499999999999999,0,1,0.5,0.8749999999999999,0.45,0.8749999999999999,0.25,0.8749999999999999,0.25,0.7499999999999999,0,1,0.5],
                            ratio:{x:0.8},
                        },
                        '3':{
                            //vector: [ 0.0/0.8,0.2, 0.2/0.8,0.0, 0.6/0.8,0.0, 0.8/0.8,0.2, 0.8/0.8,0.4, 0.7/0.8,0.5, 0.8/0.8,0.6, 0.8/0.8,0.8, 0.6/0.8,1.0, 0.2/0.8,1.0, 0.0/0.8,0.8, 0.08/0.8,0.74, 0.25/0.8,0.9, 0.55/0.8,0.9, 0.7/0.8,0.75, 0.7/0.8,0.65, 0.6/0.8,0.55, 0.3/0.8,0.55, 0.3/0.8,0.45, 0.6/0.8,0.45, 0.7/0.8,0.35, 0.7/0.8,0.25, 0.55/0.8,0.1, 0.25/0.8,0.1, 0.08/0.8,0.26 ]
                            vector:[0.3125,0.1,0.09999999999999999,0.26,0,0.2,0.7499999999999999,0,1,0.2,1,0.4,0.8749999999999999,0.5,1,0.6,1,0.8,0.25,1,0,0.8,0.09999999999999999,0.74,0.7499999999999999,0.55,0.37499999999999994,0.55,0.37499999999999994,0.45,0.3125,0.1,0,0.2,0.25,0,0.25,1,0.09999999999999999,0.74,0.3125,0.9,0.7499999999999999,0.55,0.37499999999999994,0.45,0.7499999999999999,0.45,0.6875,0.1,0.3125,0.1,0.25,0,0.7499999999999999,1,0.25,1,0.3125,0.9,0.8749999999999999,0.65,0.7499999999999999,0.55,0.7499999999999999,0.45,0.6875,0.1,0.25,0,0.7499999999999999,0,0.7499999999999999,1,0.3125,0.9,0.6875,0.9,0.8749999999999999,0.25,0.6875,0.1,0.7499999999999999,0,1,0.8,0.7499999999999999,1,0.6875,0.9,0.8749999999999999,0.25,0.7499999999999999,0,1,0.4,1,0.8,0.6875,0.9,0.8749999999999999,0.75,0.8749999999999999,0.35,0.8749999999999999,0.25,1,0.4,1,0.8,0.8749999999999999,0.75,0.8749999999999999,0.65,0.7499999999999999,0.45,0.8749999999999999,0.35,1,0.4,0.8749999999999999,0.5,1,0.8,0.8749999999999999,0.65,0.7499999999999999,0.45,1,0.4,0.8749999999999999,0.5,0.8749999999999999,0.5,0.8749999999999999,0.65,0.7499999999999999,0.45],
                            ratio:{x:0.8},
                        },
                        '4':{
                            //vector: [ 0.0/0.8,0.0, 0.1/0.8,0.0, 0.1/0.8,0.25, 0.25/0.8,0.4, 0.7/0.8,0.4, 0.7/0.8,0.0, 0.8/0.8,0.0, 0.8/0.8,1.0, 0.7/0.8,1.0, 0.7/0.8,0.5, 0.2/0.8,0.5, 0.0/0.8,0.3 ]
                            vector:[0,0.3,0,0,0.125,0,0.8749999999999999,0.4,0.8749999999999999,0,1,0,1,0,1,1,0.8749999999999999,1,0,0.3,0.125,0,0.125,0.25,1,0,0.8749999999999999,1,0.8749999999999999,0.5,0.25,0.5,0,0.3,0.125,0.25,0.8749999999999999,0.4,1,0,0.8749999999999999,0.5,0.25,0.5,0.125,0.25,0.3125,0.4,0.3125,0.4,0.8749999999999999,0.4,0.8749999999999999,0.5,0.8749999999999999,0.5,0.25,0.5,0.3125,0.4],
                            ratio:{x:0.8},
                        },
                        '5':{
                            //vector: [ 0.0/0.8,0.0, 0.8/0.8,0.0, 0.8/0.8,0.1, 0.1/0.8,0.1, 0.1/0.8,0.4, 0.7/0.8,0.4, 0.8/0.8,0.5, 0.8/0.8,0.8, 0.6/0.8,1.0, 0.0/0.8,1.0, 0.0/0.8,0.9, 0.55/0.8,0.9, 0.7/0.8,0.75, 0.7/0.8,0.55, 0.65/0.8,0.5, 0.0/0.8,0.5 ]
                            vector:[0,0,1,0,1,0.1,0.125,0.4,0.8749999999999999,0.4,1,0.5,1,0.5,1,0.8,0.7499999999999999,1,0.7499999999999999,1,0,1,0,0.9,0,0,1,0.1,0.125,0.1,0.7499999999999999,1,0,0.9,0.6875,0.9,0,0.5,0,0,0.125,0.1,0.7499999999999999,1,0.6875,0.9,0.8749999999999999,0.75,0,0.5,0.125,0.1,0.125,0.4,1,0.5,0.7499999999999999,1,0.8749999999999999,0.75,0.8125,0.5,0,0.5,0.125,0.4,1,0.5,0.8749999999999999,0.75,0.8749999999999999,0.55,0.8125,0.5,0.125,0.4,1,0.5,1,0.5,0.8749999999999999,0.55,0.8125,0.5],
                            ratio:{x:0.8},
                        },
                        '6':{
                            //vector: [ 0.2/0.8,0.0, 0.8/0.8,0.0, 0.8/0.8,0.1, 0.25/0.8,0.1, 0.1/0.8,0.25, 0.1/0.8,0.75, 0.25/0.8,0.9, 0.55/0.8,0.9, 0.7/0.8,0.75, 0.7/0.8,0.55, 0.65/0.8,0.5, 0.1/0.8,0.5, 0.1/0.8,0.4, 0.7/0.8,0.4, 0.8/0.8,0.5, 0.8/0.8,0.8, 0.6/0.8,1.0, 0.2/0.8,1.0, 0.0/0.8,0.8, 0.0/0.8,0.2 ]
                            vector:[0.25,0,1,0,1,0.1,0.8125,0.5,0.125,0.5,0.125,0.4,0.125,0.4,0.8749999999999999,0.4,1,0.5,1,0.5,1,0.8,0.7499999999999999,1,0.25,0,1,0.1,0.3125,0.1,0.8125,0.5,0.125,0.4,1,0.5,0,0.2,0.25,0,0.3125,0.1,0.8749999999999999,0.55,0.8125,0.5,1,0.5,0,0.2,0.3125,0.1,0.125,0.25,0.8749999999999999,0.75,0.8749999999999999,0.55,1,0.5,0,0.8,0,0.2,0.125,0.25,0.8749999999999999,0.75,1,0.5,0.7499999999999999,1,0,0.8,0.125,0.25,0.125,0.75,0.6875,0.9,0.8749999999999999,0.75,0.7499999999999999,1,0.25,1,0,0.8,0.125,0.75,0.3125,0.9,0.6875,0.9,0.7499999999999999,1,0.25,1,0.125,0.75,0.3125,0.9,0.3125,0.9,0.7499999999999999,1,0.25,1],
                            ratio:{x:0.8},
                        },
                        '7':{
                            //vector: [ 0.0/0.8,0.0, 0.8/0.8,0.0, 0.8/0.8,0.1, 0.12/0.8,1.0, 0.0/0.8,1.0, 0.66/0.8,0.1, 0.0/0.8,0.1 ]
                            vector:[0.825,0.1,0,0.1,0,0,0,0,1,0,1,0.1,1,0.1,0.15,1,0,1,0.825,0.1,0,0,1,0.1,1,0.1,0,1,0.825,0.1],
                            ratio:{x:0.8},
                        },
                        '8':{
                            //vector: [ 0.1/0.8,0.0, 0.7/0.8,0.0, 0.8/0.8,0.1, 0.8/0.8,0.35, 0.7/0.8,0.45, 0.8/0.8,0.55, 0.8/0.8,0.8, 0.6/0.8,1.0, 0.2/0.8,1.0, 0.0/0.8,0.8, 0.0/0.8,0.55, 0.1/0.8,0.45, 0.2/0.8,0.5, 0.1/0.8,0.6, 0.1/0.8,0.75, 0.25/0.8,0.9, 0.55/0.8,0.9, 0.7/0.8,0.75, 0.7/0.8,0.6, 0.6/0.8,0.5, 0.2/0.8,0.5, 0.1/0.8,0.45, 0.0/0.8,0.35, 0.0/0.8,0.1, 0.1/0.8,0.0, 0.15/0.8,0.1, 0.1/0.8,0.15, 0.1/0.8,0.3, 0.2/0.8,0.4, 0.6/0.8,0.4, 0.7/0.8,0.3, 0.7/0.8,0.15, 0.65/0.8,0.1, 0.15/0.8,0.1 ]
                            vector:[0.8125,0.1,0.18749999999999997,0.1,0.125,0,0.125,0,0.8749999999999999,0,1,0.1,1,0.1,1,0.35,0.8749999999999999,0.45,0.8749999999999999,0.45,1,0.55,1,0.8,0.25,1,0,0.8,0,0.55,0,0.55,0.125,0.45,0.25,0.5,0.7499999999999999,0.5,0.25,0.5,0.125,0.45,0.125,0.45,0,0.35,0,0.1,0,0.1,0.125,0,0.18749999999999997,0.1,0.8125,0.1,0.125,0,1,0.1,0,0.55,0.25,0.5,0.125,0.6,0,0.1,0.18749999999999997,0.1,0.125,0.15,0.8749999999999999,0.15,0.8125,0.1,1,0.1,0,0.55,0.125,0.6,0.125,0.75,0,0.1,0.125,0.15,0.125,0.3,0.8749999999999999,0.3,0.8749999999999999,0.15,1,0.1,0.25,1,0,0.55,0.125,0.75,0.125,0.45,0,0.1,0.125,0.3,0.8749999999999999,0.3,1,0.1,0.8749999999999999,0.45,0.25,1,0.125,0.75,0.3125,0.9,0.125,0.45,0.125,0.3,0.25,0.4,0.7499999999999999,0.4,0.8749999999999999,0.3,0.8749999999999999,0.45,0.7499999999999999,1,0.25,1,0.3125,0.9,0.7499999999999999,0.5,0.125,0.45,0.25,0.4,0.25,0.4,0.7499999999999999,0.4,0.8749999999999999,0.45,0.7499999999999999,1,0.3125,0.9,0.6875,0.9,0.7499999999999999,0.5,0.25,0.4,0.8749999999999999,0.45,1,0.8,0.7499999999999999,1,0.6875,0.9,0.8749999999999999,0.6,0.7499999999999999,0.5,0.8749999999999999,0.45,1,0.8,0.6875,0.9,0.8749999999999999,0.75,0.8749999999999999,0.6,0.8749999999999999,0.45,1,0.8,1,0.8,0.8749999999999999,0.75,0.8749999999999999,0.6],
                            ratio:{x:0.8},
                        },
                        '9':{
                            //vector: [ 0.2/0.8,0.0, 0.6/0.8,0.0, 0.8/0.8,0.2, 0.8/0.8,0.7, 0.5/0.8,1.0, 0.0/0.8,1.0, 0.0/0.8,0.9, 0.45/0.8,0.9, 0.7/0.8,0.65, 0.7/0.8,0.25, 0.55/0.8,0.1, 0.25/0.8,0.1, 0.1/0.8,0.25, 0.1/0.8,0.35, 0.12/0.8,0.4, 0.7/0.8,0.4, 0.7/0.8,0.5, 0.1/0.8,0.5, 0.0/0.8,0.4, 0.0/0.8,0.2 ]
                            vector:[0,0.4,0,0.2,0.25,0,0.625,1,0,1,0,0.9,0.15,0.4,0.8749999999999999,0.4,0.8749999999999999,0.5,0.8749999999999999,0.5,0.125,0.5,0,0.4,0.625,1,0,0.9,0.5625,0.9,0.15,0.4,0.8749999999999999,0.5,0,0.4,1,0.7,0.625,1,0.5625,0.9,0.125,0.35,0.15,0.4,0,0.4,1,0.7,0.5625,0.9,0.8749999999999999,0.65,0.125,0.25,0.125,0.35,0,0.4,1,0.2,1,0.7,0.8749999999999999,0.65,0.125,0.25,0,0.4,0.25,0,1,0.2,0.8749999999999999,0.65,0.8749999999999999,0.25,0.3125,0.1,0.125,0.25,0.25,0,0.7499999999999999,0,1,0.2,0.8749999999999999,0.25,0.6875,0.1,0.3125,0.1,0.25,0,0.7499999999999999,0,0.8749999999999999,0.25,0.6875,0.1,0.6875,0.1,0.25,0,0.7499999999999999,0],
                            ratio:{x:0.8},
                        },
                    
                        '.':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.1, y:0.1}, offset:{y:0.9},
                        },
                        ',':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.1, y:0.2}, offset:{y:0.9},
                        },
                        ':':{
                            //vector: [ 0.0/0.2,0.0/0.8, 0.2/0.2,0.0/0.8, 0.2/0.2,0.2/0.8, 0.0/0.2,0.2/0.8, 0.0/0.2,0.4/0.8, 0.2/0.2,0.4/0.8, 0.2/0.2,0.6/0.8, 0.0/0.2,0.6/0.8 ]
                            vector:[0,0,1,0,1,0.25,0,0.5,1,0.5,1,0.7499999999999999,0,0,1,0.25,0,0.25,0,0.5,1,0.7499999999999999,0,0.7499999999999999],
                            ratio:{x:0.1, y:0.8}, offset:{y:0.2},
                        },
                        ';':{
                            //vector: [ 0.0,0.0, 1.0,0.0, 1.0,0.2, 0.0,0.2, 0.0,0.7, 1.0,0.7, 1.0,0.9, 0.0,0.9 ]
                            vector:[0,0,1,0,1,0.2,0,0.7,1,0.7,1,0.9,0,0,1,0.2,0,0.2,0,0.7,1,0.9,0,0.9],
                            ratio:{x:0.1}, offset:{y:0.2},
                        },
                        '?':{
                            //vector: [ 0.2/0.7,0.0, 0.5/0.7,0.0, 0.7/0.7,0.2, 0.7/0.7,0.4, 0.5/0.7,0.6, 0.4/0.7,0.6, 0.4/0.7,0.7, 0.3/0.7,0.7, 0.3/0.7,0.8, 0.4/0.7,0.8, 0.4/0.7,1.0, 0.3/0.7,1.0, 0.3/0.7,0.5, 0.45/0.7,0.5, 0.6/0.7,0.35, 0.6/0.7,0.25, 0.45/0.7,0.1, 0.25/0.7,0.1, 0.08/0.7,0.25, 0.0/0.7,0.2 ]
                            vector:[0.1142857142857143,0.25,0,0.2,0.28571428571428575,0,0.7142857142857143,0,1,0.2,1,0.4,1,0.4,0.7142857142857143,0.6,0.5714285714285715,0.6,0.5714285714285715,0.6,0.5714285714285715,0.7,0.4285714285714286,0.7,0.4285714285714286,0.8,0.5714285714285715,0.8,0.5714285714285715,1,0.35714285714285715,0.1,0.1142857142857143,0.25,0.28571428571428575,0,0.4285714285714286,0.8,0.5714285714285715,1,0.4285714285714286,1,0.6428571428571429,0.1,0.35714285714285715,0.1,0.28571428571428575,0,0.6428571428571429,0.1,0.28571428571428575,0,0.7142857142857143,0,0.8571428571428572,0.25,0.6428571428571429,0.1,0.7142857142857143,0,0.8571428571428572,0.25,0.7142857142857143,0,1,0.4,0.8571428571428572,0.35,0.8571428571428572,0.25,1,0.4,0.6428571428571429,0.5,0.8571428571428572,0.35,1,0.4,0.6428571428571429,0.5,1,0.4,0.5714285714285715,0.6,0.4285714285714286,0.5,0.6428571428571429,0.5,0.5714285714285715,0.6,0.4285714285714286,0.5,0.5714285714285715,0.6,0.4285714285714286,0.7],
                            ratio:{x:0.7},
                        },
                        '!':{
                            //vector: [ 0.0,0.0, 1.0,0.0,1.0,0.7, 0.0,0.7, 0.0,0.8, 1.0,0.8, 1.0,1.0, 0.0,1.0 ]
                            vector:[0,0,1,0,1,0.7,0,0.8,1,0.8,1,1,0,0,1,0.7,0,0.7,0,0.8,1,1,0,1],
                            ratio:{x:0.1},
                        },
                        '/':{
                            //vector: [ 0.48/0.6,0.0, 0.6/0.6,0.0, 0.12/0.6,1.0, 0.0/0.6,1.0 ]
                            vector:[0.2,1,0,1,0.8,0,0.8,0,1,0,0.2,1],
                            ratio:{x:0.6},
                        },
                        '\\':{
                            //vector: [ 0.0/0.6,0.0, 0.12/0.6,0.0, 0.6/0.6,1.0, 0.48/0.6,1.0 ]
                            vector:[1,1,0.8,1,0,0,0,0,0.2,0,1,1],
                            ratio:{x:0.6},
                        },
                        '(':{
                            //vector: [ 0.2/0.3,0.0, 0.3/0.3,0.0, 0.3/0.3,0.1, 0.25/0.3,0.1, 0.1/0.3,0.25, 0.1/0.3,0.75, 0.25/0.3,0.9, 0.3/0.3,0.9, 0.3/0.3,1.0, 0.2/0.3,1.0, 0.0/0.3,0.8, 0.0/0.3,0.2 ]
                            vector:[0,0.2,0.6666666666666667,0,1,0,1,0,1,0.1,0.8333333333333334,0.1,0.8333333333333334,0.9,1,0.9,1,1,1,1,0.6666666666666667,1,0,0.8,0,0.2,1,0,0.8333333333333334,0.1,0.33333333333333337,0.75,0.8333333333333334,0.9,1,1,0,0.2,0.8333333333333334,0.1,0.33333333333333337,0.25,0.33333333333333337,0.75,1,1,0,0.8,0,0.8,0,0.2,0.33333333333333337,0.25,0.33333333333333337,0.25,0.33333333333333337,0.75,0,0.8],
                            ratio:{x:0.3},
                        },
                        ')':{
                            //vector: [ 0.1/0.3,0.0, 0.0/0.3,0.0, 0.0/0.3,0.1, 0.05/0.3,0.1, 0.2/0.3,0.25, 0.2/0.3,0.75, 0.05/0.3,0.9, 0.0/0.3,0.9, 0.0/0.3,1.0, 0.1/0.3,1.0, 0.3/0.3,0.8, 0.3/0.3,0.2 ]
                            vector:[0,0,0.33333333333333337,0,1,0.2,1,0.8,0.33333333333333337,1,0,1,0,1,0,0.9,0.16666666666666669,0.9,0.16666666666666669,0.1,0,0.1,0,0,1,0.8,0,1,0.16666666666666669,0.9,0.6666666666666667,0.25,0.16666666666666669,0.1,0,0,1,0.8,0.16666666666666669,0.9,0.6666666666666667,0.75,0.6666666666666667,0.25,0,0,1,0.2,1,0.2,1,0.8,0.6666666666666667,0.75,0.6666666666666667,0.75,0.6666666666666667,0.25,1,0.2],
                            ratio:{x:0.3},
                            encroach:{'p':1},
                        },
                        '[':{
                            //vector: [ 0.0/0.3,0.0, 0.3/0.3,0.0, 0.3/0.3,0.1, 0.1/0.3,0.1, 0.1/0.3,0.9, 0.3/0.3,0.9, 0.3/0.3,1.0, 0.0/0.3,1.0 ]
                            vector:[0,0,1,0,1,0.1,0.33333333333333337,0.9,1,0.9,1,1,0,0,1,0.1,0.33333333333333337,0.1,0.33333333333333337,0.9,1,1,0,1,0,1,0,0,0.33333333333333337,0.1,0.33333333333333337,0.1,0.33333333333333337,0.9,0,1],
                            ratio:{x:0.3},
                        },
                        ']':{
                            //vector: [ 0.3/0.3,0.0, 0.0/0.3,0.0, 0.0/0.3,0.1, 0.2/0.3,0.1, 0.2/0.3,0.9, 0.0/0.3,0.9, 0.0/0.3,1.0, 0.3/0.3,1.0 ]
                            vector:[1,1,0,1,0,0.9,0.6666666666666667,0.1,0,0.1,0,0,1,1,0,0.9,0.6666666666666667,0.9,0.6666666666666667,0.1,0,0,1,0,1,0,1,1,0.6666666666666667,0.9,0.6666666666666667,0.9,0.6666666666666667,0.1,1,0],
                            ratio:{x:0.3},
                        },
                    
                        '{':{
                            //vector: [ 0.3/0.4,0.0, 0.4/0.4,0.0, 0.4/0.4,0.1, 0.35/0.4,0.1, 0.2/0.4,0.25, 0.2/0.4,0.45, 0.15/0.4,0.5, 0.2/0.4,0.55, 0.2/0.4,0.75, 0.35/0.4,0.9, 0.4/0.4,0.9, 0.4/0.4,1.0, 0.3/0.4,1.0, 0.1/0.4,0.8, 0.1/0.4,0.6, 0.0/0.4,0.55, 0.0/0.4,0.45, 0.1/0.4,0.4, 0.1/0.4,0.2 ]
                            vector:[0.25,0.4,0.25,0.2,0.7499999999999999,0,0.7499999999999999,0,1,0,1,0.1,0.5,0.25,0.5,0.45,0.37499999999999994,0.5,0.37499999999999994,0.5,0.5,0.55,0.5,0.75,0.8749999999999999,0.9,1,0.9,1,1,1,1,0.7499999999999999,1,0.25,0.8,0.25,0.6,0,0.55,0,0.45,0.7499999999999999,0,1,0.1,0.8749999999999999,0.1,0.5,0.75,0.8749999999999999,0.9,1,1,0.25,0.6,0,0.45,0.25,0.4,0.7499999999999999,0,0.8749999999999999,0.1,0.5,0.25,0.5,0.75,1,1,0.25,0.8,0.25,0.4,0.7499999999999999,0,0.5,0.25,0.37499999999999994,0.5,0.5,0.75,0.25,0.8,0.25,0.6,0.25,0.4,0.5,0.25,0.37499999999999994,0.5,0.25,0.8,0.25,0.6,0.25,0.6,0.5,0.25,0.37499999999999994,0.5],
                            ratio:{x:0.4},
                        },
                        '}':{
                            //vector: [ 0.1/0.4,0.0, 0.0/0.4,0.0, 0.0/0.4,0.1, 0.05/0.4,0.1, 0.2/0.4,0.25, 0.2/0.4,0.45, 0.25/0.4,0.5, 0.2/0.4,0.55, 0.2/0.4,0.75, 0.05/0.4,0.9, 0.0/0.4,0.9, 0.0/0.4,1.0, 0.1/0.4,1.0, 0.3/0.4,0.8, 0.3/0.4,0.6, 0.4/0.4,0.55, 0.4/0.4,0.45, 0.3/0.4,0.4, 0.3/0.4,0.2 ]
                            vector:[0,0,0.25,0,0.7499999999999999,0.2,0.7499999999999999,0.4,1,0.45,1,0.55,0.7499999999999999,0.6,0.7499999999999999,0.8,0.25,1,0.25,1,0,1,0,0.9,0.5,0.75,0.5,0.55,0.625,0.5,0.625,0.5,0.5,0.45,0.5,0.25,0.125,0.1,0,0.1,0,0,0.7499999999999999,0.4,1,0.55,0.7499999999999999,0.6,0.25,1,0,0.9,0.125,0.9,0.5,0.25,0.125,0.1,0,0,0.25,1,0.125,0.9,0.5,0.75,0.5,0.25,0,0,0.7499999999999999,0.2,0.7499999999999999,0.6,0.25,1,0.5,0.75,0.625,0.5,0.5,0.25,0.7499999999999999,0.2,0.7499999999999999,0.4,0.7499999999999999,0.6,0.5,0.75,0.625,0.5,0.7499999999999999,0.2,0.7499999999999999,0.4,0.7499999999999999,0.4,0.5,0.75,0.625,0.5],
                            ratio:{x:0.4},
                        },
                        '#':{
                            //vector: [ 0.3,0.0, 0.4,0.0, 0.375,0.25, 0.675,0.25, 0.7,0.0, 0.8,0.0, 0.775,0.25, 1.0,0.25, 1.0,0.35, 0.765,0.35, 0.735,0.65, 1.0,0.65,1.0,0.75, 0.725,0.75,0.7,1.0,0.6,1.0, 0.625,0.75, 0.325,0.75, 0.3,1.0, 0.2,1.0, 0.225,0.75,0.0,0.75,0.0,0.65,0.235,0.65,0.265,0.35,0.0,0.35,0.0,0.25,0.275,0.25,0.3,0.0, 0.365,0.35,0.335,0.65,0.635,0.65,0.665,0.35,0.365,0.35 ])
                            vector:[0.365,0.35,0.3,0,0.4,0,0.675,0.25,0.7,0,0.8,0,0.775,0.25,1,0.25,1,0.35,0.735,0.65,1,0.65,1,0.75,0.725,0.75,0.7,1,0.6,1,0.325,0.75,0.3,1,0.2,1,0.225,0.75,0,0.75,0,0.65,0.265,0.35,0,0.35,0,0.25,0.275,0.25,0.3,0,0.365,0.35,0.675,0.25,0.8,0,0.775,0.25,0.775,0.25,1,0.35,0.765,0.35,0.735,0.65,1,0.75,0.725,0.75,0.725,0.75,0.6,1,0.625,0.75,0.325,0.75,0.2,1,0.225,0.75,0.225,0.75,0,0.65,0.235,0.65,0.265,0.35,0,0.25,0.275,0.25,0.275,0.25,0.365,0.35,0.335,0.65,0.675,0.25,0.775,0.25,0.765,0.35,0.765,0.35,0.735,0.65,0.725,0.75,0.325,0.75,0.225,0.75,0.235,0.65,0.235,0.65,0.265,0.35,0.275,0.25,0.375,0.25,0.675,0.25,0.765,0.35,0.765,0.35,0.725,0.75,0.625,0.75,0.625,0.75,0.325,0.75,0.235,0.65,0.235,0.65,0.275,0.25,0.335,0.65,0.625,0.75,0.235,0.65,0.335,0.65,0.625,0.75,0.335,0.65,0.635,0.65,0.765,0.35,0.625,0.75,0.635,0.65,0.765,0.35,0.635,0.65,0.665,0.35,0.375,0.25,0.765,0.35,0.665,0.35,0.375,0.25,0.665,0.35,0.365,0.35,0.4,0,0.375,0.25,0.365,0.35],
                        },
                        '-':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.6, y:0.1}, offset:{y:0.45},
                        },
                        '_':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.8,y:0.1}, offset:{y:1},
                        },
                        "'":{
                            //vector: [ 0,0, 1,0, 1,1, 0,1 ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.1, y:0.2},
                        },
                        '"':{
                            //vector: [ 0.4,0, 0,0, 0,1, 0.4,1, 0.4,0, 0.6,0, 0.6,1, 1,1, 1,0 ]
                            vector:[1,0,1,1,0.6,1,0.4,1,0,1,0,0,1,0,0.6,1,0.6,0,0.4,1,0,0,0.4,0],
                            ratio:{x:0.25, y:0.2},
                        },
                        '|':{
                            //vector: [ 0,0, 1,0, 1,1, 0,1  ]
                            vector:[1,1,0,1,0,0,0,0,1,0,1,1],
                            ratio:{x:0.1},
                        },
                        '>':{
                            //vector: [ 0.0,0.0, 1.0,0.45, 1.0,0.55, 0.0,1.0, 0.0,0.9, 0.85,0.5, 0.0,0.1 ])
                            vector:[0.85,0.5,0,0.1,0,0,0,0,1,0.45,1,0.55,1,0.55,0,1,0,0.9,0.85,0.5,0,0,1,0.55,1,0.55,0,0.9,0.85,0.5],
                        },
                        '<':{
                            //vector: [ 1.0,0.0, 0.0,0.45, 0.0,0.55, 1.0,1.0, 1.0,0.9, 0.15,0.5, 1.0,0.1 ])
                            vector:[0,0.45,1,0,1,0.1,0.15,0.5,1,0.9,1,1,1,1,0,0.55,0,0.45,0,0.45,1,0.1,0.15,0.5,0.15,0.5,1,1,0,0.45],
                        },
                        '+':{
                            //vector: [ 0.35/0.8,0.0/0.8, 0.45/0.8,0.0/0.8, 0.45/0.8,0.35/0.8, 0.8/0.8,0.35/0.8, 0.8/0.8,0.45/0.8, 0.45/0.8,0.45/0.8, 0.45/0.8,0.8/0.8, 0.35/0.8,0.8/0.8, 0.35/0.8,0.45/0.8, 0.0/0.8,0.45/0.8, 0.0/0.8,0.35/0.8, 0.35/0.8,0.35/0.8 ]
                            vector:[0.43749999999999994,0.43749999999999994,0.43749999999999994,0,0.5625,0,0.5625,0.43749999999999994,1,0.43749999999999994,1,0.5625,0.5625,0.5625,0.5625,1,0.43749999999999994,1,0.43749999999999994,0.5625,0,0.5625,0,0.43749999999999994,0.43749999999999994,0.43749999999999994,0.5625,0,0.5625,0.43749999999999994,0.5625,0.43749999999999994,1,0.5625,0.5625,0.5625,0.5625,0.5625,0.43749999999999994,1,0.43749999999999994,0.5625,0.43749999999999994,0.5625,0,0.43749999999999994,0.43749999999999994,0.43749999999999994,0.43749999999999994,0.43749999999999994,0.5625,0.43749999999999994,0.5625,0.5625,0.5625,0.5625,0.43749999999999994,0.5625,0.43749999999999994,0.43749999999999994],
                            ratio:{x:0.8,y:0.8}, offset:{y:0.1},
                        },
                        '=':{
                            //vector: [ 0.0/0.8,0.0/0.5, 0.8/0.8,0.0/0.5, 0.8/0.8,0.1/0.5, 0.0/0.8,0.1/0.5, 0.0/0.8,0.4/0.5, 0.8/0.8,0.4/0.5, 0.8/0.8,0.5/0.5, 0.0/0.8,0.5/0.5 ]
                            vector:[0,0,1,0,1,0.2,0,0.8,1,0.8,1,1,0,0,1,0.2,0,0.2,0,0.8,1,1,0,1],
                            ratio:{x:0.8,y:0.5}, offset:{y:0.25},
                        },
                        '&':{
                            //vector: [ 0.2/0.9,0.0, 0.5/0.9,0.0, 0.7/0.9,0.2, 0.7/0.9,0.4, 0.425/0.9,0.675, 0.35/0.9,0.6, 0.6/0.9,0.35, 0.6/0.9,0.25, 0.45/0.9,0.1, 0.25/0.9,0.1, 0.1/0.9,0.25, 0.1/0.9,0.35, 0.525/0.9,0.775, 0.82/0.9,0.48, 0.9/0.9,0.55, 0.6/0.9,0.85, 0.65/0.9,0.9, 0.9/0.9,0.9, 0.9/0.9,1.0, 0.6/0.9,1.0, 0.525/0.9,0.925, 0.45/0.9,1.0, 0.1/0.9,1.0, 0.0/0.9,0.9, 0.0/0.9,0.6, 0.1/0.9,0.5, 0.175/0.9,0.575, 0.1/0.9,0.65, 0.1/0.9,0.85, 0.15/0.9,0.9, 0.4/0.9,0.9, 0.45/0.9,0.85, 0.0/0.9,0.4, 0.0/0.9,0.2 ]
                            vector:[0,0.4,0,0.2,0.222,0,0.556,0,0.778,0.2,0.778,0.4,0.778,0.4,0.472,0.675,0.389,0.6,0.583,0.775,0.911,0.48,1,0.55,0.722,0.9,1,0.9,1,1,1,1,0.667,1,0.583,0.925,0.583,0.925,0.5,1,0.111,1,0.111,1,0,0.9,0,0.6,0,0.6,0.111,0.5,0.194,0.575,0.778,0.4,0.389,0.6,0.667,0.35,0.583,0.775,1,0.55,0.667,0.85,0.722,0.9,1,1,0.583,0.925,0,0.6,0.194,0.575,0.111,0.65,0.778,0.4,0.667,0.35,0.667,0.25,0.111,0.35,0.583,0.775,0.667,0.85,0.667,0.85,0.722,0.9,0.583,0.925,0,0.6,0.111,0.65,0.111,0.85,0.556,0,0.778,0.4,0.667,0.25,0.111,0.35,0.667,0.85,0.583,0.925,0.111,1,0,0.6,0.111,0.85,0.556,0,0.667,0.25,0.5,0.1,0.111,1,0.111,0.85,0.167,0.9,0.222,0,0.556,0,0.5,0.1,0.583,0.925,0.111,1,0.167,0.9,0.222,0,0.5,0.1,0.278,0.1,0.583,0.925,0.167,0.9,0.444,0.9,0.222,0,0.278,0.1,0.111,0.25,0.583,0.925,0.444,0.9,0.5,0.85,0,0.4,0.222,0,0.111,0.25,0.111,0.35,0.583,0.925,0.5,0.85,0,0.4,0.111,0.25,0.111,0.35,0.111,0.35,0.5,0.85,0,0.4],
                            ratio:{x:0.9}
                        },
                        '*':{
                            //vector: [ 0.25/0.6,0.0/0.6, 0.35/0.6,0.0/0.6, 0.35/0.6,0.175/0.6,0.475/0.6,0.05/0.6, 0.55/0.6,0.125/0.6,0.425/0.6,0.25/0.6,0.6/0.6,0.25/0.6, 0.6/0.6,0.35/0.6, 0.425/0.6,0.35/0.6,0.55/0.6,0.475/0.6, 0.475/0.6,0.55/0.6, 0.35/0.6,0.425/0.6,0.35/0.6,0.6/0.6, 0.25/0.6,0.6/0.6, 0.25/0.6,0.425/0.6,0.125/0.6,0.55/0.6, 0.05/0.6,0.475/0.6, 0.175/0.6,0.35/0.6,0.0/0.6,0.35/0.6, 0.0/0.6,0.25/0.6, 0.175/0.6,0.25/0.6,0.05/0.6,0.125/0.6, 0.125/0.6,0.05/0.6,0.25/0.6,0.175/0.6 ],'flatArray'),
                            vector:[0.417,0.292,0.417,0,0.583,0,0.583,0.292,0.792,0.083,0.917,0.208,0.708,0.417,1,0.417,1,0.583,0.708,0.583,0.917,0.792,0.792,0.917,0.583,0.708,0.583,1,0.417,1,0.417,0.708,0.208,0.917,0.083,0.792,0.292,0.583,0,0.583,0,0.417,0.292,0.417,0.083,0.208,0.208,0.083,0.417,0.292,0.583,0,0.583,0.292,0.583,0.292,0.917,0.208,0.708,0.417,0.708,0.417,1,0.583,0.708,0.583,0.708,0.583,0.792,0.917,0.583,0.708,0.583,0.708,0.417,1,0.417,0.708,0.417,0.708,0.083,0.792,0.292,0.583,0.292,0.583,0,0.417,0.292,0.417,0.292,0.417,0.208,0.083,0.417,0.292,0.417,0.292,0.583,0.292,0.708,0.417,0.708,0.417,0.708,0.583,0.583,0.708,0.583,0.708,0.417,0.708,0.292,0.583,0.292,0.583,0.292,0.417,0.417,0.292,0.417,0.292,0.708,0.417,0.583,0.708,0.583,0.708,0.292,0.583,0.417,0.292],
                            ratio:{x:0.6,y:0.6}, offset:{y:0.2},
                        },
                        '~':{
                            //vector: [ 0.0,0.1/0.3, 0.15,0.0/0.3, 0.35,0.0/0.3, 0.675,0.2/0.3, 0.825,0.2/0.3, 1.0,0.1/0.3, 1.0,0.2/0.3, 0.85,0.3/0.3, 0.65,0.3/0.3, 0.325,0.1/0.3, 0.175,0.1/0.3, 0.0,0.2/0.3 ]
                            vector:[0.175,0.33333333333333337,0,0.6666666666666667,0,0.33333333333333337,0,0.33333333333333337,0.15,0,0.35,0,0.825,0.6666666666666667,1,0.33333333333333337,1,0.6666666666666667,1,0.6666666666666667,0.85,1,0.65,1,0.175,0.33333333333333337,0,0.33333333333333337,0.35,0,0.825,0.6666666666666667,1,0.6666666666666667,0.65,1,0.325,0.33333333333333337,0.175,0.33333333333333337,0.35,0,0.675,0.6666666666666667,0.825,0.6666666666666667,0.65,1,0.65,1,0.325,0.33333333333333337,0.35,0,0.35,0,0.675,0.6666666666666667,0.65,1],
                            ratio:{x:0.9,y:0.3}, offset:{y:0.35},
                        },
                        '%':{
                            //vector: [ 0.0,0.1, 0.1,0.0, 0.3,0.0, 0.4,0.1, 0.4,0.3, 0.3,0.4, 0.1,0.4, 0.0,0.3, 0.1,0.25, 0.15,0.3, 0.25,0.3, 0.3,0.25, 0.3,0.15, 0.25,0.1, 0.15,0.1, 0.1,0.15, 0.1,0.25, 0.0,0.3, 0.02,0.9, 0.92,0.0, 1.0,0.08, 0.08,0.98, 0.7,1.0, 0.6,0.9, 0.6,0.7, 0.7,0.6, 0.9,0.6, 1.0,0.7, 1.0,0.9, 0.9,1.0, 0.7,1.0, 0.75,0.9, 0.85,0.9, 0.9,0.85, 0.9,0.75, 0.85,0.7, 0.75,0.7, 0.7,0.75, 0.7,0.85, 0.75,0.9, 0.7,1.0, 0.08,0.98, 0.02,0.9 ]
                            vector:[0,0.1,0.1,0,0.3,0,0.3,0,0.4,0.1,0.4,0.3,0.4,0.3,0.3,0.4,0.1,0.4,0.1,0.15,0.1,0.25,0,0.3,0.02,0.9,0.92,0,1,0.08,0.7,1,0.6,0.9,0.6,0.7,0.6,0.7,0.7,0.6,0.9,0.6,0.9,0.6,1,0.7,1,0.9,0.02,0.9,1,0.08,0.08,0.98,0.7,1,0.7,0.85,0.75,0.9,0.1,0.15,0,0.3,0,0.1,0.1,0.4,0,0.3,0.1,0.25,0.15,0.1,0.1,0.15,0,0.1,0.1,0.4,0.1,0.25,0.15,0.3,0.15,0.1,0,0.1,0.3,0,0.1,0.4,0.15,0.3,0.25,0.3,0.25,0.1,0.15,0.1,0.3,0,0.4,0.3,0.1,0.4,0.25,0.3,0.3,0.15,0.25,0.1,0.3,0,0.4,0.3,0.25,0.3,0.3,0.25,0.3,0.15,0.3,0,0.4,0.3,0.4,0.3,0.3,0.25,0.3,0.15,0.7,0.75,0.7,1,0.6,0.7,1,0.9,0.9,1,0.7,1,0.7,1,0.75,0.9,0.85,0.9,0.75,0.7,0.7,0.75,0.6,0.7,1,0.9,0.7,1,0.85,0.9,0.75,0.7,0.6,0.7,0.9,0.6,1,0.9,0.85,0.9,0.9,0.85,0.85,0.7,0.75,0.7,0.9,0.6,1,0.9,0.9,0.85,0.9,0.75,0.9,0.75,0.85,0.7,0.9,0.6,0.9,0.6,1,0.9,0.9,0.75],
                        },
                        '^':{
                            //vector: [ 0.0/0.6,0.3/0.3, 0.3/0.6,0.0/0.3, 0.6/0.6,0.3/0.3, 0.45/0.6,0.3/0.3, 0.3/0.6,0.15/0.3, 0.15/0.6,0.3/0.3 ],'flatArray'),
                            vector:[0.5, 0.5, 0.25, 1, 0, 1, 0.5, 0, 1, 1, 0.75, 1, 0.5, 0.5, 0, 1, 0.5, 0, 0.5, 0, 0.75, 1, 0.5, 0.5],
                            ratio:{x:0.6,y:0.3},
                        },
                    };
                    
                    
                    //correct font to be compatible with the new way of fonting
                    reducedGlyphSet.concat(['default','']).forEach(key => {
                        if(vectorLibrary.defaultThin[key] == undefined){return;}
                        
                        //generate limits
                            vectorLibrary.defaultThin[key].top = vectorLibrary.defaultThin[key].ratio != undefined && vectorLibrary.defaultThin[key].ratio.y != undefined ? -vectorLibrary.defaultThin[key].ratio.y : -1;
                            vectorLibrary.defaultThin[key].right = vectorLibrary.defaultThin[key].ratio != undefined && vectorLibrary.defaultThin[key].ratio.x != undefined ? vectorLibrary.defaultThin[key].ratio.x + 0.1 : 1.1;
                            vectorLibrary.defaultThin[key].bottom = 0;
                            vectorLibrary.defaultThin[key].left = 0;
                    
                        //adjust for ratio and offset
                            for(let a = 0; a < vectorLibrary.defaultThin[key].vector.length; a+=2){
                                //ratio correction
                                    if( vectorLibrary.defaultThin[key].ratio != undefined ){
                                        if(vectorLibrary.defaultThin[key].ratio.x != undefined){
                                            vectorLibrary.defaultThin[key].vector[a] *= vectorLibrary.defaultThin[key].ratio.x;
                                        }
                                        if(vectorLibrary.defaultThin[key].ratio.y != undefined){
                                            vectorLibrary.defaultThin[key].vector[a+1] *= vectorLibrary.defaultThin[key].ratio.y;
                                        }
                                    }
                                //offset correction
                                    if( vectorLibrary.defaultThin[key].offset != undefined ){
                                        if(vectorLibrary.defaultThin[key].offset.x != undefined){
                                            vectorLibrary.defaultThin[key].vector[a] += vectorLibrary.defaultThin[key].offset.x;
                                        }
                                        if(vectorLibrary.defaultThin[key].offset.y != undefined){
                                            vectorLibrary.defaultThin[key].vector[a+1] += vectorLibrary.defaultThin[key].offset.y;
                                        }
                                    }
                            }
                    
                        //flip y axis
                            for(let a = 0; a < vectorLibrary.defaultThin[key].vector.length; a+=2){
                                vectorLibrary.defaultThin[key].vector[a+1] -= 1;
                            }
                    });
                    
                    
                    
                    
                    this.getLoadableFonts = function(){ 
                    
                        const defaultFontNames = ['defaultThick','defaultThin'];
                        const loadableFontNames = fontFileNames.map(a => a.split('.').slice(0,-1)[0].split('/').slice(1,2)[0]);
                        return defaultFontNames.concat(loadableFontNames);
                    };
                    this.getLoadedFonts = function(){
                    
                        const defaultFontNames = ['defaultThick','defaultThin'];
                        const loadedFontNames = fontFileNames.map(a => a.split('.').slice(0,-1)[0].split('/').slice(1,2)[0]).filter(name => vectorLibrary[name].isLoaded);
                        return defaultFontNames.concat(loadedFontNames);
                    };
                    
                    this.isApprovedFont = function(fontName){
                    
                        return vectorLibrary[fontName] != undefined;
                    };
                    this.isFontLoaded = function(fontName){
                    
                        if(vectorLibrary[fontName] == undefined){ console.warn('library.font.isFontLoaded : error : unknown font name:',fontName); return false;}
                        return vectorLibrary[fontName].isLoaded;
                    }
                    this.fontLoadAttempted = function(fontName){
                    
                        if(vectorLibrary[fontName] == undefined){ console.warn('library.font.fontLoadAttempted : error : unknown font name:',fontName); return false;}
                        return vectorLibrary[fontName].loadAttempted;
                    }
                    this.loadFont = function(fontName,onLoaded=()=>{}){
                    
                        if(vectorLibrary[fontName] == undefined){ console.warn('elementLibrary.character.loadFont : error : unknown font name:',fontName); return false;}
                    
                        //make sure font file is on the approved list
                            if( !this.isApprovedFont(fontName) ){
                                console.warn('library.font.loadFont error: attempting to load unapproved font:',fontName); 
                                return;
                            }
                    
                        //if font is already loaded, bail
                            if( this.isFontLoaded(fontName) ){return;}
                    
                        //set up library entry
                            vectorLibrary[fontName].loadAttempted = true;
                            vectorLibrary[fontName].isLoaded = false;
                            vectorLibrary[fontName]['default'] = {vector:[0,0, 1,0, 0,-1, 1,0, 0,-1, 1,-1]};
                    
                        //load file
                            const filename = vectorLibrary[fontName].fileName;
                            library.misc.loadFileFromURL(
                                fontFilesLocation+filename,
                                fontData => {
                                    const vectors = library.font.extractGlyphs(fontData.response,reducedGlyphSet);
                                    Object.keys(vectors).forEach(glyphName => vectorLibrary[fontName][glyphName] = vectors[glyphName] );
                                    vectorLibrary[fontName].isLoaded = true;
                                    onLoaded(true);
                                },
                                () => { onLoaded(false); },
                                'arraybuffer',
                            );
                    };
                    this.getVector = function(fontName,character){
                        return vectorLibrary[fontName][character];
                    }
                };
                this.misc = new function(){
                    this.padString = function(string,length,padding=' ',paddingSide='l'){
                    
                        if(padding.length<1){return string;}
                        string = ''+string;
                    
                        if(paddingSide == 'l'){
                            while(string.length < length){ string = padding + string; }
                        }else{
                            while(string.length < length){ string = string + padding; }
                        }
                    
                        return string;
                    };
                    this.compressString = function(string){
                    
                        return _thirdparty.lzString.compress(string);
                    };
                    this.decompressString = function(string){
                    
                        return _thirdparty.lzString.decompress(string);
                    };
                    this.serialize = function(data,compress=true){
                    
                        function getType(obj){
                            return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
                        }
                    
                        data = JSON.stringify(data, function(key, value){
                    
                            //preserve types that JSON.stringify can't handle as "unique types"
                            switch(getType(value)){
                                case 'function':
                                    return {__uniqueType:'function', __value:value.toString(), __name:value.name};
                                case 'arraybuffer': 
                                    return {__uniqueType:'arraybuffer', __value:btoa(String.fromCharCode(new Uint8Array(value)))}
                                case 'audiobuffer':
                                    const channelData = [];
                                    for(let a = 0; a < value.numberOfChannels; a++){
                                        channelData.push( Array.from(value.getChannelData(a)) );
                                    }
                    
                                    return {
                                        __uniqueType:'audiobuffer', 
                                        __channelData:channelData, 
                                        __sampleRate:value.sampleRate,
                                        __numberOfChannels:value.numberOfChannels,
                                        __length:value.length
                                    };
                                break;
                                default: return value;
                            }
                    
                        });
                    
                        if(compress){ data = library.misc.compressString(data); }
                        return data;
                    };
                    this.unserialize = function(data,compressed=true){
                    
                        if(data === undefined){return undefined;}
                    
                        if(compressed){ data = library.misc.decompressString(data); }
                    
                        return JSON.parse(data, function(key, value){
                    
                            //recover unique types
                            if(typeof value == 'object' && value != null && '__uniqueType' in value){
                                switch(value.__uniqueType){
                                    case 'function':
                                        let functionHead = value.__value.substring(0,value.__value.indexOf('{'));
                                        functionHead = functionHead.substring(functionHead.indexOf('(')+1, functionHead.lastIndexOf(')'));
                                        const functionBody = value.__value.substring(value.__value.indexOf('{')+1, value.__value.lastIndexOf('}'));
                    
                                        value = Function(functionHead,functionBody);
                                    break;
                                    case 'arraybuffer':
                                        value = atob(value.__value);
                                        for(let a = 0; a < value.length; a++){ value[a] = value[a].charCodeAt(0); }
                                        value = new ArrayBuffer(value);
                                    break;
                                    case 'audiobuffer':
                                        const audioBuffer = library.audio.context.createBuffer(value.__numberOfChannels, value.__length, value.__sampleRate);
                    
                                        for(let a = 0; a < audioBuffer.numberOfChannels; a++){
                                            workingBuffer = audioBuffer.getChannelData(a);
                                            for(let i = 0; i < audioBuffer.length; i++){
                                                workingBuffer[i] = value.__channelData[a][i];
                                            }
                                        }
                    
                                        value = audioBuffer;
                                    break;
                                    default: value = value.__value;
                                }
                            }
                    
                            return value;
                        });
                    };
                    this.packData = function(data,compress=true){
                        return library.misc.serialize({ 
                            compressed:compress, 
                            data:library.misc.serialize(data,compress)
                        },false);
                    };
                    this.unpackData = function(data){
                    
                        //deserialize first layer
                            try{
                                data = library.misc.unserialize(data,false);
                            }catch(e){
                                console.error( "Major error unserializing first layer of file" );
                                console.error(e);
                                return null;
                            }
                    
                        //determine if this data is compressed or not
                            const compressed = data.compressed;
                    
                        //deserialize second layer (knowing now whether it's compressed or not)
                            try{
                                data = library.misc.unserialize(data.data,compressed);
                            }catch(e){
                                console.error( "Major error unserializing second layer of file" );
                                console.error(e);
                                return null;
                            }
                    
                        return data;
                    };
                    this.openFile = function(callback,readAsType='readAsBinaryString',fileType){
                    
                        const i = document.createElement('input');
                        i.type = 'file';
                        i.accept = fileType;
                        i.onchange = function(){
                            const f = new FileReader();
                            switch(readAsType){
                                case 'readAsArrayBuffer':           f.readAsArrayBuffer(this.files[0]);  break;
                                case 'readAsBinaryString': default: f.readAsBinaryString(this.files[0]); break;
                            }
                            f.onloadend = function(){ 
                                if(callback){callback(f.result,i.files[0]);}
                            }
                        };
                    
                        document.body.appendChild(i);
                        i.click();
                        setTimeout(() => {document.body.removeChild(i);},1000);
                    };
                    this.printFile = function(filename,data){
                    
                        const a = document.createElement('a');
                        a.href = URL.createObjectURL(new Blob([data]));
                        a.download = filename;
                        a.click();
                    };
                    this.argumentsToArray = function(argumentsObject){
                        const outputArray = [];
                        for(let a = 0; a < argumentsObject.length; a++){
                            outputArray.push( argumentsObject[a] );
                        }
                        return outputArray;
                    };
                    this.comparer = function(item1,item2){
                        function getType(obj){
                            return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
                        }
                    
                        if(getType(item1) != getType(item2)){ return false; }
                        if(typeof item1 == 'boolean' || typeof item1 == 'string'){ return item1 === item2; }
                        if(typeof item1 == 'number'){
                            if( Math.abs(item1) < 1.0e-14 ){item1 = 0;}
                            if( Math.abs(item2) < 1.0e-14 ){item2 = 0;}
                            if( Math.abs(item1 - item2) < 1.0e-14 ){return true;}
                            return item1 === item2;
                        }
                        if(typeof item1 === 'undefined' || typeof item2 === 'undefined' || item1 === null || item2 === null){ return item1 === item2;  }
                        if(getType(item1) == 'function'){
                            item1 = item1.toString();
                            item2 = item2.toString();
                    
                            let item1_functionHead = item1.substring(0,item1.indexOf('{'));
                            item1_functionHead = item1_functionHead.substring(item1_functionHead.indexOf('(')+1, item1_functionHead.lastIndexOf(')'));
                            const item1_functionBody = item1.substring(item1.indexOf('{')+1, item1.lastIndexOf('}'));
                    
                            let item2_functionHead = item2.substring(0,item2.indexOf('{'));
                            item2_functionHead = item2_functionHead.substring(item2_functionHead.indexOf('(')+1, item2_functionHead.lastIndexOf(')'));
                            const item2_functionBody = item2.substring(item2.indexOf('{')+1, item2.lastIndexOf('}'));
                    
                            return item1_functionHead.trim() == item2_functionHead.trim() && item1_functionBody.trim() == item2_functionBody.trim();
                        }
                        if(typeof item1 == 'object'){
                            const keys1 = Object.keys(item1);
                            const keys2 = Object.keys(item2);
                            if(keys1.length != keys2.length){return false;}
                    
                            for(let a = 0; a < keys1.length; a++){ 
                                if( keys1.indexOf(keys2[a]) == -1 || !library.misc.comparer(item1[keys1[a]],item2[keys1[a]])){return false;}
                            }
                            return true;
                        }
                        return false;
                    };
                    this.removeThisFromThatArray = function(item,array){
                        const index = array.findIndex(a => library.misc.comparer(a,item))
                        if(index == -1){return;}
                        return array.splice(index,1);
                    };
                    this.removeTheseElementsFromThatArray = function(theseElements,thatArray){
                    
                        theseElements.forEach(a => library.misc.removeThisFromThatArray(a,thatArray) );
                        return thatArray;
                    };
                    this.getDifferenceOfArrays = function(array_a,array_b){
                    
                        if(array_a.length == 0 && array_b.length == 0){
                            return {a:[],b:[]};
                        }
                        if(array_a.length == 0){
                            return {a:[],b:array_b};
                        }
                        if(array_b.length == 0){
                            return {a:array_a,b:[]};
                        }
                    
                        function arrayRemovals(a,b){
                            a.forEach(item => {
                                let i = b.indexOf(item);
                                if(i != -1){ b.splice(i,1); }
                            });
                            return b;
                        }
                    
                        return {
                            a:arrayRemovals(array_b,array_a.slice()),
                            b:arrayRemovals(array_a,array_b.slice())
                        };
                    };
                    this.loadFileFromURL = function(url,callback,errorCallback,responseType='blob'){
                    
                        //responseType: text / arraybuffer / blob / document / json 
                    
                        const xhttp = new XMLHttpRequest();
                        xhttp.onloadend = a => {
                            if(a.target.status == 200){ 
                                if(callback != undefined){
                                    callback(a.target);
                                }else{
                                    console.log(a.target);
                                }
                            }else{ 
                                if(errorCallback != undefined){
                                    errorCallback(a.target);
                                }else{
                                    console.warn('library.misc.loadFileFromURL error: could not find the file',a.target.responseURL);
                                }
                            }
                        };
                        xhttp.open('get',url,true);
                        xhttp.responseType = responseType;
                        xhttp.send();
                    };
                    this.loadImageFromURL = function(url,callback,errorCallback,forceUpdate=false,scale=1){
                    
                        const dataStore = this.loadImageFromURL.loadedImageData;
                    
                        function getImageFromDataStoreByUrlWithScale(url,scale=1){
                            global = dataStore[url];
                            return dataStore[url].mipmap[1];
                        }
                    
                        if(dataStore[url] == undefined || forceUpdate && dataStore[url].state != 'requested' ){
                            dataStore[url] = { state:'requested', mipmap:{}, callbacks:[{success:callback,failure:errorCallback,scale:scale}], timestamp:undefined };
                    
                            library.misc.loadFileFromURL(
                                url,
                                response => {
                                    dataStore[url].response = response.response;
                                    createImageBitmap(response.response).then(bitmap => {
                                        dataStore[url].mipmap[1] = bitmap;
                                        dataStore[url].state = 'ready';
                                        dataStore[url].timestamp = Date.now();
                                        dataStore[url].callbacks.forEach(callbackBlock => {
                                            if(callbackBlock.success != undefined){callbackBlock.success( getImageFromDataStoreByUrlWithScale(url,callbackBlock.scale) );}
                                        } );
                                        dataStore[url].callbacks = [];
                                    }).catch(error => {
                                        dataStore[url].state = 'failed';
                                        dataStore[url].timestamp = Date.now();
                                        dataStore[url].callbacks.forEach(callbackBlock => {
                                            if(callbackBlock.failure != undefined){ callbackBlock.failure('imageDecodingError',response,error); }
                                        } );
                                        dataStore[url].callbacks = [];
                                    });
                                },
                                response => {
                                    dataStore[url].state = 'failed';
                                    dataStore[url].timestamp = Date.now();
                                    dataStore[url].callbacks.forEach(callbackBlock => {
                                        if(callbackBlock.failure != undefined){ callbackBlock.failure('badURL',response); }
                                    } );
                                    dataStore[url].callbacks = [];
                                },
                            );
                    
                        }else if( dataStore[url].state == 'ready' ){
                            if(callback != undefined){ callback( getImageFromDataStoreByUrlWithScale(url,scale) ); }
                        }else if( dataStore[url].state == 'requested' ){
                            dataStore[url].callbacks.push({success:callback,failure:errorCallback,scale:scale});
                        }else if( dataStore[url].state == 'failed' ){
                            if(errorCallback != undefined){ errorCallback('previousFailure'); }
                        }
                    };
                    this.loadImageFromURL.loadedImageData = {};
                };
                this.audio = new function(){
                    const audio = this;
                    
                    //master context
                        this.context = new (window.AudioContext || window.webkitAudioContext)();
                    
                    //destination
                        this.destination = this.context.createGain();
                        this.destination.connect(this.context.destination);
                        this.destination._gain = 1;
                        this.destination.masterGain = function(value){
                    
                            if(value == undefined){return this.destination._gain;}
                            this._gain = value;
                            library.audio.changeAudioParam(library.audio.context, this.gain, this._gain, 0.01, 'instant', true);
                        };
                    
                    //frequencies index
                        this.names_frequencies_split = {
                            0:{ 'C':16.35, 'C#':17.32, 'D':18.35, 'D#':19.45, 'E':20.60, 'F':21.83, 'F#':23.12, 'G':24.50, 'G#':25.96, 'A':27.50, 'A#':29.14, 'B':30.87  },
                            1:{ 'C':32.70, 'C#':34.65, 'D':36.71, 'D#':38.89, 'E':41.20, 'F':43.65, 'F#':46.25, 'G':49.00, 'G#':51.91, 'A':55.00, 'A#':58.27, 'B':61.74, },    
                            2:{ 'C':65.41, 'C#':69.30, 'D':73.42, 'D#':77.78, 'E':82.41, 'F':87.31, 'F#':92.50, 'G':98.00, 'G#':103.8, 'A':110.0, 'A#':116.5, 'B':123.5, },
                            3:{ 'C':130.8, 'C#':138.6, 'D':146.8, 'D#':155.6, 'E':164.8, 'F':174.6, 'F#':185.0, 'G':196.0, 'G#':207.7, 'A':220.0, 'A#':233.1, 'B':246.9, },    
                            4:{ 'C':261.6, 'C#':277.2, 'D':293.7, 'D#':311.1, 'E':329.6, 'F':349.2, 'F#':370.0, 'G':392.0, 'G#':415.3, 'A':440.0, 'A#':466.2, 'B':493.9, },
                            5:{ 'C':523.3, 'C#':554.4, 'D':587.3, 'D#':622.3, 'E':659.3, 'F':698.5, 'F#':740.0, 'G':784.0, 'G#':830.6, 'A':880.0, 'A#':932.3, 'B':987.8, },    
                            6:{ 'C':1047,  'C#':1109,  'D':1175,  'D#':1245,  'E':1319,  'F':1397,  'F#':1480,  'G':1568,  'G#':1661,  'A':1760,  'A#':1865,  'B':1976,  },
                            7:{ 'C':2093,  'C#':2217,  'D':2349,  'D#':2489,  'E':2637,  'F':2794,  'F#':2960,  'G':3136,  'G#':3322,  'A':3520,  'A#':3729,  'B':3951,  },    
                            8:{ 'C':4186,  'C#':4435,  'D':4699,  'D#':4978,  'E':5274,  'F':5588,  'F#':5920,  'G':6272,  'G#':6645,  'A':7040,  'A#':7459,  'B':7902   }, 
                        };
                        //generate forward index
                        // eg. {... '4C':261.6, '4C#':277.2 ...}
                            this.names_frequencies = {};
                            Object.entries(this.names_frequencies_split).forEach((octave,index) => {
                                Object.entries(this.names_frequencies_split[index]).forEach(name => {
                                    this.names_frequencies[ octave[0]+name[0] ] = name[1];
                                });
                            });
                    
                        //generate backward index
                        // eg. {... 261.6:'4C', 277.2:'4C#' ...}
                            this.frequencies_names = {};
                            Object.entries(this.names_frequencies).forEach(entry => {
                                this.frequencies_names[entry[1]] = entry[0];
                            });
                    
                    //midi notes index
                        const noteNames = [
                            '0C', '0C#', '0D', '0D#', '0E', '0F', '0F#', '0G', '0G#', '0A', '0A#', '0B',
                            '1C', '1C#', '1D', '1D#', '1E', '1F', '1F#', '1G', '1G#', '1A', '1A#', '1B',
                            '2C', '2C#', '2D', '2D#', '2E', '2F', '2F#', '2G', '2G#', '2A', '2A#', '2B',
                            '3C', '3C#', '3D', '3D#', '3E', '3F', '3F#', '3G', '3G#', '3A', '3A#', '3B',
                            '4C', '4C#', '4D', '4D#', '4E', '4F', '4F#', '4G', '4G#', '4A', '4A#', '4B',
                            '5C', '5C#', '5D', '5D#', '5E', '5F', '5F#', '5G', '5G#', '5A', '5A#', '5B',
                            '6C', '6C#', '6D', '6D#', '6E', '6F', '6F#', '6G', '6G#', '6A', '6A#', '6B',
                            '7C', '7C#', '7D', '7D#', '7E', '7F', '7F#', '7G', '7G#', '7A', '7A#', '7B',
                            '8C', '8C#', '8D', '8D#', '8E', '8F', '8F#', '8G', '8G#', '8A', '8A#', '8B',
                        ];
                        //generate forward index
                            this.midinumbers_names = {};
                            noteNames.forEach((entry,index) => {
                                this.midinumbers_names[index+24] = entry;
                            });
                        //generate backward index
                            this.names_midinumbers = {};
                            Object.entries(this.midinumbers_names).forEach(entry => {
                                this.names_midinumbers[entry[1]] = parseInt(entry[0]);
                            });
                    
                    //lead functions
                        this.num2name = function(num){ 
                    
                            return this.midinumbers_names[num];
                        };
                        this.num2freq = function(num){ 
                    
                            return this.names_frequencies[this.midinumbers_names[num]];
                        };
                    
                        this.name2num = function(name){ 
                    
                            return this.names_midinumbers[name];
                        };
                        this.name2freq = function(name){ 
                    
                            return this.names_frequencies[name];
                        };
                    
                        this.freq2num = function(freq){ 
                    
                            return this.names_midinumbers[this.frequencies_names[freq]];
                        };
                        this.freq2name = function(freq){ 
                    
                            return this.frequencies_names[freq];
                        };
                    this.changeAudioParam = function(context,audioParam,target,time,curve,cancelScheduledValues=true){
                    
                        if(target==null){return audioParam.value;}
                    
                        if(cancelScheduledValues){ audioParam.cancelScheduledValues(0); }
                    
                        try{
                            switch(curve){
                                case 'linear': 
                                    audioParam.linearRampToValueAtTime(target, context.currentTime+time);
                                break;
                                case 'exponential':
                                    console.warn('2018-4-18 - changeAudioParam:exponential doesn\'t work on chrome');
                                    if(target == 0){target = 1/10000;}
                                    audioParam.exponentialRampToValueAtTime(target, context.currentTime+time);
                                break;
                                case 's':
                                    const mux = target - audioParam.value;
                                    const array = library.math.curveGenerator.s(10);
                                    for(let a = 0; a < array.length; a++){
                                        array[a] = audioParam.value + array[a]*mux;
                                    }
                                    audioParam.setValueCurveAtTime(new Float32Array(array), context.currentTime, time);
                                break;
                                case 'instant': default:
                                    audioParam.setTargetAtTime(target, context.currentTime, 0.01);
                                break;
                            }
                        }catch(e){
                            console.log('could not change param (possibly due to an overlap, or bad target value)');
                            console.log('audioParam:',audioParam,'target:',target,'time:',time,'curve:',curve,'cancelScheduledValues:',cancelScheduledValues);
                            console.log(e);
                        }
                    };
                    const loadedAudioFiles = {};
                    this.loadAudioFile = function(callback,type='file',url='',errorCallback,forceRequest=false){
                    
                        if(callback == undefined){
                            return;
                        }
                    
                        switch(type){
                            case 'url': 
                                if(!forceRequest && loadedAudioFiles[url] != undefined){
                                    callback(loadedAudioFiles[url]);
                                    break;
                                }
                    
                                library.misc.loadFileFromURL(
                                    url, 
                                    data => {
                                        library.audio.context.decodeAudioData(data.response, data => {
                                            loadedAudioFiles[url] = { buffer:data, name:(url.split('/')).pop(), duration:data.duration };
                                            callback(loadedAudioFiles[url]);
                                        });
                                    },
                                    errorCallback,
                                    'arraybuffer',
                                );
                            break;
                            case 'file': default:
                                library.misc.openFile(
                                    (data,file) => {
                                        library.audio.context.decodeAudioData(data, function(buffer){
                                            callback({ buffer:buffer, name:file.name, duration:buffer.duration });
                                        });
                                    },
                                    'readAsArrayBuffer'
                                );
                            break;
                        }
                    };
                    this.waveformSegment = function(audioBuffer, bounds={start:0,end:1}, resolution=10000){
                    
                        const waveform = audioBuffer.getChannelData(0);
                        // const channelCount = audioBuffer.numberOfChannels;
                    
                        bounds.start = bounds.start ? bounds.start : 0;
                        bounds.end = bounds.end ? bounds.end : 1;
                        const start = audioBuffer.length*bounds.start;
                        const end = audioBuffer.length*bounds.end;
                        const step = (end - start)/resolution;
                    
                        const outputArray = [];
                        for(let a = start; a < end; a+=Math.round(step)){
                            outputArray.push( 
                                library.math.largestValueFound(
                                    waveform.slice(a, a+Math.round(step))
                                )
                            );
                        }
                    
                        return outputArray;
                    };
                    this.loadBuffer = function(context, data, destination, onended){
                    
                        const temp = context.createBufferSource();
                        temp.buffer = data;
                        temp.connect(destination);
                        temp.onended = onended;
                        return temp;
                    };
                    this.audioWorklet = new function(){
                        function checkIfReady(){
                            if(worklets.length == 0){return true;}
                            return worklets.map(a => a.loaded).reduce((rolling,current) => {return rolling && current;});
                        };
                        this.checkIfReady = function(){ return checkIfReady(); };
                        this.nowReady = function(){};
                    
                        const worklets = [
                            {
                                name:'testWorklet',
                                worklet:new Blob([`
                                    class testWorklet extends AudioWorkletProcessor{
                                        static MinimumValue = -10;
                                    
                                        static get parameterDescriptors(){
                                            return [
                                                {
                                                    name: 'valueA',
                                                    defaultValue: 10,
                                                    minValue: 1,
                                                    maxValue: 100,
                                                    automationRate: 'a-rate', //you should use the array, it's the same length as the block
                                                },{
                                                    name: 'valueB',
                                                    defaultValue: 10,
                                                    minValue: 1,
                                                    maxValue: 100,
                                                    automationRate: 'k-rate', //you should use only the first value in the array
                                                }
                                            ];
                                        }
                                        
                                        constructor(options){
                                            super(options);
                                            console.log('<<< constructor >>>');
                                            console.log('options:',options);
                                    
                                            this._lastUpdate = currentTime;
                                            this._callCount = 0;
                                    
                                            this.port.onmessage = function(event){
                                                console.log('worklet.port.onmessage',event);
                                            };
                                        }
                                    
                                        process(inputs, outputs, parameters){
                                            this._callCount++;
                                            if( currentTime - this._lastUpdate >= 1 ){
                                                console.log('<<< process >>>');
                                                console.log('currentTime:',currentTime);
                                                console.log('calls since last printing:',this._callCount);
                                                console.log('samples since last printing:',this._callCount*outputs[0][0].length);
                                                console.log(' - number of inputs:',inputs.length);
                                                inputs.forEach((input,index) => {
                                                    console.log('   '+index+' : streams:',input.length,': samples per stream:',input.map(a => a.length));
                                                });
                                                console.log(' - number of outputs:',outputs.length);
                                                outputs.forEach((output,index) => {
                                                    console.log('   '+index+' : streams:',output.length,': samples per stream:',output.map(a => a.length));
                                                });
                                    
                                                console.log( 'parameters:',parameters );
                                                console.log( 'parameters.valueA:',parameters.valueA );
                                                console.log( 'parameters.valueB:',parameters.valueB );
                                    
                                                this._lastUpdate = currentTime;
                                                this._callCount = 0;
                                                return false;
                                            }
                                    
                                            const input = inputs[0];
                                            const output = outputs[0];
                                        
                                            for(let channel = 0; channel < input.length; channel++){
                                                const inputChannel = input[channel];
                                                const outputChannel = output[channel];
                                        
                                                for(let a = 0; a < inputChannel.length; a++){
                                                    outputChannel[a] = inputChannel[a];
                                                }
                                            }
                                            return true;
                                        }
                                    }
                                    registerProcessor('testWorklet', testWorklet);
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    // class squareWaveGenerator extends AudioWorkletProcessor{
                                    //     static get parameterDescriptors(){
                                    //         return [];
                                    //     }
                                    
                                    //     constructor(options){
                                    //         super(options);
                                    //         this._frequency = 440;
                                    //         this._phaseMux = (2*this._frequency) / sampleRate;
                                    //     }
                                    
                                    //     process(inputs, outputs, parameters){
                                    //         const output = outputs[0];
                                            
                                    //         for(let channel = 0; channel < output.length; channel++){
                                    //             for(let a = 0; a < output[channel].length; a++){
                                    //                 output[channel][a] = Math.sin( Math.PI * this._phaseMux * (currentFrame+a) );
                                    //             }
                                    //         }
                                    //         return true;
                                    //     }
                                    // }
                                    // registerProcessor('squareWaveGenerator', squareWaveGenerator);
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    
                                    // class squareWaveGenerator extends AudioWorkletProcessor{
                                    //     static get parameterDescriptors(){
                                    //         return [];
                                    //     }
                                    
                                    //     constructor(options){
                                    //         super(options);
                                    
                                    //         this._frequency = 440;
                                    //         this._dutyCycle = 0.5;
                                    //         this._frameCount = 0;
                                    
                                    //         this._flip = false;
                                    
                                    //         // this._data = [];
                                    //     }
                                    
                                    //     process(inputs, outputs, parameters){
                                    //         const samplingRate = sampleRate;
                                    //         const output = outputs[0];
                                            
                                    //         // for(let channel = 0; channel < output.length; channel++){
                                    //         //     for(let a = 0; a < output[channel].length; a++){
                                    //         //         if( this._sampleCount >= samplingRate / (this._frequency*2) ){
                                    //         //             this._sampleCount = 0;
                                    //         //             this._flip = !this._flip;
                                    //         //         }else{
                                    //         //             this._sampleCount++; 
                                    //         //         }
                                    //         //         output[channel][a] = (this._flip ? 1 : 0) * 0.25
                                    //         //     }
                                    //         // }
                                    
                                    
                                    
                                    //         const phaseMux = (2*this._frequency) / samplingRate;
                                    //         function sineWave(sampleNumber){
                                    //             return Math.sin( Math.PI * phaseMux * sampleNumber );
                                    //         }
                                    //         for(let channel = 0; channel < output.length; channel++){
                                    //             for(let a = 0; a < output[channel].length; a++){
                                    //                 output[channel][a] = sineWave(currentFrame+a);
                                    //             }
                                    //             // this._data.push(...output[channel]);
                                    
                                    //             // if( this._sampleCount >= samplingRate ){
                                    //             //     this._sampleCount = 0;
                                    //             //     // console.log(this._data);
                                    //             //     // return false;
                                    //             // }
                                    
                                    
                                    
                                    
                                    
                                    //             // if( this._sampleCount >= 500 ){
                                    //             //     console.log( JSON.stringify(this._data) );
                                    //             //     return false;
                                    //             // }
                                    //         }
                                    
                                    
                                    
                                    
                                    //         // // for(let a = 0; a < outputs[0][0].length; a++){
                                    //         // //     this._sampleCount++;
                                    //         // // }
                                    //         // // if( this._sampleCount%44160 == 0 ){
                                    //         // //     console.log( currentTime, this._sampleCount );
                                    //         // // }
                                    //         // if( this._frameCount%345 == 0 ){
                                    //         //     console.log( currentTime, this._frameCount, samplingRate );
                                    //         // }
                                    
                                    //         // for(let channel = 0; channel < output.length; channel++){
                                    //         //     for(let a = 0; a < output[channel].length/2; a++){
                                    //         //         output[channel][a] = 1;
                                    //         //     }
                                    //         //     for(let a = output[channel].length/2; a < output[channel].length; a++){
                                    //         //         output[channel][a] = -1;
                                    //         //     }
                                    //         // }
                                    
                                    //         this._frameCount++;
                                    //         return true;
                                    //     }
                                    // }
                                    // registerProcessor('squareWaveGenerator', squareWaveGenerator);
                                    
                                    
                                    
                                    
                                    
                                    // samplingRate = 44160
                                    //1hz = a complete waveform takes 44160 samples
                                    //2hz = a complete waveform takes 22080 samples
                                    //10hz = a complete waveform takes 4416 samples
                                    //80hz = a complete waveform takes 552 samples
                                    //100hz = a complete waveform takes 441.6 samples
                                    //400hz = a complete waveform takes 110.4 samples
                                    //440hz = a complete waveform takes 100.3636... samples
                                    //480hz = a complete waveform takes 92 samples
                                    
                                    // samples that a complete waveform takes = samplingRate / frequency of wave
                                    // frequency of wave = samplingRate / samples that a complete waveform takes
                                    // frequency of wave * samples that a complete waveform takes = samplingRate
                                    
                                    // 441.6hz = a complete waveform takes 100 samples
                                    // 437.2277227722772hz = a complete waveform takes 101 samples

                                `], { type: "text/javascript" }),
                                class:
                                    class TestWorkerNode extends AudioWorkletNode{
                                        constructor(context, options={}){
                                            options.numberOfInputs = 6;
                                            options.numberOfOutputs = 6;
                                            options.channelCount = 1;
                                            super(context, 'testWorklet', options);
                                    
                                            this._superImportantValue = 'farts';
                                    
                                            this.port.onmessage = function(event){
                                                console.log('worklet.node.onmessage',event);
                                            };
                                            this.port.start();
                                        }
                                    
                                        get superImportantValue(){
                                            console.log('getting super important value, which happens to be "'+this._superImportantValue+'"');
                                            return this._superImportantValue;
                                        }
                                        set superImportantValue(newValue){
                                            console.log('the super important value is being changed to "'+newValue+'"');
                                            this._superImportantValue = newValue;
                                            this.port.postMessage({ superImportantValue: this._superImportantValue });
                                        }
                                        doubleTheSuperImportantValue(){
                                            console.log('doubling the super important value');
                                            this._superImportantValue = this._superImportantValue + this._superImportantValue ;
                                            this.port.postMessage({ superImportantValue: this._superImportantValue });
                                        }
                                    }
                                ,
                            },
                            
                            {
                                name:'squareWaveGenerator',
                                worklet:new Blob([`
                                    class squareWaveGenerator extends AudioWorkletProcessor{
                                        static get parameterDescriptors(){
                                            return [
                                                {
                                                    name: 'frequency',
                                                    defaultValue: 440,
                                                    minValue: 0,
                                                    maxValue: 20000,
                                                    automationRate: 'a-rate',
                                                },{
                                                    name: 'dutyCycle',
                                                    defaultValue: 0.5,
                                                    minValue: 0,
                                                    maxValue: 1,
                                                    automationRate: 'a-rate',
                                                }
                                            ];
                                        }
                                    
                                        constructor(options){
                                            super(options);
                                        }
                                    
                                        process(inputs, outputs, parameters){
                                            const output = outputs[0];
                                    
                                            const frequency_useFirstOnly = parameters.frequency.length == 1;
                                            const dutyCycle_useFirstOnly = parameters.dutyCycle.length == 1;
                                    
                                            for(let channel = 0; channel < output.length; channel++){
                                                for(let a = 0; a < output[channel].length; a++){
                                                    const frequency = frequency_useFirstOnly ? parameters.frequency[0] : parameters.frequency[a];
                                                    const dutyCycle = dutyCycle_useFirstOnly ? parameters.dutyCycle[0] : parameters.dutyCycle[a];
                                    
                                                    const overallWaveProgressPercentage = (frequency/sampleRate) * (currentFrame+a);
                                                    const waveProgress = overallWaveProgressPercentage - Math.trunc(overallWaveProgressPercentage);
                                                    output[channel][a] = waveProgress < dutyCycle ? 1 : -1;
                                                }
                                            }
                                    
                                            return true;
                                        }
                                    }
                                    registerProcessor('squareWaveGenerator', squareWaveGenerator);
                                `], { type: "text/javascript" }),
                                class:
                                    class squareWaveGenerator extends AudioWorkletNode{
                                        constructor(context, options={}){
                                            options.numberOfInputs = 0;
                                            options.numberOfOutputs = 1;
                                            options.channelCount = 1;
                                            super(context, 'squareWaveGenerator', options);
                                        }
                                    
                                        get frequency(){
                                            return this.parameters.get('frequency');
                                        }
                                        get dutyCycle(){
                                            return this.parameters.get('dutyCycle');
                                        }
                                    }
                                ,
                            },
                            
                            
                            
                            
                            
                            
                            
                            {
                                name:'amplitudeModifier',
                                worklet:new Blob([`
                                    class amplitudeModifier extends AudioWorkletProcessor{
                                        static get parameterDescriptors(){
                                            return [
                                                {
                                                    name: 'invert',
                                                    defaultValue: 0,
                                                    minValue: 0,
                                                    maxValue: 1,
                                                    automationRate: 'k-rate',
                                                },{
                                                    name: 'offset',
                                                    defaultValue: 0,
                                                    minValue: -10,
                                                    maxValue: 10,
                                                    automationRate: 'a-rate',
                                                },{
                                                    name: 'divisor',
                                                    defaultValue: 1,
                                                    minValue: 1,
                                                    maxValue: 16,
                                                    automationRate: 'a-rate',
                                                },{
                                                    name: 'ceiling',
                                                    defaultValue: 10,
                                                    minValue: -10,
                                                    maxValue: 10,
                                                    automationRate: 'a-rate',
                                                },{
                                                    name: 'floor',
                                                    defaultValue: -10,
                                                    minValue: -10,
                                                    maxValue: 10,
                                                    automationRate: 'a-rate',
                                                }
                                            ];
                                        }
                                        
                                        constructor(options){
                                            super(options);
                                        }
                                    
                                        process(inputs, outputs, parameters){
                                            const input = inputs[0];
                                            const output = outputs[0];
                                            const sign = parameters.invert[0] == 1 ? -1 : 1;
                                    
                                            const divisor_useFirstOnly = parameters.divisor.length == 1;
                                            const offset_useFirstOnly = parameters.offset.length == 1;
                                            const floor_useFirstOnly = parameters.floor.length == 1;
                                            const ceiling_useFirstOnly = parameters.ceiling.length == 1;
                                    
                                            for(let channel = 0; channel < input.length; channel++){        
                                                for(let a = 0; a < input[channel].length; a++){
                                                    const divisor = divisor_useFirstOnly ? parameters.divisor[0] : parameters.divisor[a];
                                                    const offset = offset_useFirstOnly ? parameters.offset[0] : parameters.offset[a];
                                                    const floor = floor_useFirstOnly ? parameters.floor[0] : parameters.floor[a];
                                                    const ceiling = ceiling_useFirstOnly ? parameters.ceiling[0] : parameters.ceiling[a];
                                    
                                                    output[channel][a] = sign * (input[channel][a]/divisor) + offset;
                                    
                                                    if( output[channel][a] < floor ){
                                                        output[channel][a] = floor;
                                                    }else if( output[channel][a] > ceiling ){
                                                        output[channel][a] = ceiling;
                                                    }
                                                }
                                            }
                                    
                                            return true;
                                        }
                                    }
                                    registerProcessor('amplitudeModifier', amplitudeModifier);
                                `], { type: "text/javascript" }),
                                class:
                                    class amplitudeModifier extends AudioWorkletNode{
                                        constructor(context, options={}){
                                            options.numberOfInputs = 1;
                                            options.numberOfOutputs = 1;
                                            options.channelCount = 1;
                                            super(context, 'amplitudeModifier', options);
                                    
                                            this._invert = false;
                                        }
                                    
                                        get invert(){
                                            return this._invert;
                                        }
                                        set invert(value){
                                            this._invert = value;
                                            this.parameters.get('invert').setValueAtTime(this._invert?1:0,0);
                                        }
                                    
                                        get offset(){
                                            return this.parameters.get('offset');
                                        }
                                        get divisor(){
                                            return this.parameters.get('divisor');
                                        }
                                        get ceiling(){
                                            return this.parameters.get('ceiling');
                                        }
                                        get floor(){
                                            return this.parameters.get('floor');
                                        }
                                    }
                                ,
                            },
                            
                            {
                                name:'bitcrusher',
                                worklet:new Blob([`
                                    class bitcrusher extends AudioWorkletProcessor{
                                        static get parameterDescriptors(){
                                            return [
                                                {
                                                    name: 'amplitudeResolution',
                                                    defaultValue: 10,
                                                    minValue: 1,
                                                    maxValue: 128,
                                                    automationRate: 'k-rate',
                                                },{
                                                    name: 'sampleFrequency',
                                                    defaultValue: 16,
                                                    minValue: 1,
                                                    maxValue: 128,
                                                    automationRate: 'k-rate',
                                                }
                                            ];
                                        }
                                        
                                        constructor(options){
                                            super(options);
                                        }
                                    
                                        process(inputs, outputs, parameters){
                                            const input = inputs[0];
                                            const output = outputs[0];
                                            const amplitudeResolution = parameters.amplitudeResolution[0];
                                            const sampleFrequency = parameters.sampleFrequency[0];
                                        
                                            for(let channel = 0; channel < input.length; channel++){    
                                                for(let a = 0; a < input[channel].length; a++){
                                                    output[channel][a] = a%sampleFrequency == 0 ? Math.round(input[channel][a]*amplitudeResolution)/amplitudeResolution : output[channel][a-1];
                                                }
                                            }
                                            return true;
                                        }
                                    }
                                    registerProcessor('bitcrusher', bitcrusher);
                                `], { type: "text/javascript" }),
                                class:
                                    class bitcrusher extends AudioWorkletNode{
                                        constructor(context, options={}){
                                            options.numberOfInputs = 1;
                                            options.numberOfOutputs = 1;
                                            options.channelCount = 1;
                                            super(context, 'bitcrusher', options);
                                            
                                            this._amplitudeResolution = 10;
                                            this._sampleFrequency = 16;
                                        }
                                    
                                        get amplitudeResolution(){
                                            return this._amplitudeResolution;
                                        }
                                        set amplitudeResolution(value){
                                            this._amplitudeResolution = value;
                                            this.parameters.get('amplitudeResolution').setValueAtTime(this._amplitudeResolution,0);
                                        }
                                    
                                        get sampleFrequency(){
                                            return this._sampleFrequency;
                                        }
                                        set sampleFrequency(value){
                                            this._sampleFrequency = value;
                                            this.parameters.get('sampleFrequency').setValueAtTime(this._sampleFrequency,0);
                                        }
                                    }
                                ,
                            },
                            
                            {
                                name:'momentaryAmplitudeMeter',
                                worklet:new Blob([`
                                    class momentaryAmplitudeMeter extends AudioWorkletProcessor{
                                        static get parameterDescriptors(){
                                            return [
                                                {
                                                    name: 'fullSample',
                                                    defaultValue: 0, // 0 - only use the current frame / 1 - collect and use all the data from every frame since the last time a value was returned
                                                    minValue: 0,
                                                    maxValue: 1,
                                                    automationRate: 'k-rate',
                                                },{
                                                    name: 'updateDelay',
                                                    defaultValue: 100,
                                                    minValue: 1,
                                                    maxValue: 1000,
                                                    automationRate: 'k-rate',
                                                },
                                                {
                                                    name: 'calculationMode',
                                                    defaultValue: 3, //max, min, average, absMax, absMin, absAverage
                                                    minValue: 0,
                                                    maxValue: 5,
                                                    automationRate: 'k-rate',
                                                }
                                            ];
                                        }
                                    
                                        constructor(options) {
                                            super(options);
                                            this._lastUpdate = currentTime;
                                            this._dataArray = [];
                                        }
                                    
                                        process(inputs, outputs, parameters){
                                            const input = inputs[0];
                                            const fullSample = parameters.fullSample[0];
                                            const updateDelay = parameters.updateDelay[0];
                                            const calculationMode = parameters.calculationMode[0];
                                    
                                            if(fullSample){
                                                this._dataArray.push(...input[0]);
                                            }else{
                                                this._dataArray = input[0];
                                            }
                                    
                                            if(currentTime - this._lastUpdate > updateDelay/1000){
                                                this._lastUpdate = currentTime;
                                    
                                                switch(calculationMode[0]){
                                                    case 0: default:
                                                        this.port.postMessage( Math.max(...this._dataArray) );
                                                    break;
                                                    case 1:
                                                        this.port.postMessage( Math.min(...this._dataArray) );
                                                    break;
                                                    case 2:
                                                        this.port.postMessage( this._dataArray.reduce((a,b) => a + b, 0) / this._dataArray.length );
                                                    break;
                                                    case 3:
                                                        this.port.postMessage( Math.max(...(this._dataArray).map(a => Math.abs(a)) ) );
                                                    break;
                                                    case 4:
                                                        this.port.postMessage( Math.min(...(this._dataArray).map(a => Math.abs(a)) ) );
                                                    break;
                                                    case 5:
                                                        this.port.postMessage( this._dataArray.map(a => Math.abs(a)).reduce((a,b) => a + b, 0) / this._dataArray.length );
                                                    break;
                                                }
                                    
                                                if(fullSample){
                                                    this._dataArray = [];
                                                }
                                            }
                                    
                                            return true;
                                        }
                                    }
                                    registerProcessor('momentaryAmplitudeMeter', momentaryAmplitudeMeter);
                                `], { type: "text/javascript" }),
                                class:
                                    class momentaryAmplitudeMeter extends AudioWorkletNode{
                                        constructor(context, options={}){
                                            options.numberOfInputs = 1;
                                            options.numberOfOutputs = 0;
                                            options.channelCount = 1;
                                            super(context, 'momentaryAmplitudeMeter', options);
                                    
                                            const self = this;
                                    
                                            this._fullSample = false;
                                            this._updateDelay = 100;
                                            this._calculationMode = 3;
                                    
                                            this.reading = function(){};
                                    
                                            this.port.onmessage = function(event){
                                                try{
                                                    self.reading(event.data);
                                                }catch(error){}
                                            };
                                            this.port.start();
                                        }
                                    
                                        get fullSample(){
                                            return this._fullSample;
                                        }
                                        set fullSample(value){
                                            this._fullSample = value;
                                            this.parameters.get('fullSample').setValueAtTime(this._fullSample?1:0,0);
                                        }
                                    
                                        get updateDelay(){
                                            return this._updateDelay;
                                        }
                                        set updateDelay(value){
                                            this._updateDelay = value;
                                            this.parameters.get('updateDelay').setValueAtTime(this._updateDelay);
                                        }
                                    
                                        get calculationMode(){
                                            return this._calculationMode;
                                        }
                                        set calculationMode(value){
                                            this._calculationMode = value;
                                            this.parameters.get('calculationMode').setValueAtTime(this._calculationMode);
                                        }
                                    }
                                ,
                            },
                            
                            {
                                name:'amplitudeControlledModulator',
                                worklet:new Blob([`
                                    class amplitudeControlledModulator extends AudioWorkletProcessor{
                                        static get parameterDescriptors(){
                                            return [];
                                        }
                                        
                                        constructor(options){
                                            super(options);
                                        }
                                    
                                        process(inputs, outputs, parameters){
                                            const input_1 = inputs[0];
                                            const input_2 = inputs[1];
                                            const output_1 = outputs[0];
                                    
                                            for(let channel = 0; channel < input_1.length; channel++){    
                                                for(let a = 0; a < output_1[channel].length; a++){
                                                    output_1[channel][a] = input_1[channel][a] * (input_2[channel][a]+1)/2;
                                                }
                                            }
                                    
                                            return true;
                                        }
                                    }
                                    registerProcessor('amplitudeControlledModulator', amplitudeControlledModulator);
                                `], { type: "text/javascript" }),
                                class:
                                    class amplitudeControlledModulator extends AudioWorkletNode{
                                        constructor(context, options={}){
                                            options.numberOfInputs = 2;
                                            options.numberOfOutputs = 1;
                                            options.channelCount = 1;
                                            super(context, 'amplitudeControlledModulator', options);
                                        }
                                    }
                                ,
                            },
                            
                            {
                                name:'whiteNoiseGenerator',
                                worklet:new Blob([`
                                    class whiteNoiseGenerator extends AudioWorkletProcessor{
                                        static get parameterDescriptors(){
                                            return [];
                                        }
                                        
                                        constructor(options){
                                            super(options);
                                        }
                                    
                                        process(inputs, outputs, parameters){
                                            const output = outputs[0];
                                    
                                            for(let channel = 0; channel < output.length; channel++){
                                                for(let a = 0; a < output[channel].length; a++){
                                                    output[channel][a] = Math.random()*2 - 1;
                                                }
                                            }
                                    
                                            return true;
                                        }
                                    }
                                    registerProcessor('whiteNoiseGenerator', whiteNoiseGenerator);
                                `], { type: "text/javascript" }),
                                class:
                                    class whiteNoiseGenerator extends AudioWorkletNode{
                                        constructor(context, options={}){
                                            options.numberOfInputs = 0;
                                            options.numberOfOutputs = 1;
                                            options.channelCount = 1;
                                            super(context, 'whiteNoiseGenerator', options);
                                        }
                                    }
                                ,
                            },
                            
                            {
                                name:'sigmoid',
                                worklet:new Blob([`
                                    class sigmoid extends AudioWorkletProcessor{
                                        static get parameterDescriptors(){
                                            return [
                                                {
                                                    name: 'gain',
                                                    defaultValue: 1,
                                                    minValue: 0,
                                                    maxValue: 1,
                                                    automationRate: 'a-rate',
                                                },
                                                {
                                                    name: 'sharpness',
                                                    defaultValue: 0,
                                                    minValue: 0,
                                                    maxValue: 1,
                                                    automationRate: 'a-rate',
                                                }
                                            ];
                                        }
                                    
                                        constructor(options){
                                            super(options);
                                        }
                                    
                                        process(inputs, outputs, parameters){
                                            const input = inputs[0];
                                            const output = outputs[0];
                                            const gain_useFirstOnly = parameters.gain.length == 1;
                                            const sharpness_useFirstOnly = parameters.sharpness.length == 1;
                                        
                                            for(let channel = 0; channel < input.length; channel++){
                                                const inputChannel = input[channel];
                                                const outputChannel = output[channel];
                                        
                                                for(let a = 0; a < inputChannel.length; a++){
                                                    const gain = gain_useFirstOnly ? parameters.gain[0] : parameters.gain[a];
                                                    const sharpness = sharpness_useFirstOnly ? parameters.sharpness[0] : parameters.sharpness[a];
                                                    outputChannel[a] = gain * ( inputChannel[a] / ( 1 - sharpness + sharpness*Math.abs(inputChannel[a]) ) );
                                                }
                                            }
                                            return true;
                                        }
                                    }
                                    registerProcessor('sigmoid', sigmoid);
                                `], { type: "text/javascript" }),
                                class:
                                    class sigmoid extends AudioWorkletNode{
                                        constructor(context, options={}){
                                            options.numberOfInputs = 1;
                                            options.numberOfOutputs = 1;
                                            options.channelCount = 1;
                                            super(context, 'sigmoid', options);
                                        }
                                    
                                        get gain(){
                                            return this.parameters.get('gain');
                                        }
                                        get sharpness(){
                                            return this.parameters.get('sharpness');
                                        }
                                    }
                                ,
                            },
                        ];
                            
                        worklets.forEach(worklet => {
                            worklet.loaded = false;
                    
                            audio.context.audioWorklet.addModule(window.URL.createObjectURL(worklet.worklet)).then( () => {
                                worklet.loaded = true;
                    
                                audio.audioWorklet[worklet.name] = worklet.class;
                    
                                if( checkIfReady() && this.nowReady != undefined ){
                                    this.nowReady();
                                }
                            } );
                        });
                    };
                    
                    
                    
                    
                    
                    
                    
                    
                    const readyCheckList = {
                        audioWorklet:false,
                    };
                    audio.nowReady = function(){};
                    
                    Object.keys(readyCheckList).forEach(item => {
                        audio[item].nowReady = function(){
                            readyCheckList[item] = true;
                            if( Object.values(readyCheckList).reduce((a,b) => a&&b) ){ audio.nowReady(); }
                        };
                        if( audio[item].checkIfReady() ){
                            audio[item].nowReady();
                        }
                    });
                };
                const _thirdparty = new function(){
                    const thirdparty = this;
                    /**
                     * martinez v0.5.0
                     * Martinez polygon clipping algorithm, does boolean operation on polygons (multipolygons, polygons with holes etc): intersection, union, difference, xor
                     *
                     * author Alex Milevski <info@w8r.name>
                     * license MIT
                     */
                    
                    (function (global, factory) {
                        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
                        typeof define === 'function' && define.amd ? define(['exports'], factory) :
                        (factory((global.martinez = {})));
                      }(this, (function (exports) { 'use strict';
                      
                        function DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }
                      
                        var SplayTree = function SplayTree(compare, noDuplicates) {
                          if ( compare === void 0 ) compare = DEFAULT_COMPARE;
                          if ( noDuplicates === void 0 ) noDuplicates = false;
                      
                          this._compare = compare;
                          this._root = null;
                          this._size = 0;
                          this._noDuplicates = !!noDuplicates;
                        };
                      
                        var prototypeAccessors = { size: { configurable: true } };
                      
                      
                        SplayTree.prototype.rotateLeft = function rotateLeft (x) {
                          var y = x.right;
                          if (y) {
                            x.right = y.left;
                            if (y.left) { y.left.parent = x; }
                            y.parent = x.parent;
                          }
                      
                          if (!x.parent)              { this._root = y; }
                          else if (x === x.parent.left) { x.parent.left = y; }
                          else                        { x.parent.right = y; }
                          if (y) { y.left = x; }
                          x.parent = y;
                        };
                      
                      
                        SplayTree.prototype.rotateRight = function rotateRight (x) {
                          var y = x.left;
                          if (y) {
                            x.left = y.right;
                            if (y.right) { y.right.parent = x; }
                            y.parent = x.parent;
                          }
                      
                          if (!x.parent)             { this._root = y; }
                          else if(x === x.parent.left) { x.parent.left = y; }
                          else                       { x.parent.right = y; }
                          if (y) { y.right = x; }
                          x.parent = y;
                        };
                      
                      
                        SplayTree.prototype._splay = function _splay (x) {
                            var this$1 = this;
                      
                          while (x.parent) {
                            var p = x.parent;
                            if (!p.parent) {
                              if (p.left === x) { this$1.rotateRight(p); }
                              else            { this$1.rotateLeft(p); }
                            } else if (p.left === x && p.parent.left === p) {
                              this$1.rotateRight(p.parent);
                              this$1.rotateRight(p);
                            } else if (p.right === x && p.parent.right === p) {
                              this$1.rotateLeft(p.parent);
                              this$1.rotateLeft(p);
                            } else if (p.left === x && p.parent.right === p) {
                              this$1.rotateRight(p);
                              this$1.rotateLeft(p);
                            } else {
                              this$1.rotateLeft(p);
                              this$1.rotateRight(p);
                            }
                          }
                        };
                      
                      
                        SplayTree.prototype.splay = function splay (x) {
                            var this$1 = this;
                      
                          var p, gp, ggp, l, r;
                      
                          while (x.parent) {
                            p = x.parent;
                            gp = p.parent;
                      
                            if (gp && gp.parent) {
                              ggp = gp.parent;
                              if (ggp.left === gp) { ggp.left= x; }
                              else               { ggp.right = x; }
                              x.parent = ggp;
                            } else {
                              x.parent = null;
                              this$1._root = x;
                            }
                      
                            l = x.left; r = x.right;
                      
                            if (x === p.left) { // left
                              if (gp) {
                                if (gp.left === p) {
                                  /* zig-zig */
                                  if (p.right) {
                                    gp.left = p.right;
                                    gp.left.parent = gp;
                                  } else { gp.left = null; }
                      
                                  p.right = gp;
                                  gp.parent = p;
                                } else {
                                  /* zig-zag */
                                  if (l) {
                                    gp.right = l;
                                    l.parent = gp;
                                  } else { gp.right = null; }
                      
                                  x.left  = gp;
                                  gp.parent = x;
                                }
                              }
                              if (r) {
                                p.left = r;
                                r.parent = p;
                              } else { p.left = null; }
                      
                              x.right= p;
                              p.parent = x;
                            } else { // right
                              if (gp) {
                                if (gp.right === p) {
                                  /* zig-zig */
                                  if (p.left) {
                                    gp.right = p.left;
                                    gp.right.parent = gp;
                                  } else { gp.right = null; }
                      
                                  p.left = gp;
                                  gp.parent = p;
                                } else {
                                  /* zig-zag */
                                  if (r) {
                                    gp.left = r;
                                    r.parent = gp;
                                  } else { gp.left = null; }
                      
                                  x.right = gp;
                                  gp.parent = x;
                                }
                              }
                              if (l) {
                                p.right = l;
                                l.parent = p;
                              } else { p.right = null; }
                      
                              x.left = p;
                              p.parent = x;
                            }
                          }
                        };
                      
                      
                        SplayTree.prototype.replace = function replace (u, v) {
                          if (!u.parent) { this._root = v; }
                          else if (u === u.parent.left) { u.parent.left = v; }
                          else { u.parent.right = v; }
                          if (v) { v.parent = u.parent; }
                        };
                      
                      
                        SplayTree.prototype.minNode = function minNode (u) {
                            if ( u === void 0 ) u = this._root;
                      
                          if (u) { while (u.left) { u = u.left; } }
                          return u;
                        };
                      
                      
                        SplayTree.prototype.maxNode = function maxNode (u) {
                            if ( u === void 0 ) u = this._root;
                      
                          if (u) { while (u.right) { u = u.right; } }
                          return u;
                        };
                      
                      
                        SplayTree.prototype.insert = function insert (key, data) {
                          var z = this._root;
                          var p = null;
                          var comp = this._compare;
                          var cmp;
                      
                          if (this._noDuplicates) {
                            while (z) {
                              p = z;
                              cmp = comp(z.key, key);
                              if (cmp === 0) { return; }
                              else if (comp(z.key, key) < 0) { z = z.right; }
                              else { z = z.left; }
                            }
                          } else {
                            while (z) {
                              p = z;
                              if (comp(z.key, key) < 0) { z = z.right; }
                              else { z = z.left; }
                            }
                          }
                      
                          z = { key: key, data: data, left: null, right: null, parent: p };
                      
                          if (!p)                        { this._root = z; }
                          else if (comp(p.key, z.key) < 0) { p.right = z; }
                          else                           { p.left= z; }
                      
                          this.splay(z);
                          this._size++;
                          return z;
                        };
                      
                      
                        SplayTree.prototype.find = function find (key) {
                          var z  = this._root;
                          var comp = this._compare;
                          while (z) {
                            var cmp = comp(z.key, key);
                            if    (cmp < 0) { z = z.right; }
                            else if (cmp > 0) { z = z.left; }
                            else            { return z; }
                          }
                          return null;
                        };
                      
                        /**
                         * Whether the tree contains a node with the given key
                         * @param{Key} key
                         * @return {boolean} true/false
                         */
                        SplayTree.prototype.contains = function contains (key) {
                          var node     = this._root;
                          var comparator = this._compare;
                          while (node){
                            var cmp = comparator(key, node.key);
                            if    (cmp === 0) { return true; }
                            else if (cmp < 0) { node = node.left; }
                            else              { node = node.right; }
                          }
                      
                          return false;
                        };
                      
                      
                        SplayTree.prototype.remove = function remove (key) {
                          var z = this.find(key);
                      
                          if (!z) { return false; }
                      
                          this.splay(z);
                      
                          if (!z.left) { this.replace(z, z.right); }
                          else if (!z.right) { this.replace(z, z.left); }
                          else {
                            var y = this.minNode(z.right);
                            if (y.parent !== z) {
                              this.replace(y, y.right);
                              y.right = z.right;
                              y.right.parent = y;
                            }
                            this.replace(z, y);
                            y.left = z.left;
                            y.left.parent = y;
                          }
                      
                          this._size--;
                          return true;
                        };
                      
                      
                        SplayTree.prototype.removeNode = function removeNode (z) {
                          if (!z) { return false; }
                      
                          this.splay(z);
                      
                          if (!z.left) { this.replace(z, z.right); }
                          else if (!z.right) { this.replace(z, z.left); }
                          else {
                            var y = this.minNode(z.right);
                            if (y.parent !== z) {
                              this.replace(y, y.right);
                              y.right = z.right;
                              y.right.parent = y;
                            }
                            this.replace(z, y);
                            y.left = z.left;
                            y.left.parent = y;
                          }
                      
                          this._size--;
                          return true;
                        };
                      
                      
                        SplayTree.prototype.erase = function erase (key) {
                          var z = this.find(key);
                          if (!z) { return; }
                      
                          this.splay(z);
                      
                          var s = z.left;
                          var t = z.right;
                      
                          var sMax = null;
                          if (s) {
                            s.parent = null;
                            sMax = this.maxNode(s);
                            this.splay(sMax);
                            this._root = sMax;
                          }
                          if (t) {
                            if (s) { sMax.right = t; }
                            else { this._root = t; }
                            t.parent = sMax;
                          }
                      
                          this._size--;
                        };
                      
                        /**
                         * Removes and returns the node with smallest key
                         * @return {?Node}
                         */
                        SplayTree.prototype.pop = function pop () {
                          var node = this._root, returnValue = null;
                          if (node) {
                            while (node.left) { node = node.left; }
                            returnValue = { key: node.key, data: node.data };
                            this.remove(node.key);
                          }
                          return returnValue;
                        };
                      
                      
                        /* eslint-disable class-methods-use-this */
                      
                        /**
                         * Successor node
                         * @param{Node} node
                         * @return {?Node}
                         */
                        SplayTree.prototype.next = function next (node) {
                          var successor = node;
                          if (successor) {
                            if (successor.right) {
                              successor = successor.right;
                              while (successor && successor.left) { successor = successor.left; }
                            } else {
                              successor = node.parent;
                              while (successor && successor.right === node) {
                                node = successor; successor = successor.parent;
                              }
                            }
                          }
                          return successor;
                        };
                      
                      
                        /**
                         * Predecessor node
                         * @param{Node} node
                         * @return {?Node}
                         */
                        SplayTree.prototype.prev = function prev (node) {
                          var predecessor = node;
                          if (predecessor) {
                            if (predecessor.left) {
                              predecessor = predecessor.left;
                              while (predecessor && predecessor.right) { predecessor = predecessor.right; }
                            } else {
                              predecessor = node.parent;
                              while (predecessor && predecessor.left === node) {
                                node = predecessor;
                                predecessor = predecessor.parent;
                              }
                            }
                          }
                          return predecessor;
                        };
                        /* eslint-enable class-methods-use-this */
                      
                      
                        /**
                         * @param{forEachCallback} callback
                         * @return {SplayTree}
                         */
                        SplayTree.prototype.forEach = function forEach (callback) {
                          var current = this._root;
                          var s = [], done = false, i = 0;
                      
                          while (!done) {
                            // Reach the left most Node of the current Node
                            if (current) {
                              // Place pointer to a tree node on the stack
                              // before traversing the node's left subtree
                              s.push(current);
                              current = current.left;
                            } else {
                              // BackTrack from the empty subtree and visit the Node
                              // at the top of the stack; however, if the stack is
                              // empty you are done
                              if (s.length > 0) {
                                current = s.pop();
                                callback(current, i++);
                      
                                // We have visited the node and its left
                                // subtree. Now, it's right subtree's turn
                                current = current.right;
                              } else { done = true; }
                            }
                          }
                          return this;
                        };
                      
                      
                        /**
                         * Walk key range from `low` to `high`. Stops if `fn` returns a value.
                         * @param{Key}    low
                         * @param{Key}    high
                         * @param{Function} fn
                         * @param{*?}     ctx
                         * @return {SplayTree}
                         */
                        SplayTree.prototype.range = function range (low, high, fn, ctx) {
                            var this$1 = this;
                      
                          var Q = [];
                          var compare = this._compare;
                          var node = this._root, cmp;
                      
                          while (Q.length !== 0 || node) {
                            if (node) {
                              Q.push(node);
                              node = node.left;
                            } else {
                              node = Q.pop();
                              cmp = compare(node.key, high);
                              if (cmp > 0) {
                                break;
                              } else if (compare(node.key, low) >= 0) {
                                if (fn.call(ctx, node)) { return this$1; } // stop if smth is returned
                              }
                              node = node.right;
                            }
                          }
                          return this;
                        };
                      
                        /**
                         * Returns all keys in order
                         * @return {Array<Key>}
                         */
                        SplayTree.prototype.keys = function keys () {
                          var current = this._root;
                          var s = [], r = [], done = false;
                      
                          while (!done) {
                            if (current) {
                              s.push(current);
                              current = current.left;
                            } else {
                              if (s.length > 0) {
                                current = s.pop();
                                r.push(current.key);
                                current = current.right;
                              } else { done = true; }
                            }
                          }
                          return r;
                        };
                      
                      
                        /**
                         * Returns `data` fields of all nodes in order.
                         * @return {Array<Value>}
                         */
                        SplayTree.prototype.values = function values () {
                          var current = this._root;
                          var s = [], r = [], done = false;
                      
                          while (!done) {
                            if (current) {
                              s.push(current);
                              current = current.left;
                            } else {
                              if (s.length > 0) {
                                current = s.pop();
                                r.push(current.data);
                                current = current.right;
                              } else { done = true; }
                            }
                          }
                          return r;
                        };
                      
                      
                        /**
                         * Returns node at given index
                         * @param{number} index
                         * @return {?Node}
                         */
                        SplayTree.prototype.at = function at (index) {
                          // removed after a consideration, more misleading than useful
                          // index = index % this.size;
                          // if (index < 0) index = this.size - index;
                      
                          var current = this._root;
                          var s = [], done = false, i = 0;
                      
                          while (!done) {
                            if (current) {
                              s.push(current);
                              current = current.left;
                            } else {
                              if (s.length > 0) {
                                current = s.pop();
                                if (i === index) { return current; }
                                i++;
                                current = current.right;
                              } else { done = true; }
                            }
                          }
                          return null;
                        };
                      
                        /**
                         * Bulk-load items. Both array have to be same size
                         * @param{Array<Key>}  keys
                         * @param{Array<Value>}[values]
                         * @param{Boolean}     [presort=false] Pre-sort keys and values, using
                         *                                       tree's comparator. Sorting is done
                         *                                       in-place
                         * @return {AVLTree}
                         */
                        SplayTree.prototype.load = function load (keys, values, presort) {
                            if ( keys === void 0 ) keys = [];
                            if ( values === void 0 ) values = [];
                            if ( presort === void 0 ) presort = false;
                      
                          if (this._size !== 0) { throw new Error('bulk-load: tree is not empty'); }
                          var size = keys.length;
                          if (presort) { sort(keys, values, 0, size - 1, this._compare); }
                          this._root = loadRecursive(null, keys, values, 0, size);
                          this._size = size;
                          return this;
                        };
                      
                      
                        SplayTree.prototype.min = function min () {
                          var node = this.minNode(this._root);
                          if (node) { return node.key; }
                          else    { return null; }
                        };
                      
                      
                        SplayTree.prototype.max = function max () {
                          var node = this.maxNode(this._root);
                          if (node) { return node.key; }
                          else    { return null; }
                        };
                      
                        SplayTree.prototype.isEmpty = function isEmpty () { return this._root === null; };
                        prototypeAccessors.size.get = function () { return this._size; };
                      
                      
                        /**
                         * Create a tree and load it with items
                         * @param{Array<Key>}        keys
                         * @param{Array<Value>?}      [values]
                      
                         * @param{Function?}          [comparator]
                         * @param{Boolean?}           [presort=false] Pre-sort keys and values, using
                         *                                             tree's comparator. Sorting is done
                         *                                             in-place
                         * @param{Boolean?}           [noDuplicates=false] Allow duplicates
                         * @return {SplayTree}
                         */
                        SplayTree.createTree = function createTree (keys, values, comparator, presort, noDuplicates) {
                          return new SplayTree(comparator, noDuplicates).load(keys, values, presort);
                        };
                      
                        Object.defineProperties( SplayTree.prototype, prototypeAccessors );
                      
                      
                        function loadRecursive (parent, keys, values, start, end) {
                          var size = end - start;
                          if (size > 0) {
                            var middle = start + Math.floor(size / 2);
                            var key    = keys[middle];
                            var data   = values[middle];
                            var node   = { key: key, data: data, parent: parent };
                            node.left    = loadRecursive(node, keys, values, start, middle);
                            node.right   = loadRecursive(node, keys, values, middle + 1, end);
                            return node;
                          }
                          return null;
                        }
                      
                      
                        function sort(keys, values, left, right, compare) {
                          if (left >= right) { return; }
                      
                          var pivot = keys[(left + right) >> 1];
                          var i = left - 1;
                          var j = right + 1;
                      
                          while (true) {
                            do { i++; } while (compare(keys[i], pivot) < 0);
                            do { j--; } while (compare(keys[j], pivot) > 0);
                            if (i >= j) { break; }
                      
                            var tmp = keys[i];
                            keys[i] = keys[j];
                            keys[j] = tmp;
                      
                            tmp = values[i];
                            values[i] = values[j];
                            values[j] = tmp;
                          }
                      
                          sort(keys, values,  left,     j, compare);
                          sort(keys, values, j + 1, right, compare);
                        }
                      
                        var NORMAL               = 0;
                        var NON_CONTRIBUTING     = 1;
                        var SAME_TRANSITION      = 2;
                        var DIFFERENT_TRANSITION = 3;
                      
                        var INTERSECTION = 0;
                        var UNION        = 1;
                        var DIFFERENCE   = 2;
                        var XOR          = 3;
                      
                        /**
                         * @param  {SweepEvent} event
                         * @param  {SweepEvent} prev
                         * @param  {Operation} operation
                         */
                        function computeFields (event, prev, operation) {
                          // compute inOut and otherInOut fields
                          if (prev === null) {
                            event.inOut      = false;
                            event.otherInOut = true;
                      
                          // previous line segment in sweepline belongs to the same polygon
                          } else {
                            if (event.isSubject === prev.isSubject) {
                              event.inOut      = !prev.inOut;
                              event.otherInOut = prev.otherInOut;
                      
                            // previous line segment in sweepline belongs to the clipping polygon
                            } else {
                              event.inOut      = !prev.otherInOut;
                              event.otherInOut = prev.isVertical() ? !prev.inOut : prev.inOut;
                            }
                      
                            // compute prevInResult field
                            if (prev) {
                              event.prevInResult = (!inResult(prev, operation) || prev.isVertical())
                                ? prev.prevInResult : prev;
                            }
                          }
                      
                          // check if the line segment belongs to the Boolean operation
                          event.inResult = inResult(event, operation);
                        }
                      
                      
                        /* eslint-disable indent */
                        function inResult(event, operation) {
                          switch (event.type) {
                            case NORMAL:
                              switch (operation) {
                                case INTERSECTION:
                                  return !event.otherInOut;
                                case UNION:
                                  return event.otherInOut;
                                case DIFFERENCE:
                                  // return (event.isSubject && !event.otherInOut) ||
                                  //         (!event.isSubject && event.otherInOut);
                                  return (event.isSubject && event.otherInOut) ||
                                          (!event.isSubject && !event.otherInOut);
                                case XOR:
                                  return true;
                              }
                              break;
                            case SAME_TRANSITION:
                              return operation === INTERSECTION || operation === UNION;
                            case DIFFERENT_TRANSITION:
                              return operation === DIFFERENCE;
                            case NON_CONTRIBUTING:
                              return false;
                          }
                          return false;
                        }
                        /* eslint-enable indent */
                      
                        var SweepEvent = function SweepEvent (point, left, otherEvent, isSubject, edgeType) {
                      
                          /**
                           * Is left endpoint?
                           * @type {Boolean}
                           */
                          this.left = left;
                      
                          /**
                           * @type {Array.<Number>}
                           */
                          this.point = point;
                      
                          /**
                           * Other edge reference
                           * @type {SweepEvent}
                           */
                          this.otherEvent = otherEvent;
                      
                          /**
                           * Belongs to source or clipping polygon
                           * @type {Boolean}
                           */
                          this.isSubject = isSubject;
                      
                          /**
                           * Edge contribution type
                           * @type {Number}
                           */
                          this.type = edgeType || NORMAL;
                      
                      
                          /**
                           * In-out transition for the sweepline crossing polygon
                           * @type {Boolean}
                           */
                          this.inOut = false;
                      
                      
                          /**
                           * @type {Boolean}
                           */
                          this.otherInOut = false;
                      
                          /**
                           * Previous event in result?
                           * @type {SweepEvent}
                           */
                          this.prevInResult = null;
                      
                          /**
                           * Does event belong to result?
                           * @type {Boolean}
                           */
                          this.inResult = false;
                      
                      
                          // connection step
                      
                          /**
                           * @type {Boolean}
                           */
                          this.resultInOut = false;
                      
                          this.isExteriorRing = true;
                        };
                      
                      
                        /**
                         * @param{Array.<Number>}p
                         * @return {Boolean}
                         */
                        SweepEvent.prototype.isBelow = function isBelow (p) {
                          var p0 = this.point, p1 = this.otherEvent.point;
                          return this.left
                            ? (p0[0] - p[0]) * (p1[1] - p[1]) - (p1[0] - p[0]) * (p0[1] - p[1]) > 0
                            // signedArea(this.point, this.otherEvent.point, p) > 0 :
                            : (p1[0] - p[0]) * (p0[1] - p[1]) - (p0[0] - p[0]) * (p1[1] - p[1]) > 0;
                            //signedArea(this.otherEvent.point, this.point, p) > 0;
                        };
                      
                      
                        /**
                         * @param{Array.<Number>}p
                         * @return {Boolean}
                         */
                        SweepEvent.prototype.isAbove = function isAbove (p) {
                          return !this.isBelow(p);
                        };
                      
                      
                        /**
                         * @return {Boolean}
                         */
                        SweepEvent.prototype.isVertical = function isVertical () {
                          return this.point[0] === this.otherEvent.point[0];
                        };
                      
                      
                        SweepEvent.prototype.clone = function clone () {
                          var copy = new SweepEvent(
                            this.point, this.left, this.otherEvent, this.isSubject, this.type);
                      
                          copy.inResult     = this.inResult;
                          copy.prevInResult = this.prevInResult;
                          copy.isExteriorRing = this.isExteriorRing;
                          copy.inOut        = this.inOut;
                          copy.otherInOut   = this.otherInOut;
                      
                          return copy;
                        };
                      
                        function equals(p1, p2) {
                          if (p1[0] === p2[0]) {
                            if (p1[1] === p2[1]) {
                              return true;
                            } else {
                              return false;
                            }
                          }
                          return false;
                        }
                      
                        // const EPSILON = 1e-9;
                        // const abs = Math.abs;
                        // TODO https://github.com/w8r/martinez/issues/6#issuecomment-262847164
                        // Precision problem.
                        //
                        // module.exports = function equals(p1, p2) {
                        //   return abs(p1[0] - p2[0]) <= EPSILON && abs(p1[1] - p2[1]) <= EPSILON;
                        // };
                      
                        /**
                         * Signed area of the triangle (p0, p1, p2)
                         * @param  {Array.<Number>} p0
                         * @param  {Array.<Number>} p1
                         * @param  {Array.<Number>} p2
                         * @return {Number}
                         */
                        function signedArea(p0, p1, p2) {
                          return (p0[0] - p2[0]) * (p1[1] - p2[1]) - (p1[0] - p2[0]) * (p0[1] - p2[1]);
                        }
                      
                        /**
                         * @param  {SweepEvent} e1
                         * @param  {SweepEvent} e2
                         * @return {Number}
                         */
                        function compareEvents(e1, e2) {
                          var p1 = e1.point;
                          var p2 = e2.point;
                      
                          // Different x-coordinate
                          if (p1[0] > p2[0]) { return 1; }
                          if (p1[0] < p2[0]) { return -1; }
                      
                          // Different points, but same x-coordinate
                          // Event with lower y-coordinate is processed first
                          if (p1[1] !== p2[1]) { return p1[1] > p2[1] ? 1 : -1; }
                      
                          return specialCases(e1, e2, p1, p2);
                        }
                      
                      
                        /* eslint-disable no-unused-vars */
                        function specialCases(e1, e2, p1, p2) {
                          // Same coordinates, but one is a left endpoint and the other is
                          // a right endpoint. The right endpoint is processed first
                          if (e1.left !== e2.left)
                            { return e1.left ? 1 : -1; }
                      
                          // const p2 = e1.otherEvent.point, p3 = e2.otherEvent.point;
                          // const sa = (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])
                          // Same coordinates, both events
                          // are left endpoints or right endpoints.
                          // not collinear
                          if (signedArea(p1, e1.otherEvent.point, e2.otherEvent.point) !== 0) {
                            // the event associate to the bottom segment is processed first
                            return (!e1.isBelow(e2.otherEvent.point)) ? 1 : -1;
                          }
                      
                          return (!e1.isSubject && e2.isSubject) ? 1 : -1;
                        }
                        /* eslint-enable no-unused-vars */
                      
                        /**
                         * @param  {SweepEvent} se
                         * @param  {Array.<Number>} p
                         * @param  {Queue} queue
                         * @return {Queue}
                         */
                        function divideSegment(se, p, queue)  {
                          var r = new SweepEvent(p, false, se,            se.isSubject);
                          var l = new SweepEvent(p, true,  se.otherEvent, se.isSubject);
                      
                          /* eslint-disable no-console */
                          if (equals(se.point, se.otherEvent.point)) {
                      
                            console.warn('what is that, a collapsed segment?', se);
                          }
                          /* eslint-enable no-console */
                      
                          r.contourId = l.contourId = se.contourId;
                      
                          // avoid a rounding error. The left event would be processed after the right event
                          if (compareEvents(l, se.otherEvent) > 0) {
                            se.otherEvent.left = true;
                            l.left = false;
                          }
                      
                          // avoid a rounding error. The left event would be processed after the right event
                          // if (compareEvents(se, r) > 0) {}
                      
                          se.otherEvent.otherEvent = l;
                          se.otherEvent = r;
                      
                          queue.push(l);
                          queue.push(r);
                      
                          return queue;
                        }
                      
                        //const EPS = 1e-9;
                      
                        /**
                         * Finds the magnitude of the cross product of two vectors (if we pretend
                         * they're in three dimensions)
                         *
                         * @param {Object} a First vector
                         * @param {Object} b Second vector
                         * @private
                         * @returns {Number} The magnitude of the cross product
                         */
                        function crossProduct(a, b) {
                          return (a[0] * b[1]) - (a[1] * b[0]);
                        }
                      
                        /**
                         * Finds the dot product of two vectors.
                         *
                         * @param {Object} a First vector
                         * @param {Object} b Second vector
                         * @private
                         * @returns {Number} The dot product
                         */
                        function dotProduct(a, b) {
                          return (a[0] * b[0]) + (a[1] * b[1]);
                        }
                      
                        /**
                         * Finds the intersection (if any) between two line segments a and b, given the
                         * line segments' end points a1, a2 and b1, b2.
                         *
                         * This algorithm is based on Schneider and Eberly.
                         * http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf
                         * Page 244.
                         *
                         * @param {Array.<Number>} a1 point of first line
                         * @param {Array.<Number>} a2 point of first line
                         * @param {Array.<Number>} b1 point of second line
                         * @param {Array.<Number>} b2 point of second line
                         * @param {Boolean=}       noEndpointTouch whether to skip single touchpoints
                         *                                         (meaning connected segments) as
                         *                                         intersections
                         * @returns {Array.<Array.<Number>>|Null} If the lines intersect, the point of
                         * intersection. If they overlap, the two end points of the overlapping segment.
                         * Otherwise, null.
                         */
                        function intersection (a1, a2, b1, b2, noEndpointTouch) {
                          // The algorithm expects our lines in the form P + sd, where P is a point,
                          // s is on the interval [0, 1], and d is a vector.
                          // We are passed two points. P can be the first point of each pair. The
                          // vector, then, could be thought of as the distance (in x and y components)
                          // from the first point to the second point.
                          // So first, let's make our vectors:
                          var va = [a2[0] - a1[0], a2[1] - a1[1]];
                          var vb = [b2[0] - b1[0], b2[1] - b1[1]];
                          // We also define a function to convert back to regular point form:
                      
                          /* eslint-disable arrow-body-style */
                      
                          function toPoint(p, s, d) {
                            return [
                              p[0] + s * d[0],
                              p[1] + s * d[1]
                            ];
                          }
                      
                          /* eslint-enable arrow-body-style */
                      
                          // The rest is pretty much a straight port of the algorithm.
                          var e = [b1[0] - a1[0], b1[1] - a1[1]];
                          var kross    = crossProduct(va, vb);
                          var sqrKross = kross * kross;
                          var sqrLenA  = dotProduct(va, va);
                          //const sqrLenB  = dotProduct(vb, vb);
                      
                          // Check for line intersection. This works because of the properties of the
                          // cross product -- specifically, two vectors are parallel if and only if the
                          // cross product is the 0 vector. The full calculation involves relative error
                          // to account for possible very small line segments. See Schneider & Eberly
                          // for details.
                          if (sqrKross > 0/* EPS * sqrLenB * sqLenA */) {
                            // If they're not parallel, then (because these are line segments) they
                            // still might not actually intersect. This code checks that the
                            // intersection point of the lines is actually on both line segments.
                            var s = crossProduct(e, vb) / kross;
                            if (s < 0 || s > 1) {
                              // not on line segment a
                              return null;
                            }
                            var t = crossProduct(e, va) / kross;
                            if (t < 0 || t > 1) {
                              // not on line segment b
                              return null;
                            }
                            if (s === 0 || s === 1) {
                              // on an endpoint of line segment a
                              return noEndpointTouch ? null : [toPoint(a1, s, va)];
                            }
                            if (t === 0 || t === 1) {
                              // on an endpoint of line segment b
                              return noEndpointTouch ? null : [toPoint(b1, t, vb)];
                            }
                            return [toPoint(a1, s, va)];
                          }
                      
                          // If we've reached this point, then the lines are either parallel or the
                          // same, but the segments could overlap partially or fully, or not at all.
                          // So we need to find the overlap, if any. To do that, we can use e, which is
                          // the (vector) difference between the two initial points. If this is parallel
                          // with the line itself, then the two lines are the same line, and there will
                          // be overlap.
                          //const sqrLenE = dotProduct(e, e);
                          kross = crossProduct(e, va);
                          sqrKross = kross * kross;
                      
                          if (sqrKross > 0 /* EPS * sqLenB * sqLenE */) {
                          // Lines are just parallel, not the same. No overlap.
                            return null;
                          }
                      
                          var sa = dotProduct(va, e) / sqrLenA;
                          var sb = sa + dotProduct(va, vb) / sqrLenA;
                          var smin = Math.min(sa, sb);
                          var smax = Math.max(sa, sb);
                      
                          // this is, essentially, the FindIntersection acting on floats from
                          // Schneider & Eberly, just inlined into this function.
                          if (smin <= 1 && smax >= 0) {
                      
                            // overlap on an end point
                            if (smin === 1) {
                              return noEndpointTouch ? null : [toPoint(a1, smin > 0 ? smin : 0, va)];
                            }
                      
                            if (smax === 0) {
                              return noEndpointTouch ? null : [toPoint(a1, smax < 1 ? smax : 1, va)];
                            }
                      
                            if (noEndpointTouch && smin === 0 && smax === 1) { return null; }
                      
                            // There's overlap on a segment -- two points of intersection. Return both.
                            return [
                              toPoint(a1, smin > 0 ? smin : 0, va),
                              toPoint(a1, smax < 1 ? smax : 1, va)
                            ];
                          }
                      
                          return null;
                        }
                      
                        /**
                         * @param  {SweepEvent} se1
                         * @param  {SweepEvent} se2
                         * @param  {Queue}      queue
                         * @return {Number}
                         */
                        function possibleIntersection (se1, se2, queue) {
                          // that disallows self-intersecting polygons,
                          // did cost us half a day, so I'll leave it
                          // out of respect
                          // if (se1.isSubject === se2.isSubject) return;
                          var inter = intersection(
                            se1.point, se1.otherEvent.point,
                            se2.point, se2.otherEvent.point
                          );
                      
                          var nintersections = inter ? inter.length : 0;
                          if (nintersections === 0) { return 0; } // no intersection
                      
                          // the line segments intersect at an endpoint of both line segments
                          if ((nintersections === 1) &&
                              (equals(se1.point, se2.point) ||
                               equals(se1.otherEvent.point, se2.otherEvent.point))) {
                            return 0;
                          }
                      
                          if (nintersections === 2 && se1.isSubject === se2.isSubject) {
                            // if(se1.contourId === se2.contourId){
                            // console.warn('Edges of the same polygon overlap',
                            //   se1.point, se1.otherEvent.point, se2.point, se2.otherEvent.point);
                            // }
                            //throw new Error('Edges of the same polygon overlap');
                            return 0;
                          }
                      
                          // The line segments associated to se1 and se2 intersect
                          if (nintersections === 1) {
                      
                            // if the intersection point is not an endpoint of se1
                            if (!equals(se1.point, inter[0]) && !equals(se1.otherEvent.point, inter[0])) {
                              divideSegment(se1, inter[0], queue);
                            }
                      
                            // if the intersection point is not an endpoint of se2
                            if (!equals(se2.point, inter[0]) && !equals(se2.otherEvent.point, inter[0])) {
                              divideSegment(se2, inter[0], queue);
                            }
                            return 1;
                          }
                      
                          // The line segments associated to se1 and se2 overlap
                          var events        = [];
                          var leftCoincide  = false;
                          var rightCoincide = false;
                      
                          if (equals(se1.point, se2.point)) {
                            leftCoincide = true; // linked
                          } else if (compareEvents(se1, se2) === 1) {
                            events.push(se2, se1);
                          } else {
                            events.push(se1, se2);
                          }
                      
                          if (equals(se1.otherEvent.point, se2.otherEvent.point)) {
                            rightCoincide = true;
                          } else if (compareEvents(se1.otherEvent, se2.otherEvent) === 1) {
                            events.push(se2.otherEvent, se1.otherEvent);
                          } else {
                            events.push(se1.otherEvent, se2.otherEvent);
                          }
                      
                          if ((leftCoincide && rightCoincide) || leftCoincide) {
                            // both line segments are equal or share the left endpoint
                            se2.type = NON_CONTRIBUTING;
                            se1.type = (se2.inOut === se1.inOut)
                              ? SAME_TRANSITION : DIFFERENT_TRANSITION;
                      
                            if (leftCoincide && !rightCoincide) {
                              // honestly no idea, but changing events selection from [2, 1]
                              // to [0, 1] fixes the overlapping self-intersecting polygons issue
                              divideSegment(events[1].otherEvent, events[0].point, queue);
                            }
                            return 2;
                          }
                      
                          // the line segments share the right endpoint
                          if (rightCoincide) {
                            divideSegment(events[0], events[1].point, queue);
                            return 3;
                          }
                      
                          // no line segment includes totally the other one
                          if (events[0] !== events[3].otherEvent) {
                            divideSegment(events[0], events[1].point, queue);
                            divideSegment(events[1], events[2].point, queue);
                            return 3;
                          }
                      
                          // one line segment includes the other one
                          divideSegment(events[0], events[1].point, queue);
                          divideSegment(events[3].otherEvent, events[2].point, queue);
                      
                          return 3;
                        }
                      
                        /**
                         * @param  {SweepEvent} le1
                         * @param  {SweepEvent} le2
                         * @return {Number}
                         */
                        function compareSegments(le1, le2) {
                          if (le1 === le2) { return 0; }
                      
                          // Segments are not collinear
                          if (signedArea(le1.point, le1.otherEvent.point, le2.point) !== 0 ||
                            signedArea(le1.point, le1.otherEvent.point, le2.otherEvent.point) !== 0) {
                      
                            // If they share their left endpoint use the right endpoint to sort
                            if (equals(le1.point, le2.point)) { return le1.isBelow(le2.otherEvent.point) ? -1 : 1; }
                      
                            // Different left endpoint: use the left endpoint to sort
                            if (le1.point[0] === le2.point[0]) { return le1.point[1] < le2.point[1] ? -1 : 1; }
                      
                            // has the line segment associated to e1 been inserted
                            // into S after the line segment associated to e2 ?
                            if (compareEvents(le1, le2) === 1) { return le2.isAbove(le1.point) ? -1 : 1; }
                      
                            // The line segment associated to e2 has been inserted
                            // into S after the line segment associated to e1
                            return le1.isBelow(le2.point) ? -1 : 1;
                          }
                      
                          if (le1.isSubject === le2.isSubject) { // same polygon
                            var p1 = le1.point, p2 = le2.point;
                            if (p1[0] === p2[0] && p1[1] === p2[1]/*equals(le1.point, le2.point)*/) {
                              p1 = le1.otherEvent.point; p2 = le2.otherEvent.point;
                              if (p1[0] === p2[0] && p1[1] === p2[1]) { return 0; }
                              else { return le1.contourId > le2.contourId ? 1 : -1; }
                            }
                          } else { // Segments are collinear, but belong to separate polygons
                            return le1.isSubject ? -1 : 1;
                          }
                      
                          return compareEvents(le1, le2) === 1 ? 1 : -1;
                        }
                      
                        function subdivide(eventQueue, subject, clipping, sbbox, cbbox, operation) {
                          var sweepLine = new SplayTree(compareSegments);
                          var sortedEvents = [];
                      
                          var rightbound = Math.min(sbbox[2], cbbox[2]);
                      
                          var prev, next, begin;
                      
                          while (eventQueue.length !== 0) {
                            var event = eventQueue.pop();
                            sortedEvents.push(event);
                      
                            // optimization by bboxes for intersection and difference goes here
                            if ((operation === INTERSECTION && event.point[0] > rightbound) ||
                                (operation === DIFFERENCE   && event.point[0] > sbbox[2])) {
                              break;
                            }
                      
                            if (event.left) {
                              next  = prev = sweepLine.insert(event);
                              begin = sweepLine.minNode();
                      
                              if (prev !== begin) { prev = sweepLine.prev(prev); }
                              else                { prev = null; }
                      
                              next = sweepLine.next(next);
                      
                              var prevEvent = prev ? prev.key : null;
                              var prevprevEvent = (void 0);
                              computeFields(event, prevEvent, operation);
                              if (next) {
                                if (possibleIntersection(event, next.key, eventQueue) === 2) {
                                  computeFields(event, prevEvent, operation);
                                  computeFields(event, next.key, operation);
                                }
                              }
                      
                              if (prev) {
                                if (possibleIntersection(prev.key, event, eventQueue) === 2) {
                                  var prevprev = prev;
                                  if (prevprev !== begin) { prevprev = sweepLine.prev(prevprev); }
                                  else                    { prevprev = null; }
                      
                                  prevprevEvent = prevprev ? prevprev.key : null;
                                  computeFields(prevEvent, prevprevEvent, operation);
                                  computeFields(event,     prevEvent,     operation);
                                }
                              }
                            } else {
                              event = event.otherEvent;
                              next = prev = sweepLine.find(event);
                      
                              if (prev && next) {
                      
                                if (prev !== begin) { prev = sweepLine.prev(prev); }
                                else                { prev = null; }
                      
                                next = sweepLine.next(next);
                                sweepLine.remove(event);
                      
                                if (next && prev) {
                                  possibleIntersection(prev.key, next.key, eventQueue);
                                }
                              }
                            }
                          }
                          return sortedEvents;
                        }
                      
                        /**
                         * @param  {Array.<SweepEvent>} sortedEvents
                         * @return {Array.<SweepEvent>}
                         */
                        function orderEvents(sortedEvents) {
                          var event, i, len, tmp;
                          var resultEvents = [];
                          for (i = 0, len = sortedEvents.length; i < len; i++) {
                            event = sortedEvents[i];
                            if ((event.left && event.inResult) ||
                              (!event.left && event.otherEvent.inResult)) {
                              resultEvents.push(event);
                            }
                          }
                          // Due to overlapping edges the resultEvents array can be not wholly sorted
                          var sorted = false;
                          while (!sorted) {
                            sorted = true;
                            for (i = 0, len = resultEvents.length; i < len; i++) {
                              if ((i + 1) < len &&
                                compareEvents(resultEvents[i], resultEvents[i + 1]) === 1) {
                                tmp = resultEvents[i];
                                resultEvents[i] = resultEvents[i + 1];
                                resultEvents[i + 1] = tmp;
                                sorted = false;
                              }
                            }
                          }
                      
                      
                          for (i = 0, len = resultEvents.length; i < len; i++) {
                            event = resultEvents[i];
                            event.pos = i;
                          }
                      
                          // imagine, the right event is found in the beginning of the queue,
                          // when his left counterpart is not marked yet
                          for (i = 0, len = resultEvents.length; i < len; i++) {
                            event = resultEvents[i];
                            if (!event.left) {
                              tmp = event.pos;
                              event.pos = event.otherEvent.pos;
                              event.otherEvent.pos = tmp;
                            }
                          }
                      
                          return resultEvents;
                        }
                      
                      
                        /**
                         * @param  {Number} pos
                         * @param  {Array.<SweepEvent>} resultEvents
                         * @param  {Object>}    processed
                         * @return {Number}
                         */
                        function nextPos(pos, resultEvents, processed, origIndex) {
                          var p, p1;
                          var newPos = pos + 1;
                          var length = resultEvents.length;
                      
                          p  = resultEvents[pos].point;
                      
                          if (newPos < length)
                            { p1 = resultEvents[newPos].point; }
                      
                      
                          // while in range and not the current one by value
                          while (newPos < length && p1[0] === p[0] && p1[1] === p[1]) {
                            if (!processed[newPos]) {
                              return newPos;
                            } else   {
                              newPos++;
                            }
                            p1 = resultEvents[newPos].point;
                          }
                      
                          newPos = pos - 1;
                      
                          while (processed[newPos] && newPos >= origIndex) {
                            newPos--;
                          }
                          return newPos;
                        }
                      
                      
                        /**
                         * @param  {Array.<SweepEvent>} sortedEvents
                         * @return {Array.<*>} polygons
                         */
                        function connectEdges(sortedEvents, operation) {
                          var i, len;
                          var resultEvents = orderEvents(sortedEvents);
                      
                          // "false"-filled array
                          var processed = {};
                          var result = [];
                          var event;
                      
                          for (i = 0, len = resultEvents.length; i < len; i++) {
                            if (processed[i]) { continue; }
                            var contour = [[]];
                      
                            if (!resultEvents[i].isExteriorRing) {
                              if (operation === DIFFERENCE && !resultEvents[i].isSubject && result.length === 0) {
                                result.push(contour);
                              } else if (result.length === 0) {
                                result.push([[contour]]);
                              } else {
                                result[result.length - 1].push(contour[0]);
                              }
                            } else if (operation === DIFFERENCE && !resultEvents[i].isSubject && result.length > 1) {
                              result[result.length - 1].push(contour[0]);
                            } else {
                              result.push(contour);
                            }
                      
                            var ringId = result.length - 1;
                            var pos = i;
                      
                            var initial = resultEvents[i].point;
                            contour[0].push(initial);
                      
                            while (pos >= i) {
                              event = resultEvents[pos];
                              processed[pos] = true;
                      
                              if (event.left) {
                                event.resultInOut = false;
                                event.contourId   = ringId;
                              } else {
                                event.otherEvent.resultInOut = true;
                                event.otherEvent.contourId   = ringId;
                              }
                      
                              pos = event.pos;
                              processed[pos] = true;
                              contour[0].push(resultEvents[pos].point);
                              pos = nextPos(pos, resultEvents, processed, i);
                            }
                      
                            pos = pos === -1 ? i : pos;
                      
                            event = resultEvents[pos];
                            processed[pos] = processed[event.pos] = true;
                            event.otherEvent.resultInOut = true;
                            event.otherEvent.contourId   = ringId;
                          }
                      
                          // Handle if the result is a polygon (eg not multipoly)
                          // Commented it again, let's see what do we mean by that
                          // if (result.length === 1) result = result[0];
                          return result;
                        }
                      
                        var tinyqueue = TinyQueue;
                        var default_1 = TinyQueue;
                      
                        function TinyQueue(data, compare) {
                            var this$1 = this;
                      
                            if (!(this instanceof TinyQueue)) { return new TinyQueue(data, compare); }
                      
                            this.data = data || [];
                            this.length = this.data.length;
                            this.compare = compare || defaultCompare;
                      
                            if (this.length > 0) {
                                for (var i = (this.length >> 1) - 1; i >= 0; i--) { this$1._down(i); }
                            }
                        }
                      
                        function defaultCompare(a, b) {
                            return a < b ? -1 : a > b ? 1 : 0;
                        }
                      
                        TinyQueue.prototype = {
                      
                            push: function (item) {
                                this.data.push(item);
                                this.length++;
                                this._up(this.length - 1);
                            },
                      
                            pop: function () {
                                if (this.length === 0) { return undefined; }
                      
                                var top = this.data[0];
                                this.length--;
                      
                                if (this.length > 0) {
                                    this.data[0] = this.data[this.length];
                                    this._down(0);
                                }
                                this.data.pop();
                      
                                return top;
                            },
                      
                            peek: function () {
                                return this.data[0];
                            },
                      
                            _up: function (pos) {
                                var data = this.data;
                                var compare = this.compare;
                                var item = data[pos];
                      
                                while (pos > 0) {
                                    var parent = (pos - 1) >> 1;
                                    var current = data[parent];
                                    if (compare(item, current) >= 0) { break; }
                                    data[pos] = current;
                                    pos = parent;
                                }
                      
                                data[pos] = item;
                            },
                      
                            _down: function (pos) {
                                var this$1 = this;
                      
                                var data = this.data;
                                var compare = this.compare;
                                var halfLength = this.length >> 1;
                                var item = data[pos];
                      
                                while (pos < halfLength) {
                                    var left = (pos << 1) + 1;
                                    var right = left + 1;
                                    var best = data[left];
                      
                                    if (right < this$1.length && compare(data[right], best) < 0) {
                                        left = right;
                                        best = data[right];
                                    }
                                    if (compare(best, item) >= 0) { break; }
                      
                                    data[pos] = best;
                                    pos = left;
                                }
                      
                                data[pos] = item;
                            }
                        };
                        tinyqueue.default = default_1;
                      
                        var max = Math.max;
                        var min = Math.min;
                      
                        var contourId = 0;
                      
                      
                        function processPolygon(contourOrHole, isSubject, depth, Q, bbox, isExteriorRing) {
                          var i, len, s1, s2, e1, e2;
                          for (i = 0, len = contourOrHole.length - 1; i < len; i++) {
                            s1 = contourOrHole[i];
                            s2 = contourOrHole[i + 1];
                            e1 = new SweepEvent(s1, false, undefined, isSubject);
                            e2 = new SweepEvent(s2, false, e1,        isSubject);
                            e1.otherEvent = e2;
                      
                            if (s1[0] === s2[0] && s1[1] === s2[1]) {
                              continue; // skip collapsed edges, or it breaks
                            }
                      
                            e1.contourId = e2.contourId = depth;
                            if (!isExteriorRing) {
                              e1.isExteriorRing = false;
                              e2.isExteriorRing = false;
                            }
                            if (compareEvents(e1, e2) > 0) {
                              e2.left = true;
                            } else {
                              e1.left = true;
                            }
                      
                            var x = s1[0], y = s1[1];
                            bbox[0] = min(bbox[0], x);
                            bbox[1] = min(bbox[1], y);
                            bbox[2] = max(bbox[2], x);
                            bbox[3] = max(bbox[3], y);
                      
                            // Pushing it so the queue is sorted from left to right,
                            // with object on the left having the highest priority.
                            Q.push(e1);
                            Q.push(e2);
                          }
                        }
                      
                      
                        function fillQueue(subject, clipping, sbbox, cbbox, operation) {
                          var eventQueue = new tinyqueue(null, compareEvents);
                          var polygonSet, isExteriorRing, i, ii, j, jj; //, k, kk;
                      
                          for (i = 0, ii = subject.length; i < ii; i++) {
                            polygonSet = subject[i];
                            for (j = 0, jj = polygonSet.length; j < jj; j++) {
                              isExteriorRing = j === 0;
                              if (isExteriorRing) { contourId++; }
                              processPolygon(polygonSet[j], true, contourId, eventQueue, sbbox, isExteriorRing);
                            }
                          }
                      
                          for (i = 0, ii = clipping.length; i < ii; i++) {
                            polygonSet = clipping[i];
                            for (j = 0, jj = polygonSet.length; j < jj; j++) {
                              isExteriorRing = j === 0;
                              if (operation === DIFFERENCE) { isExteriorRing = false; }
                              if (isExteriorRing) { contourId++; }
                              processPolygon(polygonSet[j], false, contourId, eventQueue, cbbox, isExteriorRing);
                            }
                          }
                      
                          return eventQueue;
                        }
                      
                        var EMPTY = [];
                      
                      
                        function trivialOperation(subject, clipping, operation) {
                          var result = null;
                          if (subject.length * clipping.length === 0) {
                            if        (operation === INTERSECTION) {
                              result = EMPTY;
                            } else if (operation === DIFFERENCE) {
                              result = subject;
                            } else if (operation === UNION ||
                                       operation === XOR) {
                              result = (subject.length === 0) ? clipping : subject;
                            }
                          }
                          return result;
                        }
                      
                      
                        function compareBBoxes(subject, clipping, sbbox, cbbox, operation) {
                          var result = null;
                          if (sbbox[0] > cbbox[2] ||
                              cbbox[0] > sbbox[2] ||
                              sbbox[1] > cbbox[3] ||
                              cbbox[1] > sbbox[3]) {
                            if        (operation === INTERSECTION) {
                              result = EMPTY;
                            } else if (operation === DIFFERENCE) {
                              result = subject;
                            } else if (operation === UNION ||
                                       operation === XOR) {
                              result = subject.concat(clipping);
                            }
                          }
                          return result;
                        }
                      
                      
                        function boolean(subject, clipping, operation) {
                          if (typeof subject[0][0][0] === 'number') {
                            subject = [subject];
                          }
                          if (typeof clipping[0][0][0] === 'number') {
                            clipping = [clipping];
                          }
                          var trivial = trivialOperation(subject, clipping, operation);
                          if (trivial) {
                            return trivial === EMPTY ? null : trivial;
                          }
                          var sbbox = [Infinity, Infinity, -Infinity, -Infinity];
                          var cbbox = [Infinity, Infinity, -Infinity, -Infinity];
                      
                          //console.time('fill queue');
                          var eventQueue = fillQueue(subject, clipping, sbbox, cbbox, operation);
                          //console.timeEnd('fill queue');
                      
                          trivial = compareBBoxes(subject, clipping, sbbox, cbbox, operation);
                          if (trivial) {
                            return trivial === EMPTY ? null : trivial;
                          }
                          //console.time('subdivide edges');
                          var sortedEvents = subdivide(eventQueue, subject, clipping, sbbox, cbbox, operation);
                          //console.timeEnd('subdivide edges');
                      
                          //console.time('connect vertices');
                          var result = connectEdges(sortedEvents, operation);
                          //console.timeEnd('connect vertices');
                          return result;
                        }
                      
                        function union (subject, clipping) {
                          return boolean(subject, clipping, UNION);
                        }
                      
                        function diff (subject, clipping) {
                          return boolean(subject, clipping, DIFFERENCE);
                        }
                      
                        function xor (subject, clipping){
                          return boolean(subject, clipping, XOR);
                        }
                      
                        function intersection$1 (subject, clipping) {
                          return boolean(subject, clipping, INTERSECTION);
                        }
                      
                        /**
                         * @enum {Number}
                         */
                        var operations = { UNION: UNION, DIFFERENCE: DIFFERENCE, INTERSECTION: INTERSECTION, XOR: XOR };
                      
                        exports.union = union;
                        exports.diff = diff;
                        exports.xor = xor;
                        exports.intersection = intersection$1;
                        exports.operations = operations;
                      
                        Object.defineProperty(exports, '__esModule', { value: true });
                      
                      })));
                    this.lzString = (function(){
                        // Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
                        // This work is free. You can redistribute it and/or modify it
                        // under the terms of the WTFPL, Version 2
                        // For more information see LICENSE.txt or http://www.wtfpl.net/
                        //
                        // For more information, the home page:
                        // http://pieroxy.net/blog/pages/lz-string/testing.html
                        //
                        // LZ-based compression algorithm, version 1.4.4
                        //
                        // Modified by Metasophiea <metasophiea@gmail.com>
                        var f = String.fromCharCode;
                        var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
                        var baseReverseDic = {};
                        
                        function getBaseValue(alphabet, character) {
                            if(!baseReverseDic[alphabet]){
                                baseReverseDic[alphabet] = {};
                                for(var i = 0 ; i < alphabet.length; i++){
                                    baseReverseDic[alphabet][alphabet.charAt(i)] = i;
                                }
                            }	
                            return baseReverseDic[alphabet][character];
                        }
                        
                        var LZString = {
                            //compress into a string that is URI encoded
                            compress: function (input) {
                                if(input == null){return "";}
                                return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
                            },
                            
                            //decompress from an output of compress which was URI encoded
                            decompress:function (input) {
                                if(input == null){return "";}
                                if(input == ""){return null;}
                                input = input.replace(/ /g, "+");
                                return LZString._decompress(input.length, 32, function(index){ return getBaseValue(keyStrUriSafe, input.charAt(index)); });
                            },
                            
                            _compress: function(uncompressed, bitsPerChar, getCharFromInt){
                                if (uncompressed == null) return "";
                                var i, value,
                                    context_dictionary= {},
                                    context_dictionaryToCreate= {},
                                    context_c="",
                                    context_wc="",
                                    context_w="",
                                    context_enlargeIn= 2, // Compensate for the first entry which should not count
                                    context_dictSize= 3,
                                    context_numBits= 2,
                                    context_data=[],
                                    context_data_val=0,
                                    context_data_position=0,
                                    ii;
                            
                                for (ii = 0; ii < uncompressed.length; ii += 1) {
                                context_c = uncompressed.charAt(ii);
                                if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
                                    context_dictionary[context_c] = context_dictSize++;
                                    context_dictionaryToCreate[context_c] = true;
                                }
                            
                                context_wc = context_w + context_c;
                                if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
                                    context_w = context_wc;
                                } else {
                                    if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
                                    if (context_w.charCodeAt(0)<256) {
                                        for (i=0 ; i<context_numBits ; i++) {
                                        context_data_val = (context_data_val << 1);
                                        if (context_data_position == bitsPerChar-1) {
                                            context_data_position = 0;
                                            context_data.push(getCharFromInt(context_data_val));
                                            context_data_val = 0;
                                        } else {
                                            context_data_position++;
                                        }
                                        }
                                        value = context_w.charCodeAt(0);
                                        for (i=0 ; i<8 ; i++) {
                                        context_data_val = (context_data_val << 1) | (value&1);
                                        if (context_data_position == bitsPerChar-1) {
                                            context_data_position = 0;
                                            context_data.push(getCharFromInt(context_data_val));
                                            context_data_val = 0;
                                        } else {
                                            context_data_position++;
                                        }
                                        value = value >> 1;
                                        }
                                    } else {
                                        value = 1;
                                        for (i=0 ; i<context_numBits ; i++) {
                                        context_data_val = (context_data_val << 1) | value;
                                        if (context_data_position ==bitsPerChar-1) {
                                            context_data_position = 0;
                                            context_data.push(getCharFromInt(context_data_val));
                                            context_data_val = 0;
                                        } else {
                                            context_data_position++;
                                        }
                                        value = 0;
                                        }
                                        value = context_w.charCodeAt(0);
                                        for (i=0 ; i<16 ; i++) {
                                        context_data_val = (context_data_val << 1) | (value&1);
                                        if (context_data_position == bitsPerChar-1) {
                                            context_data_position = 0;
                                            context_data.push(getCharFromInt(context_data_val));
                                            context_data_val = 0;
                                        } else {
                                            context_data_position++;
                                        }
                                        value = value >> 1;
                                        }
                                    }
                                    context_enlargeIn--;
                                    if (context_enlargeIn == 0) {
                                        context_enlargeIn = Math.pow(2, context_numBits);
                                        context_numBits++;
                                    }
                                    delete context_dictionaryToCreate[context_w];
                                    } else {
                                    value = context_dictionary[context_w];
                                    for (i=0 ; i<context_numBits ; i++) {
                                        context_data_val = (context_data_val << 1) | (value&1);
                                        if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                        } else {
                                        context_data_position++;
                                        }
                                        value = value >> 1;
                                    }
                            
                            
                                    }
                                    context_enlargeIn--;
                                    if (context_enlargeIn == 0) {
                                    context_enlargeIn = Math.pow(2, context_numBits);
                                    context_numBits++;
                                    }
                                    // Add wc to the dictionary.
                                    context_dictionary[context_wc] = context_dictSize++;
                                    context_w = String(context_c);
                                }
                                }
                            
                                // Output the code for w.
                                if (context_w !== "") {
                                if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
                                    if (context_w.charCodeAt(0)<256) {
                                    for (i=0 ; i<context_numBits ; i++) {
                                        context_data_val = (context_data_val << 1);
                                        if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                        } else {
                                        context_data_position++;
                                        }
                                    }
                                    value = context_w.charCodeAt(0);
                                    for (i=0 ; i<8 ; i++) {
                                        context_data_val = (context_data_val << 1) | (value&1);
                                        if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                        } else {
                                        context_data_position++;
                                        }
                                        value = value >> 1;
                                    }
                                    } else {
                                    value = 1;
                                    for (i=0 ; i<context_numBits ; i++) {
                                        context_data_val = (context_data_val << 1) | value;
                                        if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                        } else {
                                        context_data_position++;
                                        }
                                        value = 0;
                                    }
                                    value = context_w.charCodeAt(0);
                                    for (i=0 ; i<16 ; i++) {
                                        context_data_val = (context_data_val << 1) | (value&1);
                                        if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                        } else {
                                        context_data_position++;
                                        }
                                        value = value >> 1;
                                    }
                                    }
                                    context_enlargeIn--;
                                    if (context_enlargeIn == 0) {
                                    context_enlargeIn = Math.pow(2, context_numBits);
                                    context_numBits++;
                                    }
                                    delete context_dictionaryToCreate[context_w];
                                } else {
                                    value = context_dictionary[context_w];
                                    for (i=0 ; i<context_numBits ; i++) {
                                    context_data_val = (context_data_val << 1) | (value&1);
                                    if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                    value = value >> 1;
                                    }
                            
                            
                                }
                                context_enlargeIn--;
                                if (context_enlargeIn == 0) {
                                    context_enlargeIn = Math.pow(2, context_numBits);
                                    context_numBits++;
                                }
                                }
                            
                                // Mark the end of the stream
                                value = 2;
                                for (i=0 ; i<context_numBits ; i++) {
                                context_data_val = (context_data_val << 1) | (value&1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = value >> 1;
                                }
                            
                                // Flush the last char
                                while (true) {
                                context_data_val = (context_data_val << 1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data.push(getCharFromInt(context_data_val));
                                    break;
                                }
                                else context_data_position++;
                                }
                                return context_data.join('');
                            },
                            
                            _decompress: function(length, resetValue, getNextValue){
                                var dictionary = [],
                                    next,
                                    enlargeIn = 4,
                                    dictSize = 4,
                                    numBits = 3,
                                    entry = "",
                                    result = [],
                                    i,
                                    w,
                                    bits, resb, maxpower, power,
                                    c,
                                    data = {val:getNextValue(0), position:resetValue, index:1};
                            
                                for (i = 0; i < 3; i += 1) {
                                dictionary[i] = i;
                                }
                            
                                bits = 0;
                                maxpower = Math.pow(2,2);
                                power=1;
                                while (power!=maxpower) {
                                resb = data.val & data.position;
                                data.position >>= 1;
                                if (data.position == 0) {
                                    data.position = resetValue;
                                    data.val = getNextValue(data.index++);
                                }
                                bits |= (resb>0 ? 1 : 0) * power;
                                power <<= 1;
                                }
                            
                                switch (next = bits) {
                                case 0:
                                    bits = 0;
                                    maxpower = Math.pow(2,8);
                                    power=1;
                                    while (power!=maxpower) {
                                        resb = data.val & data.position;
                                        data.position >>= 1;
                                        if (data.position == 0) {
                                        data.position = resetValue;
                                        data.val = getNextValue(data.index++);
                                        }
                                        bits |= (resb>0 ? 1 : 0) * power;
                                        power <<= 1;
                                    }
                                    c = f(bits);
                                    break;
                                case 1:
                                    bits = 0;
                                    maxpower = Math.pow(2,16);
                                    power=1;
                                    while (power!=maxpower) {
                                        resb = data.val & data.position;
                                        data.position >>= 1;
                                        if (data.position == 0) {
                                        data.position = resetValue;
                                        data.val = getNextValue(data.index++);
                                        }
                                        bits |= (resb>0 ? 1 : 0) * power;
                                        power <<= 1;
                                    }
                                    c = f(bits);
                                    break;
                                case 2:
                                    return "";
                                }
                                dictionary[3] = c;
                                w = c;
                                result.push(c);
                                while (true) {
                                if (data.index > length) {
                                    return "";
                                }
                            
                                bits = 0;
                                maxpower = Math.pow(2,numBits);
                                power=1;
                                while (power!=maxpower) {
                                    resb = data.val & data.position;
                                    data.position >>= 1;
                                    if (data.position == 0) {
                                    data.position = resetValue;
                                    data.val = getNextValue(data.index++);
                                    }
                                    bits |= (resb>0 ? 1 : 0) * power;
                                    power <<= 1;
                                }
                            
                                switch (c = bits) {
                                    case 0:
                                    bits = 0;
                                    maxpower = Math.pow(2,8);
                                    power=1;
                                    while (power!=maxpower) {
                                        resb = data.val & data.position;
                                        data.position >>= 1;
                                        if (data.position == 0) {
                                        data.position = resetValue;
                                        data.val = getNextValue(data.index++);
                                        }
                                        bits |= (resb>0 ? 1 : 0) * power;
                                        power <<= 1;
                                    }
                            
                                    dictionary[dictSize++] = f(bits);
                                    c = dictSize-1;
                                    enlargeIn--;
                                    break;
                                    case 1:
                                    bits = 0;
                                    maxpower = Math.pow(2,16);
                                    power=1;
                                    while (power!=maxpower) {
                                        resb = data.val & data.position;
                                        data.position >>= 1;
                                        if (data.position == 0) {
                                        data.position = resetValue;
                                        data.val = getNextValue(data.index++);
                                        }
                                        bits |= (resb>0 ? 1 : 0) * power;
                                        power <<= 1;
                                    }
                                    dictionary[dictSize++] = f(bits);
                                    c = dictSize-1;
                                    enlargeIn--;
                                    break;
                                    case 2:
                                    return result.join('');
                                }
                            
                                if (enlargeIn == 0) {
                                    enlargeIn = Math.pow(2, numBits);
                                    numBits++;
                                }
                            
                                if (dictionary[c]) {
                                    entry = dictionary[c];
                                } else {
                                    if (c === dictSize) {
                                    entry = w + w.charAt(0);
                                    } else {
                                    return null;
                                    }
                                }
                                result.push(entry);
                            
                                // Add w+entry[0] to the dictionary.
                                dictionary[dictSize++] = w + entry.charAt(0);
                                enlargeIn--;
                            
                                w = entry;
                            
                                if (enlargeIn == 0) {
                                    enlargeIn = Math.pow(2, numBits);
                                    numBits++;
                                }
                            
                                }
                            }
                        };
                        return LZString;
                    })();
                    (function (global, factory) {
                    	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
                    	typeof define === 'function' && define.amd ? define(['exports'], factory) :
                        (factory((global.opentype = {})));
                    }(this, (function (exports) { 'use strict';
                        // https://github.com/opentypejs/opentype.js/blob/master/dist/opentype.js
                    
                        // https://opentype.js.org v0.11.0 | (c) Frederik De Bleser and other contributors | MIT License | 
                        // Uses tiny-inflate by Devon Govett and string.prototype.codepointat polyfill by Mathias Bynens
                    
                    	/* https://mths.be/codepointat v0.2.0 by @mathias */
                    	if (!String.prototype.codePointAt) {
                    		(function() {
                    			var defineProperty = (function() {
                    				// IE 8 only supports `Object.defineProperty` on DOM elements
                    				try {
                    					var object = {};
                    					var $defineProperty = Object.defineProperty;
                    					var result = $defineProperty(object, object, object) && $defineProperty;
                    				} catch(error) {}
                    				return result;
                    			}());
                    			var codePointAt = function(position) {
                    				if (this == null) {
                    					throw TypeError();
                    				}
                    				var string = String(this);
                    				var size = string.length;
                    				// `ToInteger`
                    				var index = position ? Number(position) : 0;
                    				if (index != index) { // better `isNaN`
                    					index = 0;
                    				}
                    				// Account for out-of-bounds indices:
                    				if (index < 0 || index >= size) {
                    					return undefined;
                    				}
                    				// Get the first code unit
                    				var first = string.charCodeAt(index);
                    				var second;
                    				if ( // check if it’s the start of a surrogate pair
                    					first >= 0xD800 && first <= 0xDBFF && // high surrogate
                    					size > index + 1 // there is a next code unit
                    				) {
                    					second = string.charCodeAt(index + 1);
                    					if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
                    						// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                    						return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                    					}
                    				}
                    				return first;
                    			};
                    			if (defineProperty) {
                    				defineProperty(String.prototype, 'codePointAt', {
                    					'value': codePointAt,
                    					'configurable': true,
                    					'writable': true
                    				});
                    			} else {
                    				String.prototype.codePointAt = codePointAt;
                    			}
                    		}());
                    	}
                    
                    	var TINF_OK = 0;
                    	var TINF_DATA_ERROR = -3;
                    
                    	function Tree() {
                    	  this.table = new Uint16Array(16);   /* table of code length counts */
                    	  this.trans = new Uint16Array(288);  /* code -> symbol translation table */
                    	}
                    
                    	function Data(source, dest) {
                    	  this.source = source;
                    	  this.sourceIndex = 0;
                    	  this.tag = 0;
                    	  this.bitcount = 0;
                    	  
                    	  this.dest = dest;
                    	  this.destLen = 0;
                    	  
                    	  this.ltree = new Tree();  /* dynamic length/symbol tree */
                    	  this.dtree = new Tree();  /* dynamic distance tree */
                    	}
                    
                    	/* --------------------------------------------------- *
                    	 * -- uninitialized global data (static structures) -- *
                    	 * --------------------------------------------------- */
                    
                    	var sltree = new Tree();
                    	var sdtree = new Tree();
                    
                    	/* extra bits and base tables for length codes */
                    	var length_bits = new Uint8Array(30);
                    	var length_base = new Uint16Array(30);
                    
                    	/* extra bits and base tables for distance codes */
                    	var dist_bits = new Uint8Array(30);
                    	var dist_base = new Uint16Array(30);
                    
                    	/* special ordering of code length codes */
                    	var clcidx = new Uint8Array([
                    	  16, 17, 18, 0, 8, 7, 9, 6,
                    	  10, 5, 11, 4, 12, 3, 13, 2,
                    	  14, 1, 15
                    	]);
                    
                    	/* used by tinf_decode_trees, avoids allocations every call */
                    	var code_tree = new Tree();
                    	var lengths = new Uint8Array(288 + 32);
                    
                    	/* ----------------------- *
                    	 * -- utility functions -- *
                    	 * ----------------------- */
                    
                    	/* build extra bits and base tables */
                    	function tinf_build_bits_base(bits, base, delta, first) {
                    	  var i, sum;
                    
                    	  /* build bits table */
                    	  for (i = 0; i < delta; ++i) { bits[i] = 0; }
                    	  for (i = 0; i < 30 - delta; ++i) { bits[i + delta] = i / delta | 0; }
                    
                    	  /* build base table */
                    	  for (sum = first, i = 0; i < 30; ++i) {
                    	    base[i] = sum;
                    	    sum += 1 << bits[i];
                    	  }
                    	}
                    
                    	/* build the fixed huffman trees */
                    	function tinf_build_fixed_trees(lt, dt) {
                    	  var i;
                    
                    	  /* build fixed length tree */
                    	  for (i = 0; i < 7; ++i) { lt.table[i] = 0; }
                    
                    	  lt.table[7] = 24;
                    	  lt.table[8] = 152;
                    	  lt.table[9] = 112;
                    
                    	  for (i = 0; i < 24; ++i) { lt.trans[i] = 256 + i; }
                    	  for (i = 0; i < 144; ++i) { lt.trans[24 + i] = i; }
                    	  for (i = 0; i < 8; ++i) { lt.trans[24 + 144 + i] = 280 + i; }
                    	  for (i = 0; i < 112; ++i) { lt.trans[24 + 144 + 8 + i] = 144 + i; }
                    
                    	  /* build fixed distance tree */
                    	  for (i = 0; i < 5; ++i) { dt.table[i] = 0; }
                    
                    	  dt.table[5] = 32;
                    
                    	  for (i = 0; i < 32; ++i) { dt.trans[i] = i; }
                    	}
                    
                    	/* given an array of code lengths, build a tree */
                    	var offs = new Uint16Array(16);
                    
                    	function tinf_build_tree(t, lengths, off, num) {
                    	  var i, sum;
                    
                    	  /* clear code length count table */
                    	  for (i = 0; i < 16; ++i) { t.table[i] = 0; }
                    
                    	  /* scan symbol lengths, and sum code length counts */
                    	  for (i = 0; i < num; ++i) { t.table[lengths[off + i]]++; }
                    
                    	  t.table[0] = 0;
                    
                    	  /* compute offset table for distribution sort */
                    	  for (sum = 0, i = 0; i < 16; ++i) {
                    	    offs[i] = sum;
                    	    sum += t.table[i];
                    	  }
                    
                    	  /* create code->symbol translation table (symbols sorted by code) */
                    	  for (i = 0; i < num; ++i) {
                    	    if (lengths[off + i]) { t.trans[offs[lengths[off + i]]++] = i; }
                    	  }
                    	}
                    
                    	/* ---------------------- *
                    	 * -- decode functions -- *
                    	 * ---------------------- */
                    
                    	/* get one bit from source stream */
                    	function tinf_getbit(d) {
                    	  /* check if tag is empty */
                    	  if (!d.bitcount--) {
                    	    /* load next tag */
                    	    d.tag = d.source[d.sourceIndex++];
                    	    d.bitcount = 7;
                    	  }
                    
                    	  /* shift bit out of tag */
                    	  var bit = d.tag & 1;
                    	  d.tag >>>= 1;
                    
                    	  return bit;
                    	}
                    
                    	/* read a num bit value from a stream and add base */
                    	function tinf_read_bits(d, num, base) {
                    	  if (!num)
                    	    { return base; }
                    
                    	  while (d.bitcount < 24) {
                    	    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
                    	    d.bitcount += 8;
                    	  }
                    
                    	  var val = d.tag & (0xffff >>> (16 - num));
                    	  d.tag >>>= num;
                    	  d.bitcount -= num;
                    	  return val + base;
                    	}
                    
                    	/* given a data stream and a tree, decode a symbol */
                    	function tinf_decode_symbol(d, t) {
                    	  while (d.bitcount < 24) {
                    	    d.tag |= d.source[d.sourceIndex++] << d.bitcount;
                    	    d.bitcount += 8;
                    	  }
                    	  
                    	  var sum = 0, cur = 0, len = 0;
                    	  var tag = d.tag;
                    
                    	  /* get more bits while code value is above sum */
                    	  do {
                    	    cur = 2 * cur + (tag & 1);
                    	    tag >>>= 1;
                    	    ++len;
                    
                    	    sum += t.table[len];
                    	    cur -= t.table[len];
                    	  } while (cur >= 0);
                    	  
                    	  d.tag = tag;
                    	  d.bitcount -= len;
                    
                    	  return t.trans[sum + cur];
                    	}
                    
                    	/* given a data stream, decode dynamic trees from it */
                    	function tinf_decode_trees(d, lt, dt) {
                    	  var hlit, hdist, hclen;
                    	  var i, num, length;
                    
                    	  /* get 5 bits HLIT (257-286) */
                    	  hlit = tinf_read_bits(d, 5, 257);
                    
                    	  /* get 5 bits HDIST (1-32) */
                    	  hdist = tinf_read_bits(d, 5, 1);
                    
                    	  /* get 4 bits HCLEN (4-19) */
                    	  hclen = tinf_read_bits(d, 4, 4);
                    
                    	  for (i = 0; i < 19; ++i) { lengths[i] = 0; }
                    
                    	  /* read code lengths for code length alphabet */
                    	  for (i = 0; i < hclen; ++i) {
                    	    /* get 3 bits code length (0-7) */
                    	    var clen = tinf_read_bits(d, 3, 0);
                    	    lengths[clcidx[i]] = clen;
                    	  }
                    
                    	  /* build code length tree */
                    	  tinf_build_tree(code_tree, lengths, 0, 19);
                    
                    	  /* decode code lengths for the dynamic trees */
                    	  for (num = 0; num < hlit + hdist;) {
                    	    var sym = tinf_decode_symbol(d, code_tree);
                    
                    	    switch (sym) {
                    	      case 16:
                    	        /* copy previous code length 3-6 times (read 2 bits) */
                    	        var prev = lengths[num - 1];
                    	        for (length = tinf_read_bits(d, 2, 3); length; --length) {
                    	          lengths[num++] = prev;
                    	        }
                    	        break;
                    	      case 17:
                    	        /* repeat code length 0 for 3-10 times (read 3 bits) */
                    	        for (length = tinf_read_bits(d, 3, 3); length; --length) {
                    	          lengths[num++] = 0;
                    	        }
                    	        break;
                    	      case 18:
                    	        /* repeat code length 0 for 11-138 times (read 7 bits) */
                    	        for (length = tinf_read_bits(d, 7, 11); length; --length) {
                    	          lengths[num++] = 0;
                    	        }
                    	        break;
                    	      default:
                    	        /* values 0-15 represent the actual code lengths */
                    	        lengths[num++] = sym;
                    	        break;
                    	    }
                    	  }
                    
                    	  /* build dynamic trees */
                    	  tinf_build_tree(lt, lengths, 0, hlit);
                    	  tinf_build_tree(dt, lengths, hlit, hdist);
                    	}
                    
                    	/* ----------------------------- *
                    	 * -- block inflate functions -- *
                    	 * ----------------------------- */
                    
                    	/* given a stream and two trees, inflate a block of data */
                    	function tinf_inflate_block_data(d, lt, dt) {
                    	  while (1) {
                    	    var sym = tinf_decode_symbol(d, lt);
                    
                    	    /* check for end of block */
                    	    if (sym === 256) {
                    	      return TINF_OK;
                    	    }
                    
                    	    if (sym < 256) {
                    	      d.dest[d.destLen++] = sym;
                    	    } else {
                    	      var length, dist, offs;
                    	      var i;
                    
                    	      sym -= 257;
                    
                    	      /* possibly get more bits from length code */
                    	      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
                    
                    	      dist = tinf_decode_symbol(d, dt);
                    
                    	      /* possibly get more bits from distance code */
                    	      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
                    
                    	      /* copy match */
                    	      for (i = offs; i < offs + length; ++i) {
                    	        d.dest[d.destLen++] = d.dest[i];
                    	      }
                    	    }
                    	  }
                    	}
                    
                    	/* inflate an uncompressed block of data */
                    	function tinf_inflate_uncompressed_block(d) {
                    	  var length, invlength;
                    	  var i;
                    	  
                    	  /* unread from bitbuffer */
                    	  while (d.bitcount > 8) {
                    	    d.sourceIndex--;
                    	    d.bitcount -= 8;
                    	  }
                    
                    	  /* get length */
                    	  length = d.source[d.sourceIndex + 1];
                    	  length = 256 * length + d.source[d.sourceIndex];
                    
                    	  /* get one's complement of length */
                    	  invlength = d.source[d.sourceIndex + 3];
                    	  invlength = 256 * invlength + d.source[d.sourceIndex + 2];
                    
                    	  /* check length */
                    	  if (length !== (~invlength & 0x0000ffff))
                    	    { return TINF_DATA_ERROR; }
                    
                    	  d.sourceIndex += 4;
                    
                    	  /* copy block */
                    	  for (i = length; i; --i)
                    	    { d.dest[d.destLen++] = d.source[d.sourceIndex++]; }
                    
                    	  /* make sure we start next block on a byte boundary */
                    	  d.bitcount = 0;
                    
                    	  return TINF_OK;
                    	}
                    
                    	/* inflate stream from source to dest */
                    	function tinf_uncompress(source, dest) {
                    	  var d = new Data(source, dest);
                    	  var bfinal, btype, res;
                    
                    	  do {
                    	    /* read final block flag */
                    	    bfinal = tinf_getbit(d);
                    
                    	    /* read block type (2 bits) */
                    	    btype = tinf_read_bits(d, 2, 0);
                    
                    	    /* decompress block */
                    	    switch (btype) {
                    	      case 0:
                    	        /* decompress uncompressed block */
                    	        res = tinf_inflate_uncompressed_block(d);
                    	        break;
                    	      case 1:
                    	        /* decompress block with fixed huffman trees */
                    	        res = tinf_inflate_block_data(d, sltree, sdtree);
                    	        break;
                    	      case 2:
                    	        /* decompress block with dynamic huffman trees */
                    	        tinf_decode_trees(d, d.ltree, d.dtree);
                    	        res = tinf_inflate_block_data(d, d.ltree, d.dtree);
                    	        break;
                    	      default:
                    	        res = TINF_DATA_ERROR;
                    	    }
                    
                    	    if (res !== TINF_OK)
                    	      { throw new Error('Data error'); }
                    
                    	  } while (!bfinal);
                    
                    	  if (d.destLen < d.dest.length) {
                    	    if (typeof d.dest.slice === 'function')
                    	      { return d.dest.slice(0, d.destLen); }
                    	    else
                    	      { return d.dest.subarray(0, d.destLen); }
                    	  }
                    	  
                    	  return d.dest;
                    	}
                    
                    	/* -------------------- *
                    	 * -- initialization -- *
                    	 * -------------------- */
                    
                    	/* build fixed huffman trees */
                    	tinf_build_fixed_trees(sltree, sdtree);
                    
                    	/* build extra bits and base tables */
                    	tinf_build_bits_base(length_bits, length_base, 4, 3);
                    	tinf_build_bits_base(dist_bits, dist_base, 2, 1);
                    
                    	/* fix a special case */
                    	length_bits[28] = 0;
                    	length_base[28] = 258;
                    
                    	var tinyInflate = tinf_uncompress;
                    
                    	// The Bounding Box object
                    
                    	function derive(v0, v1, v2, v3, t) {
                    	    return Math.pow(1 - t, 3) * v0 +
                    	        3 * Math.pow(1 - t, 2) * t * v1 +
                    	        3 * (1 - t) * Math.pow(t, 2) * v2 +
                    	        Math.pow(t, 3) * v3;
                    	}
                    	/**
                    	 * A bounding box is an enclosing box that describes the smallest measure within which all the points lie.
                    	 * It is used to calculate the bounding box of a glyph or text path.
                    	 *
                    	 * On initialization, x1/y1/x2/y2 will be NaN. Check if the bounding box is empty using `isEmpty()`.
                    	 *
                    	 * @exports opentype.BoundingBox
                    	 * @class
                    	 * @constructor
                    	 */
                    	function BoundingBox() {
                    	    this.x1 = Number.NaN;
                    	    this.y1 = Number.NaN;
                    	    this.x2 = Number.NaN;
                    	    this.y2 = Number.NaN;
                    	}
                    
                    	/**
                    	 * Returns true if the bounding box is empty, that is, no points have been added to the box yet.
                    	 */
                    	BoundingBox.prototype.isEmpty = function() {
                    	    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
                    	};
                    
                    	/**
                    	 * Add the point to the bounding box.
                    	 * The x1/y1/x2/y2 coordinates of the bounding box will now encompass the given point.
                    	 * @param {number} x - The X coordinate of the point.
                    	 * @param {number} y - The Y coordinate of the point.
                    	 */
                    	BoundingBox.prototype.addPoint = function(x, y) {
                    	    if (typeof x === 'number') {
                    	        if (isNaN(this.x1) || isNaN(this.x2)) {
                    	            this.x1 = x;
                    	            this.x2 = x;
                    	        }
                    	        if (x < this.x1) {
                    	            this.x1 = x;
                    	        }
                    	        if (x > this.x2) {
                    	            this.x2 = x;
                    	        }
                    	    }
                    	    if (typeof y === 'number') {
                    	        if (isNaN(this.y1) || isNaN(this.y2)) {
                    	            this.y1 = y;
                    	            this.y2 = y;
                    	        }
                    	        if (y < this.y1) {
                    	            this.y1 = y;
                    	        }
                    	        if (y > this.y2) {
                    	            this.y2 = y;
                    	        }
                    	    }
                    	};
                    
                    	/**
                    	 * Add a X coordinate to the bounding box.
                    	 * This extends the bounding box to include the X coordinate.
                    	 * This function is used internally inside of addBezier.
                    	 * @param {number} x - The X coordinate of the point.
                    	 */
                    	BoundingBox.prototype.addX = function(x) {
                    	    this.addPoint(x, null);
                    	};
                    
                    	/**
                    	 * Add a Y coordinate to the bounding box.
                    	 * This extends the bounding box to include the Y coordinate.
                    	 * This function is used internally inside of addBezier.
                    	 * @param {number} y - The Y coordinate of the point.
                    	 */
                    	BoundingBox.prototype.addY = function(y) {
                    	    this.addPoint(null, y);
                    	};
                    
                    	/**
                    	 * Add a Bézier curve to the bounding box.
                    	 * This extends the bounding box to include the entire Bézier.
                    	 * @param {number} x0 - The starting X coordinate.
                    	 * @param {number} y0 - The starting Y coordinate.
                    	 * @param {number} x1 - The X coordinate of the first control point.
                    	 * @param {number} y1 - The Y coordinate of the first control point.
                    	 * @param {number} x2 - The X coordinate of the second control point.
                    	 * @param {number} y2 - The Y coordinate of the second control point.
                    	 * @param {number} x - The ending X coordinate.
                    	 * @param {number} y - The ending Y coordinate.
                    	 */
                    	BoundingBox.prototype.addBezier = function(x0, y0, x1, y1, x2, y2, x, y) {
                    	    var this$1 = this;
                    
                    	    // This code is based on http://nishiohirokazu.blogspot.com/2009/06/how-to-calculate-bezier-curves-bounding.html
                    	    // and https://github.com/icons8/svg-path-bounding-box
                    
                    	    var p0 = [x0, y0];
                    	    var p1 = [x1, y1];
                    	    var p2 = [x2, y2];
                    	    var p3 = [x, y];
                    
                    	    this.addPoint(x0, y0);
                    	    this.addPoint(x, y);
                    
                    	    for (var i = 0; i <= 1; i++) {
                    	        var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
                    	        var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
                    	        var c = 3 * p1[i] - 3 * p0[i];
                    
                    	        if (a === 0) {
                    	            if (b === 0) { continue; }
                    	            var t = -c / b;
                    	            if (0 < t && t < 1) {
                    	                if (i === 0) { this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t)); }
                    	                if (i === 1) { this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t)); }
                    	            }
                    	            continue;
                    	        }
                    
                    	        var b2ac = Math.pow(b, 2) - 4 * c * a;
                    	        if (b2ac < 0) { continue; }
                    	        var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                    	        if (0 < t1 && t1 < 1) {
                    	            if (i === 0) { this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t1)); }
                    	            if (i === 1) { this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t1)); }
                    	        }
                    	        var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                    	        if (0 < t2 && t2 < 1) {
                    	            if (i === 0) { this$1.addX(derive(p0[i], p1[i], p2[i], p3[i], t2)); }
                    	            if (i === 1) { this$1.addY(derive(p0[i], p1[i], p2[i], p3[i], t2)); }
                    	        }
                    	    }
                    	};
                    
                    	/**
                    	 * Add a quadratic curve to the bounding box.
                    	 * This extends the bounding box to include the entire quadratic curve.
                    	 * @param {number} x0 - The starting X coordinate.
                    	 * @param {number} y0 - The starting Y coordinate.
                    	 * @param {number} x1 - The X coordinate of the control point.
                    	 * @param {number} y1 - The Y coordinate of the control point.
                    	 * @param {number} x - The ending X coordinate.
                    	 * @param {number} y - The ending Y coordinate.
                    	 */
                    	BoundingBox.prototype.addQuad = function(x0, y0, x1, y1, x, y) {
                    	    var cp1x = x0 + 2 / 3 * (x1 - x0);
                    	    var cp1y = y0 + 2 / 3 * (y1 - y0);
                    	    var cp2x = cp1x + 1 / 3 * (x - x0);
                    	    var cp2y = cp1y + 1 / 3 * (y - y0);
                    	    this.addBezier(x0, y0, cp1x, cp1y, cp2x, cp2y, x, y);
                    	};
                    
                    	// Geometric objects
                    
                    	/**
                    	 * A bézier path containing a set of path commands similar to a SVG path.
                    	 * Paths can be drawn on a context using `draw`.
                    	 * @exports opentype.Path
                    	 * @class
                    	 * @constructor
                    	 */
                    	function Path() {
                    	    this.commands = [];
                    	    this.fill = 'black';
                    	    this.stroke = null;
                    	    this.strokeWidth = 1;
                    	}
                    
                    	/**
                    	 * @param  {number} x
                    	 * @param  {number} y
                    	 */
                    	Path.prototype.moveTo = function(x, y) {
                    	    this.commands.push({
                    	        type: 'M',
                    	        x: x,
                    	        y: y
                    	    });
                    	};
                    
                    	/**
                    	 * @param  {number} x
                    	 * @param  {number} y
                    	 */
                    	Path.prototype.lineTo = function(x, y) {
                    	    this.commands.push({
                    	        type: 'L',
                    	        x: x,
                    	        y: y
                    	    });
                    	};
                    
                    	/**
                    	 * Draws cubic curve
                    	 * @function
                    	 * curveTo
                    	 * @memberof opentype.Path.prototype
                    	 * @param  {number} x1 - x of control 1
                    	 * @param  {number} y1 - y of control 1
                    	 * @param  {number} x2 - x of control 2
                    	 * @param  {number} y2 - y of control 2
                    	 * @param  {number} x - x of path point
                    	 * @param  {number} y - y of path point
                    	 */
                    
                    	/**
                    	 * Draws cubic curve
                    	 * @function
                    	 * bezierCurveTo
                    	 * @memberof opentype.Path.prototype
                    	 * @param  {number} x1 - x of control 1
                    	 * @param  {number} y1 - y of control 1
                    	 * @param  {number} x2 - x of control 2
                    	 * @param  {number} y2 - y of control 2
                    	 * @param  {number} x - x of path point
                    	 * @param  {number} y - y of path point
                    	 * @see curveTo
                    	 */
                    	Path.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {
                    	    this.commands.push({
                    	        type: 'C',
                    	        x1: x1,
                    	        y1: y1,
                    	        x2: x2,
                    	        y2: y2,
                    	        x: x,
                    	        y: y
                    	    });
                    	};
                    
                    	/**
                    	 * Draws quadratic curve
                    	 * @function
                    	 * quadraticCurveTo
                    	 * @memberof opentype.Path.prototype
                    	 * @param  {number} x1 - x of control
                    	 * @param  {number} y1 - y of control
                    	 * @param  {number} x - x of path point
                    	 * @param  {number} y - y of path point
                    	 */
                    
                    	/**
                    	 * Draws quadratic curve
                    	 * @function
                    	 * quadTo
                    	 * @memberof opentype.Path.prototype
                    	 * @param  {number} x1 - x of control
                    	 * @param  {number} y1 - y of control
                    	 * @param  {number} x - x of path point
                    	 * @param  {number} y - y of path point
                    	 */
                    	Path.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {
                    	    this.commands.push({
                    	        type: 'Q',
                    	        x1: x1,
                    	        y1: y1,
                    	        x: x,
                    	        y: y
                    	    });
                    	};
                    
                    	/**
                    	 * Closes the path
                    	 * @function closePath
                    	 * @memberof opentype.Path.prototype
                    	 */
                    
                    	/**
                    	 * Close the path
                    	 * @function close
                    	 * @memberof opentype.Path.prototype
                    	 */
                    	Path.prototype.close = Path.prototype.closePath = function() {
                    	    this.commands.push({
                    	        type: 'Z'
                    	    });
                    	};
                    
                    	/**
                    	 * Add the given path or list of commands to the commands of this path.
                    	 * @param  {Array} pathOrCommands - another opentype.Path, an opentype.BoundingBox, or an array of commands.
                    	 */
                    	Path.prototype.extend = function(pathOrCommands) {
                    	    if (pathOrCommands.commands) {
                    	        pathOrCommands = pathOrCommands.commands;
                    	    } else if (pathOrCommands instanceof BoundingBox) {
                    	        var box = pathOrCommands;
                    	        this.moveTo(box.x1, box.y1);
                    	        this.lineTo(box.x2, box.y1);
                    	        this.lineTo(box.x2, box.y2);
                    	        this.lineTo(box.x1, box.y2);
                    	        this.close();
                    	        return;
                    	    }
                    
                    	    Array.prototype.push.apply(this.commands, pathOrCommands);
                    	};
                    
                    	/**
                    	 * Calculate the bounding box of the path.
                    	 * @returns {opentype.BoundingBox}
                    	 */
                    	Path.prototype.getBoundingBox = function() {
                    	    var this$1 = this;
                    
                    	    var box = new BoundingBox();
                    
                    	    var startX = 0;
                    	    var startY = 0;
                    	    var prevX = 0;
                    	    var prevY = 0;
                    	    for (var i = 0; i < this.commands.length; i++) {
                    	        var cmd = this$1.commands[i];
                    	        switch (cmd.type) {
                    	            case 'M':
                    	                box.addPoint(cmd.x, cmd.y);
                    	                startX = prevX = cmd.x;
                    	                startY = prevY = cmd.y;
                    	                break;
                    	            case 'L':
                    	                box.addPoint(cmd.x, cmd.y);
                    	                prevX = cmd.x;
                    	                prevY = cmd.y;
                    	                break;
                    	            case 'Q':
                    	                box.addQuad(prevX, prevY, cmd.x1, cmd.y1, cmd.x, cmd.y);
                    	                prevX = cmd.x;
                    	                prevY = cmd.y;
                    	                break;
                    	            case 'C':
                    	                box.addBezier(prevX, prevY, cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                    	                prevX = cmd.x;
                    	                prevY = cmd.y;
                    	                break;
                    	            case 'Z':
                    	                prevX = startX;
                    	                prevY = startY;
                    	                break;
                    	            default:
                    	                throw new Error('Unexpected path command ' + cmd.type);
                    	        }
                    	    }
                    	    if (box.isEmpty()) {
                    	        box.addPoint(0, 0);
                    	    }
                    	    return box;
                    	};
                    
                    	/**
                    	 * Draw the path to a 2D context.
                    	 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context.
                    	 */
                    	Path.prototype.draw = function(ctx) {
                    	    var this$1 = this;
                    
                    	    ctx.beginPath();
                    	    for (var i = 0; i < this.commands.length; i += 1) {
                    	        var cmd = this$1.commands[i];
                    	        if (cmd.type === 'M') {
                    	            ctx.moveTo(cmd.x, cmd.y);
                    	        } else if (cmd.type === 'L') {
                    	            ctx.lineTo(cmd.x, cmd.y);
                    	        } else if (cmd.type === 'C') {
                    	            ctx.bezierCurveTo(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                    	        } else if (cmd.type === 'Q') {
                    	            ctx.quadraticCurveTo(cmd.x1, cmd.y1, cmd.x, cmd.y);
                    	        } else if (cmd.type === 'Z') {
                    	            ctx.closePath();
                    	        }
                    	    }
                    
                    	    if (this.fill) {
                    	        ctx.fillStyle = this.fill;
                    	        ctx.fill();
                    	    }
                    
                    	    if (this.stroke) {
                    	        ctx.strokeStyle = this.stroke;
                    	        ctx.lineWidth = this.strokeWidth;
                    	        ctx.stroke();
                    	    }
                    	};
                    
                    	/**
                    	 * Convert the Path to a string of path data instructions
                    	 * See http://www.w3.org/TR/SVG/paths.html#PathData
                    	 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
                    	 * @return {string}
                    	 */
                    	Path.prototype.toPathData = function(decimalPlaces) {
                    	    var this$1 = this;
                    
                    	    decimalPlaces = decimalPlaces !== undefined ? decimalPlaces : 2;
                    
                    	    function floatToString(v) {
                    	        if (Math.round(v) === v) {
                    	            return '' + Math.round(v);
                    	        } else {
                    	            return v.toFixed(decimalPlaces);
                    	        }
                    	    }
                    
                    	    function packValues() {
                    	        var arguments$1 = arguments;
                    
                    	        var s = '';
                    	        for (var i = 0; i < arguments.length; i += 1) {
                    	            var v = arguments$1[i];
                    	            if (v >= 0 && i > 0) {
                    	                s += ' ';
                    	            }
                    
                    	            s += floatToString(v);
                    	        }
                    
                    	        return s;
                    	    }
                    
                    	    var d = '';
                    	    for (var i = 0; i < this.commands.length; i += 1) {
                    	        var cmd = this$1.commands[i];
                    	        if (cmd.type === 'M') {
                    	            d += 'M' + packValues(cmd.x, cmd.y);
                    	        } else if (cmd.type === 'L') {
                    	            d += 'L' + packValues(cmd.x, cmd.y);
                    	        } else if (cmd.type === 'C') {
                    	            d += 'C' + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);
                    	        } else if (cmd.type === 'Q') {
                    	            d += 'Q' + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);
                    	        } else if (cmd.type === 'Z') {
                    	            d += 'Z';
                    	        }
                    	    }
                    
                    	    return d;
                    	};
                    
                    	/**
                    	 * Convert the path to an SVG <path> element, as a string.
                    	 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
                    	 * @return {string}
                    	 */
                    	Path.prototype.toSVG = function(decimalPlaces) {
                    	    var svg = '<path d="';
                    	    svg += this.toPathData(decimalPlaces);
                    	    svg += '"';
                    	    if (this.fill && this.fill !== 'black') {
                    	        if (this.fill === null) {
                    	            svg += ' fill="none"';
                    	        } else {
                    	            svg += ' fill="' + this.fill + '"';
                    	        }
                    	    }
                    
                    	    if (this.stroke) {
                    	        svg += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"';
                    	    }
                    
                    	    svg += '/>';
                    	    return svg;
                    	};
                    
                    	/**
                    	 * Convert the path to a DOM element.
                    	 * @param  {number} [decimalPlaces=2] - The amount of decimal places for floating-point values
                    	 * @return {SVGPathElement}
                    	 */
                    	Path.prototype.toDOMElement = function(decimalPlaces) {
                    	    var temporaryPath = this.toPathData(decimalPlaces);
                    	    var newPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                    
                    	    newPath.setAttribute('d', temporaryPath);
                    
                    	    return newPath;
                    	};
                    
                    	// Run-time checking of preconditions.
                    
                    	function fail(message) {
                    	    throw new Error(message);
                    	}
                    
                    	// Precondition function that checks if the given predicate is true.
                    	// If not, it will throw an error.
                    	function argument(predicate, message) {
                    	    if (!predicate) {
                    	        fail(message);
                    	    }
                    	}
                    	var check = { fail: fail, argument: argument, assert: argument };
                    
                    	// Data types used in the OpenType font file.
                    
                    	var LIMIT16 = 32768; // The limit at which a 16-bit number switches signs == 2^15
                    	var LIMIT32 = 2147483648; // The limit at which a 32-bit number switches signs == 2 ^ 31
                    
                    	/**
                    	 * @exports opentype.decode
                    	 * @class
                    	 */
                    	var decode = {};
                    	/**
                    	 * @exports opentype.encode
                    	 * @class
                    	 */
                    	var encode = {};
                    	/**
                    	 * @exports opentype.sizeOf
                    	 * @class
                    	 */
                    	var sizeOf = {};
                    
                    	// Return a function that always returns the same value.
                    	function constant(v) {
                    	    return function() {
                    	        return v;
                    	    };
                    	}
                    
                    	// OpenType data types //////////////////////////////////////////////////////
                    
                    	/**
                    	 * Convert an 8-bit unsigned integer to a list of 1 byte.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.BYTE = function(v) {
                    	    check.argument(v >= 0 && v <= 255, 'Byte value should be between 0 and 255.');
                    	    return [v];
                    	};
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.BYTE = constant(1);
                    
                    	/**
                    	 * Convert a 8-bit signed integer to a list of 1 byte.
                    	 * @param {string}
                    	 * @returns {Array}
                    	 */
                    	encode.CHAR = function(v) {
                    	    return [v.charCodeAt(0)];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.CHAR = constant(1);
                    
                    	/**
                    	 * Convert an ASCII string to a list of bytes.
                    	 * @param {string}
                    	 * @returns {Array}
                    	 */
                    	encode.CHARARRAY = function(v) {
                    	    var b = [];
                    	    for (var i = 0; i < v.length; i += 1) {
                    	        b[i] = v.charCodeAt(i);
                    	    }
                    
                    	    return b;
                    	};
                    
                    	/**
                    	 * @param {Array}
                    	 * @returns {number}
                    	 */
                    	sizeOf.CHARARRAY = function(v) {
                    	    return v.length;
                    	};
                    
                    	/**
                    	 * Convert a 16-bit unsigned integer to a list of 2 bytes.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.USHORT = function(v) {
                    	    return [(v >> 8) & 0xFF, v & 0xFF];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.USHORT = constant(2);
                    
                    	/**
                    	 * Convert a 16-bit signed integer to a list of 2 bytes.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.SHORT = function(v) {
                    	    // Two's complement
                    	    if (v >= LIMIT16) {
                    	        v = -(2 * LIMIT16 - v);
                    	    }
                    
                    	    return [(v >> 8) & 0xFF, v & 0xFF];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.SHORT = constant(2);
                    
                    	/**
                    	 * Convert a 24-bit unsigned integer to a list of 3 bytes.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.UINT24 = function(v) {
                    	    return [(v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.UINT24 = constant(3);
                    
                    	/**
                    	 * Convert a 32-bit unsigned integer to a list of 4 bytes.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.ULONG = function(v) {
                    	    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.ULONG = constant(4);
                    
                    	/**
                    	 * Convert a 32-bit unsigned integer to a list of 4 bytes.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.LONG = function(v) {
                    	    // Two's complement
                    	    if (v >= LIMIT32) {
                    	        v = -(2 * LIMIT32 - v);
                    	    }
                    
                    	    return [(v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.LONG = constant(4);
                    
                    	encode.FIXED = encode.ULONG;
                    	sizeOf.FIXED = sizeOf.ULONG;
                    
                    	encode.FWORD = encode.SHORT;
                    	sizeOf.FWORD = sizeOf.SHORT;
                    
                    	encode.UFWORD = encode.USHORT;
                    	sizeOf.UFWORD = sizeOf.USHORT;
                    
                    	/**
                    	 * Convert a 32-bit Apple Mac timestamp integer to a list of 8 bytes, 64-bit timestamp.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.LONGDATETIME = function(v) {
                    	    return [0, 0, 0, 0, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.LONGDATETIME = constant(8);
                    
                    	/**
                    	 * Convert a 4-char tag to a list of 4 bytes.
                    	 * @param {string}
                    	 * @returns {Array}
                    	 */
                    	encode.TAG = function(v) {
                    	    check.argument(v.length === 4, 'Tag should be exactly 4 ASCII characters.');
                    	    return [v.charCodeAt(0),
                    	            v.charCodeAt(1),
                    	            v.charCodeAt(2),
                    	            v.charCodeAt(3)];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.TAG = constant(4);
                    
                    	// CFF data types ///////////////////////////////////////////////////////////
                    
                    	encode.Card8 = encode.BYTE;
                    	sizeOf.Card8 = sizeOf.BYTE;
                    
                    	encode.Card16 = encode.USHORT;
                    	sizeOf.Card16 = sizeOf.USHORT;
                    
                    	encode.OffSize = encode.BYTE;
                    	sizeOf.OffSize = sizeOf.BYTE;
                    
                    	encode.SID = encode.USHORT;
                    	sizeOf.SID = sizeOf.USHORT;
                    
                    	// Convert a numeric operand or charstring number to a variable-size list of bytes.
                    	/**
                    	 * Convert a numeric operand or charstring number to a variable-size list of bytes.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.NUMBER = function(v) {
                    	    if (v >= -107 && v <= 107) {
                    	        return [v + 139];
                    	    } else if (v >= 108 && v <= 1131) {
                    	        v = v - 108;
                    	        return [(v >> 8) + 247, v & 0xFF];
                    	    } else if (v >= -1131 && v <= -108) {
                    	        v = -v - 108;
                    	        return [(v >> 8) + 251, v & 0xFF];
                    	    } else if (v >= -32768 && v <= 32767) {
                    	        return encode.NUMBER16(v);
                    	    } else {
                    	        return encode.NUMBER32(v);
                    	    }
                    	};
                    
                    	/**
                    	 * @param {number}
                    	 * @returns {number}
                    	 */
                    	sizeOf.NUMBER = function(v) {
                    	    return encode.NUMBER(v).length;
                    	};
                    
                    	/**
                    	 * Convert a signed number between -32768 and +32767 to a three-byte value.
                    	 * This ensures we always use three bytes, but is not the most compact format.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.NUMBER16 = function(v) {
                    	    return [28, (v >> 8) & 0xFF, v & 0xFF];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.NUMBER16 = constant(3);
                    
                    	/**
                    	 * Convert a signed number between -(2^31) and +(2^31-1) to a five-byte value.
                    	 * This is useful if you want to be sure you always use four bytes,
                    	 * at the expense of wasting a few bytes for smaller numbers.
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.NUMBER32 = function(v) {
                    	    return [29, (v >> 24) & 0xFF, (v >> 16) & 0xFF, (v >> 8) & 0xFF, v & 0xFF];
                    	};
                    
                    	/**
                    	 * @constant
                    	 * @type {number}
                    	 */
                    	sizeOf.NUMBER32 = constant(5);
                    
                    	/**
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.REAL = function(v) {
                    	    var value = v.toString();
                    
                    	    // Some numbers use an epsilon to encode the value. (e.g. JavaScript will store 0.0000001 as 1e-7)
                    	    // This code converts it back to a number without the epsilon.
                    	    var m = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(value);
                    	    if (m) {
                    	        var epsilon = parseFloat('1e' + ((m[2] ? +m[2] : 0) + m[1].length));
                    	        value = (Math.round(v * epsilon) / epsilon).toString();
                    	    }
                    
                    	    var nibbles = '';
                    	    for (var i = 0, ii = value.length; i < ii; i += 1) {
                    	        var c = value[i];
                    	        if (c === 'e') {
                    	            nibbles += value[++i] === '-' ? 'c' : 'b';
                    	        } else if (c === '.') {
                    	            nibbles += 'a';
                    	        } else if (c === '-') {
                    	            nibbles += 'e';
                    	        } else {
                    	            nibbles += c;
                    	        }
                    	    }
                    
                    	    nibbles += (nibbles.length & 1) ? 'f' : 'ff';
                    	    var out = [30];
                    	    for (var i$1 = 0, ii$1 = nibbles.length; i$1 < ii$1; i$1 += 2) {
                    	        out.push(parseInt(nibbles.substr(i$1, 2), 16));
                    	    }
                    
                    	    return out;
                    	};
                    
                    	/**
                    	 * @param {number}
                    	 * @returns {number}
                    	 */
                    	sizeOf.REAL = function(v) {
                    	    return encode.REAL(v).length;
                    	};
                    
                    	encode.NAME = encode.CHARARRAY;
                    	sizeOf.NAME = sizeOf.CHARARRAY;
                    
                    	encode.STRING = encode.CHARARRAY;
                    	sizeOf.STRING = sizeOf.CHARARRAY;
                    
                    	/**
                    	 * @param {DataView} data
                    	 * @param {number} offset
                    	 * @param {number} numBytes
                    	 * @returns {string}
                    	 */
                    	decode.UTF8 = function(data, offset, numBytes) {
                    	    var codePoints = [];
                    	    var numChars = numBytes;
                    	    for (var j = 0; j < numChars; j++, offset += 1) {
                    	        codePoints[j] = data.getUint8(offset);
                    	    }
                    
                    	    return String.fromCharCode.apply(null, codePoints);
                    	};
                    
                    	/**
                    	 * @param {DataView} data
                    	 * @param {number} offset
                    	 * @param {number} numBytes
                    	 * @returns {string}
                    	 */
                    	decode.UTF16 = function(data, offset, numBytes) {
                    	    var codePoints = [];
                    	    var numChars = numBytes / 2;
                    	    for (var j = 0; j < numChars; j++, offset += 2) {
                    	        codePoints[j] = data.getUint16(offset);
                    	    }
                    
                    	    return String.fromCharCode.apply(null, codePoints);
                    	};
                    
                    	/**
                    	 * Convert a JavaScript string to UTF16-BE.
                    	 * @param {string}
                    	 * @returns {Array}
                    	 */
                    	encode.UTF16 = function(v) {
                    	    var b = [];
                    	    for (var i = 0; i < v.length; i += 1) {
                    	        var codepoint = v.charCodeAt(i);
                    	        b[b.length] = (codepoint >> 8) & 0xFF;
                    	        b[b.length] = codepoint & 0xFF;
                    	    }
                    
                    	    return b;
                    	};
                    
                    	/**
                    	 * @param {string}
                    	 * @returns {number}
                    	 */
                    	sizeOf.UTF16 = function(v) {
                    	    return v.length * 2;
                    	};
                    
                    	// Data for converting old eight-bit Macintosh encodings to Unicode.
                    	// This representation is optimized for decoding; encoding is slower
                    	// and needs more memory. The assumption is that all opentype.js users
                    	// want to open fonts, but saving a font will be comparatively rare
                    	// so it can be more expensive. Keyed by IANA character set name.
                    	//
                    	// Python script for generating these strings:
                    	//
                    	//     s = u''.join([chr(c).decode('mac_greek') for c in range(128, 256)])
                    	//     print(s.encode('utf-8'))
                    	/**
                    	 * @private
                    	 */
                    	var eightBitMacEncodings = {
                    	    'x-mac-croatian':  // Python: 'mac_croatian'
                    	    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø' +
                    	    '¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ',
                    	    'x-mac-cyrillic':  // Python: 'mac_cyrillic'
                    	    'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњ' +
                    	    'јЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю',
                    	    'x-mac-gaelic': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/GAELIC.TXT
                    	    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæø' +
                    	    'ṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ',
                    	    'x-mac-greek':  // Python: 'mac_greek'
                    	    'Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩ' +
                    	    'άΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\u00AD',
                    	    'x-mac-icelandic':  // Python: 'mac_iceland'
                    	    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
                    	    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
                    	    'x-mac-inuit': // http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/INUIT.TXT
                    	    'ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗ' +
                    	    'ᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł',
                    	    'x-mac-ce':  // Python: 'mac_latin2'
                    	    'ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅ' +
                    	    'ņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ',
                    	    macintosh:  // Python: 'mac_roman'
                    	    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
                    	    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
                    	    'x-mac-romanian':  // Python: 'mac_romanian'
                    	    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș' +
                    	    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ',
                    	    'x-mac-turkish':  // Python: 'mac_turkish'
                    	    'ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø' +
                    	    '¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ'
                    	};
                    
                    	/**
                    	 * Decodes an old-style Macintosh string. Returns either a Unicode JavaScript
                    	 * string, or 'undefined' if the encoding is unsupported. For example, we do
                    	 * not support Chinese, Japanese or Korean because these would need large
                    	 * mapping tables.
                    	 * @param {DataView} dataView
                    	 * @param {number} offset
                    	 * @param {number} dataLength
                    	 * @param {string} encoding
                    	 * @returns {string}
                    	 */
                    	decode.MACSTRING = function(dataView, offset, dataLength, encoding) {
                    	    var table = eightBitMacEncodings[encoding];
                    	    if (table === undefined) {
                    	        return undefined;
                    	    }
                    
                    	    var result = '';
                    	    for (var i = 0; i < dataLength; i++) {
                    	        var c = dataView.getUint8(offset + i);
                    	        // In all eight-bit Mac encodings, the characters 0x00..0x7F are
                    	        // mapped to U+0000..U+007F; we only need to look up the others.
                    	        if (c <= 0x7F) {
                    	            result += String.fromCharCode(c);
                    	        } else {
                    	            result += table[c & 0x7F];
                    	        }
                    	    }
                    
                    	    return result;
                    	};
                    
                    	// Helper function for encode.MACSTRING. Returns a dictionary for mapping
                    	// Unicode character codes to their 8-bit MacOS equivalent. This table
                    	// is not exactly a super cheap data structure, but we do not care because
                    	// encoding Macintosh strings is only rarely needed in typical applications.
                    	var macEncodingTableCache = typeof WeakMap === 'function' && new WeakMap();
                    	var macEncodingCacheKeys;
                    	var getMacEncodingTable = function (encoding) {
                    	    // Since we use encoding as a cache key for WeakMap, it has to be
                    	    // a String object and not a literal. And at least on NodeJS 2.10.1,
                    	    // WeakMap requires that the same String instance is passed for cache hits.
                    	    if (!macEncodingCacheKeys) {
                    	        macEncodingCacheKeys = {};
                    	        for (var e in eightBitMacEncodings) {
                    	            /*jshint -W053 */  // Suppress "Do not use String as a constructor."
                    	            macEncodingCacheKeys[e] = new String(e);
                    	        }
                    	    }
                    
                    	    var cacheKey = macEncodingCacheKeys[encoding];
                    	    if (cacheKey === undefined) {
                    	        return undefined;
                    	    }
                    
                    	    // We can't do "if (cache.has(key)) {return cache.get(key)}" here:
                    	    // since garbage collection may run at any time, it could also kick in
                    	    // between the calls to cache.has() and cache.get(). In that case,
                    	    // we would return 'undefined' even though we do support the encoding.
                    	    if (macEncodingTableCache) {
                    	        var cachedTable = macEncodingTableCache.get(cacheKey);
                    	        if (cachedTable !== undefined) {
                    	            return cachedTable;
                    	        }
                    	    }
                    
                    	    var decodingTable = eightBitMacEncodings[encoding];
                    	    if (decodingTable === undefined) {
                    	        return undefined;
                    	    }
                    
                    	    var encodingTable = {};
                    	    for (var i = 0; i < decodingTable.length; i++) {
                    	        encodingTable[decodingTable.charCodeAt(i)] = i + 0x80;
                    	    }
                    
                    	    if (macEncodingTableCache) {
                    	        macEncodingTableCache.set(cacheKey, encodingTable);
                    	    }
                    
                    	    return encodingTable;
                    	};
                    
                    	/**
                    	 * Encodes an old-style Macintosh string. Returns a byte array upon success.
                    	 * If the requested encoding is unsupported, or if the input string contains
                    	 * a character that cannot be expressed in the encoding, the function returns
                    	 * 'undefined'.
                    	 * @param {string} str
                    	 * @param {string} encoding
                    	 * @returns {Array}
                    	 */
                    	encode.MACSTRING = function(str, encoding) {
                    	    var table = getMacEncodingTable(encoding);
                    	    if (table === undefined) {
                    	        return undefined;
                    	    }
                    
                    	    var result = [];
                    	    for (var i = 0; i < str.length; i++) {
                    	        var c = str.charCodeAt(i);
                    
                    	        // In all eight-bit Mac encodings, the characters 0x00..0x7F are
                    	        // mapped to U+0000..U+007F; we only need to look up the others.
                    	        if (c >= 0x80) {
                    	            c = table[c];
                    	            if (c === undefined) {
                    	                // str contains a Unicode character that cannot be encoded
                    	                // in the requested encoding.
                    	                return undefined;
                    	            }
                    	        }
                    	        result[i] = c;
                    	        // result.push(c);
                    	    }
                    
                    	    return result;
                    	};
                    
                    	/**
                    	 * @param {string} str
                    	 * @param {string} encoding
                    	 * @returns {number}
                    	 */
                    	sizeOf.MACSTRING = function(str, encoding) {
                    	    var b = encode.MACSTRING(str, encoding);
                    	    if (b !== undefined) {
                    	        return b.length;
                    	    } else {
                    	        return 0;
                    	    }
                    	};
                    
                    	// Helper for encode.VARDELTAS
                    	function isByteEncodable(value) {
                    	    return value >= -128 && value <= 127;
                    	}
                    
                    	// Helper for encode.VARDELTAS
                    	function encodeVarDeltaRunAsZeroes(deltas, pos, result) {
                    	    var runLength = 0;
                    	    var numDeltas = deltas.length;
                    	    while (pos < numDeltas && runLength < 64 && deltas[pos] === 0) {
                    	        ++pos;
                    	        ++runLength;
                    	    }
                    	    result.push(0x80 | (runLength - 1));
                    	    return pos;
                    	}
                    
                    	// Helper for encode.VARDELTAS
                    	function encodeVarDeltaRunAsBytes(deltas, offset, result) {
                    	    var runLength = 0;
                    	    var numDeltas = deltas.length;
                    	    var pos = offset;
                    	    while (pos < numDeltas && runLength < 64) {
                    	        var value = deltas[pos];
                    	        if (!isByteEncodable(value)) {
                    	            break;
                    	        }
                    
                    	        // Within a byte-encoded run of deltas, a single zero is best
                    	        // stored literally as 0x00 value. However, if we have two or
                    	        // more zeroes in a sequence, it is better to start a new run.
                    	        // Fore example, the sequence of deltas [15, 15, 0, 15, 15]
                    	        // becomes 6 bytes (04 0F 0F 00 0F 0F) when storing the zero
                    	        // within the current run, but 7 bytes (01 0F 0F 80 01 0F 0F)
                    	        // when starting a new run.
                    	        if (value === 0 && pos + 1 < numDeltas && deltas[pos + 1] === 0) {
                    	            break;
                    	        }
                    
                    	        ++pos;
                    	        ++runLength;
                    	    }
                    	    result.push(runLength - 1);
                    	    for (var i = offset; i < pos; ++i) {
                    	        result.push((deltas[i] + 256) & 0xff);
                    	    }
                    	    return pos;
                    	}
                    
                    	// Helper for encode.VARDELTAS
                    	function encodeVarDeltaRunAsWords(deltas, offset, result) {
                    	    var runLength = 0;
                    	    var numDeltas = deltas.length;
                    	    var pos = offset;
                    	    while (pos < numDeltas && runLength < 64) {
                    	        var value = deltas[pos];
                    
                    	        // Within a word-encoded run of deltas, it is easiest to start
                    	        // a new run (with a different encoding) whenever we encounter
                    	        // a zero value. For example, the sequence [0x6666, 0, 0x7777]
                    	        // needs 7 bytes when storing the zero inside the current run
                    	        // (42 66 66 00 00 77 77), and equally 7 bytes when starting a
                    	        // new run (40 66 66 80 40 77 77).
                    	        if (value === 0) {
                    	            break;
                    	        }
                    
                    	        // Within a word-encoded run of deltas, a single value in the
                    	        // range (-128..127) should be encoded within the current run
                    	        // because it is more compact. For example, the sequence
                    	        // [0x6666, 2, 0x7777] becomes 7 bytes when storing the value
                    	        // literally (42 66 66 00 02 77 77), but 8 bytes when starting
                    	        // a new run (40 66 66 00 02 40 77 77).
                    	        if (isByteEncodable(value) && pos + 1 < numDeltas && isByteEncodable(deltas[pos + 1])) {
                    	            break;
                    	        }
                    
                    	        ++pos;
                    	        ++runLength;
                    	    }
                    	    result.push(0x40 | (runLength - 1));
                    	    for (var i = offset; i < pos; ++i) {
                    	        var val = deltas[i];
                    	        result.push(((val + 0x10000) >> 8) & 0xff, (val + 0x100) & 0xff);
                    	    }
                    	    return pos;
                    	}
                    
                    	/**
                    	 * Encode a list of variation adjustment deltas.
                    	 *
                    	 * Variation adjustment deltas are used in ‘gvar’ and ‘cvar’ tables.
                    	 * They indicate how points (in ‘gvar’) or values (in ‘cvar’) get adjusted
                    	 * when generating instances of variation fonts.
                    	 *
                    	 * @see https://www.microsoft.com/typography/otspec/gvar.htm
                    	 * @see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6gvar.html
                    	 * @param {Array}
                    	 * @return {Array}
                    	 */
                    	encode.VARDELTAS = function(deltas) {
                    	    var pos = 0;
                    	    var result = [];
                    	    while (pos < deltas.length) {
                    	        var value = deltas[pos];
                    	        if (value === 0) {
                    	            pos = encodeVarDeltaRunAsZeroes(deltas, pos, result);
                    	        } else if (value >= -128 && value <= 127) {
                    	            pos = encodeVarDeltaRunAsBytes(deltas, pos, result);
                    	        } else {
                    	            pos = encodeVarDeltaRunAsWords(deltas, pos, result);
                    	        }
                    	    }
                    	    return result;
                    	};
                    
                    	// Convert a list of values to a CFF INDEX structure.
                    	// The values should be objects containing name / type / value.
                    	/**
                    	 * @param {Array} l
                    	 * @returns {Array}
                    	 */
                    	encode.INDEX = function(l) {
                    	    //var offset, offsets, offsetEncoder, encodedOffsets, encodedOffset, data,
                    	    //    i, v;
                    	    // Because we have to know which data type to use to encode the offsets,
                    	    // we have to go through the values twice: once to encode the data and
                    	    // calculate the offsets, then again to encode the offsets using the fitting data type.
                    	    var offset = 1; // First offset is always 1.
                    	    var offsets = [offset];
                    	    var data = [];
                    	    for (var i = 0; i < l.length; i += 1) {
                    	        var v = encode.OBJECT(l[i]);
                    	        Array.prototype.push.apply(data, v);
                    	        offset += v.length;
                    	        offsets.push(offset);
                    	    }
                    
                    	    if (data.length === 0) {
                    	        return [0, 0];
                    	    }
                    
                    	    var encodedOffsets = [];
                    	    var offSize = (1 + Math.floor(Math.log(offset) / Math.log(2)) / 8) | 0;
                    	    var offsetEncoder = [undefined, encode.BYTE, encode.USHORT, encode.UINT24, encode.ULONG][offSize];
                    	    for (var i$1 = 0; i$1 < offsets.length; i$1 += 1) {
                    	        var encodedOffset = offsetEncoder(offsets[i$1]);
                    	        Array.prototype.push.apply(encodedOffsets, encodedOffset);
                    	    }
                    
                    	    return Array.prototype.concat(encode.Card16(l.length),
                    	                           encode.OffSize(offSize),
                    	                           encodedOffsets,
                    	                           data);
                    	};
                    
                    	/**
                    	 * @param {Array}
                    	 * @returns {number}
                    	 */
                    	sizeOf.INDEX = function(v) {
                    	    return encode.INDEX(v).length;
                    	};
                    
                    	/**
                    	 * Convert an object to a CFF DICT structure.
                    	 * The keys should be numeric.
                    	 * The values should be objects containing name / type / value.
                    	 * @param {Object} m
                    	 * @returns {Array}
                    	 */
                    	encode.DICT = function(m) {
                    	    var d = [];
                    	    var keys = Object.keys(m);
                    	    var length = keys.length;
                    
                    	    for (var i = 0; i < length; i += 1) {
                    	        // Object.keys() return string keys, but our keys are always numeric.
                    	        var k = parseInt(keys[i], 0);
                    	        var v = m[k];
                    	        // Value comes before the key.
                    	        d = d.concat(encode.OPERAND(v.value, v.type));
                    	        d = d.concat(encode.OPERATOR(k));
                    	    }
                    
                    	    return d;
                    	};
                    
                    	/**
                    	 * @param {Object}
                    	 * @returns {number}
                    	 */
                    	sizeOf.DICT = function(m) {
                    	    return encode.DICT(m).length;
                    	};
                    
                    	/**
                    	 * @param {number}
                    	 * @returns {Array}
                    	 */
                    	encode.OPERATOR = function(v) {
                    	    if (v < 1200) {
                    	        return [v];
                    	    } else {
                    	        return [12, v - 1200];
                    	    }
                    	};
                    
                    	/**
                    	 * @param {Array} v
                    	 * @param {string}
                    	 * @returns {Array}
                    	 */
                    	encode.OPERAND = function(v, type) {
                    	    var d = [];
                    	    if (Array.isArray(type)) {
                    	        for (var i = 0; i < type.length; i += 1) {
                    	            check.argument(v.length === type.length, 'Not enough arguments given for type' + type);
                    	            d = d.concat(encode.OPERAND(v[i], type[i]));
                    	        }
                    	    } else {
                    	        if (type === 'SID') {
                    	            d = d.concat(encode.NUMBER(v));
                    	        } else if (type === 'offset') {
                    	            // We make it easy for ourselves and always encode offsets as
                    	            // 4 bytes. This makes offset calculation for the top dict easier.
                    	            d = d.concat(encode.NUMBER32(v));
                    	        } else if (type === 'number') {
                    	            d = d.concat(encode.NUMBER(v));
                    	        } else if (type === 'real') {
                    	            d = d.concat(encode.REAL(v));
                    	        } else {
                    	            throw new Error('Unknown operand type ' + type);
                    	            // FIXME Add support for booleans
                    	        }
                    	    }
                    
                    	    return d;
                    	};
                    
                    	encode.OP = encode.BYTE;
                    	sizeOf.OP = sizeOf.BYTE;
                    
                    	// memoize charstring encoding using WeakMap if available
                    	var wmm = typeof WeakMap === 'function' && new WeakMap();
                    
                    	/**
                    	 * Convert a list of CharString operations to bytes.
                    	 * @param {Array}
                    	 * @returns {Array}
                    	 */
                    	encode.CHARSTRING = function(ops) {
                    	    // See encode.MACSTRING for why we don't do "if (wmm && wmm.has(ops))".
                    	    if (wmm) {
                    	        var cachedValue = wmm.get(ops);
                    	        if (cachedValue !== undefined) {
                    	            return cachedValue;
                    	        }
                    	    }
                    
                    	    var d = [];
                    	    var length = ops.length;
                    
                    	    for (var i = 0; i < length; i += 1) {
                    	        var op = ops[i];
                    	        d = d.concat(encode[op.type](op.value));
                    	    }
                    
                    	    if (wmm) {
                    	        wmm.set(ops, d);
                    	    }
                    
                    	    return d;
                    	};
                    
                    	/**
                    	 * @param {Array}
                    	 * @returns {number}
                    	 */
                    	sizeOf.CHARSTRING = function(ops) {
                    	    return encode.CHARSTRING(ops).length;
                    	};
                    
                    	// Utility functions ////////////////////////////////////////////////////////
                    
                    	/**
                    	 * Convert an object containing name / type / value to bytes.
                    	 * @param {Object}
                    	 * @returns {Array}
                    	 */
                    	encode.OBJECT = function(v) {
                    	    var encodingFunction = encode[v.type];
                    	    check.argument(encodingFunction !== undefined, 'No encoding function for type ' + v.type);
                    	    return encodingFunction(v.value);
                    	};
                    
                    	/**
                    	 * @param {Object}
                    	 * @returns {number}
                    	 */
                    	sizeOf.OBJECT = function(v) {
                    	    var sizeOfFunction = sizeOf[v.type];
                    	    check.argument(sizeOfFunction !== undefined, 'No sizeOf function for type ' + v.type);
                    	    return sizeOfFunction(v.value);
                    	};
                    
                    	/**
                    	 * Convert a table object to bytes.
                    	 * A table contains a list of fields containing the metadata (name, type and default value).
                    	 * The table itself has the field values set as attributes.
                    	 * @param {opentype.Table}
                    	 * @returns {Array}
                    	 */
                    	encode.TABLE = function(table) {
                    	    var d = [];
                    	    var length = table.fields.length;
                    	    var subtables = [];
                    	    var subtableOffsets = [];
                    
                    	    for (var i = 0; i < length; i += 1) {
                    	        var field = table.fields[i];
                    	        var encodingFunction = encode[field.type];
                    	        check.argument(encodingFunction !== undefined, 'No encoding function for field type ' + field.type + ' (' + field.name + ')');
                    	        var value = table[field.name];
                    	        if (value === undefined) {
                    	            value = field.value;
                    	        }
                    
                    	        var bytes = encodingFunction(value);
                    
                    	        if (field.type === 'TABLE') {
                    	            subtableOffsets.push(d.length);
                    	            d = d.concat([0, 0]);
                    	            subtables.push(bytes);
                    	        } else {
                    	            d = d.concat(bytes);
                    	        }
                    	    }
                    
                    	    for (var i$1 = 0; i$1 < subtables.length; i$1 += 1) {
                    	        var o = subtableOffsets[i$1];
                    	        var offset = d.length;
                    	        check.argument(offset < 65536, 'Table ' + table.tableName + ' too big.');
                    	        d[o] = offset >> 8;
                    	        d[o + 1] = offset & 0xff;
                    	        d = d.concat(subtables[i$1]);
                    	    }
                    
                    	    return d;
                    	};
                    
                    	/**
                    	 * @param {opentype.Table}
                    	 * @returns {number}
                    	 */
                    	sizeOf.TABLE = function(table) {
                    	    var numBytes = 0;
                    	    var length = table.fields.length;
                    
                    	    for (var i = 0; i < length; i += 1) {
                    	        var field = table.fields[i];
                    	        var sizeOfFunction = sizeOf[field.type];
                    	        check.argument(sizeOfFunction !== undefined, 'No sizeOf function for field type ' + field.type + ' (' + field.name + ')');
                    	        var value = table[field.name];
                    	        if (value === undefined) {
                    	            value = field.value;
                    	        }
                    
                    	        numBytes += sizeOfFunction(value);
                    
                    	        // Subtables take 2 more bytes for offsets.
                    	        if (field.type === 'TABLE') {
                    	            numBytes += 2;
                    	        }
                    	    }
                    
                    	    return numBytes;
                    	};
                    
                    	encode.RECORD = encode.TABLE;
                    	sizeOf.RECORD = sizeOf.TABLE;
                    
                    	// Merge in a list of bytes.
                    	encode.LITERAL = function(v) {
                    	    return v;
                    	};
                    
                    	sizeOf.LITERAL = function(v) {
                    	    return v.length;
                    	};
                    
                    	// Table metadata
                    
                    	/**
                    	 * @exports opentype.Table
                    	 * @class
                    	 * @param {string} tableName
                    	 * @param {Array} fields
                    	 * @param {Object} options
                    	 * @constructor
                    	 */
                    	function Table(tableName, fields, options) {
                    	    var this$1 = this;
                    
                    	    for (var i = 0; i < fields.length; i += 1) {
                    	        var field = fields[i];
                    	        this$1[field.name] = field.value;
                    	    }
                    
                    	    this.tableName = tableName;
                    	    this.fields = fields;
                    	    if (options) {
                    	        var optionKeys = Object.keys(options);
                    	        for (var i$1 = 0; i$1 < optionKeys.length; i$1 += 1) {
                    	            var k = optionKeys[i$1];
                    	            var v = options[k];
                    	            if (this$1[k] !== undefined) {
                    	                this$1[k] = v;
                    	            }
                    	        }
                    	    }
                    	}
                    
                    	/**
                    	 * Encodes the table and returns an array of bytes
                    	 * @return {Array}
                    	 */
                    	Table.prototype.encode = function() {
                    	    return encode.TABLE(this);
                    	};
                    
                    	/**
                    	 * Get the size of the table.
                    	 * @return {number}
                    	 */
                    	Table.prototype.sizeOf = function() {
                    	    return sizeOf.TABLE(this);
                    	};
                    
                    	/**
                    	 * @private
                    	 */
                    	function ushortList(itemName, list, count) {
                    	    if (count === undefined) {
                    	        count = list.length;
                    	    }
                    	    var fields = new Array(list.length + 1);
                    	    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
                    	    for (var i = 0; i < list.length; i++) {
                    	        fields[i + 1] = {name: itemName + i, type: 'USHORT', value: list[i]};
                    	    }
                    	    return fields;
                    	}
                    
                    	/**
                    	 * @private
                    	 */
                    	function tableList(itemName, records, itemCallback) {
                    	    var count = records.length;
                    	    var fields = new Array(count + 1);
                    	    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
                    	    for (var i = 0; i < count; i++) {
                    	        fields[i + 1] = {name: itemName + i, type: 'TABLE', value: itemCallback(records[i], i)};
                    	    }
                    	    return fields;
                    	}
                    
                    	/**
                    	 * @private
                    	 */
                    	function recordList(itemName, records, itemCallback) {
                    	    var count = records.length;
                    	    var fields = [];
                    	    fields[0] = {name: itemName + 'Count', type: 'USHORT', value: count};
                    	    for (var i = 0; i < count; i++) {
                    	        fields = fields.concat(itemCallback(records[i], i));
                    	    }
                    	    return fields;
                    	}
                    
                    	// Common Layout Tables
                    
                    	/**
                    	 * @exports opentype.Coverage
                    	 * @class
                    	 * @param {opentype.Table}
                    	 * @constructor
                    	 * @extends opentype.Table
                    	 */
                    	function Coverage(coverageTable) {
                    	    if (coverageTable.format === 1) {
                    	        Table.call(this, 'coverageTable',
                    	            [{name: 'coverageFormat', type: 'USHORT', value: 1}]
                    	            .concat(ushortList('glyph', coverageTable.glyphs))
                    	        );
                    	    } else {
                    	        check.assert(false, 'Can\'t create coverage table format 2 yet.');
                    	    }
                    	}
                    	Coverage.prototype = Object.create(Table.prototype);
                    	Coverage.prototype.constructor = Coverage;
                    
                    	function ScriptList(scriptListTable) {
                    	    Table.call(this, 'scriptListTable',
                    	        recordList('scriptRecord', scriptListTable, function(scriptRecord, i) {
                    	            var script = scriptRecord.script;
                    	            var defaultLangSys = script.defaultLangSys;
                    	            check.assert(!!defaultLangSys, 'Unable to write GSUB: script ' + scriptRecord.tag + ' has no default language system.');
                    	            return [
                    	                {name: 'scriptTag' + i, type: 'TAG', value: scriptRecord.tag},
                    	                {name: 'script' + i, type: 'TABLE', value: new Table('scriptTable', [
                    	                    {name: 'defaultLangSys', type: 'TABLE', value: new Table('defaultLangSys', [
                    	                        {name: 'lookupOrder', type: 'USHORT', value: 0},
                    	                        {name: 'reqFeatureIndex', type: 'USHORT', value: defaultLangSys.reqFeatureIndex}]
                    	                        .concat(ushortList('featureIndex', defaultLangSys.featureIndexes)))}
                    	                    ].concat(recordList('langSys', script.langSysRecords, function(langSysRecord, i) {
                    	                        var langSys = langSysRecord.langSys;
                    	                        return [
                    	                            {name: 'langSysTag' + i, type: 'TAG', value: langSysRecord.tag},
                    	                            {name: 'langSys' + i, type: 'TABLE', value: new Table('langSys', [
                    	                                {name: 'lookupOrder', type: 'USHORT', value: 0},
                    	                                {name: 'reqFeatureIndex', type: 'USHORT', value: langSys.reqFeatureIndex}
                    	                                ].concat(ushortList('featureIndex', langSys.featureIndexes)))}
                    	                        ];
                    	                    })))}
                    	            ];
                    	        })
                    	    );
                    	}
                    	ScriptList.prototype = Object.create(Table.prototype);
                    	ScriptList.prototype.constructor = ScriptList;
                    
                    	/**
                    	 * @exports opentype.FeatureList
                    	 * @class
                    	 * @param {opentype.Table}
                    	 * @constructor
                    	 * @extends opentype.Table
                    	 */
                    	function FeatureList(featureListTable) {
                    	    Table.call(this, 'featureListTable',
                    	        recordList('featureRecord', featureListTable, function(featureRecord, i) {
                    	            var feature = featureRecord.feature;
                    	            return [
                    	                {name: 'featureTag' + i, type: 'TAG', value: featureRecord.tag},
                    	                {name: 'feature' + i, type: 'TABLE', value: new Table('featureTable', [
                    	                    {name: 'featureParams', type: 'USHORT', value: feature.featureParams} ].concat(ushortList('lookupListIndex', feature.lookupListIndexes)))}
                    	            ];
                    	        })
                    	    );
                    	}
                    	FeatureList.prototype = Object.create(Table.prototype);
                    	FeatureList.prototype.constructor = FeatureList;
                    
                    	/**
                    	 * @exports opentype.LookupList
                    	 * @class
                    	 * @param {opentype.Table}
                    	 * @param {Object}
                    	 * @constructor
                    	 * @extends opentype.Table
                    	 */
                    	function LookupList(lookupListTable, subtableMakers) {
                    	    Table.call(this, 'lookupListTable', tableList('lookup', lookupListTable, function(lookupTable) {
                    	        var subtableCallback = subtableMakers[lookupTable.lookupType];
                    	        check.assert(!!subtableCallback, 'Unable to write GSUB lookup type ' + lookupTable.lookupType + ' tables.');
                    	        return new Table('lookupTable', [
                    	            {name: 'lookupType', type: 'USHORT', value: lookupTable.lookupType},
                    	            {name: 'lookupFlag', type: 'USHORT', value: lookupTable.lookupFlag}
                    	        ].concat(tableList('subtable', lookupTable.subtables, subtableCallback)));
                    	    }));
                    	}
                    	LookupList.prototype = Object.create(Table.prototype);
                    	LookupList.prototype.constructor = LookupList;
                    
                    	// Record = same as Table, but inlined (a Table has an offset and its data is further in the stream)
                    	// Don't use offsets inside Records (probable bug), only in Tables.
                    	var table = {
                    	    Table: Table,
                    	    Record: Table,
                    	    Coverage: Coverage,
                    	    ScriptList: ScriptList,
                    	    FeatureList: FeatureList,
                    	    LookupList: LookupList,
                    	    ushortList: ushortList,
                    	    tableList: tableList,
                    	    recordList: recordList,
                    	};
                    
                    	// Parsing utility functions
                    
                    	// Retrieve an unsigned byte from the DataView.
                    	function getByte(dataView, offset) {
                    	    return dataView.getUint8(offset);
                    	}
                    
                    	// Retrieve an unsigned 16-bit short from the DataView.
                    	// The value is stored in big endian.
                    	function getUShort(dataView, offset) {
                    	    return dataView.getUint16(offset, false);
                    	}
                    
                    	// Retrieve a signed 16-bit short from the DataView.
                    	// The value is stored in big endian.
                    	function getShort(dataView, offset) {
                    	    return dataView.getInt16(offset, false);
                    	}
                    
                    	// Retrieve an unsigned 32-bit long from the DataView.
                    	// The value is stored in big endian.
                    	function getULong(dataView, offset) {
                    	    return dataView.getUint32(offset, false);
                    	}
                    
                    	// Retrieve a 32-bit signed fixed-point number (16.16) from the DataView.
                    	// The value is stored in big endian.
                    	function getFixed(dataView, offset) {
                    	    var decimal = dataView.getInt16(offset, false);
                    	    var fraction = dataView.getUint16(offset + 2, false);
                    	    return decimal + fraction / 65535;
                    	}
                    
                    	// Retrieve a 4-character tag from the DataView.
                    	// Tags are used to identify tables.
                    	function getTag(dataView, offset) {
                    	    var tag = '';
                    	    for (var i = offset; i < offset + 4; i += 1) {
                    	        tag += String.fromCharCode(dataView.getInt8(i));
                    	    }
                    
                    	    return tag;
                    	}
                    
                    	// Retrieve an offset from the DataView.
                    	// Offsets are 1 to 4 bytes in length, depending on the offSize argument.
                    	function getOffset(dataView, offset, offSize) {
                    	    var v = 0;
                    	    for (var i = 0; i < offSize; i += 1) {
                    	        v <<= 8;
                    	        v += dataView.getUint8(offset + i);
                    	    }
                    
                    	    return v;
                    	}
                    
                    	// Retrieve a number of bytes from start offset to the end offset from the DataView.
                    	function getBytes(dataView, startOffset, endOffset) {
                    	    var bytes = [];
                    	    for (var i = startOffset; i < endOffset; i += 1) {
                    	        bytes.push(dataView.getUint8(i));
                    	    }
                    
                    	    return bytes;
                    	}
                    
                    	// Convert the list of bytes to a string.
                    	function bytesToString(bytes) {
                    	    var s = '';
                    	    for (var i = 0; i < bytes.length; i += 1) {
                    	        s += String.fromCharCode(bytes[i]);
                    	    }
                    
                    	    return s;
                    	}
                    
                    	var typeOffsets = {
                    	    byte: 1,
                    	    uShort: 2,
                    	    short: 2,
                    	    uLong: 4,
                    	    fixed: 4,
                    	    longDateTime: 8,
                    	    tag: 4
                    	};
                    
                    	// A stateful parser that changes the offset whenever a value is retrieved.
                    	// The data is a DataView.
                    	function Parser(data, offset) {
                    	    this.data = data;
                    	    this.offset = offset;
                    	    this.relativeOffset = 0;
                    	}
                    
                    	Parser.prototype.parseByte = function() {
                    	    var v = this.data.getUint8(this.offset + this.relativeOffset);
                    	    this.relativeOffset += 1;
                    	    return v;
                    	};
                    
                    	Parser.prototype.parseChar = function() {
                    	    var v = this.data.getInt8(this.offset + this.relativeOffset);
                    	    this.relativeOffset += 1;
                    	    return v;
                    	};
                    
                    	Parser.prototype.parseCard8 = Parser.prototype.parseByte;
                    
                    	Parser.prototype.parseUShort = function() {
                    	    var v = this.data.getUint16(this.offset + this.relativeOffset);
                    	    this.relativeOffset += 2;
                    	    return v;
                    	};
                    
                    	Parser.prototype.parseCard16 = Parser.prototype.parseUShort;
                    	Parser.prototype.parseSID = Parser.prototype.parseUShort;
                    	Parser.prototype.parseOffset16 = Parser.prototype.parseUShort;
                    
                    	Parser.prototype.parseShort = function() {
                    	    var v = this.data.getInt16(this.offset + this.relativeOffset);
                    	    this.relativeOffset += 2;
                    	    return v;
                    	};
                    
                    	Parser.prototype.parseF2Dot14 = function() {
                    	    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
                    	    this.relativeOffset += 2;
                    	    return v;
                    	};
                    
                    	Parser.prototype.parseULong = function() {
                    	    var v = getULong(this.data, this.offset + this.relativeOffset);
                    	    this.relativeOffset += 4;
                    	    return v;
                    	};
                    
                    	Parser.prototype.parseOffset32 = Parser.prototype.parseULong;
                    
                    	Parser.prototype.parseFixed = function() {
                    	    var v = getFixed(this.data, this.offset + this.relativeOffset);
                    	    this.relativeOffset += 4;
                    	    return v;
                    	};
                    
                    	Parser.prototype.parseString = function(length) {
                    	    var dataView = this.data;
                    	    var offset = this.offset + this.relativeOffset;
                    	    var string = '';
                    	    this.relativeOffset += length;
                    	    for (var i = 0; i < length; i++) {
                    	        string += String.fromCharCode(dataView.getUint8(offset + i));
                    	    }
                    
                    	    return string;
                    	};
                    
                    	Parser.prototype.parseTag = function() {
                    	    return this.parseString(4);
                    	};
                    
                    	// LONGDATETIME is a 64-bit integer.
                    	// JavaScript and unix timestamps traditionally use 32 bits, so we
                    	// only take the last 32 bits.
                    	// + Since until 2038 those bits will be filled by zeros we can ignore them.
                    	Parser.prototype.parseLongDateTime = function() {
                    	    var v = getULong(this.data, this.offset + this.relativeOffset + 4);
                    	    // Subtract seconds between 01/01/1904 and 01/01/1970
                    	    // to convert Apple Mac timestamp to Standard Unix timestamp
                    	    v -= 2082844800;
                    	    this.relativeOffset += 8;
                    	    return v;
                    	};
                    
                    	Parser.prototype.parseVersion = function(minorBase) {
                    	    var major = getUShort(this.data, this.offset + this.relativeOffset);
                    
                    	    // How to interpret the minor version is very vague in the spec. 0x5000 is 5, 0x1000 is 1
                    	    // Default returns the correct number if minor = 0xN000 where N is 0-9
                    	    // Set minorBase to 1 for tables that use minor = N where N is 0-9
                    	    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);
                    	    this.relativeOffset += 4;
                    	    if (minorBase === undefined) { minorBase = 0x1000; }
                    	    return major + minor / minorBase / 10;
                    	};
                    
                    	Parser.prototype.skip = function(type, amount) {
                    	    if (amount === undefined) {
                    	        amount = 1;
                    	    }
                    
                    	    this.relativeOffset += typeOffsets[type] * amount;
                    	};
                    
                    	///// Parsing lists and records ///////////////////////////////
                    
                    	// Parse a list of 32 bit unsigned integers.
                    	Parser.prototype.parseULongList = function(count) {
                    	    if (count === undefined) { count = this.parseULong(); }
                    	    var offsets = new Array(count);
                    	    var dataView = this.data;
                    	    var offset = this.offset + this.relativeOffset;
                    	    for (var i = 0; i < count; i++) {
                    	        offsets[i] = dataView.getUint32(offset);
                    	        offset += 4;
                    	    }
                    
                    	    this.relativeOffset += count * 4;
                    	    return offsets;
                    	};
                    
                    	// Parse a list of 16 bit unsigned integers. The length of the list can be read on the stream
                    	// or provided as an argument.
                    	Parser.prototype.parseOffset16List =
                    	Parser.prototype.parseUShortList = function(count) {
                    	    if (count === undefined) { count = this.parseUShort(); }
                    	    var offsets = new Array(count);
                    	    var dataView = this.data;
                    	    var offset = this.offset + this.relativeOffset;
                    	    for (var i = 0; i < count; i++) {
                    	        offsets[i] = dataView.getUint16(offset);
                    	        offset += 2;
                    	    }
                    
                    	    this.relativeOffset += count * 2;
                    	    return offsets;
                    	};
                    
                    	// Parses a list of 16 bit signed integers.
                    	Parser.prototype.parseShortList = function(count) {
                    	    var list = new Array(count);
                    	    var dataView = this.data;
                    	    var offset = this.offset + this.relativeOffset;
                    	    for (var i = 0; i < count; i++) {
                    	        list[i] = dataView.getInt16(offset);
                    	        offset += 2;
                    	    }
                    
                    	    this.relativeOffset += count * 2;
                    	    return list;
                    	};
                    
                    	// Parses a list of bytes.
                    	Parser.prototype.parseByteList = function(count) {
                    	    var list = new Array(count);
                    	    var dataView = this.data;
                    	    var offset = this.offset + this.relativeOffset;
                    	    for (var i = 0; i < count; i++) {
                    	        list[i] = dataView.getUint8(offset++);
                    	    }
                    
                    	    this.relativeOffset += count;
                    	    return list;
                    	};
                    
                    	/**
                    	 * Parse a list of items.
                    	 * Record count is optional, if omitted it is read from the stream.
                    	 * itemCallback is one of the Parser methods.
                    	 */
                    	Parser.prototype.parseList = function(count, itemCallback) {
                    	    var this$1 = this;
                    
                    	    if (!itemCallback) {
                    	        itemCallback = count;
                    	        count = this.parseUShort();
                    	    }
                    	    var list = new Array(count);
                    	    for (var i = 0; i < count; i++) {
                    	        list[i] = itemCallback.call(this$1);
                    	    }
                    	    return list;
                    	};
                    
                    	Parser.prototype.parseList32 = function(count, itemCallback) {
                    	    var this$1 = this;
                    
                    	    if (!itemCallback) {
                    	        itemCallback = count;
                    	        count = this.parseULong();
                    	    }
                    	    var list = new Array(count);
                    	    for (var i = 0; i < count; i++) {
                    	        list[i] = itemCallback.call(this$1);
                    	    }
                    	    return list;
                    	};
                    
                    	/**
                    	 * Parse a list of records.
                    	 * Record count is optional, if omitted it is read from the stream.
                    	 * Example of recordDescription: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
                    	 */
                    	Parser.prototype.parseRecordList = function(count, recordDescription) {
                    	    var this$1 = this;
                    
                    	    // If the count argument is absent, read it in the stream.
                    	    if (!recordDescription) {
                    	        recordDescription = count;
                    	        count = this.parseUShort();
                    	    }
                    	    var records = new Array(count);
                    	    var fields = Object.keys(recordDescription);
                    	    for (var i = 0; i < count; i++) {
                    	        var rec = {};
                    	        for (var j = 0; j < fields.length; j++) {
                    	            var fieldName = fields[j];
                    	            var fieldType = recordDescription[fieldName];
                    	            rec[fieldName] = fieldType.call(this$1);
                    	        }
                    	        records[i] = rec;
                    	    }
                    	    return records;
                    	};
                    
                    	Parser.prototype.parseRecordList32 = function(count, recordDescription) {
                    	    var this$1 = this;
                    
                    	    // If the count argument is absent, read it in the stream.
                    	    if (!recordDescription) {
                    	        recordDescription = count;
                    	        count = this.parseULong();
                    	    }
                    	    var records = new Array(count);
                    	    var fields = Object.keys(recordDescription);
                    	    for (var i = 0; i < count; i++) {
                    	        var rec = {};
                    	        for (var j = 0; j < fields.length; j++) {
                    	            var fieldName = fields[j];
                    	            var fieldType = recordDescription[fieldName];
                    	            rec[fieldName] = fieldType.call(this$1);
                    	        }
                    	        records[i] = rec;
                    	    }
                    	    return records;
                    	};
                    
                    	// Parse a data structure into an object
                    	// Example of description: { sequenceIndex: Parser.uShort, lookupListIndex: Parser.uShort }
                    	Parser.prototype.parseStruct = function(description) {
                    	    var this$1 = this;
                    
                    	    if (typeof description === 'function') {
                    	        return description.call(this);
                    	    } else {
                    	        var fields = Object.keys(description);
                    	        var struct = {};
                    	        for (var j = 0; j < fields.length; j++) {
                    	            var fieldName = fields[j];
                    	            var fieldType = description[fieldName];
                    	            struct[fieldName] = fieldType.call(this$1);
                    	        }
                    	        return struct;
                    	    }
                    	};
                    
                    	/**
                    	 * Parse a GPOS valueRecord
                    	 * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
                    	 * valueFormat is optional, if omitted it is read from the stream.
                    	 */
                    	Parser.prototype.parseValueRecord = function(valueFormat) {
                    	    if (valueFormat === undefined) {
                    	        valueFormat = this.parseUShort();
                    	    }
                    	    if (valueFormat === 0) {
                    	        // valueFormat2 in kerning pairs is most often 0
                    	        // in this case return undefined instead of an empty object, to save space
                    	        return;
                    	    }
                    	    var valueRecord = {};
                    
                    	    if (valueFormat & 0x0001) { valueRecord.xPlacement = this.parseShort(); }
                    	    if (valueFormat & 0x0002) { valueRecord.yPlacement = this.parseShort(); }
                    	    if (valueFormat & 0x0004) { valueRecord.xAdvance = this.parseShort(); }
                    	    if (valueFormat & 0x0008) { valueRecord.yAdvance = this.parseShort(); }
                    
                    	    // Device table (non-variable font) / VariationIndex table (variable font) not supported
                    	    // https://docs.microsoft.com/fr-fr/typography/opentype/spec/chapter2#devVarIdxTbls
                    	    if (valueFormat & 0x0010) { valueRecord.xPlaDevice = undefined; this.parseShort(); }
                    	    if (valueFormat & 0x0020) { valueRecord.yPlaDevice = undefined; this.parseShort(); }
                    	    if (valueFormat & 0x0040) { valueRecord.xAdvDevice = undefined; this.parseShort(); }
                    	    if (valueFormat & 0x0080) { valueRecord.yAdvDevice = undefined; this.parseShort(); }
                    
                    	    return valueRecord;
                    	};
                    
                    	/**
                    	 * Parse a list of GPOS valueRecords
                    	 * https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#value-record
                    	 * valueFormat and valueCount are read from the stream.
                    	 */
                    	Parser.prototype.parseValueRecordList = function() {
                    	    var this$1 = this;
                    
                    	    var valueFormat = this.parseUShort();
                    	    var valueCount = this.parseUShort();
                    	    var values = new Array(valueCount);
                    	    for (var i = 0; i < valueCount; i++) {
                    	        values[i] = this$1.parseValueRecord(valueFormat);
                    	    }
                    	    return values;
                    	};
                    
                    	Parser.prototype.parsePointer = function(description) {
                    	    var structOffset = this.parseOffset16();
                    	    if (structOffset > 0) {
                    	        // NULL offset => return undefined
                    	        return new Parser(this.data, this.offset + structOffset).parseStruct(description);
                    	    }
                    	    return undefined;
                    	};
                    
                    	Parser.prototype.parsePointer32 = function(description) {
                    	    var structOffset = this.parseOffset32();
                    	    if (structOffset > 0) {
                    	        // NULL offset => return undefined
                    	        return new Parser(this.data, this.offset + structOffset).parseStruct(description);
                    	    }
                    	    return undefined;
                    	};
                    
                    	/**
                    	 * Parse a list of offsets to lists of 16-bit integers,
                    	 * or a list of offsets to lists of offsets to any kind of items.
                    	 * If itemCallback is not provided, a list of list of UShort is assumed.
                    	 * If provided, itemCallback is called on each item and must parse the item.
                    	 * See examples in tables/gsub.js
                    	 */
                    	Parser.prototype.parseListOfLists = function(itemCallback) {
                    	    var this$1 = this;
                    
                    	    var offsets = this.parseOffset16List();
                    	    var count = offsets.length;
                    	    var relativeOffset = this.relativeOffset;
                    	    var list = new Array(count);
                    	    for (var i = 0; i < count; i++) {
                    	        var start = offsets[i];
                    	        if (start === 0) {
                    	            // NULL offset
                    	            // Add i as owned property to list. Convenient with assert.
                    	            list[i] = undefined;
                    	            continue;
                    	        }
                    	        this$1.relativeOffset = start;
                    	        if (itemCallback) {
                    	            var subOffsets = this$1.parseOffset16List();
                    	            var subList = new Array(subOffsets.length);
                    	            for (var j = 0; j < subOffsets.length; j++) {
                    	                this$1.relativeOffset = start + subOffsets[j];
                    	                subList[j] = itemCallback.call(this$1);
                    	            }
                    	            list[i] = subList;
                    	        } else {
                    	            list[i] = this$1.parseUShortList();
                    	        }
                    	    }
                    	    this.relativeOffset = relativeOffset;
                    	    return list;
                    	};
                    
                    	///// Complex tables parsing //////////////////////////////////
                    
                    	// Parse a coverage table in a GSUB, GPOS or GDEF table.
                    	// https://www.microsoft.com/typography/OTSPEC/chapter2.htm
                    	// parser.offset must point to the start of the table containing the coverage.
                    	Parser.prototype.parseCoverage = function() {
                    	    var this$1 = this;
                    
                    	    var startOffset = this.offset + this.relativeOffset;
                    	    var format = this.parseUShort();
                    	    var count = this.parseUShort();
                    	    if (format === 1) {
                    	        return {
                    	            format: 1,
                    	            glyphs: this.parseUShortList(count)
                    	        };
                    	    } else if (format === 2) {
                    	        var ranges = new Array(count);
                    	        for (var i = 0; i < count; i++) {
                    	            ranges[i] = {
                    	                start: this$1.parseUShort(),
                    	                end: this$1.parseUShort(),
                    	                index: this$1.parseUShort()
                    	            };
                    	        }
                    	        return {
                    	            format: 2,
                    	            ranges: ranges
                    	        };
                    	    }
                    	    throw new Error('0x' + startOffset.toString(16) + ': Coverage format must be 1 or 2.');
                    	};
                    
                    	// Parse a Class Definition Table in a GSUB, GPOS or GDEF table.
                    	// https://www.microsoft.com/typography/OTSPEC/chapter2.htm
                    	Parser.prototype.parseClassDef = function() {
                    	    var startOffset = this.offset + this.relativeOffset;
                    	    var format = this.parseUShort();
                    	    if (format === 1) {
                    	        return {
                    	            format: 1,
                    	            startGlyph: this.parseUShort(),
                    	            classes: this.parseUShortList()
                    	        };
                    	    } else if (format === 2) {
                    	        return {
                    	            format: 2,
                    	            ranges: this.parseRecordList({
                    	                start: Parser.uShort,
                    	                end: Parser.uShort,
                    	                classId: Parser.uShort
                    	            })
                    	        };
                    	    }
                    	    throw new Error('0x' + startOffset.toString(16) + ': ClassDef format must be 1 or 2.');
                    	};
                    
                    	///// Static methods ///////////////////////////////////
                    	// These convenience methods can be used as callbacks and should be called with "this" context set to a Parser instance.
                    
                    	Parser.list = function(count, itemCallback) {
                    	    return function() {
                    	        return this.parseList(count, itemCallback);
                    	    };
                    	};
                    
                    	Parser.list32 = function(count, itemCallback) {
                    	    return function() {
                    	        return this.parseList32(count, itemCallback);
                    	    };
                    	};
                    
                    	Parser.recordList = function(count, recordDescription) {
                    	    return function() {
                    	        return this.parseRecordList(count, recordDescription);
                    	    };
                    	};
                    
                    	Parser.recordList32 = function(count, recordDescription) {
                    	    return function() {
                    	        return this.parseRecordList32(count, recordDescription);
                    	    };
                    	};
                    
                    	Parser.pointer = function(description) {
                    	    return function() {
                    	        return this.parsePointer(description);
                    	    };
                    	};
                    
                    	Parser.pointer32 = function(description) {
                    	    return function() {
                    	        return this.parsePointer32(description);
                    	    };
                    	};
                    
                    	Parser.tag = Parser.prototype.parseTag;
                    	Parser.byte = Parser.prototype.parseByte;
                    	Parser.uShort = Parser.offset16 = Parser.prototype.parseUShort;
                    	Parser.uShortList = Parser.prototype.parseUShortList;
                    	Parser.uLong = Parser.offset32 = Parser.prototype.parseULong;
                    	Parser.uLongList = Parser.prototype.parseULongList;
                    	Parser.struct = Parser.prototype.parseStruct;
                    	Parser.coverage = Parser.prototype.parseCoverage;
                    	Parser.classDef = Parser.prototype.parseClassDef;
                    
                    	///// Script, Feature, Lookup lists ///////////////////////////////////////////////
                    	// https://www.microsoft.com/typography/OTSPEC/chapter2.htm
                    
                    	var langSysTable = {
                    	    reserved: Parser.uShort,
                    	    reqFeatureIndex: Parser.uShort,
                    	    featureIndexes: Parser.uShortList
                    	};
                    
                    	Parser.prototype.parseScriptList = function() {
                    	    return this.parsePointer(Parser.recordList({
                    	        tag: Parser.tag,
                    	        script: Parser.pointer({
                    	            defaultLangSys: Parser.pointer(langSysTable),
                    	            langSysRecords: Parser.recordList({
                    	                tag: Parser.tag,
                    	                langSys: Parser.pointer(langSysTable)
                    	            })
                    	        })
                    	    })) || [];
                    	};
                    
                    	Parser.prototype.parseFeatureList = function() {
                    	    return this.parsePointer(Parser.recordList({
                    	        tag: Parser.tag,
                    	        feature: Parser.pointer({
                    	            featureParams: Parser.offset16,
                    	            lookupListIndexes: Parser.uShortList
                    	        })
                    	    })) || [];
                    	};
                    
                    	Parser.prototype.parseLookupList = function(lookupTableParsers) {
                    	    return this.parsePointer(Parser.list(Parser.pointer(function() {
                    	        var lookupType = this.parseUShort();
                    	        check.argument(1 <= lookupType && lookupType <= 9, 'GPOS/GSUB lookup type ' + lookupType + ' unknown.');
                    	        var lookupFlag = this.parseUShort();
                    	        var useMarkFilteringSet = lookupFlag & 0x10;
                    	        return {
                    	            lookupType: lookupType,
                    	            lookupFlag: lookupFlag,
                    	            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),
                    	            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : undefined
                    	        };
                    	    }))) || [];
                    	};
                    
                    	Parser.prototype.parseFeatureVariationsList = function() {
                    	    return this.parsePointer32(function() {
                    	        var majorVersion = this.parseUShort();
                    	        var minorVersion = this.parseUShort();
                    	        check.argument(majorVersion === 1 && minorVersion < 1, 'GPOS/GSUB feature variations table unknown.');
                    	        var featureVariations = this.parseRecordList32({
                    	            conditionSetOffset: Parser.offset32,
                    	            featureTableSubstitutionOffset: Parser.offset32
                    	        });
                    	        return featureVariations;
                    	    }) || [];
                    	};
                    
                    	var parse = {
                    	    getByte: getByte,
                    	    getCard8: getByte,
                    	    getUShort: getUShort,
                    	    getCard16: getUShort,
                    	    getShort: getShort,
                    	    getULong: getULong,
                    	    getFixed: getFixed,
                    	    getTag: getTag,
                    	    getOffset: getOffset,
                    	    getBytes: getBytes,
                    	    bytesToString: bytesToString,
                    	    Parser: Parser,
                    	};
                    
                    	// The `cmap` table stores the mappings from characters to glyphs.
                    
                    	function parseCmapTableFormat12(cmap, p) {
                    	    //Skip reserved.
                    	    p.parseUShort();
                    
                    	    // Length in bytes of the sub-tables.
                    	    cmap.length = p.parseULong();
                    	    cmap.language = p.parseULong();
                    
                    	    var groupCount;
                    	    cmap.groupCount = groupCount = p.parseULong();
                    	    cmap.glyphIndexMap = {};
                    
                    	    for (var i = 0; i < groupCount; i += 1) {
                    	        var startCharCode = p.parseULong();
                    	        var endCharCode = p.parseULong();
                    	        var startGlyphId = p.parseULong();
                    
                    	        for (var c = startCharCode; c <= endCharCode; c += 1) {
                    	            cmap.glyphIndexMap[c] = startGlyphId;
                    	            startGlyphId++;
                    	        }
                    	    }
                    	}
                    
                    	function parseCmapTableFormat4(cmap, p, data, start, offset) {
                    	    // Length in bytes of the sub-tables.
                    	    cmap.length = p.parseUShort();
                    	    cmap.language = p.parseUShort();
                    
                    	    // segCount is stored x 2.
                    	    var segCount;
                    	    cmap.segCount = segCount = p.parseUShort() >> 1;
                    
                    	    // Skip searchRange, entrySelector, rangeShift.
                    	    p.skip('uShort', 3);
                    
                    	    // The "unrolled" mapping from character codes to glyph indices.
                    	    cmap.glyphIndexMap = {};
                    	    var endCountParser = new parse.Parser(data, start + offset + 14);
                    	    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);
                    	    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);
                    	    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);
                    	    var glyphIndexOffset = start + offset + 16 + segCount * 8;
                    	    for (var i = 0; i < segCount - 1; i += 1) {
                    	        var glyphIndex = (void 0);
                    	        var endCount = endCountParser.parseUShort();
                    	        var startCount = startCountParser.parseUShort();
                    	        var idDelta = idDeltaParser.parseShort();
                    	        var idRangeOffset = idRangeOffsetParser.parseUShort();
                    	        for (var c = startCount; c <= endCount; c += 1) {
                    	            if (idRangeOffset !== 0) {
                    	                // The idRangeOffset is relative to the current position in the idRangeOffset array.
                    	                // Take the current offset in the idRangeOffset array.
                    	                glyphIndexOffset = (idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2);
                    
                    	                // Add the value of the idRangeOffset, which will move us into the glyphIndex array.
                    	                glyphIndexOffset += idRangeOffset;
                    
                    	                // Then add the character index of the current segment, multiplied by 2 for USHORTs.
                    	                glyphIndexOffset += (c - startCount) * 2;
                    	                glyphIndex = parse.getUShort(data, glyphIndexOffset);
                    	                if (glyphIndex !== 0) {
                    	                    glyphIndex = (glyphIndex + idDelta) & 0xFFFF;
                    	                }
                    	            } else {
                    	                glyphIndex = (c + idDelta) & 0xFFFF;
                    	            }
                    
                    	            cmap.glyphIndexMap[c] = glyphIndex;
                    	        }
                    	    }
                    	}
                    
                    	// Parse the `cmap` table. This table stores the mappings from characters to glyphs.
                    	// There are many available formats, but we only support the Windows format 4 and 12.
                    	// This function returns a `CmapEncoding` object or null if no supported format could be found.
                    	function parseCmapTable(data, start) {
                    	    var cmap = {};
                    	    cmap.version = parse.getUShort(data, start);
                    	    check.argument(cmap.version === 0, 'cmap table version should be 0.');
                    
                    	    // The cmap table can contain many sub-tables, each with their own format.
                    	    // We're only interested in a "platform 0" (Unicode format) and "platform 3" (Windows format) table.
                    	    cmap.numTables = parse.getUShort(data, start + 2);
                    	    var offset = -1;
                    	    for (var i = cmap.numTables - 1; i >= 0; i -= 1) {
                    	        var platformId = parse.getUShort(data, start + 4 + (i * 8));
                    	        var encodingId = parse.getUShort(data, start + 4 + (i * 8) + 2);
                    	        if ((platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10)) ||
                    	            (platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4))) {
                    	            offset = parse.getULong(data, start + 4 + (i * 8) + 4);
                    	            break;
                    	        }
                    	    }
                    
                    	    if (offset === -1) {
                    	        // There is no cmap table in the font that we support.
                    	        throw new Error('No valid cmap sub-tables found.');
                    	    }
                    
                    	    var p = new parse.Parser(data, start + offset);
                    	    cmap.format = p.parseUShort();
                    
                    	    if (cmap.format === 12) {
                    	        parseCmapTableFormat12(cmap, p);
                    	    } else if (cmap.format === 4) {
                    	        parseCmapTableFormat4(cmap, p, data, start, offset);
                    	    } else {
                    	        throw new Error('Only format 4 and 12 cmap tables are supported (found format ' + cmap.format + ').');
                    	    }
                    
                    	    return cmap;
                    	}
                    
                    	function addSegment(t, code, glyphIndex) {
                    	    t.segments.push({
                    	        end: code,
                    	        start: code,
                    	        delta: -(code - glyphIndex),
                    	        offset: 0,
                    	        glyphIndex: glyphIndex
                    	    });
                    	}
                    
                    	function addTerminatorSegment(t) {
                    	    t.segments.push({
                    	        end: 0xFFFF,
                    	        start: 0xFFFF,
                    	        delta: 1,
                    	        offset: 0
                    	    });
                    	}
                    
                    	// Make cmap table, format 4 by default, 12 if needed only
                    	function makeCmapTable(glyphs) {
                    	    // Plan 0 is the base Unicode Plan but emojis, for example are on another plan, and needs cmap 12 format (with 32bit)
                    	    var isPlan0Only = true;
                    	    var i;
                    
                    	    // Check if we need to add cmap format 12 or if format 4 only is fine
                    	    for (i = glyphs.length - 1; i > 0; i -= 1) {
                    	        var g = glyphs.get(i);
                    	        if (g.unicode > 65535) {
                    	            console.log('Adding CMAP format 12 (needed!)');
                    	            isPlan0Only = false;
                    	            break;
                    	        }
                    	    }
                    
                    	    var cmapTable = [
                    	        {name: 'version', type: 'USHORT', value: 0},
                    	        {name: 'numTables', type: 'USHORT', value: isPlan0Only ? 1 : 2},
                    
                    	        // CMAP 4 header
                    	        {name: 'platformID', type: 'USHORT', value: 3},
                    	        {name: 'encodingID', type: 'USHORT', value: 1},
                    	        {name: 'offset', type: 'ULONG', value: isPlan0Only ? 12 : (12 + 8)}
                    	    ];
                    
                    	    if (!isPlan0Only)
                    	        { cmapTable = cmapTable.concat([
                    	            // CMAP 12 header
                    	            {name: 'cmap12PlatformID', type: 'USHORT', value: 3}, // We encode only for PlatformID = 3 (Windows) because it is supported everywhere
                    	            {name: 'cmap12EncodingID', type: 'USHORT', value: 10},
                    	            {name: 'cmap12Offset', type: 'ULONG', value: 0}
                    	        ]); }
                    
                    	    cmapTable = cmapTable.concat([
                    	        // CMAP 4 Subtable
                    	        {name: 'format', type: 'USHORT', value: 4},
                    	        {name: 'cmap4Length', type: 'USHORT', value: 0},
                    	        {name: 'language', type: 'USHORT', value: 0},
                    	        {name: 'segCountX2', type: 'USHORT', value: 0},
                    	        {name: 'searchRange', type: 'USHORT', value: 0},
                    	        {name: 'entrySelector', type: 'USHORT', value: 0},
                    	        {name: 'rangeShift', type: 'USHORT', value: 0}
                    	    ]);
                    
                    	    var t = new table.Table('cmap', cmapTable);
                    
                    	    t.segments = [];
                    	    for (i = 0; i < glyphs.length; i += 1) {
                    	        var glyph = glyphs.get(i);
                    	        for (var j = 0; j < glyph.unicodes.length; j += 1) {
                    	            addSegment(t, glyph.unicodes[j], i);
                    	        }
                    
                    	        t.segments = t.segments.sort(function (a, b) {
                    	            return a.start - b.start;
                    	        });
                    	    }
                    
                    	    addTerminatorSegment(t);
                    
                    	    var segCount = t.segments.length;
                    	    var segCountToRemove = 0;
                    
                    	    // CMAP 4
                    	    // Set up parallel segment arrays.
                    	    var endCounts = [];
                    	    var startCounts = [];
                    	    var idDeltas = [];
                    	    var idRangeOffsets = [];
                    	    var glyphIds = [];
                    
                    	    // CMAP 12
                    	    var cmap12Groups = [];
                    
                    	    // Reminder this loop is not following the specification at 100%
                    	    // The specification -> find suites of characters and make a group
                    	    // Here we're doing one group for each letter
                    	    // Doing as the spec can save 8 times (or more) space
                    	    for (i = 0; i < segCount; i += 1) {
                    	        var segment = t.segments[i];
                    
                    	        // CMAP 4
                    	        if (segment.end <= 65535 && segment.start <= 65535) {
                    	            endCounts = endCounts.concat({name: 'end_' + i, type: 'USHORT', value: segment.end});
                    	            startCounts = startCounts.concat({name: 'start_' + i, type: 'USHORT', value: segment.start});
                    	            idDeltas = idDeltas.concat({name: 'idDelta_' + i, type: 'SHORT', value: segment.delta});
                    	            idRangeOffsets = idRangeOffsets.concat({name: 'idRangeOffset_' + i, type: 'USHORT', value: segment.offset});
                    	            if (segment.glyphId !== undefined) {
                    	                glyphIds = glyphIds.concat({name: 'glyph_' + i, type: 'USHORT', value: segment.glyphId});
                    	            }
                    	        } else {
                    	            // Skip Unicode > 65535 (16bit unsigned max) for CMAP 4, will be added in CMAP 12
                    	            segCountToRemove += 1;
                    	        }
                    
                    	        // CMAP 12
                    	        // Skip Terminator Segment
                    	        if (!isPlan0Only && segment.glyphIndex !== undefined) {
                    	            cmap12Groups = cmap12Groups.concat({name: 'cmap12Start_' + i, type: 'ULONG', value: segment.start});
                    	            cmap12Groups = cmap12Groups.concat({name: 'cmap12End_' + i, type: 'ULONG', value: segment.end});
                    	            cmap12Groups = cmap12Groups.concat({name: 'cmap12Glyph_' + i, type: 'ULONG', value: segment.glyphIndex});
                    	        }
                    	    }
                    
                    	    // CMAP 4 Subtable
                    	    t.segCountX2 = (segCount - segCountToRemove) * 2;
                    	    t.searchRange = Math.pow(2, Math.floor(Math.log((segCount - segCountToRemove)) / Math.log(2))) * 2;
                    	    t.entrySelector = Math.log(t.searchRange / 2) / Math.log(2);
                    	    t.rangeShift = t.segCountX2 - t.searchRange;
                    
                    	    t.fields = t.fields.concat(endCounts);
                    	    t.fields.push({name: 'reservedPad', type: 'USHORT', value: 0});
                    	    t.fields = t.fields.concat(startCounts);
                    	    t.fields = t.fields.concat(idDeltas);
                    	    t.fields = t.fields.concat(idRangeOffsets);
                    	    t.fields = t.fields.concat(glyphIds);
                    
                    	    t.cmap4Length = 14 + // Subtable header
                    	        endCounts.length * 2 +
                    	        2 + // reservedPad
                    	        startCounts.length * 2 +
                    	        idDeltas.length * 2 +
                    	        idRangeOffsets.length * 2 +
                    	        glyphIds.length * 2;
                    
                    	    if (!isPlan0Only) {
                    	        // CMAP 12 Subtable
                    	        var cmap12Length = 16 + // Subtable header
                    	            cmap12Groups.length * 4;
                    
                    	        t.cmap12Offset = 12 + (2 * 2) + 4 + t.cmap4Length;
                    	        t.fields = t.fields.concat([
                    	            {name: 'cmap12Format', type: 'USHORT', value: 12},
                    	            {name: 'cmap12Reserved', type: 'USHORT', value: 0},
                    	            {name: 'cmap12Length', type: 'ULONG', value: cmap12Length},
                    	            {name: 'cmap12Language', type: 'ULONG', value: 0},
                    	            {name: 'cmap12nGroups', type: 'ULONG', value: cmap12Groups.length / 3}
                    	        ]);
                    
                    	        t.fields = t.fields.concat(cmap12Groups);
                    	    }
                    
                    	    return t;
                    	}
                    
                    	var cmap = { parse: parseCmapTable, make: makeCmapTable };
                    
                    	// Glyph encoding
                    
                    	var cffStandardStrings = [
                    	    '.notdef', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
                    	    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
                    	    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
                    	    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
                    	    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
                    	    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                    	    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', 'exclamdown', 'cent', 'sterling',
                    	    'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle', 'quotedblleft', 'guillemotleft',
                    	    'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'endash', 'dagger', 'daggerdbl', 'periodcentered', 'paragraph',
                    	    'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright', 'guillemotright', 'ellipsis', 'perthousand',
                    	    'questiondown', 'grave', 'acute', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'dieresis', 'ring',
                    	    'cedilla', 'hungarumlaut', 'ogonek', 'caron', 'emdash', 'AE', 'ordfeminine', 'Lslash', 'Oslash', 'OE',
                    	    'ordmasculine', 'ae', 'dotlessi', 'lslash', 'oslash', 'oe', 'germandbls', 'onesuperior', 'logicalnot', 'mu',
                    	    'trademark', 'Eth', 'onehalf', 'plusminus', 'Thorn', 'onequarter', 'divide', 'brokenbar', 'degree', 'thorn',
                    	    'threequarters', 'twosuperior', 'registered', 'minus', 'eth', 'multiply', 'threesuperior', 'copyright',
                    	    'Aacute', 'Acircumflex', 'Adieresis', 'Agrave', 'Aring', 'Atilde', 'Ccedilla', 'Eacute', 'Ecircumflex',
                    	    'Edieresis', 'Egrave', 'Iacute', 'Icircumflex', 'Idieresis', 'Igrave', 'Ntilde', 'Oacute', 'Ocircumflex',
                    	    'Odieresis', 'Ograve', 'Otilde', 'Scaron', 'Uacute', 'Ucircumflex', 'Udieresis', 'Ugrave', 'Yacute',
                    	    'Ydieresis', 'Zcaron', 'aacute', 'acircumflex', 'adieresis', 'agrave', 'aring', 'atilde', 'ccedilla', 'eacute',
                    	    'ecircumflex', 'edieresis', 'egrave', 'iacute', 'icircumflex', 'idieresis', 'igrave', 'ntilde', 'oacute',
                    	    'ocircumflex', 'odieresis', 'ograve', 'otilde', 'scaron', 'uacute', 'ucircumflex', 'udieresis', 'ugrave',
                    	    'yacute', 'ydieresis', 'zcaron', 'exclamsmall', 'Hungarumlautsmall', 'dollaroldstyle', 'dollarsuperior',
                    	    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', '266 ff', 'onedotenleader',
                    	    'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle', 'fouroldstyle', 'fiveoldstyle', 'sixoldstyle',
                    	    'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'commasuperior', 'threequartersemdash', 'periodsuperior',
                    	    'questionsmall', 'asuperior', 'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', 'isuperior', 'lsuperior',
                    	    'msuperior', 'nsuperior', 'osuperior', 'rsuperior', 'ssuperior', 'tsuperior', 'ff', 'ffi', 'ffl',
                    	    'parenleftinferior', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
                    	    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
                    	    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
                    	    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', 'exclamdownsmall',
                    	    'centoldstyle', 'Lslashsmall', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall', 'Brevesmall', 'Caronsmall',
                    	    'Dotaccentsmall', 'Macronsmall', 'figuredash', 'hypheninferior', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall',
                    	    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds',
                    	    'zerosuperior', 'foursuperior', 'fivesuperior', 'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior',
                    	    'zeroinferior', 'oneinferior', 'twoinferior', 'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior',
                    	    'seveninferior', 'eightinferior', 'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior',
                    	    'commainferior', 'Agravesmall', 'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall',
                    	    'Aringsmall', 'AEsmall', 'Ccedillasmall', 'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall',
                    	    'Igravesmall', 'Iacutesmall', 'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall',
                    	    'Oacutesmall', 'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall',
                    	    'Uacutesmall', 'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall', '001.000',
                    	    '001.001', '001.002', '001.003', 'Black', 'Bold', 'Book', 'Light', 'Medium', 'Regular', 'Roman', 'Semibold'];
                    
                    	var cffStandardEncoding = [
                    	    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
                    	    '', '', '', '', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent', 'ampersand', 'quoteright',
                    	    'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash', 'zero', 'one', 'two',
                    	    'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less', 'equal', 'greater',
                    	    'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
                    	    'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright', 'asciicircum', 'underscore',
                    	    'quoteleft', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                    	    'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde', '', '', '', '', '', '', '', '',
                    	    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
                    	    'exclamdown', 'cent', 'sterling', 'fraction', 'yen', 'florin', 'section', 'currency', 'quotesingle',
                    	    'quotedblleft', 'guillemotleft', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', '', 'endash', 'dagger',
                    	    'daggerdbl', 'periodcentered', '', 'paragraph', 'bullet', 'quotesinglbase', 'quotedblbase', 'quotedblright',
                    	    'guillemotright', 'ellipsis', 'perthousand', '', 'questiondown', '', 'grave', 'acute', 'circumflex', 'tilde',
                    	    'macron', 'breve', 'dotaccent', 'dieresis', '', 'ring', 'cedilla', '', 'hungarumlaut', 'ogonek', 'caron',
                    	    'emdash', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'AE', '', 'ordfeminine', '', '', '',
                    	    '', 'Lslash', 'Oslash', 'OE', 'ordmasculine', '', '', '', '', '', 'ae', '', '', '', 'dotlessi', '', '',
                    	    'lslash', 'oslash', 'oe', 'germandbls'];
                    
                    	var cffExpertEncoding = [
                    	    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
                    	    '', '', '', '', 'space', 'exclamsmall', 'Hungarumlautsmall', '', 'dollaroldstyle', 'dollarsuperior',
                    	    'ampersandsmall', 'Acutesmall', 'parenleftsuperior', 'parenrightsuperior', 'twodotenleader', 'onedotenleader',
                    	    'comma', 'hyphen', 'period', 'fraction', 'zerooldstyle', 'oneoldstyle', 'twooldstyle', 'threeoldstyle',
                    	    'fouroldstyle', 'fiveoldstyle', 'sixoldstyle', 'sevenoldstyle', 'eightoldstyle', 'nineoldstyle', 'colon',
                    	    'semicolon', 'commasuperior', 'threequartersemdash', 'periodsuperior', 'questionsmall', '', 'asuperior',
                    	    'bsuperior', 'centsuperior', 'dsuperior', 'esuperior', '', '', 'isuperior', '', '', 'lsuperior', 'msuperior',
                    	    'nsuperior', 'osuperior', '', '', 'rsuperior', 'ssuperior', 'tsuperior', '', 'ff', 'fi', 'fl', 'ffi', 'ffl',
                    	    'parenleftinferior', '', 'parenrightinferior', 'Circumflexsmall', 'hyphensuperior', 'Gravesmall', 'Asmall',
                    	    'Bsmall', 'Csmall', 'Dsmall', 'Esmall', 'Fsmall', 'Gsmall', 'Hsmall', 'Ismall', 'Jsmall', 'Ksmall', 'Lsmall',
                    	    'Msmall', 'Nsmall', 'Osmall', 'Psmall', 'Qsmall', 'Rsmall', 'Ssmall', 'Tsmall', 'Usmall', 'Vsmall', 'Wsmall',
                    	    'Xsmall', 'Ysmall', 'Zsmall', 'colonmonetary', 'onefitted', 'rupiah', 'Tildesmall', '', '', '', '', '', '', '',
                    	    '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',
                    	    'exclamdownsmall', 'centoldstyle', 'Lslashsmall', '', '', 'Scaronsmall', 'Zcaronsmall', 'Dieresissmall',
                    	    'Brevesmall', 'Caronsmall', '', 'Dotaccentsmall', '', '', 'Macronsmall', '', '', 'figuredash', 'hypheninferior',
                    	    '', '', 'Ogoneksmall', 'Ringsmall', 'Cedillasmall', '', '', '', 'onequarter', 'onehalf', 'threequarters',
                    	    'questiondownsmall', 'oneeighth', 'threeeighths', 'fiveeighths', 'seveneighths', 'onethird', 'twothirds', '',
                    	    '', 'zerosuperior', 'onesuperior', 'twosuperior', 'threesuperior', 'foursuperior', 'fivesuperior',
                    	    'sixsuperior', 'sevensuperior', 'eightsuperior', 'ninesuperior', 'zeroinferior', 'oneinferior', 'twoinferior',
                    	    'threeinferior', 'fourinferior', 'fiveinferior', 'sixinferior', 'seveninferior', 'eightinferior',
                    	    'nineinferior', 'centinferior', 'dollarinferior', 'periodinferior', 'commainferior', 'Agravesmall',
                    	    'Aacutesmall', 'Acircumflexsmall', 'Atildesmall', 'Adieresissmall', 'Aringsmall', 'AEsmall', 'Ccedillasmall',
                    	    'Egravesmall', 'Eacutesmall', 'Ecircumflexsmall', 'Edieresissmall', 'Igravesmall', 'Iacutesmall',
                    	    'Icircumflexsmall', 'Idieresissmall', 'Ethsmall', 'Ntildesmall', 'Ogravesmall', 'Oacutesmall',
                    	    'Ocircumflexsmall', 'Otildesmall', 'Odieresissmall', 'OEsmall', 'Oslashsmall', 'Ugravesmall', 'Uacutesmall',
                    	    'Ucircumflexsmall', 'Udieresissmall', 'Yacutesmall', 'Thornsmall', 'Ydieresissmall'];
                    
                    	var standardNames = [
                    	    '.notdef', '.null', 'nonmarkingreturn', 'space', 'exclam', 'quotedbl', 'numbersign', 'dollar', 'percent',
                    	    'ampersand', 'quotesingle', 'parenleft', 'parenright', 'asterisk', 'plus', 'comma', 'hyphen', 'period', 'slash',
                    	    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'colon', 'semicolon', 'less',
                    	    'equal', 'greater', 'question', 'at', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
                    	    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'bracketleft', 'backslash', 'bracketright',
                    	    'asciicircum', 'underscore', 'grave', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
                    	    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'braceleft', 'bar', 'braceright', 'asciitilde',
                    	    'Adieresis', 'Aring', 'Ccedilla', 'Eacute', 'Ntilde', 'Odieresis', 'Udieresis', 'aacute', 'agrave',
                    	    'acircumflex', 'adieresis', 'atilde', 'aring', 'ccedilla', 'eacute', 'egrave', 'ecircumflex', 'edieresis',
                    	    'iacute', 'igrave', 'icircumflex', 'idieresis', 'ntilde', 'oacute', 'ograve', 'ocircumflex', 'odieresis',
                    	    'otilde', 'uacute', 'ugrave', 'ucircumflex', 'udieresis', 'dagger', 'degree', 'cent', 'sterling', 'section',
                    	    'bullet', 'paragraph', 'germandbls', 'registered', 'copyright', 'trademark', 'acute', 'dieresis', 'notequal',
                    	    'AE', 'Oslash', 'infinity', 'plusminus', 'lessequal', 'greaterequal', 'yen', 'mu', 'partialdiff', 'summation',
                    	    'product', 'pi', 'integral', 'ordfeminine', 'ordmasculine', 'Omega', 'ae', 'oslash', 'questiondown',
                    	    'exclamdown', 'logicalnot', 'radical', 'florin', 'approxequal', 'Delta', 'guillemotleft', 'guillemotright',
                    	    'ellipsis', 'nonbreakingspace', 'Agrave', 'Atilde', 'Otilde', 'OE', 'oe', 'endash', 'emdash', 'quotedblleft',
                    	    'quotedblright', 'quoteleft', 'quoteright', 'divide', 'lozenge', 'ydieresis', 'Ydieresis', 'fraction',
                    	    'currency', 'guilsinglleft', 'guilsinglright', 'fi', 'fl', 'daggerdbl', 'periodcentered', 'quotesinglbase',
                    	    'quotedblbase', 'perthousand', 'Acircumflex', 'Ecircumflex', 'Aacute', 'Edieresis', 'Egrave', 'Iacute',
                    	    'Icircumflex', 'Idieresis', 'Igrave', 'Oacute', 'Ocircumflex', 'apple', 'Ograve', 'Uacute', 'Ucircumflex',
                    	    'Ugrave', 'dotlessi', 'circumflex', 'tilde', 'macron', 'breve', 'dotaccent', 'ring', 'cedilla', 'hungarumlaut',
                    	    'ogonek', 'caron', 'Lslash', 'lslash', 'Scaron', 'scaron', 'Zcaron', 'zcaron', 'brokenbar', 'Eth', 'eth',
                    	    'Yacute', 'yacute', 'Thorn', 'thorn', 'minus', 'multiply', 'onesuperior', 'twosuperior', 'threesuperior',
                    	    'onehalf', 'onequarter', 'threequarters', 'franc', 'Gbreve', 'gbreve', 'Idotaccent', 'Scedilla', 'scedilla',
                    	    'Cacute', 'cacute', 'Ccaron', 'ccaron', 'dcroat'];
                    
                    	/**
                    	 * This is the encoding used for fonts created from scratch.
                    	 * It loops through all glyphs and finds the appropriate unicode value.
                    	 * Since it's linear time, other encodings will be faster.
                    	 * @exports opentype.DefaultEncoding
                    	 * @class
                    	 * @constructor
                    	 * @param {opentype.Font}
                    	 */
                    	function DefaultEncoding(font) {
                    	    this.font = font;
                    	}
                    
                    	DefaultEncoding.prototype.charToGlyphIndex = function(c) {
                    	    var code = c.codePointAt(0);
                    	    var glyphs = this.font.glyphs;
                    	    if (glyphs) {
                    	        for (var i = 0; i < glyphs.length; i += 1) {
                    	            var glyph = glyphs.get(i);
                    	            for (var j = 0; j < glyph.unicodes.length; j += 1) {
                    	                if (glyph.unicodes[j] === code) {
                    	                    return i;
                    	                }
                    	            }
                    	        }
                    	    }
                    	    return null;
                    	};
                    
                    	/**
                    	 * @exports opentype.CmapEncoding
                    	 * @class
                    	 * @constructor
                    	 * @param {Object} cmap - a object with the cmap encoded data
                    	 */
                    	function CmapEncoding(cmap) {
                    	    this.cmap = cmap;
                    	}
                    
                    	/**
                    	 * @param  {string} c - the character
                    	 * @return {number} The glyph index.
                    	 */
                    	CmapEncoding.prototype.charToGlyphIndex = function(c) {
                    	    return this.cmap.glyphIndexMap[c.codePointAt(0)] || 0;
                    	};
                    
                    	/**
                    	 * @exports opentype.CffEncoding
                    	 * @class
                    	 * @constructor
                    	 * @param {string} encoding - The encoding
                    	 * @param {Array} charset - The character set.
                    	 */
                    	function CffEncoding(encoding, charset) {
                    	    this.encoding = encoding;
                    	    this.charset = charset;
                    	}
                    
                    	/**
                    	 * @param  {string} s - The character
                    	 * @return {number} The index.
                    	 */
                    	CffEncoding.prototype.charToGlyphIndex = function(s) {
                    	    var code = s.codePointAt(0);
                    	    var charName = this.encoding[code];
                    	    return this.charset.indexOf(charName);
                    	};
                    
                    	/**
                    	 * @exports opentype.GlyphNames
                    	 * @class
                    	 * @constructor
                    	 * @param {Object} post
                    	 */
                    	function GlyphNames(post) {
                    	    var this$1 = this;
                    
                    	    switch (post.version) {
                    	        case 1:
                    	            this.names = standardNames.slice();
                    	            break;
                    	        case 2:
                    	            this.names = new Array(post.numberOfGlyphs);
                    	            for (var i = 0; i < post.numberOfGlyphs; i++) {
                    	                if (post.glyphNameIndex[i] < standardNames.length) {
                    	                    this$1.names[i] = standardNames[post.glyphNameIndex[i]];
                    	                } else {
                    	                    this$1.names[i] = post.names[post.glyphNameIndex[i] - standardNames.length];
                    	                }
                    	            }
                    
                    	            break;
                    	        case 2.5:
                    	            this.names = new Array(post.numberOfGlyphs);
                    	            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
                    	                this$1.names[i$1] = standardNames[i$1 + post.glyphNameIndex[i$1]];
                    	            }
                    
                    	            break;
                    	        case 3:
                    	            this.names = [];
                    	            break;
                    	        default:
                    	            this.names = [];
                    	            break;
                    	    }
                    	}
                    
                    	/**
                    	 * Gets the index of a glyph by name.
                    	 * @param  {string} name - The glyph name
                    	 * @return {number} The index
                    	 */
                    	GlyphNames.prototype.nameToGlyphIndex = function(name) {
                    	    return this.names.indexOf(name);
                    	};
                    
                    	/**
                    	 * @param  {number} gid
                    	 * @return {string}
                    	 */
                    	GlyphNames.prototype.glyphIndexToName = function(gid) {
                    	    return this.names[gid];
                    	};
                    
                    	/**
                    	 * @alias opentype.addGlyphNames
                    	 * @param {opentype.Font}
                    	 */
                    	function addGlyphNames(font) {
                    	    var glyph;
                    	    var glyphIndexMap = font.tables.cmap.glyphIndexMap;
                    	    var charCodes = Object.keys(glyphIndexMap);
                    
                    	    for (var i = 0; i < charCodes.length; i += 1) {
                    	        var c = charCodes[i];
                    	        var glyphIndex = glyphIndexMap[c];
                    	        glyph = font.glyphs.get(glyphIndex);
                    	        glyph.addUnicode(parseInt(c));
                    	    }
                    
                    	    for (var i$1 = 0; i$1 < font.glyphs.length; i$1 += 1) {
                    	        glyph = font.glyphs.get(i$1);
                    	        if (font.cffEncoding) {
                    	            if (font.isCIDFont) {
                    	                glyph.name = 'gid' + i$1;
                    	            } else {
                    	                glyph.name = font.cffEncoding.charset[i$1];
                    	            }
                    	        } else if (font.glyphNames.names) {
                    	            glyph.name = font.glyphNames.glyphIndexToName(i$1);
                    	        }
                    	    }
                    	}
                    
                    	// Drawing utility functions.
                    
                    	// Draw a line on the given context from point `x1,y1` to point `x2,y2`.
                    	function line(ctx, x1, y1, x2, y2) {
                    	    ctx.beginPath();
                    	    ctx.moveTo(x1, y1);
                    	    ctx.lineTo(x2, y2);
                    	    ctx.stroke();
                    	}
                    
                    	var draw = { line: line };
                    
                    	// The Glyph object
                    	// import glyf from './tables/glyf' Can't be imported here, because it's a circular dependency
                    
                    	function getPathDefinition(glyph, path) {
                    	    var _path = path || new Path();
                    	    return {
                    	        configurable: true,
                    
                    	        get: function() {
                    	            if (typeof _path === 'function') {
                    	                _path = _path();
                    	            }
                    
                    	            return _path;
                    	        },
                    
                    	        set: function(p) {
                    	            _path = p;
                    	        }
                    	    };
                    	}
                    	/**
                    	 * @typedef GlyphOptions
                    	 * @type Object
                    	 * @property {string} [name] - The glyph name
                    	 * @property {number} [unicode]
                    	 * @property {Array} [unicodes]
                    	 * @property {number} [xMin]
                    	 * @property {number} [yMin]
                    	 * @property {number} [xMax]
                    	 * @property {number} [yMax]
                    	 * @property {number} [advanceWidth]
                    	 */
                    
                    	// A Glyph is an individual mark that often corresponds to a character.
                    	// Some glyphs, such as ligatures, are a combination of many characters.
                    	// Glyphs are the basic building blocks of a font.
                    	//
                    	// The `Glyph` class contains utility methods for drawing the path and its points.
                    	/**
                    	 * @exports opentype.Glyph
                    	 * @class
                    	 * @param {GlyphOptions}
                    	 * @constructor
                    	 */
                    	function Glyph(options) {
                    	    // By putting all the code on a prototype function (which is only declared once)
                    	    // we reduce the memory requirements for larger fonts by some 2%
                    	    this.bindConstructorValues(options);
                    	}
                    
                    	/**
                    	 * @param  {GlyphOptions}
                    	 */
                    	Glyph.prototype.bindConstructorValues = function(options) {
                    	    this.index = options.index || 0;
                    
                    	    // These three values cannot be deferred for memory optimization:
                    	    this.name = options.name || null;
                    	    this.unicode = options.unicode || undefined;
                    	    this.unicodes = options.unicodes || options.unicode !== undefined ? [options.unicode] : [];
                    
                    	    // But by binding these values only when necessary, we reduce can
                    	    // the memory requirements by almost 3% for larger fonts.
                    	    if (options.xMin) {
                    	        this.xMin = options.xMin;
                    	    }
                    
                    	    if (options.yMin) {
                    	        this.yMin = options.yMin;
                    	    }
                    
                    	    if (options.xMax) {
                    	        this.xMax = options.xMax;
                    	    }
                    
                    	    if (options.yMax) {
                    	        this.yMax = options.yMax;
                    	    }
                    
                    	    if (options.advanceWidth) {
                    	        this.advanceWidth = options.advanceWidth;
                    	    }
                    
                    	    // The path for a glyph is the most memory intensive, and is bound as a value
                    	    // with a getter/setter to ensure we actually do path parsing only once the
                    	    // path is actually needed by anything.
                    	    Object.defineProperty(this, 'path', getPathDefinition(this, options.path));
                    	};
                    
                    	/**
                    	 * @param {number}
                    	 */
                    	Glyph.prototype.addUnicode = function(unicode) {
                    	    if (this.unicodes.length === 0) {
                    	        this.unicode = unicode;
                    	    }
                    
                    	    this.unicodes.push(unicode);
                    	};
                    
                    	/**
                    	 * Calculate the minimum bounding box for this glyph.
                    	 * @return {opentype.BoundingBox}
                    	 */
                    	Glyph.prototype.getBoundingBox = function() {
                    	    return this.path.getBoundingBox();
                    	};
                    
                    	/**
                    	 * Convert the glyph to a Path we can draw on a drawing context.
                    	 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param  {Object=} options - xScale, yScale to stretch the glyph.
                    	 * @param  {opentype.Font} if hinting is to be used, the font
                    	 * @return {opentype.Path}
                    	 */
                    	Glyph.prototype.getPath = function(x, y, fontSize, options, font) {
                    	    x = x !== undefined ? x : 0;
                    	    y = y !== undefined ? y : 0;
                    	    fontSize = fontSize !== undefined ? fontSize : 72;
                    	    var commands;
                    	    var hPoints;
                    	    if (!options) { options = { }; }
                    	    var xScale = options.xScale;
                    	    var yScale = options.yScale;
                    
                    	    if (options.hinting && font && font.hinting) {
                    	        // in case of hinting, the hinting engine takes care
                    	        // of scaling the points (not the path) before hinting.
                    	        hPoints = this.path && font.hinting.exec(this, fontSize);
                    	        // in case the hinting engine failed hPoints is undefined
                    	        // and thus reverts to plain rending
                    	    }
                    
                    	    if (hPoints) {
                    	        // Call font.hinting.getCommands instead of `glyf.getPath(hPoints).commands` to avoid a circular dependency
                    	        commands = font.hinting.getCommands(hPoints);
                    	        x = Math.round(x);
                    	        y = Math.round(y);
                    	        // TODO in case of hinting xyScaling is not yet supported
                    	        xScale = yScale = 1;
                    	    } else {
                    	        commands = this.path.commands;
                    	        var scale = 1 / this.path.unitsPerEm * fontSize;
                    	        if (xScale === undefined) { xScale = scale; }
                    	        if (yScale === undefined) { yScale = scale; }
                    	    }
                    
                    	    var p = new Path();
                    	    for (var i = 0; i < commands.length; i += 1) {
                    	        var cmd = commands[i];
                    	        if (cmd.type === 'M') {
                    	            p.moveTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
                    	        } else if (cmd.type === 'L') {
                    	            p.lineTo(x + (cmd.x * xScale), y + (-cmd.y * yScale));
                    	        } else if (cmd.type === 'Q') {
                    	            p.quadraticCurveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                    	                               x + (cmd.x * xScale), y + (-cmd.y * yScale));
                    	        } else if (cmd.type === 'C') {
                    	            p.curveTo(x + (cmd.x1 * xScale), y + (-cmd.y1 * yScale),
                    	                      x + (cmd.x2 * xScale), y + (-cmd.y2 * yScale),
                    	                      x + (cmd.x * xScale), y + (-cmd.y * yScale));
                    	        } else if (cmd.type === 'Z') {
                    	            p.closePath();
                    	        }
                    	    }
                    
                    	    return p;
                    	};
                    
                    	/**
                    	 * Split the glyph into contours.
                    	 * This function is here for backwards compatibility, and to
                    	 * provide raw access to the TrueType glyph outlines.
                    	 * @return {Array}
                    	 */
                    	Glyph.prototype.getContours = function() {
                    	    var this$1 = this;
                    
                    	    if (this.points === undefined) {
                    	        return [];
                    	    }
                    
                    	    var contours = [];
                    	    var currentContour = [];
                    	    for (var i = 0; i < this.points.length; i += 1) {
                    	        var pt = this$1.points[i];
                    	        currentContour.push(pt);
                    	        if (pt.lastPointOfContour) {
                    	            contours.push(currentContour);
                    	            currentContour = [];
                    	        }
                    	    }
                    
                    	    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
                    	    return contours;
                    	};
                    
                    	/**
                    	 * Calculate the xMin/yMin/xMax/yMax/lsb/rsb for a Glyph.
                    	 * @return {Object}
                    	 */
                    	Glyph.prototype.getMetrics = function() {
                    	    var commands = this.path.commands;
                    	    var xCoords = [];
                    	    var yCoords = [];
                    	    for (var i = 0; i < commands.length; i += 1) {
                    	        var cmd = commands[i];
                    	        if (cmd.type !== 'Z') {
                    	            xCoords.push(cmd.x);
                    	            yCoords.push(cmd.y);
                    	        }
                    
                    	        if (cmd.type === 'Q' || cmd.type === 'C') {
                    	            xCoords.push(cmd.x1);
                    	            yCoords.push(cmd.y1);
                    	        }
                    
                    	        if (cmd.type === 'C') {
                    	            xCoords.push(cmd.x2);
                    	            yCoords.push(cmd.y2);
                    	        }
                    	    }
                    
                    	    var metrics = {
                    	        xMin: Math.min.apply(null, xCoords),
                    	        yMin: Math.min.apply(null, yCoords),
                    	        xMax: Math.max.apply(null, xCoords),
                    	        yMax: Math.max.apply(null, yCoords),
                    	        leftSideBearing: this.leftSideBearing
                    	    };
                    
                    	    if (!isFinite(metrics.xMin)) {
                    	        metrics.xMin = 0;
                    	    }
                    
                    	    if (!isFinite(metrics.xMax)) {
                    	        metrics.xMax = this.advanceWidth;
                    	    }
                    
                    	    if (!isFinite(metrics.yMin)) {
                    	        metrics.yMin = 0;
                    	    }
                    
                    	    if (!isFinite(metrics.yMax)) {
                    	        metrics.yMax = 0;
                    	    }
                    
                    	    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);
                    	    return metrics;
                    	};
                    
                    	/**
                    	 * Draw the glyph on the given context.
                    	 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
                    	 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param  {Object=} options - xScale, yScale to stretch the glyph.
                    	 */
                    	Glyph.prototype.draw = function(ctx, x, y, fontSize, options) {
                    	    this.getPath(x, y, fontSize, options).draw(ctx);
                    	};
                    
                    	/**
                    	 * Draw the points of the glyph.
                    	 * On-curve points will be drawn in blue, off-curve points will be drawn in red.
                    	 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
                    	 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 */
                    	Glyph.prototype.drawPoints = function(ctx, x, y, fontSize) {
                    	    function drawCircles(l, x, y, scale) {
                    	        var PI_SQ = Math.PI * 2;
                    	        ctx.beginPath();
                    	        for (var j = 0; j < l.length; j += 1) {
                    	            ctx.moveTo(x + (l[j].x * scale), y + (l[j].y * scale));
                    	            ctx.arc(x + (l[j].x * scale), y + (l[j].y * scale), 2, 0, PI_SQ, false);
                    	        }
                    
                    	        ctx.closePath();
                    	        ctx.fill();
                    	    }
                    
                    	    x = x !== undefined ? x : 0;
                    	    y = y !== undefined ? y : 0;
                    	    fontSize = fontSize !== undefined ? fontSize : 24;
                    	    var scale = 1 / this.path.unitsPerEm * fontSize;
                    
                    	    var blueCircles = [];
                    	    var redCircles = [];
                    	    var path = this.path;
                    	    for (var i = 0; i < path.commands.length; i += 1) {
                    	        var cmd = path.commands[i];
                    	        if (cmd.x !== undefined) {
                    	            blueCircles.push({x: cmd.x, y: -cmd.y});
                    	        }
                    
                    	        if (cmd.x1 !== undefined) {
                    	            redCircles.push({x: cmd.x1, y: -cmd.y1});
                    	        }
                    
                    	        if (cmd.x2 !== undefined) {
                    	            redCircles.push({x: cmd.x2, y: -cmd.y2});
                    	        }
                    	    }
                    
                    	    ctx.fillStyle = 'blue';
                    	    drawCircles(blueCircles, x, y, scale);
                    	    ctx.fillStyle = 'red';
                    	    drawCircles(redCircles, x, y, scale);
                    	};
                    
                    	/**
                    	 * Draw lines indicating important font measurements.
                    	 * Black lines indicate the origin of the coordinate system (point 0,0).
                    	 * Blue lines indicate the glyph bounding box.
                    	 * Green line indicates the advance width of the glyph.
                    	 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
                    	 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 */
                    	Glyph.prototype.drawMetrics = function(ctx, x, y, fontSize) {
                    	    var scale;
                    	    x = x !== undefined ? x : 0;
                    	    y = y !== undefined ? y : 0;
                    	    fontSize = fontSize !== undefined ? fontSize : 24;
                    	    scale = 1 / this.path.unitsPerEm * fontSize;
                    	    ctx.lineWidth = 1;
                    
                    	    // Draw the origin
                    	    ctx.strokeStyle = 'black';
                    	    draw.line(ctx, x, -10000, x, 10000);
                    	    draw.line(ctx, -10000, y, 10000, y);
                    
                    	    // This code is here due to memory optimization: by not using
                    	    // defaults in the constructor, we save a notable amount of memory.
                    	    var xMin = this.xMin || 0;
                    	    var yMin = this.yMin || 0;
                    	    var xMax = this.xMax || 0;
                    	    var yMax = this.yMax || 0;
                    	    var advanceWidth = this.advanceWidth || 0;
                    
                    	    // Draw the glyph box
                    	    ctx.strokeStyle = 'blue';
                    	    draw.line(ctx, x + (xMin * scale), -10000, x + (xMin * scale), 10000);
                    	    draw.line(ctx, x + (xMax * scale), -10000, x + (xMax * scale), 10000);
                    	    draw.line(ctx, -10000, y + (-yMin * scale), 10000, y + (-yMin * scale));
                    	    draw.line(ctx, -10000, y + (-yMax * scale), 10000, y + (-yMax * scale));
                    
                    	    // Draw the advance width
                    	    ctx.strokeStyle = 'green';
                    	    draw.line(ctx, x + (advanceWidth * scale), -10000, x + (advanceWidth * scale), 10000);
                    	};
                    
                    	// The GlyphSet object
                    
                    	// Define a property on the glyph that depends on the path being loaded.
                    	function defineDependentProperty(glyph, externalName, internalName) {
                    	    Object.defineProperty(glyph, externalName, {
                    	        get: function() {
                    	            // Request the path property to make sure the path is loaded.
                    	            // glyph.path; // jshint ignore:line
                    	            return glyph[internalName];
                    	        },
                    	        set: function(newValue) {
                    	            glyph[internalName] = newValue;
                    	        },
                    	        enumerable: true,
                    	        configurable: true
                    	    });
                    	}
                    
                    	/**
                    	 * A GlyphSet represents all glyphs available in the font, but modelled using
                    	 * a deferred glyph loader, for retrieving glyphs only once they are absolutely
                    	 * necessary, to keep the memory footprint down.
                    	 * @exports opentype.GlyphSet
                    	 * @class
                    	 * @param {opentype.Font}
                    	 * @param {Array}
                    	 */
                    	function GlyphSet(font, glyphs) {
                    	    var this$1 = this;
                    
                    	    this.font = font;
                    	    this.glyphs = {};
                    	    if (Array.isArray(glyphs)) {
                    	        for (var i = 0; i < glyphs.length; i++) {
                    	            this$1.glyphs[i] = glyphs[i];
                    	        }
                    	    }
                    
                    	    this.length = (glyphs && glyphs.length) || 0;
                    	}
                    
                    	/**
                    	 * @param  {number} index
                    	 * @return {opentype.Glyph}
                    	 */
                    	GlyphSet.prototype.get = function(index) {
                    	    if (typeof this.glyphs[index] === 'function') {
                    	        this.glyphs[index] = this.glyphs[index]();
                    	    }
                    
                    	    return this.glyphs[index];
                    	};
                    
                    	/**
                    	 * @param  {number} index
                    	 * @param  {Object}
                    	 */
                    	GlyphSet.prototype.push = function(index, loader) {
                    	    this.glyphs[index] = loader;
                    	    this.length++;
                    	};
                    
                    	/**
                    	 * @alias opentype.glyphLoader
                    	 * @param  {opentype.Font} font
                    	 * @param  {number} index
                    	 * @return {opentype.Glyph}
                    	 */
                    	function glyphLoader(font, index) {
                    	    return new Glyph({index: index, font: font});
                    	}
                    
                    	/**
                    	 * Generate a stub glyph that can be filled with all metadata *except*
                    	 * the "points" and "path" properties, which must be loaded only once
                    	 * the glyph's path is actually requested for text shaping.
                    	 * @alias opentype.ttfGlyphLoader
                    	 * @param  {opentype.Font} font
                    	 * @param  {number} index
                    	 * @param  {Function} parseGlyph
                    	 * @param  {Object} data
                    	 * @param  {number} position
                    	 * @param  {Function} buildPath
                    	 * @return {opentype.Glyph}
                    	 */
                    	function ttfGlyphLoader(font, index, parseGlyph, data, position, buildPath) {
                    	    return function() {
                    	        var glyph = new Glyph({index: index, font: font});
                    
                    	        glyph.path = function() {
                    	            parseGlyph(glyph, data, position);
                    	            var path = buildPath(font.glyphs, glyph);
                    	            path.unitsPerEm = font.unitsPerEm;
                    	            return path;
                    	        };
                    
                    	        defineDependentProperty(glyph, 'xMin', '_xMin');
                    	        defineDependentProperty(glyph, 'xMax', '_xMax');
                    	        defineDependentProperty(glyph, 'yMin', '_yMin');
                    	        defineDependentProperty(glyph, 'yMax', '_yMax');
                    
                    	        return glyph;
                    	    };
                    	}
                    	/**
                    	 * @alias opentype.cffGlyphLoader
                    	 * @param  {opentype.Font} font
                    	 * @param  {number} index
                    	 * @param  {Function} parseCFFCharstring
                    	 * @param  {string} charstring
                    	 * @return {opentype.Glyph}
                    	 */
                    	function cffGlyphLoader(font, index, parseCFFCharstring, charstring) {
                    	    return function() {
                    	        var glyph = new Glyph({index: index, font: font});
                    
                    	        glyph.path = function() {
                    	            var path = parseCFFCharstring(font, glyph, charstring);
                    	            path.unitsPerEm = font.unitsPerEm;
                    	            return path;
                    	        };
                    
                    	        return glyph;
                    	    };
                    	}
                    
                    	var glyphset = { GlyphSet: GlyphSet, glyphLoader: glyphLoader, ttfGlyphLoader: ttfGlyphLoader, cffGlyphLoader: cffGlyphLoader };
                    
                    	// The `CFF` table contains the glyph outlines in PostScript format.
                    
                    	// Custom equals function that can also check lists.
                    	function equals(a, b) {
                    	    if (a === b) {
                    	        return true;
                    	    } else if (Array.isArray(a) && Array.isArray(b)) {
                    	        if (a.length !== b.length) {
                    	            return false;
                    	        }
                    
                    	        for (var i = 0; i < a.length; i += 1) {
                    	            if (!equals(a[i], b[i])) {
                    	                return false;
                    	            }
                    	        }
                    
                    	        return true;
                    	    } else {
                    	        return false;
                    	    }
                    	}
                    
                    	// Subroutines are encoded using the negative half of the number space.
                    	// See type 2 chapter 4.7 "Subroutine operators".
                    	function calcCFFSubroutineBias(subrs) {
                    	    var bias;
                    	    if (subrs.length < 1240) {
                    	        bias = 107;
                    	    } else if (subrs.length < 33900) {
                    	        bias = 1131;
                    	    } else {
                    	        bias = 32768;
                    	    }
                    
                    	    return bias;
                    	}
                    
                    	// Parse a `CFF` INDEX array.
                    	// An index array consists of a list of offsets, then a list of objects at those offsets.
                    	function parseCFFIndex(data, start, conversionFn) {
                    	    var offsets = [];
                    	    var objects = [];
                    	    var count = parse.getCard16(data, start);
                    	    var objectOffset;
                    	    var endOffset;
                    	    if (count !== 0) {
                    	        var offsetSize = parse.getByte(data, start + 2);
                    	        objectOffset = start + ((count + 1) * offsetSize) + 2;
                    	        var pos = start + 3;
                    	        for (var i = 0; i < count + 1; i += 1) {
                    	            offsets.push(parse.getOffset(data, pos, offsetSize));
                    	            pos += offsetSize;
                    	        }
                    
                    	        // The total size of the index array is 4 header bytes + the value of the last offset.
                    	        endOffset = objectOffset + offsets[count];
                    	    } else {
                    	        endOffset = start + 2;
                    	    }
                    
                    	    for (var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1) {
                    	        var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);
                    	        if (conversionFn) {
                    	            value = conversionFn(value);
                    	        }
                    
                    	        objects.push(value);
                    	    }
                    
                    	    return {objects: objects, startOffset: start, endOffset: endOffset};
                    	}
                    
                    	// Parse a `CFF` DICT real value.
                    	function parseFloatOperand(parser) {
                    	    var s = '';
                    	    var eof = 15;
                    	    var lookup = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
                    	    while (true) {
                    	        var b = parser.parseByte();
                    	        var n1 = b >> 4;
                    	        var n2 = b & 15;
                    
                    	        if (n1 === eof) {
                    	            break;
                    	        }
                    
                    	        s += lookup[n1];
                    
                    	        if (n2 === eof) {
                    	            break;
                    	        }
                    
                    	        s += lookup[n2];
                    	    }
                    
                    	    return parseFloat(s);
                    	}
                    
                    	// Parse a `CFF` DICT operand.
                    	function parseOperand(parser, b0) {
                    	    var b1;
                    	    var b2;
                    	    var b3;
                    	    var b4;
                    	    if (b0 === 28) {
                    	        b1 = parser.parseByte();
                    	        b2 = parser.parseByte();
                    	        return b1 << 8 | b2;
                    	    }
                    
                    	    if (b0 === 29) {
                    	        b1 = parser.parseByte();
                    	        b2 = parser.parseByte();
                    	        b3 = parser.parseByte();
                    	        b4 = parser.parseByte();
                    	        return b1 << 24 | b2 << 16 | b3 << 8 | b4;
                    	    }
                    
                    	    if (b0 === 30) {
                    	        return parseFloatOperand(parser);
                    	    }
                    
                    	    if (b0 >= 32 && b0 <= 246) {
                    	        return b0 - 139;
                    	    }
                    
                    	    if (b0 >= 247 && b0 <= 250) {
                    	        b1 = parser.parseByte();
                    	        return (b0 - 247) * 256 + b1 + 108;
                    	    }
                    
                    	    if (b0 >= 251 && b0 <= 254) {
                    	        b1 = parser.parseByte();
                    	        return -(b0 - 251) * 256 - b1 - 108;
                    	    }
                    
                    	    throw new Error('Invalid b0 ' + b0);
                    	}
                    
                    	// Convert the entries returned by `parseDict` to a proper dictionary.
                    	// If a value is a list of one, it is unpacked.
                    	function entriesToObject(entries) {
                    	    var o = {};
                    	    for (var i = 0; i < entries.length; i += 1) {
                    	        var key = entries[i][0];
                    	        var values = entries[i][1];
                    	        var value = (void 0);
                    	        if (values.length === 1) {
                    	            value = values[0];
                    	        } else {
                    	            value = values;
                    	        }
                    
                    	        if (o.hasOwnProperty(key) && !isNaN(o[key])) {
                    	            throw new Error('Object ' + o + ' already has key ' + key);
                    	        }
                    
                    	        o[key] = value;
                    	    }
                    
                    	    return o;
                    	}
                    
                    	// Parse a `CFF` DICT object.
                    	// A dictionary contains key-value pairs in a compact tokenized format.
                    	function parseCFFDict(data, start, size) {
                    	    start = start !== undefined ? start : 0;
                    	    var parser = new parse.Parser(data, start);
                    	    var entries = [];
                    	    var operands = [];
                    	    size = size !== undefined ? size : data.length;
                    
                    	    while (parser.relativeOffset < size) {
                    	        var op = parser.parseByte();
                    
                    	        // The first byte for each dict item distinguishes between operator (key) and operand (value).
                    	        // Values <= 21 are operators.
                    	        if (op <= 21) {
                    	            // Two-byte operators have an initial escape byte of 12.
                    	            if (op === 12) {
                    	                op = 1200 + parser.parseByte();
                    	            }
                    
                    	            entries.push([op, operands]);
                    	            operands = [];
                    	        } else {
                    	            // Since the operands (values) come before the operators (keys), we store all operands in a list
                    	            // until we encounter an operator.
                    	            operands.push(parseOperand(parser, op));
                    	        }
                    	    }
                    
                    	    return entriesToObject(entries);
                    	}
                    
                    	// Given a String Index (SID), return the value of the string.
                    	// Strings below index 392 are standard CFF strings and are not encoded in the font.
                    	function getCFFString(strings, index) {
                    	    if (index <= 390) {
                    	        index = cffStandardStrings[index];
                    	    } else {
                    	        index = strings[index - 391];
                    	    }
                    
                    	    return index;
                    	}
                    
                    	// Interpret a dictionary and return a new dictionary with readable keys and values for missing entries.
                    	// This function takes `meta` which is a list of objects containing `operand`, `name` and `default`.
                    	function interpretDict(dict, meta, strings) {
                    	    var newDict = {};
                    	    var value;
                    
                    	    // Because we also want to include missing values, we start out from the meta list
                    	    // and lookup values in the dict.
                    	    for (var i = 0; i < meta.length; i += 1) {
                    	        var m = meta[i];
                    
                    	        if (Array.isArray(m.type)) {
                    	            var values = [];
                    	            values.length = m.type.length;
                    	            for (var j = 0; j < m.type.length; j++) {
                    	                value = dict[m.op] !== undefined ? dict[m.op][j] : undefined;
                    	                if (value === undefined) {
                    	                    value = m.value !== undefined && m.value[j] !== undefined ? m.value[j] : null;
                    	                }
                    	                if (m.type[j] === 'SID') {
                    	                    value = getCFFString(strings, value);
                    	                }
                    	                values[j] = value;
                    	            }
                    	            newDict[m.name] = values;
                    	        } else {
                    	            value = dict[m.op];
                    	            if (value === undefined) {
                    	                value = m.value !== undefined ? m.value : null;
                    	            }
                    
                    	            if (m.type === 'SID') {
                    	                value = getCFFString(strings, value);
                    	            }
                    	            newDict[m.name] = value;
                    	        }
                    	    }
                    
                    	    return newDict;
                    	}
                    
                    	// Parse the CFF header.
                    	function parseCFFHeader(data, start) {
                    	    var header = {};
                    	    header.formatMajor = parse.getCard8(data, start);
                    	    header.formatMinor = parse.getCard8(data, start + 1);
                    	    header.size = parse.getCard8(data, start + 2);
                    	    header.offsetSize = parse.getCard8(data, start + 3);
                    	    header.startOffset = start;
                    	    header.endOffset = start + 4;
                    	    return header;
                    	}
                    
                    	var TOP_DICT_META = [
                    	    {name: 'version', op: 0, type: 'SID'},
                    	    {name: 'notice', op: 1, type: 'SID'},
                    	    {name: 'copyright', op: 1200, type: 'SID'},
                    	    {name: 'fullName', op: 2, type: 'SID'},
                    	    {name: 'familyName', op: 3, type: 'SID'},
                    	    {name: 'weight', op: 4, type: 'SID'},
                    	    {name: 'isFixedPitch', op: 1201, type: 'number', value: 0},
                    	    {name: 'italicAngle', op: 1202, type: 'number', value: 0},
                    	    {name: 'underlinePosition', op: 1203, type: 'number', value: -100},
                    	    {name: 'underlineThickness', op: 1204, type: 'number', value: 50},
                    	    {name: 'paintType', op: 1205, type: 'number', value: 0},
                    	    {name: 'charstringType', op: 1206, type: 'number', value: 2},
                    	    {
                    	        name: 'fontMatrix',
                    	        op: 1207,
                    	        type: ['real', 'real', 'real', 'real', 'real', 'real'],
                    	        value: [0.001, 0, 0, 0.001, 0, 0]
                    	    },
                    	    {name: 'uniqueId', op: 13, type: 'number'},
                    	    {name: 'fontBBox', op: 5, type: ['number', 'number', 'number', 'number'], value: [0, 0, 0, 0]},
                    	    {name: 'strokeWidth', op: 1208, type: 'number', value: 0},
                    	    {name: 'xuid', op: 14, type: [], value: null},
                    	    {name: 'charset', op: 15, type: 'offset', value: 0},
                    	    {name: 'encoding', op: 16, type: 'offset', value: 0},
                    	    {name: 'charStrings', op: 17, type: 'offset', value: 0},
                    	    {name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0]},
                    	    {name: 'ros', op: 1230, type: ['SID', 'SID', 'number']},
                    	    {name: 'cidFontVersion', op: 1231, type: 'number', value: 0},
                    	    {name: 'cidFontRevision', op: 1232, type: 'number', value: 0},
                    	    {name: 'cidFontType', op: 1233, type: 'number', value: 0},
                    	    {name: 'cidCount', op: 1234, type: 'number', value: 8720},
                    	    {name: 'uidBase', op: 1235, type: 'number'},
                    	    {name: 'fdArray', op: 1236, type: 'offset'},
                    	    {name: 'fdSelect', op: 1237, type: 'offset'},
                    	    {name: 'fontName', op: 1238, type: 'SID'}
                    	];
                    
                    	var PRIVATE_DICT_META = [
                    	    {name: 'subrs', op: 19, type: 'offset', value: 0},
                    	    {name: 'defaultWidthX', op: 20, type: 'number', value: 0},
                    	    {name: 'nominalWidthX', op: 21, type: 'number', value: 0}
                    	];
                    
                    	// Parse the CFF top dictionary. A CFF table can contain multiple fonts, each with their own top dictionary.
                    	// The top dictionary contains the essential metadata for the font, together with the private dictionary.
                    	function parseCFFTopDict(data, strings) {
                    	    var dict = parseCFFDict(data, 0, data.byteLength);
                    	    return interpretDict(dict, TOP_DICT_META, strings);
                    	}
                    
                    	// Parse the CFF private dictionary. We don't fully parse out all the values, only the ones we need.
                    	function parseCFFPrivateDict(data, start, size, strings) {
                    	    var dict = parseCFFDict(data, start, size);
                    	    return interpretDict(dict, PRIVATE_DICT_META, strings);
                    	}
                    
                    	// Returns a list of "Top DICT"s found using an INDEX list.
                    	// Used to read both the usual high-level Top DICTs and also the FDArray
                    	// discovered inside CID-keyed fonts.  When a Top DICT has a reference to
                    	// a Private DICT that is read and saved into the Top DICT.
                    	//
                    	// In addition to the expected/optional values as outlined in TOP_DICT_META
                    	// the following values might be saved into the Top DICT.
                    	//
                    	//    _subrs []        array of local CFF subroutines from Private DICT
                    	//    _subrsBias       bias value computed from number of subroutines
                    	//                      (see calcCFFSubroutineBias() and parseCFFCharstring())
                    	//    _defaultWidthX   default widths for CFF characters
                    	//    _nominalWidthX   bias added to width embedded within glyph description
                    	//
                    	//    _privateDict     saved copy of parsed Private DICT from Top DICT
                    	function gatherCFFTopDicts(data, start, cffIndex, strings) {
                    	    var topDictArray = [];
                    	    for (var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1) {
                    	        var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);
                    	        var topDict = parseCFFTopDict(topDictData, strings);
                    	        topDict._subrs = [];
                    	        topDict._subrsBias = 0;
                    	        var privateSize = topDict.private[0];
                    	        var privateOffset = topDict.private[1];
                    	        if (privateSize !== 0 && privateOffset !== 0) {
                    	            var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);
                    	            topDict._defaultWidthX = privateDict.defaultWidthX;
                    	            topDict._nominalWidthX = privateDict.nominalWidthX;
                    	            if (privateDict.subrs !== 0) {
                    	                var subrOffset = privateOffset + privateDict.subrs;
                    	                var subrIndex = parseCFFIndex(data, subrOffset + start);
                    	                topDict._subrs = subrIndex.objects;
                    	                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);
                    	            }
                    	            topDict._privateDict = privateDict;
                    	        }
                    	        topDictArray.push(topDict);
                    	    }
                    	    return topDictArray;
                    	}
                    
                    	// Parse the CFF charset table, which contains internal names for all the glyphs.
                    	// This function will return a list of glyph names.
                    	// See Adobe TN #5176 chapter 13, "Charsets".
                    	function parseCFFCharset(data, start, nGlyphs, strings) {
                    	    var sid;
                    	    var count;
                    	    var parser = new parse.Parser(data, start);
                    
                    	    // The .notdef glyph is not included, so subtract 1.
                    	    nGlyphs -= 1;
                    	    var charset = ['.notdef'];
                    
                    	    var format = parser.parseCard8();
                    	    if (format === 0) {
                    	        for (var i = 0; i < nGlyphs; i += 1) {
                    	            sid = parser.parseSID();
                    	            charset.push(getCFFString(strings, sid));
                    	        }
                    	    } else if (format === 1) {
                    	        while (charset.length <= nGlyphs) {
                    	            sid = parser.parseSID();
                    	            count = parser.parseCard8();
                    	            for (var i$1 = 0; i$1 <= count; i$1 += 1) {
                    	                charset.push(getCFFString(strings, sid));
                    	                sid += 1;
                    	            }
                    	        }
                    	    } else if (format === 2) {
                    	        while (charset.length <= nGlyphs) {
                    	            sid = parser.parseSID();
                    	            count = parser.parseCard16();
                    	            for (var i$2 = 0; i$2 <= count; i$2 += 1) {
                    	                charset.push(getCFFString(strings, sid));
                    	                sid += 1;
                    	            }
                    	        }
                    	    } else {
                    	        throw new Error('Unknown charset format ' + format);
                    	    }
                    
                    	    return charset;
                    	}
                    
                    	// Parse the CFF encoding data. Only one encoding can be specified per font.
                    	// See Adobe TN #5176 chapter 12, "Encodings".
                    	function parseCFFEncoding(data, start, charset) {
                    	    var code;
                    	    var enc = {};
                    	    var parser = new parse.Parser(data, start);
                    	    var format = parser.parseCard8();
                    	    if (format === 0) {
                    	        var nCodes = parser.parseCard8();
                    	        for (var i = 0; i < nCodes; i += 1) {
                    	            code = parser.parseCard8();
                    	            enc[code] = i;
                    	        }
                    	    } else if (format === 1) {
                    	        var nRanges = parser.parseCard8();
                    	        code = 1;
                    	        for (var i$1 = 0; i$1 < nRanges; i$1 += 1) {
                    	            var first = parser.parseCard8();
                    	            var nLeft = parser.parseCard8();
                    	            for (var j = first; j <= first + nLeft; j += 1) {
                    	                enc[j] = code;
                    	                code += 1;
                    	            }
                    	        }
                    	    } else {
                    	        throw new Error('Unknown encoding format ' + format);
                    	    }
                    
                    	    return new CffEncoding(enc, charset);
                    	}
                    
                    	// Take in charstring code and return a Glyph object.
                    	// The encoding is described in the Type 2 Charstring Format
                    	// https://www.microsoft.com/typography/OTSPEC/charstr2.htm
                    	function parseCFFCharstring(font, glyph, code) {
                    	    var c1x;
                    	    var c1y;
                    	    var c2x;
                    	    var c2y;
                    	    var p = new Path();
                    	    var stack = [];
                    	    var nStems = 0;
                    	    var haveWidth = false;
                    	    var open = false;
                    	    var x = 0;
                    	    var y = 0;
                    	    var subrs;
                    	    var subrsBias;
                    	    var defaultWidthX;
                    	    var nominalWidthX;
                    	    if (font.isCIDFont) {
                    	        var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];
                    	        var fdDict = font.tables.cff.topDict._fdArray[fdIndex];
                    	        subrs = fdDict._subrs;
                    	        subrsBias = fdDict._subrsBias;
                    	        defaultWidthX = fdDict._defaultWidthX;
                    	        nominalWidthX = fdDict._nominalWidthX;
                    	    } else {
                    	        subrs = font.tables.cff.topDict._subrs;
                    	        subrsBias = font.tables.cff.topDict._subrsBias;
                    	        defaultWidthX = font.tables.cff.topDict._defaultWidthX;
                    	        nominalWidthX = font.tables.cff.topDict._nominalWidthX;
                    	    }
                    	    var width = defaultWidthX;
                    
                    	    function newContour(x, y) {
                    	        if (open) {
                    	            p.closePath();
                    	        }
                    
                    	        p.moveTo(x, y);
                    	        open = true;
                    	    }
                    
                    	    function parseStems() {
                    	        var hasWidthArg;
                    
                    	        // The number of stem operators on the stack is always even.
                    	        // If the value is uneven, that means a width is specified.
                    	        hasWidthArg = stack.length % 2 !== 0;
                    	        if (hasWidthArg && !haveWidth) {
                    	            width = stack.shift() + nominalWidthX;
                    	        }
                    
                    	        nStems += stack.length >> 1;
                    	        stack.length = 0;
                    	        haveWidth = true;
                    	    }
                    
                    	    function parse$$1(code) {
                    	        var b1;
                    	        var b2;
                    	        var b3;
                    	        var b4;
                    	        var codeIndex;
                    	        var subrCode;
                    	        var jpx;
                    	        var jpy;
                    	        var c3x;
                    	        var c3y;
                    	        var c4x;
                    	        var c4y;
                    
                    	        var i = 0;
                    	        while (i < code.length) {
                    	            var v = code[i];
                    	            i += 1;
                    	            switch (v) {
                    	                case 1: // hstem
                    	                    parseStems();
                    	                    break;
                    	                case 3: // vstem
                    	                    parseStems();
                    	                    break;
                    	                case 4: // vmoveto
                    	                    if (stack.length > 1 && !haveWidth) {
                    	                        width = stack.shift() + nominalWidthX;
                    	                        haveWidth = true;
                    	                    }
                    
                    	                    y += stack.pop();
                    	                    newContour(x, y);
                    	                    break;
                    	                case 5: // rlineto
                    	                    while (stack.length > 0) {
                    	                        x += stack.shift();
                    	                        y += stack.shift();
                    	                        p.lineTo(x, y);
                    	                    }
                    
                    	                    break;
                    	                case 6: // hlineto
                    	                    while (stack.length > 0) {
                    	                        x += stack.shift();
                    	                        p.lineTo(x, y);
                    	                        if (stack.length === 0) {
                    	                            break;
                    	                        }
                    
                    	                        y += stack.shift();
                    	                        p.lineTo(x, y);
                    	                    }
                    
                    	                    break;
                    	                case 7: // vlineto
                    	                    while (stack.length > 0) {
                    	                        y += stack.shift();
                    	                        p.lineTo(x, y);
                    	                        if (stack.length === 0) {
                    	                            break;
                    	                        }
                    
                    	                        x += stack.shift();
                    	                        p.lineTo(x, y);
                    	                    }
                    
                    	                    break;
                    	                case 8: // rrcurveto
                    	                    while (stack.length > 0) {
                    	                        c1x = x + stack.shift();
                    	                        c1y = y + stack.shift();
                    	                        c2x = c1x + stack.shift();
                    	                        c2y = c1y + stack.shift();
                    	                        x = c2x + stack.shift();
                    	                        y = c2y + stack.shift();
                    	                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                    }
                    
                    	                    break;
                    	                case 10: // callsubr
                    	                    codeIndex = stack.pop() + subrsBias;
                    	                    subrCode = subrs[codeIndex];
                    	                    if (subrCode) {
                    	                        parse$$1(subrCode);
                    	                    }
                    
                    	                    break;
                    	                case 11: // return
                    	                    return;
                    	                case 12: // flex operators
                    	                    v = code[i];
                    	                    i += 1;
                    	                    switch (v) {
                    	                        case 35: // flex
                    	                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 dx6 dy6 fd flex (12 35) |-
                    	                            c1x = x   + stack.shift();    // dx1
                    	                            c1y = y   + stack.shift();    // dy1
                    	                            c2x = c1x + stack.shift();    // dx2
                    	                            c2y = c1y + stack.shift();    // dy2
                    	                            jpx = c2x + stack.shift();    // dx3
                    	                            jpy = c2y + stack.shift();    // dy3
                    	                            c3x = jpx + stack.shift();    // dx4
                    	                            c3y = jpy + stack.shift();    // dy4
                    	                            c4x = c3x + stack.shift();    // dx5
                    	                            c4y = c3y + stack.shift();    // dy5
                    	                            x = c4x   + stack.shift();    // dx6
                    	                            y = c4y   + stack.shift();    // dy6
                    	                            stack.shift();                // flex depth
                    	                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                    	                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                    	                            break;
                    	                        case 34: // hflex
                    	                            // |- dx1 dx2 dy2 dx3 dx4 dx5 dx6 hflex (12 34) |-
                    	                            c1x = x   + stack.shift();    // dx1
                    	                            c1y = y;                      // dy1
                    	                            c2x = c1x + stack.shift();    // dx2
                    	                            c2y = c1y + stack.shift();    // dy2
                    	                            jpx = c2x + stack.shift();    // dx3
                    	                            jpy = c2y;                    // dy3
                    	                            c3x = jpx + stack.shift();    // dx4
                    	                            c3y = c2y;                    // dy4
                    	                            c4x = c3x + stack.shift();    // dx5
                    	                            c4y = y;                      // dy5
                    	                            x = c4x + stack.shift();      // dx6
                    	                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                    	                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                    	                            break;
                    	                        case 36: // hflex1
                    	                            // |- dx1 dy1 dx2 dy2 dx3 dx4 dx5 dy5 dx6 hflex1 (12 36) |-
                    	                            c1x = x   + stack.shift();    // dx1
                    	                            c1y = y   + stack.shift();    // dy1
                    	                            c2x = c1x + stack.shift();    // dx2
                    	                            c2y = c1y + stack.shift();    // dy2
                    	                            jpx = c2x + stack.shift();    // dx3
                    	                            jpy = c2y;                    // dy3
                    	                            c3x = jpx + stack.shift();    // dx4
                    	                            c3y = c2y;                    // dy4
                    	                            c4x = c3x + stack.shift();    // dx5
                    	                            c4y = c3y + stack.shift();    // dy5
                    	                            x = c4x + stack.shift();      // dx6
                    	                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                    	                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                    	                            break;
                    	                        case 37: // flex1
                    	                            // |- dx1 dy1 dx2 dy2 dx3 dy3 dx4 dy4 dx5 dy5 d6 flex1 (12 37) |-
                    	                            c1x = x   + stack.shift();    // dx1
                    	                            c1y = y   + stack.shift();    // dy1
                    	                            c2x = c1x + stack.shift();    // dx2
                    	                            c2y = c1y + stack.shift();    // dy2
                    	                            jpx = c2x + stack.shift();    // dx3
                    	                            jpy = c2y + stack.shift();    // dy3
                    	                            c3x = jpx + stack.shift();    // dx4
                    	                            c3y = jpy + stack.shift();    // dy4
                    	                            c4x = c3x + stack.shift();    // dx5
                    	                            c4y = c3y + stack.shift();    // dy5
                    	                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {
                    	                                x = c4x + stack.shift();
                    	                            } else {
                    	                                y = c4y + stack.shift();
                    	                            }
                    
                    	                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);
                    	                            p.curveTo(c3x, c3y, c4x, c4y, x, y);
                    	                            break;
                    	                        default:
                    	                            console.log('Glyph ' + glyph.index + ': unknown operator ' + 1200 + v);
                    	                            stack.length = 0;
                    	                    }
                    	                    break;
                    	                case 14: // endchar
                    	                    if (stack.length > 0 && !haveWidth) {
                    	                        width = stack.shift() + nominalWidthX;
                    	                        haveWidth = true;
                    	                    }
                    
                    	                    if (open) {
                    	                        p.closePath();
                    	                        open = false;
                    	                    }
                    
                    	                    break;
                    	                case 18: // hstemhm
                    	                    parseStems();
                    	                    break;
                    	                case 19: // hintmask
                    	                case 20: // cntrmask
                    	                    parseStems();
                    	                    i += (nStems + 7) >> 3;
                    	                    break;
                    	                case 21: // rmoveto
                    	                    if (stack.length > 2 && !haveWidth) {
                    	                        width = stack.shift() + nominalWidthX;
                    	                        haveWidth = true;
                    	                    }
                    
                    	                    y += stack.pop();
                    	                    x += stack.pop();
                    	                    newContour(x, y);
                    	                    break;
                    	                case 22: // hmoveto
                    	                    if (stack.length > 1 && !haveWidth) {
                    	                        width = stack.shift() + nominalWidthX;
                    	                        haveWidth = true;
                    	                    }
                    
                    	                    x += stack.pop();
                    	                    newContour(x, y);
                    	                    break;
                    	                case 23: // vstemhm
                    	                    parseStems();
                    	                    break;
                    	                case 24: // rcurveline
                    	                    while (stack.length > 2) {
                    	                        c1x = x + stack.shift();
                    	                        c1y = y + stack.shift();
                    	                        c2x = c1x + stack.shift();
                    	                        c2y = c1y + stack.shift();
                    	                        x = c2x + stack.shift();
                    	                        y = c2y + stack.shift();
                    	                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                    }
                    
                    	                    x += stack.shift();
                    	                    y += stack.shift();
                    	                    p.lineTo(x, y);
                    	                    break;
                    	                case 25: // rlinecurve
                    	                    while (stack.length > 6) {
                    	                        x += stack.shift();
                    	                        y += stack.shift();
                    	                        p.lineTo(x, y);
                    	                    }
                    
                    	                    c1x = x + stack.shift();
                    	                    c1y = y + stack.shift();
                    	                    c2x = c1x + stack.shift();
                    	                    c2y = c1y + stack.shift();
                    	                    x = c2x + stack.shift();
                    	                    y = c2y + stack.shift();
                    	                    p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                    break;
                    	                case 26: // vvcurveto
                    	                    if (stack.length % 2) {
                    	                        x += stack.shift();
                    	                    }
                    
                    	                    while (stack.length > 0) {
                    	                        c1x = x;
                    	                        c1y = y + stack.shift();
                    	                        c2x = c1x + stack.shift();
                    	                        c2y = c1y + stack.shift();
                    	                        x = c2x;
                    	                        y = c2y + stack.shift();
                    	                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                    }
                    
                    	                    break;
                    	                case 27: // hhcurveto
                    	                    if (stack.length % 2) {
                    	                        y += stack.shift();
                    	                    }
                    
                    	                    while (stack.length > 0) {
                    	                        c1x = x + stack.shift();
                    	                        c1y = y;
                    	                        c2x = c1x + stack.shift();
                    	                        c2y = c1y + stack.shift();
                    	                        x = c2x + stack.shift();
                    	                        y = c2y;
                    	                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                    }
                    
                    	                    break;
                    	                case 28: // shortint
                    	                    b1 = code[i];
                    	                    b2 = code[i + 1];
                    	                    stack.push(((b1 << 24) | (b2 << 16)) >> 16);
                    	                    i += 2;
                    	                    break;
                    	                case 29: // callgsubr
                    	                    codeIndex = stack.pop() + font.gsubrsBias;
                    	                    subrCode = font.gsubrs[codeIndex];
                    	                    if (subrCode) {
                    	                        parse$$1(subrCode);
                    	                    }
                    
                    	                    break;
                    	                case 30: // vhcurveto
                    	                    while (stack.length > 0) {
                    	                        c1x = x;
                    	                        c1y = y + stack.shift();
                    	                        c2x = c1x + stack.shift();
                    	                        c2y = c1y + stack.shift();
                    	                        x = c2x + stack.shift();
                    	                        y = c2y + (stack.length === 1 ? stack.shift() : 0);
                    	                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                        if (stack.length === 0) {
                    	                            break;
                    	                        }
                    
                    	                        c1x = x + stack.shift();
                    	                        c1y = y;
                    	                        c2x = c1x + stack.shift();
                    	                        c2y = c1y + stack.shift();
                    	                        y = c2y + stack.shift();
                    	                        x = c2x + (stack.length === 1 ? stack.shift() : 0);
                    	                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                    }
                    
                    	                    break;
                    	                case 31: // hvcurveto
                    	                    while (stack.length > 0) {
                    	                        c1x = x + stack.shift();
                    	                        c1y = y;
                    	                        c2x = c1x + stack.shift();
                    	                        c2y = c1y + stack.shift();
                    	                        y = c2y + stack.shift();
                    	                        x = c2x + (stack.length === 1 ? stack.shift() : 0);
                    	                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                        if (stack.length === 0) {
                    	                            break;
                    	                        }
                    
                    	                        c1x = x;
                    	                        c1y = y + stack.shift();
                    	                        c2x = c1x + stack.shift();
                    	                        c2y = c1y + stack.shift();
                    	                        x = c2x + stack.shift();
                    	                        y = c2y + (stack.length === 1 ? stack.shift() : 0);
                    	                        p.curveTo(c1x, c1y, c2x, c2y, x, y);
                    	                    }
                    
                    	                    break;
                    	                default:
                    	                    if (v < 32) {
                    	                        console.log('Glyph ' + glyph.index + ': unknown operator ' + v);
                    	                    } else if (v < 247) {
                    	                        stack.push(v - 139);
                    	                    } else if (v < 251) {
                    	                        b1 = code[i];
                    	                        i += 1;
                    	                        stack.push((v - 247) * 256 + b1 + 108);
                    	                    } else if (v < 255) {
                    	                        b1 = code[i];
                    	                        i += 1;
                    	                        stack.push(-(v - 251) * 256 - b1 - 108);
                    	                    } else {
                    	                        b1 = code[i];
                    	                        b2 = code[i + 1];
                    	                        b3 = code[i + 2];
                    	                        b4 = code[i + 3];
                    	                        i += 4;
                    	                        stack.push(((b1 << 24) | (b2 << 16) | (b3 << 8) | b4) / 65536);
                    	                    }
                    	            }
                    	        }
                    	    }
                    
                    	    parse$$1(code);
                    
                    	    glyph.advanceWidth = width;
                    	    return p;
                    	}
                    
                    	function parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {
                    	    var fdSelect = [];
                    	    var fdIndex;
                    	    var parser = new parse.Parser(data, start);
                    	    var format = parser.parseCard8();
                    	    if (format === 0) {
                    	        // Simple list of nGlyphs elements
                    	        for (var iGid = 0; iGid < nGlyphs; iGid++) {
                    	            fdIndex = parser.parseCard8();
                    	            if (fdIndex >= fdArrayCount) {
                    	                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
                    	            }
                    	            fdSelect.push(fdIndex);
                    	        }
                    	    } else if (format === 3) {
                    	        // Ranges
                    	        var nRanges = parser.parseCard16();
                    	        var first = parser.parseCard16();
                    	        if (first !== 0) {
                    	            throw new Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + first);
                    	        }
                    	        var next;
                    	        for (var iRange = 0; iRange < nRanges; iRange++) {
                    	            fdIndex = parser.parseCard8();
                    	            next = parser.parseCard16();
                    	            if (fdIndex >= fdArrayCount) {
                    	                throw new Error('CFF table CID Font FDSelect has bad FD index value ' + fdIndex + ' (FD count ' + fdArrayCount + ')');
                    	            }
                    	            if (next > nGlyphs) {
                    	                throw new Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + next);
                    	            }
                    	            for (; first < next; first++) {
                    	                fdSelect.push(fdIndex);
                    	            }
                    	            first = next;
                    	        }
                    	        if (next !== nGlyphs) {
                    	            throw new Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + next);
                    	        }
                    	    } else {
                    	        throw new Error('CFF Table CID Font FDSelect table has unsupported format ' + format);
                    	    }
                    	    return fdSelect;
                    	}
                    
                    	// Parse the `CFF` table, which contains the glyph outlines in PostScript format.
                    	function parseCFFTable(data, start, font) {
                    	    font.tables.cff = {};
                    	    var header = parseCFFHeader(data, start);
                    	    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);
                    	    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);
                    	    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);
                    	    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);
                    	    font.gsubrs = globalSubrIndex.objects;
                    	    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);
                    
                    	    var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);
                    	    if (topDictArray.length !== 1) {
                    	        throw new Error('CFF table has too many fonts in \'FontSet\' - count of fonts NameIndex.length = ' + topDictArray.length);
                    	    }
                    
                    	    var topDict = topDictArray[0];
                    	    font.tables.cff.topDict = topDict;
                    
                    	    if (topDict._privateDict) {
                    	        font.defaultWidthX = topDict._privateDict.defaultWidthX;
                    	        font.nominalWidthX = topDict._privateDict.nominalWidthX;
                    	    }
                    
                    	    if (topDict.ros[0] !== undefined && topDict.ros[1] !== undefined) {
                    	        font.isCIDFont = true;
                    	    }
                    
                    	    if (font.isCIDFont) {
                    	        var fdArrayOffset = topDict.fdArray;
                    	        var fdSelectOffset = topDict.fdSelect;
                    	        if (fdArrayOffset === 0 || fdSelectOffset === 0) {
                    	            throw new Error('Font is marked as a CID font, but FDArray and/or FDSelect information is missing');
                    	        }
                    	        fdArrayOffset += start;
                    	        var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);
                    	        var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);
                    	        topDict._fdArray = fdArray;
                    	        fdSelectOffset += start;
                    	        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);
                    	    }
                    
                    	    var privateDictOffset = start + topDict.private[1];
                    	    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);
                    	    font.defaultWidthX = privateDict.defaultWidthX;
                    	    font.nominalWidthX = privateDict.nominalWidthX;
                    
                    	    if (privateDict.subrs !== 0) {
                    	        var subrOffset = privateDictOffset + privateDict.subrs;
                    	        var subrIndex = parseCFFIndex(data, subrOffset);
                    	        font.subrs = subrIndex.objects;
                    	        font.subrsBias = calcCFFSubroutineBias(font.subrs);
                    	    } else {
                    	        font.subrs = [];
                    	        font.subrsBias = 0;
                    	    }
                    
                    	    // Offsets in the top dict are relative to the beginning of the CFF data, so add the CFF start offset.
                    	    var charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);
                    	    font.nGlyphs = charStringsIndex.objects.length;
                    
                    	    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);
                    	    if (topDict.encoding === 0) {
                    	        // Standard encoding
                    	        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);
                    	    } else if (topDict.encoding === 1) {
                    	        // Expert encoding
                    	        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);
                    	    } else {
                    	        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);
                    	    }
                    
                    	    // Prefer the CMAP encoding to the CFF encoding.
                    	    font.encoding = font.encoding || font.cffEncoding;
                    
                    	    font.glyphs = new glyphset.GlyphSet(font);
                    	    for (var i = 0; i < font.nGlyphs; i += 1) {
                    	        var charString = charStringsIndex.objects[i];
                    	        font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));
                    	    }
                    	}
                    
                    	// Convert a string to a String ID (SID).
                    	// The list of strings is modified in place.
                    	function encodeString(s, strings) {
                    	    var sid;
                    
                    	    // Is the string in the CFF standard strings?
                    	    var i = cffStandardStrings.indexOf(s);
                    	    if (i >= 0) {
                    	        sid = i;
                    	    }
                    
                    	    // Is the string already in the string index?
                    	    i = strings.indexOf(s);
                    	    if (i >= 0) {
                    	        sid = i + cffStandardStrings.length;
                    	    } else {
                    	        sid = cffStandardStrings.length + strings.length;
                    	        strings.push(s);
                    	    }
                    
                    	    return sid;
                    	}
                    
                    	function makeHeader() {
                    	    return new table.Record('Header', [
                    	        {name: 'major', type: 'Card8', value: 1},
                    	        {name: 'minor', type: 'Card8', value: 0},
                    	        {name: 'hdrSize', type: 'Card8', value: 4},
                    	        {name: 'major', type: 'Card8', value: 1}
                    	    ]);
                    	}
                    
                    	function makeNameIndex(fontNames) {
                    	    var t = new table.Record('Name INDEX', [
                    	        {name: 'names', type: 'INDEX', value: []}
                    	    ]);
                    	    t.names = [];
                    	    for (var i = 0; i < fontNames.length; i += 1) {
                    	        t.names.push({name: 'name_' + i, type: 'NAME', value: fontNames[i]});
                    	    }
                    
                    	    return t;
                    	}
                    
                    	// Given a dictionary's metadata, create a DICT structure.
                    	function makeDict(meta, attrs, strings) {
                    	    var m = {};
                    	    for (var i = 0; i < meta.length; i += 1) {
                    	        var entry = meta[i];
                    	        var value = attrs[entry.name];
                    	        if (value !== undefined && !equals(value, entry.value)) {
                    	            if (entry.type === 'SID') {
                    	                value = encodeString(value, strings);
                    	            }
                    
                    	            m[entry.op] = {name: entry.name, type: entry.type, value: value};
                    	        }
                    	    }
                    
                    	    return m;
                    	}
                    
                    	// The Top DICT houses the global font attributes.
                    	function makeTopDict(attrs, strings) {
                    	    var t = new table.Record('Top DICT', [
                    	        {name: 'dict', type: 'DICT', value: {}}
                    	    ]);
                    	    t.dict = makeDict(TOP_DICT_META, attrs, strings);
                    	    return t;
                    	}
                    
                    	function makeTopDictIndex(topDict) {
                    	    var t = new table.Record('Top DICT INDEX', [
                    	        {name: 'topDicts', type: 'INDEX', value: []}
                    	    ]);
                    	    t.topDicts = [{name: 'topDict_0', type: 'TABLE', value: topDict}];
                    	    return t;
                    	}
                    
                    	function makeStringIndex(strings) {
                    	    var t = new table.Record('String INDEX', [
                    	        {name: 'strings', type: 'INDEX', value: []}
                    	    ]);
                    	    t.strings = [];
                    	    for (var i = 0; i < strings.length; i += 1) {
                    	        t.strings.push({name: 'string_' + i, type: 'STRING', value: strings[i]});
                    	    }
                    
                    	    return t;
                    	}
                    
                    	function makeGlobalSubrIndex() {
                    	    // Currently we don't use subroutines.
                    	    return new table.Record('Global Subr INDEX', [
                    	        {name: 'subrs', type: 'INDEX', value: []}
                    	    ]);
                    	}
                    
                    	function makeCharsets(glyphNames, strings) {
                    	    var t = new table.Record('Charsets', [
                    	        {name: 'format', type: 'Card8', value: 0}
                    	    ]);
                    	    for (var i = 0; i < glyphNames.length; i += 1) {
                    	        var glyphName = glyphNames[i];
                    	        var glyphSID = encodeString(glyphName, strings);
                    	        t.fields.push({name: 'glyph_' + i, type: 'SID', value: glyphSID});
                    	    }
                    
                    	    return t;
                    	}
                    
                    	function glyphToOps(glyph) {
                    	    var ops = [];
                    	    var path = glyph.path;
                    	    ops.push({name: 'width', type: 'NUMBER', value: glyph.advanceWidth});
                    	    var x = 0;
                    	    var y = 0;
                    	    for (var i = 0; i < path.commands.length; i += 1) {
                    	        var dx = (void 0);
                    	        var dy = (void 0);
                    	        var cmd = path.commands[i];
                    	        if (cmd.type === 'Q') {
                    	            // CFF only supports bézier curves, so convert the quad to a bézier.
                    	            var _13 = 1 / 3;
                    	            var _23 = 2 / 3;
                    
                    	            // We're going to create a new command so we don't change the original path.
                    	            cmd = {
                    	                type: 'C',
                    	                x: cmd.x,
                    	                y: cmd.y,
                    	                x1: _13 * x + _23 * cmd.x1,
                    	                y1: _13 * y + _23 * cmd.y1,
                    	                x2: _13 * cmd.x + _23 * cmd.x1,
                    	                y2: _13 * cmd.y + _23 * cmd.y1
                    	            };
                    	        }
                    
                    	        if (cmd.type === 'M') {
                    	            dx = Math.round(cmd.x - x);
                    	            dy = Math.round(cmd.y - y);
                    	            ops.push({name: 'dx', type: 'NUMBER', value: dx});
                    	            ops.push({name: 'dy', type: 'NUMBER', value: dy});
                    	            ops.push({name: 'rmoveto', type: 'OP', value: 21});
                    	            x = Math.round(cmd.x);
                    	            y = Math.round(cmd.y);
                    	        } else if (cmd.type === 'L') {
                    	            dx = Math.round(cmd.x - x);
                    	            dy = Math.round(cmd.y - y);
                    	            ops.push({name: 'dx', type: 'NUMBER', value: dx});
                    	            ops.push({name: 'dy', type: 'NUMBER', value: dy});
                    	            ops.push({name: 'rlineto', type: 'OP', value: 5});
                    	            x = Math.round(cmd.x);
                    	            y = Math.round(cmd.y);
                    	        } else if (cmd.type === 'C') {
                    	            var dx1 = Math.round(cmd.x1 - x);
                    	            var dy1 = Math.round(cmd.y1 - y);
                    	            var dx2 = Math.round(cmd.x2 - cmd.x1);
                    	            var dy2 = Math.round(cmd.y2 - cmd.y1);
                    	            dx = Math.round(cmd.x - cmd.x2);
                    	            dy = Math.round(cmd.y - cmd.y2);
                    	            ops.push({name: 'dx1', type: 'NUMBER', value: dx1});
                    	            ops.push({name: 'dy1', type: 'NUMBER', value: dy1});
                    	            ops.push({name: 'dx2', type: 'NUMBER', value: dx2});
                    	            ops.push({name: 'dy2', type: 'NUMBER', value: dy2});
                    	            ops.push({name: 'dx', type: 'NUMBER', value: dx});
                    	            ops.push({name: 'dy', type: 'NUMBER', value: dy});
                    	            ops.push({name: 'rrcurveto', type: 'OP', value: 8});
                    	            x = Math.round(cmd.x);
                    	            y = Math.round(cmd.y);
                    	        }
                    
                    	        // Contours are closed automatically.
                    	    }
                    
                    	    ops.push({name: 'endchar', type: 'OP', value: 14});
                    	    return ops;
                    	}
                    
                    	function makeCharStringsIndex(glyphs) {
                    	    var t = new table.Record('CharStrings INDEX', [
                    	        {name: 'charStrings', type: 'INDEX', value: []}
                    	    ]);
                    
                    	    for (var i = 0; i < glyphs.length; i += 1) {
                    	        var glyph = glyphs.get(i);
                    	        var ops = glyphToOps(glyph);
                    	        t.charStrings.push({name: glyph.name, type: 'CHARSTRING', value: ops});
                    	    }
                    
                    	    return t;
                    	}
                    
                    	function makePrivateDict(attrs, strings) {
                    	    var t = new table.Record('Private DICT', [
                    	        {name: 'dict', type: 'DICT', value: {}}
                    	    ]);
                    	    t.dict = makeDict(PRIVATE_DICT_META, attrs, strings);
                    	    return t;
                    	}
                    
                    	function makeCFFTable(glyphs, options) {
                    	    var t = new table.Table('CFF ', [
                    	        {name: 'header', type: 'RECORD'},
                    	        {name: 'nameIndex', type: 'RECORD'},
                    	        {name: 'topDictIndex', type: 'RECORD'},
                    	        {name: 'stringIndex', type: 'RECORD'},
                    	        {name: 'globalSubrIndex', type: 'RECORD'},
                    	        {name: 'charsets', type: 'RECORD'},
                    	        {name: 'charStringsIndex', type: 'RECORD'},
                    	        {name: 'privateDict', type: 'RECORD'}
                    	    ]);
                    
                    	    var fontScale = 1 / options.unitsPerEm;
                    	    // We use non-zero values for the offsets so that the DICT encodes them.
                    	    // This is important because the size of the Top DICT plays a role in offset calculation,
                    	    // and the size shouldn't change after we've written correct offsets.
                    	    var attrs = {
                    	        version: options.version,
                    	        fullName: options.fullName,
                    	        familyName: options.familyName,
                    	        weight: options.weightName,
                    	        fontBBox: options.fontBBox || [0, 0, 0, 0],
                    	        fontMatrix: [fontScale, 0, 0, fontScale, 0, 0],
                    	        charset: 999,
                    	        encoding: 0,
                    	        charStrings: 999,
                    	        private: [0, 999]
                    	    };
                    
                    	    var privateAttrs = {};
                    
                    	    var glyphNames = [];
                    	    var glyph;
                    
                    	    // Skip first glyph (.notdef)
                    	    for (var i = 1; i < glyphs.length; i += 1) {
                    	        glyph = glyphs.get(i);
                    	        glyphNames.push(glyph.name);
                    	    }
                    
                    	    var strings = [];
                    
                    	    t.header = makeHeader();
                    	    t.nameIndex = makeNameIndex([options.postScriptName]);
                    	    var topDict = makeTopDict(attrs, strings);
                    	    t.topDictIndex = makeTopDictIndex(topDict);
                    	    t.globalSubrIndex = makeGlobalSubrIndex();
                    	    t.charsets = makeCharsets(glyphNames, strings);
                    	    t.charStringsIndex = makeCharStringsIndex(glyphs);
                    	    t.privateDict = makePrivateDict(privateAttrs, strings);
                    
                    	    // Needs to come at the end, to encode all custom strings used in the font.
                    	    t.stringIndex = makeStringIndex(strings);
                    
                    	    var startOffset = t.header.sizeOf() +
                    	        t.nameIndex.sizeOf() +
                    	        t.topDictIndex.sizeOf() +
                    	        t.stringIndex.sizeOf() +
                    	        t.globalSubrIndex.sizeOf();
                    	    attrs.charset = startOffset;
                    
                    	    // We use the CFF standard encoding; proper encoding will be handled in cmap.
                    	    attrs.encoding = 0;
                    	    attrs.charStrings = attrs.charset + t.charsets.sizeOf();
                    	    attrs.private[1] = attrs.charStrings + t.charStringsIndex.sizeOf();
                    
                    	    // Recreate the Top DICT INDEX with the correct offsets.
                    	    topDict = makeTopDict(attrs, strings);
                    	    t.topDictIndex = makeTopDictIndex(topDict);
                    
                    	    return t;
                    	}
                    
                    	var cff = { parse: parseCFFTable, make: makeCFFTable };
                    
                    	// The `head` table contains global information about the font.
                    
                    	// Parse the header `head` table
                    	function parseHeadTable(data, start) {
                    	    var head = {};
                    	    var p = new parse.Parser(data, start);
                    	    head.version = p.parseVersion();
                    	    head.fontRevision = Math.round(p.parseFixed() * 1000) / 1000;
                    	    head.checkSumAdjustment = p.parseULong();
                    	    head.magicNumber = p.parseULong();
                    	    check.argument(head.magicNumber === 0x5F0F3CF5, 'Font header has wrong magic number.');
                    	    head.flags = p.parseUShort();
                    	    head.unitsPerEm = p.parseUShort();
                    	    head.created = p.parseLongDateTime();
                    	    head.modified = p.parseLongDateTime();
                    	    head.xMin = p.parseShort();
                    	    head.yMin = p.parseShort();
                    	    head.xMax = p.parseShort();
                    	    head.yMax = p.parseShort();
                    	    head.macStyle = p.parseUShort();
                    	    head.lowestRecPPEM = p.parseUShort();
                    	    head.fontDirectionHint = p.parseShort();
                    	    head.indexToLocFormat = p.parseShort();
                    	    head.glyphDataFormat = p.parseShort();
                    	    return head;
                    	}
                    
                    	function makeHeadTable(options) {
                    	    // Apple Mac timestamp epoch is 01/01/1904 not 01/01/1970
                    	    var timestamp = Math.round(new Date().getTime() / 1000) + 2082844800;
                    	    var createdTimestamp = timestamp;
                    
                    	    if (options.createdTimestamp) {
                    	        createdTimestamp = options.createdTimestamp + 2082844800;
                    	    }
                    
                    	    return new table.Table('head', [
                    	        {name: 'version', type: 'FIXED', value: 0x00010000},
                    	        {name: 'fontRevision', type: 'FIXED', value: 0x00010000},
                    	        {name: 'checkSumAdjustment', type: 'ULONG', value: 0},
                    	        {name: 'magicNumber', type: 'ULONG', value: 0x5F0F3CF5},
                    	        {name: 'flags', type: 'USHORT', value: 0},
                    	        {name: 'unitsPerEm', type: 'USHORT', value: 1000},
                    	        {name: 'created', type: 'LONGDATETIME', value: createdTimestamp},
                    	        {name: 'modified', type: 'LONGDATETIME', value: timestamp},
                    	        {name: 'xMin', type: 'SHORT', value: 0},
                    	        {name: 'yMin', type: 'SHORT', value: 0},
                    	        {name: 'xMax', type: 'SHORT', value: 0},
                    	        {name: 'yMax', type: 'SHORT', value: 0},
                    	        {name: 'macStyle', type: 'USHORT', value: 0},
                    	        {name: 'lowestRecPPEM', type: 'USHORT', value: 0},
                    	        {name: 'fontDirectionHint', type: 'SHORT', value: 2},
                    	        {name: 'indexToLocFormat', type: 'SHORT', value: 0},
                    	        {name: 'glyphDataFormat', type: 'SHORT', value: 0}
                    	    ], options);
                    	}
                    
                    	var head = { parse: parseHeadTable, make: makeHeadTable };
                    
                    	// The `hhea` table contains information for horizontal layout.
                    
                    	// Parse the horizontal header `hhea` table
                    	function parseHheaTable(data, start) {
                    	    var hhea = {};
                    	    var p = new parse.Parser(data, start);
                    	    hhea.version = p.parseVersion();
                    	    hhea.ascender = p.parseShort();
                    	    hhea.descender = p.parseShort();
                    	    hhea.lineGap = p.parseShort();
                    	    hhea.advanceWidthMax = p.parseUShort();
                    	    hhea.minLeftSideBearing = p.parseShort();
                    	    hhea.minRightSideBearing = p.parseShort();
                    	    hhea.xMaxExtent = p.parseShort();
                    	    hhea.caretSlopeRise = p.parseShort();
                    	    hhea.caretSlopeRun = p.parseShort();
                    	    hhea.caretOffset = p.parseShort();
                    	    p.relativeOffset += 8;
                    	    hhea.metricDataFormat = p.parseShort();
                    	    hhea.numberOfHMetrics = p.parseUShort();
                    	    return hhea;
                    	}
                    
                    	function makeHheaTable(options) {
                    	    return new table.Table('hhea', [
                    	        {name: 'version', type: 'FIXED', value: 0x00010000},
                    	        {name: 'ascender', type: 'FWORD', value: 0},
                    	        {name: 'descender', type: 'FWORD', value: 0},
                    	        {name: 'lineGap', type: 'FWORD', value: 0},
                    	        {name: 'advanceWidthMax', type: 'UFWORD', value: 0},
                    	        {name: 'minLeftSideBearing', type: 'FWORD', value: 0},
                    	        {name: 'minRightSideBearing', type: 'FWORD', value: 0},
                    	        {name: 'xMaxExtent', type: 'FWORD', value: 0},
                    	        {name: 'caretSlopeRise', type: 'SHORT', value: 1},
                    	        {name: 'caretSlopeRun', type: 'SHORT', value: 0},
                    	        {name: 'caretOffset', type: 'SHORT', value: 0},
                    	        {name: 'reserved1', type: 'SHORT', value: 0},
                    	        {name: 'reserved2', type: 'SHORT', value: 0},
                    	        {name: 'reserved3', type: 'SHORT', value: 0},
                    	        {name: 'reserved4', type: 'SHORT', value: 0},
                    	        {name: 'metricDataFormat', type: 'SHORT', value: 0},
                    	        {name: 'numberOfHMetrics', type: 'USHORT', value: 0}
                    	    ], options);
                    	}
                    
                    	var hhea = { parse: parseHheaTable, make: makeHheaTable };
                    
                    	// The `hmtx` table contains the horizontal metrics for all glyphs.
                    
                    	// Parse the `hmtx` table, which contains the horizontal metrics for all glyphs.
                    	// This function augments the glyph array, adding the advanceWidth and leftSideBearing to each glyph.
                    	function parseHmtxTable(data, start, numMetrics, numGlyphs, glyphs) {
                    	    var advanceWidth;
                    	    var leftSideBearing;
                    	    var p = new parse.Parser(data, start);
                    	    for (var i = 0; i < numGlyphs; i += 1) {
                    	        // If the font is monospaced, only one entry is needed. This last entry applies to all subsequent glyphs.
                    	        if (i < numMetrics) {
                    	            advanceWidth = p.parseUShort();
                    	            leftSideBearing = p.parseShort();
                    	        }
                    
                    	        var glyph = glyphs.get(i);
                    	        glyph.advanceWidth = advanceWidth;
                    	        glyph.leftSideBearing = leftSideBearing;
                    	    }
                    	}
                    
                    	function makeHmtxTable(glyphs) {
                    	    var t = new table.Table('hmtx', []);
                    	    for (var i = 0; i < glyphs.length; i += 1) {
                    	        var glyph = glyphs.get(i);
                    	        var advanceWidth = glyph.advanceWidth || 0;
                    	        var leftSideBearing = glyph.leftSideBearing || 0;
                    	        t.fields.push({name: 'advanceWidth_' + i, type: 'USHORT', value: advanceWidth});
                    	        t.fields.push({name: 'leftSideBearing_' + i, type: 'SHORT', value: leftSideBearing});
                    	    }
                    
                    	    return t;
                    	}
                    
                    	var hmtx = { parse: parseHmtxTable, make: makeHmtxTable };
                    
                    	// The `ltag` table stores IETF BCP-47 language tags. It allows supporting
                    
                    	function makeLtagTable(tags) {
                    	    var result = new table.Table('ltag', [
                    	        {name: 'version', type: 'ULONG', value: 1},
                    	        {name: 'flags', type: 'ULONG', value: 0},
                    	        {name: 'numTags', type: 'ULONG', value: tags.length}
                    	    ]);
                    
                    	    var stringPool = '';
                    	    var stringPoolOffset = 12 + tags.length * 4;
                    	    for (var i = 0; i < tags.length; ++i) {
                    	        var pos = stringPool.indexOf(tags[i]);
                    	        if (pos < 0) {
                    	            pos = stringPool.length;
                    	            stringPool += tags[i];
                    	        }
                    
                    	        result.fields.push({name: 'offset ' + i, type: 'USHORT', value: stringPoolOffset + pos});
                    	        result.fields.push({name: 'length ' + i, type: 'USHORT', value: tags[i].length});
                    	    }
                    
                    	    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});
                    	    return result;
                    	}
                    
                    	function parseLtagTable(data, start) {
                    	    var p = new parse.Parser(data, start);
                    	    var tableVersion = p.parseULong();
                    	    check.argument(tableVersion === 1, 'Unsupported ltag table version.');
                    	    // The 'ltag' specification does not define any flags; skip the field.
                    	    p.skip('uLong', 1);
                    	    var numTags = p.parseULong();
                    
                    	    var tags = [];
                    	    for (var i = 0; i < numTags; i++) {
                    	        var tag = '';
                    	        var offset = start + p.parseUShort();
                    	        var length = p.parseUShort();
                    	        for (var j = offset; j < offset + length; ++j) {
                    	            tag += String.fromCharCode(data.getInt8(j));
                    	        }
                    
                    	        tags.push(tag);
                    	    }
                    
                    	    return tags;
                    	}
                    
                    	var ltag = { make: makeLtagTable, parse: parseLtagTable };
                    
                    	// The `maxp` table establishes the memory requirements for the font.
                    
                    	// Parse the maximum profile `maxp` table.
                    	function parseMaxpTable(data, start) {
                    	    var maxp = {};
                    	    var p = new parse.Parser(data, start);
                    	    maxp.version = p.parseVersion();
                    	    maxp.numGlyphs = p.parseUShort();
                    	    if (maxp.version === 1.0) {
                    	        maxp.maxPoints = p.parseUShort();
                    	        maxp.maxContours = p.parseUShort();
                    	        maxp.maxCompositePoints = p.parseUShort();
                    	        maxp.maxCompositeContours = p.parseUShort();
                    	        maxp.maxZones = p.parseUShort();
                    	        maxp.maxTwilightPoints = p.parseUShort();
                    	        maxp.maxStorage = p.parseUShort();
                    	        maxp.maxFunctionDefs = p.parseUShort();
                    	        maxp.maxInstructionDefs = p.parseUShort();
                    	        maxp.maxStackElements = p.parseUShort();
                    	        maxp.maxSizeOfInstructions = p.parseUShort();
                    	        maxp.maxComponentElements = p.parseUShort();
                    	        maxp.maxComponentDepth = p.parseUShort();
                    	    }
                    
                    	    return maxp;
                    	}
                    
                    	function makeMaxpTable(numGlyphs) {
                    	    return new table.Table('maxp', [
                    	        {name: 'version', type: 'FIXED', value: 0x00005000},
                    	        {name: 'numGlyphs', type: 'USHORT', value: numGlyphs}
                    	    ]);
                    	}
                    
                    	var maxp = { parse: parseMaxpTable, make: makeMaxpTable };
                    
                    	// The `name` naming table.
                    
                    	// NameIDs for the name table.
                    	var nameTableNames = [
                    	    'copyright',              // 0
                    	    'fontFamily',             // 1
                    	    'fontSubfamily',          // 2
                    	    'uniqueID',               // 3
                    	    'fullName',               // 4
                    	    'version',                // 5
                    	    'postScriptName',         // 6
                    	    'trademark',              // 7
                    	    'manufacturer',           // 8
                    	    'designer',               // 9
                    	    'description',            // 10
                    	    'manufacturerURL',        // 11
                    	    'designerURL',            // 12
                    	    'license',                // 13
                    	    'licenseURL',             // 14
                    	    'reserved',               // 15
                    	    'preferredFamily',        // 16
                    	    'preferredSubfamily',     // 17
                    	    'compatibleFullName',     // 18
                    	    'sampleText',             // 19
                    	    'postScriptFindFontName', // 20
                    	    'wwsFamily',              // 21
                    	    'wwsSubfamily'            // 22
                    	];
                    
                    	var macLanguages = {
                    	    0: 'en',
                    	    1: 'fr',
                    	    2: 'de',
                    	    3: 'it',
                    	    4: 'nl',
                    	    5: 'sv',
                    	    6: 'es',
                    	    7: 'da',
                    	    8: 'pt',
                    	    9: 'no',
                    	    10: 'he',
                    	    11: 'ja',
                    	    12: 'ar',
                    	    13: 'fi',
                    	    14: 'el',
                    	    15: 'is',
                    	    16: 'mt',
                    	    17: 'tr',
                    	    18: 'hr',
                    	    19: 'zh-Hant',
                    	    20: 'ur',
                    	    21: 'hi',
                    	    22: 'th',
                    	    23: 'ko',
                    	    24: 'lt',
                    	    25: 'pl',
                    	    26: 'hu',
                    	    27: 'es',
                    	    28: 'lv',
                    	    29: 'se',
                    	    30: 'fo',
                    	    31: 'fa',
                    	    32: 'ru',
                    	    33: 'zh',
                    	    34: 'nl-BE',
                    	    35: 'ga',
                    	    36: 'sq',
                    	    37: 'ro',
                    	    38: 'cz',
                    	    39: 'sk',
                    	    40: 'si',
                    	    41: 'yi',
                    	    42: 'sr',
                    	    43: 'mk',
                    	    44: 'bg',
                    	    45: 'uk',
                    	    46: 'be',
                    	    47: 'uz',
                    	    48: 'kk',
                    	    49: 'az-Cyrl',
                    	    50: 'az-Arab',
                    	    51: 'hy',
                    	    52: 'ka',
                    	    53: 'mo',
                    	    54: 'ky',
                    	    55: 'tg',
                    	    56: 'tk',
                    	    57: 'mn-CN',
                    	    58: 'mn',
                    	    59: 'ps',
                    	    60: 'ks',
                    	    61: 'ku',
                    	    62: 'sd',
                    	    63: 'bo',
                    	    64: 'ne',
                    	    65: 'sa',
                    	    66: 'mr',
                    	    67: 'bn',
                    	    68: 'as',
                    	    69: 'gu',
                    	    70: 'pa',
                    	    71: 'or',
                    	    72: 'ml',
                    	    73: 'kn',
                    	    74: 'ta',
                    	    75: 'te',
                    	    76: 'si',
                    	    77: 'my',
                    	    78: 'km',
                    	    79: 'lo',
                    	    80: 'vi',
                    	    81: 'id',
                    	    82: 'tl',
                    	    83: 'ms',
                    	    84: 'ms-Arab',
                    	    85: 'am',
                    	    86: 'ti',
                    	    87: 'om',
                    	    88: 'so',
                    	    89: 'sw',
                    	    90: 'rw',
                    	    91: 'rn',
                    	    92: 'ny',
                    	    93: 'mg',
                    	    94: 'eo',
                    	    128: 'cy',
                    	    129: 'eu',
                    	    130: 'ca',
                    	    131: 'la',
                    	    132: 'qu',
                    	    133: 'gn',
                    	    134: 'ay',
                    	    135: 'tt',
                    	    136: 'ug',
                    	    137: 'dz',
                    	    138: 'jv',
                    	    139: 'su',
                    	    140: 'gl',
                    	    141: 'af',
                    	    142: 'br',
                    	    143: 'iu',
                    	    144: 'gd',
                    	    145: 'gv',
                    	    146: 'ga',
                    	    147: 'to',
                    	    148: 'el-polyton',
                    	    149: 'kl',
                    	    150: 'az',
                    	    151: 'nn'
                    	};
                    
                    	// MacOS language ID → MacOS script ID
                    	//
                    	// Note that the script ID is not sufficient to determine what encoding
                    	// to use in TrueType files. For some languages, MacOS used a modification
                    	// of a mainstream script. For example, an Icelandic name would be stored
                    	// with smRoman in the TrueType naming table, but the actual encoding
                    	// is a special Icelandic version of the normal Macintosh Roman encoding.
                    	// As another example, Inuktitut uses an 8-bit encoding for Canadian Aboriginal
                    	// Syllables but MacOS had run out of available script codes, so this was
                    	// done as a (pretty radical) "modification" of Ethiopic.
                    	//
                    	// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
                    	var macLanguageToScript = {
                    	    0: 0,  // langEnglish → smRoman
                    	    1: 0,  // langFrench → smRoman
                    	    2: 0,  // langGerman → smRoman
                    	    3: 0,  // langItalian → smRoman
                    	    4: 0,  // langDutch → smRoman
                    	    5: 0,  // langSwedish → smRoman
                    	    6: 0,  // langSpanish → smRoman
                    	    7: 0,  // langDanish → smRoman
                    	    8: 0,  // langPortuguese → smRoman
                    	    9: 0,  // langNorwegian → smRoman
                    	    10: 5,  // langHebrew → smHebrew
                    	    11: 1,  // langJapanese → smJapanese
                    	    12: 4,  // langArabic → smArabic
                    	    13: 0,  // langFinnish → smRoman
                    	    14: 6,  // langGreek → smGreek
                    	    15: 0,  // langIcelandic → smRoman (modified)
                    	    16: 0,  // langMaltese → smRoman
                    	    17: 0,  // langTurkish → smRoman (modified)
                    	    18: 0,  // langCroatian → smRoman (modified)
                    	    19: 2,  // langTradChinese → smTradChinese
                    	    20: 4,  // langUrdu → smArabic
                    	    21: 9,  // langHindi → smDevanagari
                    	    22: 21,  // langThai → smThai
                    	    23: 3,  // langKorean → smKorean
                    	    24: 29,  // langLithuanian → smCentralEuroRoman
                    	    25: 29,  // langPolish → smCentralEuroRoman
                    	    26: 29,  // langHungarian → smCentralEuroRoman
                    	    27: 29,  // langEstonian → smCentralEuroRoman
                    	    28: 29,  // langLatvian → smCentralEuroRoman
                    	    29: 0,  // langSami → smRoman
                    	    30: 0,  // langFaroese → smRoman (modified)
                    	    31: 4,  // langFarsi → smArabic (modified)
                    	    32: 7,  // langRussian → smCyrillic
                    	    33: 25,  // langSimpChinese → smSimpChinese
                    	    34: 0,  // langFlemish → smRoman
                    	    35: 0,  // langIrishGaelic → smRoman (modified)
                    	    36: 0,  // langAlbanian → smRoman
                    	    37: 0,  // langRomanian → smRoman (modified)
                    	    38: 29,  // langCzech → smCentralEuroRoman
                    	    39: 29,  // langSlovak → smCentralEuroRoman
                    	    40: 0,  // langSlovenian → smRoman (modified)
                    	    41: 5,  // langYiddish → smHebrew
                    	    42: 7,  // langSerbian → smCyrillic
                    	    43: 7,  // langMacedonian → smCyrillic
                    	    44: 7,  // langBulgarian → smCyrillic
                    	    45: 7,  // langUkrainian → smCyrillic (modified)
                    	    46: 7,  // langByelorussian → smCyrillic
                    	    47: 7,  // langUzbek → smCyrillic
                    	    48: 7,  // langKazakh → smCyrillic
                    	    49: 7,  // langAzerbaijani → smCyrillic
                    	    50: 4,  // langAzerbaijanAr → smArabic
                    	    51: 24,  // langArmenian → smArmenian
                    	    52: 23,  // langGeorgian → smGeorgian
                    	    53: 7,  // langMoldavian → smCyrillic
                    	    54: 7,  // langKirghiz → smCyrillic
                    	    55: 7,  // langTajiki → smCyrillic
                    	    56: 7,  // langTurkmen → smCyrillic
                    	    57: 27,  // langMongolian → smMongolian
                    	    58: 7,  // langMongolianCyr → smCyrillic
                    	    59: 4,  // langPashto → smArabic
                    	    60: 4,  // langKurdish → smArabic
                    	    61: 4,  // langKashmiri → smArabic
                    	    62: 4,  // langSindhi → smArabic
                    	    63: 26,  // langTibetan → smTibetan
                    	    64: 9,  // langNepali → smDevanagari
                    	    65: 9,  // langSanskrit → smDevanagari
                    	    66: 9,  // langMarathi → smDevanagari
                    	    67: 13,  // langBengali → smBengali
                    	    68: 13,  // langAssamese → smBengali
                    	    69: 11,  // langGujarati → smGujarati
                    	    70: 10,  // langPunjabi → smGurmukhi
                    	    71: 12,  // langOriya → smOriya
                    	    72: 17,  // langMalayalam → smMalayalam
                    	    73: 16,  // langKannada → smKannada
                    	    74: 14,  // langTamil → smTamil
                    	    75: 15,  // langTelugu → smTelugu
                    	    76: 18,  // langSinhalese → smSinhalese
                    	    77: 19,  // langBurmese → smBurmese
                    	    78: 20,  // langKhmer → smKhmer
                    	    79: 22,  // langLao → smLao
                    	    80: 30,  // langVietnamese → smVietnamese
                    	    81: 0,  // langIndonesian → smRoman
                    	    82: 0,  // langTagalog → smRoman
                    	    83: 0,  // langMalayRoman → smRoman
                    	    84: 4,  // langMalayArabic → smArabic
                    	    85: 28,  // langAmharic → smEthiopic
                    	    86: 28,  // langTigrinya → smEthiopic
                    	    87: 28,  // langOromo → smEthiopic
                    	    88: 0,  // langSomali → smRoman
                    	    89: 0,  // langSwahili → smRoman
                    	    90: 0,  // langKinyarwanda → smRoman
                    	    91: 0,  // langRundi → smRoman
                    	    92: 0,  // langNyanja → smRoman
                    	    93: 0,  // langMalagasy → smRoman
                    	    94: 0,  // langEsperanto → smRoman
                    	    128: 0,  // langWelsh → smRoman (modified)
                    	    129: 0,  // langBasque → smRoman
                    	    130: 0,  // langCatalan → smRoman
                    	    131: 0,  // langLatin → smRoman
                    	    132: 0,  // langQuechua → smRoman
                    	    133: 0,  // langGuarani → smRoman
                    	    134: 0,  // langAymara → smRoman
                    	    135: 7,  // langTatar → smCyrillic
                    	    136: 4,  // langUighur → smArabic
                    	    137: 26,  // langDzongkha → smTibetan
                    	    138: 0,  // langJavaneseRom → smRoman
                    	    139: 0,  // langSundaneseRom → smRoman
                    	    140: 0,  // langGalician → smRoman
                    	    141: 0,  // langAfrikaans → smRoman
                    	    142: 0,  // langBreton → smRoman (modified)
                    	    143: 28,  // langInuktitut → smEthiopic (modified)
                    	    144: 0,  // langScottishGaelic → smRoman (modified)
                    	    145: 0,  // langManxGaelic → smRoman (modified)
                    	    146: 0,  // langIrishGaelicScript → smRoman (modified)
                    	    147: 0,  // langTongan → smRoman
                    	    148: 6,  // langGreekAncient → smRoman
                    	    149: 0,  // langGreenlandic → smRoman
                    	    150: 0,  // langAzerbaijanRoman → smRoman
                    	    151: 0   // langNynorsk → smRoman
                    	};
                    
                    	// While Microsoft indicates a region/country for all its language
                    	// IDs, we omit the region code if it's equal to the "most likely
                    	// region subtag" according to Unicode CLDR. For scripts, we omit
                    	// the subtag if it is equal to the Suppress-Script entry in the
                    	// IANA language subtag registry for IETF BCP 47.
                    	//
                    	// For example, Microsoft states that its language code 0x041A is
                    	// Croatian in Croatia. We transform this to the BCP 47 language code 'hr'
                    	// and not 'hr-HR' because Croatia is the default country for Croatian,
                    	// according to Unicode CLDR. As another example, Microsoft states
                    	// that 0x101A is Croatian (Latin) in Bosnia-Herzegovina. We transform
                    	// this to 'hr-BA' and not 'hr-Latn-BA' because Latin is the default script
                    	// for the Croatian language, according to IANA.
                    	//
                    	// http://www.unicode.org/cldr/charts/latest/supplemental/likely_subtags.html
                    	// http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry
                    	var windowsLanguages = {
                    	    0x0436: 'af',
                    	    0x041C: 'sq',
                    	    0x0484: 'gsw',
                    	    0x045E: 'am',
                    	    0x1401: 'ar-DZ',
                    	    0x3C01: 'ar-BH',
                    	    0x0C01: 'ar',
                    	    0x0801: 'ar-IQ',
                    	    0x2C01: 'ar-JO',
                    	    0x3401: 'ar-KW',
                    	    0x3001: 'ar-LB',
                    	    0x1001: 'ar-LY',
                    	    0x1801: 'ary',
                    	    0x2001: 'ar-OM',
                    	    0x4001: 'ar-QA',
                    	    0x0401: 'ar-SA',
                    	    0x2801: 'ar-SY',
                    	    0x1C01: 'aeb',
                    	    0x3801: 'ar-AE',
                    	    0x2401: 'ar-YE',
                    	    0x042B: 'hy',
                    	    0x044D: 'as',
                    	    0x082C: 'az-Cyrl',
                    	    0x042C: 'az',
                    	    0x046D: 'ba',
                    	    0x042D: 'eu',
                    	    0x0423: 'be',
                    	    0x0845: 'bn',
                    	    0x0445: 'bn-IN',
                    	    0x201A: 'bs-Cyrl',
                    	    0x141A: 'bs',
                    	    0x047E: 'br',
                    	    0x0402: 'bg',
                    	    0x0403: 'ca',
                    	    0x0C04: 'zh-HK',
                    	    0x1404: 'zh-MO',
                    	    0x0804: 'zh',
                    	    0x1004: 'zh-SG',
                    	    0x0404: 'zh-TW',
                    	    0x0483: 'co',
                    	    0x041A: 'hr',
                    	    0x101A: 'hr-BA',
                    	    0x0405: 'cs',
                    	    0x0406: 'da',
                    	    0x048C: 'prs',
                    	    0x0465: 'dv',
                    	    0x0813: 'nl-BE',
                    	    0x0413: 'nl',
                    	    0x0C09: 'en-AU',
                    	    0x2809: 'en-BZ',
                    	    0x1009: 'en-CA',
                    	    0x2409: 'en-029',
                    	    0x4009: 'en-IN',
                    	    0x1809: 'en-IE',
                    	    0x2009: 'en-JM',
                    	    0x4409: 'en-MY',
                    	    0x1409: 'en-NZ',
                    	    0x3409: 'en-PH',
                    	    0x4809: 'en-SG',
                    	    0x1C09: 'en-ZA',
                    	    0x2C09: 'en-TT',
                    	    0x0809: 'en-GB',
                    	    0x0409: 'en',
                    	    0x3009: 'en-ZW',
                    	    0x0425: 'et',
                    	    0x0438: 'fo',
                    	    0x0464: 'fil',
                    	    0x040B: 'fi',
                    	    0x080C: 'fr-BE',
                    	    0x0C0C: 'fr-CA',
                    	    0x040C: 'fr',
                    	    0x140C: 'fr-LU',
                    	    0x180C: 'fr-MC',
                    	    0x100C: 'fr-CH',
                    	    0x0462: 'fy',
                    	    0x0456: 'gl',
                    	    0x0437: 'ka',
                    	    0x0C07: 'de-AT',
                    	    0x0407: 'de',
                    	    0x1407: 'de-LI',
                    	    0x1007: 'de-LU',
                    	    0x0807: 'de-CH',
                    	    0x0408: 'el',
                    	    0x046F: 'kl',
                    	    0x0447: 'gu',
                    	    0x0468: 'ha',
                    	    0x040D: 'he',
                    	    0x0439: 'hi',
                    	    0x040E: 'hu',
                    	    0x040F: 'is',
                    	    0x0470: 'ig',
                    	    0x0421: 'id',
                    	    0x045D: 'iu',
                    	    0x085D: 'iu-Latn',
                    	    0x083C: 'ga',
                    	    0x0434: 'xh',
                    	    0x0435: 'zu',
                    	    0x0410: 'it',
                    	    0x0810: 'it-CH',
                    	    0x0411: 'ja',
                    	    0x044B: 'kn',
                    	    0x043F: 'kk',
                    	    0x0453: 'km',
                    	    0x0486: 'quc',
                    	    0x0487: 'rw',
                    	    0x0441: 'sw',
                    	    0x0457: 'kok',
                    	    0x0412: 'ko',
                    	    0x0440: 'ky',
                    	    0x0454: 'lo',
                    	    0x0426: 'lv',
                    	    0x0427: 'lt',
                    	    0x082E: 'dsb',
                    	    0x046E: 'lb',
                    	    0x042F: 'mk',
                    	    0x083E: 'ms-BN',
                    	    0x043E: 'ms',
                    	    0x044C: 'ml',
                    	    0x043A: 'mt',
                    	    0x0481: 'mi',
                    	    0x047A: 'arn',
                    	    0x044E: 'mr',
                    	    0x047C: 'moh',
                    	    0x0450: 'mn',
                    	    0x0850: 'mn-CN',
                    	    0x0461: 'ne',
                    	    0x0414: 'nb',
                    	    0x0814: 'nn',
                    	    0x0482: 'oc',
                    	    0x0448: 'or',
                    	    0x0463: 'ps',
                    	    0x0415: 'pl',
                    	    0x0416: 'pt',
                    	    0x0816: 'pt-PT',
                    	    0x0446: 'pa',
                    	    0x046B: 'qu-BO',
                    	    0x086B: 'qu-EC',
                    	    0x0C6B: 'qu',
                    	    0x0418: 'ro',
                    	    0x0417: 'rm',
                    	    0x0419: 'ru',
                    	    0x243B: 'smn',
                    	    0x103B: 'smj-NO',
                    	    0x143B: 'smj',
                    	    0x0C3B: 'se-FI',
                    	    0x043B: 'se',
                    	    0x083B: 'se-SE',
                    	    0x203B: 'sms',
                    	    0x183B: 'sma-NO',
                    	    0x1C3B: 'sms',
                    	    0x044F: 'sa',
                    	    0x1C1A: 'sr-Cyrl-BA',
                    	    0x0C1A: 'sr',
                    	    0x181A: 'sr-Latn-BA',
                    	    0x081A: 'sr-Latn',
                    	    0x046C: 'nso',
                    	    0x0432: 'tn',
                    	    0x045B: 'si',
                    	    0x041B: 'sk',
                    	    0x0424: 'sl',
                    	    0x2C0A: 'es-AR',
                    	    0x400A: 'es-BO',
                    	    0x340A: 'es-CL',
                    	    0x240A: 'es-CO',
                    	    0x140A: 'es-CR',
                    	    0x1C0A: 'es-DO',
                    	    0x300A: 'es-EC',
                    	    0x440A: 'es-SV',
                    	    0x100A: 'es-GT',
                    	    0x480A: 'es-HN',
                    	    0x080A: 'es-MX',
                    	    0x4C0A: 'es-NI',
                    	    0x180A: 'es-PA',
                    	    0x3C0A: 'es-PY',
                    	    0x280A: 'es-PE',
                    	    0x500A: 'es-PR',
                    
                    	    // Microsoft has defined two different language codes for
                    	    // “Spanish with modern sorting” and “Spanish with traditional
                    	    // sorting”. This makes sense for collation APIs, and it would be
                    	    // possible to express this in BCP 47 language tags via Unicode
                    	    // extensions (eg., es-u-co-trad is Spanish with traditional
                    	    // sorting). However, for storing names in fonts, the distinction
                    	    // does not make sense, so we give “es” in both cases.
                    	    0x0C0A: 'es',
                    	    0x040A: 'es',
                    
                    	    0x540A: 'es-US',
                    	    0x380A: 'es-UY',
                    	    0x200A: 'es-VE',
                    	    0x081D: 'sv-FI',
                    	    0x041D: 'sv',
                    	    0x045A: 'syr',
                    	    0x0428: 'tg',
                    	    0x085F: 'tzm',
                    	    0x0449: 'ta',
                    	    0x0444: 'tt',
                    	    0x044A: 'te',
                    	    0x041E: 'th',
                    	    0x0451: 'bo',
                    	    0x041F: 'tr',
                    	    0x0442: 'tk',
                    	    0x0480: 'ug',
                    	    0x0422: 'uk',
                    	    0x042E: 'hsb',
                    	    0x0420: 'ur',
                    	    0x0843: 'uz-Cyrl',
                    	    0x0443: 'uz',
                    	    0x042A: 'vi',
                    	    0x0452: 'cy',
                    	    0x0488: 'wo',
                    	    0x0485: 'sah',
                    	    0x0478: 'ii',
                    	    0x046A: 'yo'
                    	};
                    
                    	// Returns a IETF BCP 47 language code, for example 'zh-Hant'
                    	// for 'Chinese in the traditional script'.
                    	function getLanguageCode(platformID, languageID, ltag) {
                    	    switch (platformID) {
                    	        case 0:  // Unicode
                    	            if (languageID === 0xFFFF) {
                    	                return 'und';
                    	            } else if (ltag) {
                    	                return ltag[languageID];
                    	            }
                    
                    	            break;
                    
                    	        case 1:  // Macintosh
                    	            return macLanguages[languageID];
                    
                    	        case 3:  // Windows
                    	            return windowsLanguages[languageID];
                    	    }
                    
                    	    return undefined;
                    	}
                    
                    	var utf16 = 'utf-16';
                    
                    	// MacOS script ID → encoding. This table stores the default case,
                    	// which can be overridden by macLanguageEncodings.
                    	var macScriptEncodings = {
                    	    0: 'macintosh',           // smRoman
                    	    1: 'x-mac-japanese',      // smJapanese
                    	    2: 'x-mac-chinesetrad',   // smTradChinese
                    	    3: 'x-mac-korean',        // smKorean
                    	    6: 'x-mac-greek',         // smGreek
                    	    7: 'x-mac-cyrillic',      // smCyrillic
                    	    9: 'x-mac-devanagai',     // smDevanagari
                    	    10: 'x-mac-gurmukhi',     // smGurmukhi
                    	    11: 'x-mac-gujarati',     // smGujarati
                    	    12: 'x-mac-oriya',        // smOriya
                    	    13: 'x-mac-bengali',      // smBengali
                    	    14: 'x-mac-tamil',        // smTamil
                    	    15: 'x-mac-telugu',       // smTelugu
                    	    16: 'x-mac-kannada',      // smKannada
                    	    17: 'x-mac-malayalam',    // smMalayalam
                    	    18: 'x-mac-sinhalese',    // smSinhalese
                    	    19: 'x-mac-burmese',      // smBurmese
                    	    20: 'x-mac-khmer',        // smKhmer
                    	    21: 'x-mac-thai',         // smThai
                    	    22: 'x-mac-lao',          // smLao
                    	    23: 'x-mac-georgian',     // smGeorgian
                    	    24: 'x-mac-armenian',     // smArmenian
                    	    25: 'x-mac-chinesesimp',  // smSimpChinese
                    	    26: 'x-mac-tibetan',      // smTibetan
                    	    27: 'x-mac-mongolian',    // smMongolian
                    	    28: 'x-mac-ethiopic',     // smEthiopic
                    	    29: 'x-mac-ce',           // smCentralEuroRoman
                    	    30: 'x-mac-vietnamese',   // smVietnamese
                    	    31: 'x-mac-extarabic'     // smExtArabic
                    	};
                    
                    	// MacOS language ID → encoding. This table stores the exceptional
                    	// cases, which override macScriptEncodings. For writing MacOS naming
                    	// tables, we need to emit a MacOS script ID. Therefore, we cannot
                    	// merge macScriptEncodings into macLanguageEncodings.
                    	//
                    	// http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/Readme.txt
                    	var macLanguageEncodings = {
                    	    15: 'x-mac-icelandic',    // langIcelandic
                    	    17: 'x-mac-turkish',      // langTurkish
                    	    18: 'x-mac-croatian',     // langCroatian
                    	    24: 'x-mac-ce',           // langLithuanian
                    	    25: 'x-mac-ce',           // langPolish
                    	    26: 'x-mac-ce',           // langHungarian
                    	    27: 'x-mac-ce',           // langEstonian
                    	    28: 'x-mac-ce',           // langLatvian
                    	    30: 'x-mac-icelandic',    // langFaroese
                    	    37: 'x-mac-romanian',     // langRomanian
                    	    38: 'x-mac-ce',           // langCzech
                    	    39: 'x-mac-ce',           // langSlovak
                    	    40: 'x-mac-ce',           // langSlovenian
                    	    143: 'x-mac-inuit',       // langInuktitut
                    	    146: 'x-mac-gaelic'       // langIrishGaelicScript
                    	};
                    
                    	function getEncoding(platformID, encodingID, languageID) {
                    	    switch (platformID) {
                    	        case 0:  // Unicode
                    	            return utf16;
                    
                    	        case 1:  // Apple Macintosh
                    	            return macLanguageEncodings[languageID] || macScriptEncodings[encodingID];
                    
                    	        case 3:  // Microsoft Windows
                    	            if (encodingID === 1 || encodingID === 10) {
                    	                return utf16;
                    	            }
                    
                    	            break;
                    	    }
                    
                    	    return undefined;
                    	}
                    
                    	// Parse the naming `name` table.
                    	// FIXME: Format 1 additional fields are not supported yet.
                    	// ltag is the content of the `ltag' table, such as ['en', 'zh-Hans', 'de-CH-1904'].
                    	function parseNameTable(data, start, ltag) {
                    	    var name = {};
                    	    var p = new parse.Parser(data, start);
                    	    var format = p.parseUShort();
                    	    var count = p.parseUShort();
                    	    var stringOffset = p.offset + p.parseUShort();
                    	    for (var i = 0; i < count; i++) {
                    	        var platformID = p.parseUShort();
                    	        var encodingID = p.parseUShort();
                    	        var languageID = p.parseUShort();
                    	        var nameID = p.parseUShort();
                    	        var property = nameTableNames[nameID] || nameID;
                    	        var byteLength = p.parseUShort();
                    	        var offset = p.parseUShort();
                    	        var language = getLanguageCode(platformID, languageID, ltag);
                    	        var encoding = getEncoding(platformID, encodingID, languageID);
                    	        if (encoding !== undefined && language !== undefined) {
                    	            var text = (void 0);
                    	            if (encoding === utf16) {
                    	                text = decode.UTF16(data, stringOffset + offset, byteLength);
                    	            } else {
                    	                text = decode.MACSTRING(data, stringOffset + offset, byteLength, encoding);
                    	            }
                    
                    	            if (text) {
                    	                var translations = name[property];
                    	                if (translations === undefined) {
                    	                    translations = name[property] = {};
                    	                }
                    
                    	                translations[language] = text;
                    	            }
                    	        }
                    	    }
                    
                    	    var langTagCount = 0;
                    	    if (format === 1) {
                    	        // FIXME: Also handle Microsoft's 'name' table 1.
                    	        langTagCount = p.parseUShort();
                    	    }
                    
                    	    return name;
                    	}
                    
                    	// {23: 'foo'} → {'foo': 23}
                    	// ['bar', 'baz'] → {'bar': 0, 'baz': 1}
                    	function reverseDict(dict) {
                    	    var result = {};
                    	    for (var key in dict) {
                    	        result[dict[key]] = parseInt(key);
                    	    }
                    
                    	    return result;
                    	}
                    
                    	function makeNameRecord(platformID, encodingID, languageID, nameID, length, offset) {
                    	    return new table.Record('NameRecord', [
                    	        {name: 'platformID', type: 'USHORT', value: platformID},
                    	        {name: 'encodingID', type: 'USHORT', value: encodingID},
                    	        {name: 'languageID', type: 'USHORT', value: languageID},
                    	        {name: 'nameID', type: 'USHORT', value: nameID},
                    	        {name: 'length', type: 'USHORT', value: length},
                    	        {name: 'offset', type: 'USHORT', value: offset}
                    	    ]);
                    	}
                    
                    	// Finds the position of needle in haystack, or -1 if not there.
                    	// Like String.indexOf(), but for arrays.
                    	function findSubArray(needle, haystack) {
                    	    var needleLength = needle.length;
                    	    var limit = haystack.length - needleLength + 1;
                    
                    	    loop:
                    	    for (var pos = 0; pos < limit; pos++) {
                    	        // for (; pos < limit; pos++) {
                    	            for (var k = 0; k < needleLength; k++) {
                    	                if (haystack[pos + k] !== needle[k]) {
                    	                    continue loop;
                    	                }
                    	            }
                    
                    	            return pos;
                    	        // }
                    	    }
                    
                    	    return -1;
                    	}
                    
                    	function addStringToPool(s, pool) {
                    	    var offset = findSubArray(s, pool);
                    	    if (offset < 0) {
                    	        offset = pool.length;
                    	        var i = 0;
                    	        var len = s.length;
                    	        for (; i < len; ++i) {
                    	            pool.push(s[i]);
                    	        }
                    
                    	    }
                    
                    	    return offset;
                    	}
                    
                    	function makeNameTable(names, ltag) {
                    	    var nameID;
                    	    var nameIDs = [];
                    
                    	    var namesWithNumericKeys = {};
                    	    var nameTableIds = reverseDict(nameTableNames);
                    	    for (var key in names) {
                    	        var id = nameTableIds[key];
                    	        if (id === undefined) {
                    	            id = key;
                    	        }
                    
                    	        nameID = parseInt(id);
                    
                    	        if (isNaN(nameID)) {
                    	            throw new Error('Name table entry "' + key + '" does not exist, see nameTableNames for complete list.');
                    	        }
                    
                    	        namesWithNumericKeys[nameID] = names[key];
                    	        nameIDs.push(nameID);
                    	    }
                    
                    	    var macLanguageIds = reverseDict(macLanguages);
                    	    var windowsLanguageIds = reverseDict(windowsLanguages);
                    
                    	    var nameRecords = [];
                    	    var stringPool = [];
                    
                    	    for (var i = 0; i < nameIDs.length; i++) {
                    	        nameID = nameIDs[i];
                    	        var translations = namesWithNumericKeys[nameID];
                    	        for (var lang in translations) {
                    	            var text = translations[lang];
                    
                    	            // For MacOS, we try to emit the name in the form that was introduced
                    	            // in the initial version of the TrueType spec (in the late 1980s).
                    	            // However, this can fail for various reasons: the requested BCP 47
                    	            // language code might not have an old-style Mac equivalent;
                    	            // we might not have a codec for the needed character encoding;
                    	            // or the name might contain characters that cannot be expressed
                    	            // in the old-style Macintosh encoding. In case of failure, we emit
                    	            // the name in a more modern fashion (Unicode encoding with BCP 47
                    	            // language tags) that is recognized by MacOS 10.5, released in 2009.
                    	            // If fonts were only read by operating systems, we could simply
                    	            // emit all names in the modern form; this would be much easier.
                    	            // However, there are many applications and libraries that read
                    	            // 'name' tables directly, and these will usually only recognize
                    	            // the ancient form (silently skipping the unrecognized names).
                    	            var macPlatform = 1;  // Macintosh
                    	            var macLanguage = macLanguageIds[lang];
                    	            var macScript = macLanguageToScript[macLanguage];
                    	            var macEncoding = getEncoding(macPlatform, macScript, macLanguage);
                    	            var macName = encode.MACSTRING(text, macEncoding);
                    	            if (macName === undefined) {
                    	                macPlatform = 0;  // Unicode
                    	                macLanguage = ltag.indexOf(lang);
                    	                if (macLanguage < 0) {
                    	                    macLanguage = ltag.length;
                    	                    ltag.push(lang);
                    	                }
                    
                    	                macScript = 4;  // Unicode 2.0 and later
                    	                macName = encode.UTF16(text);
                    	            }
                    
                    	            var macNameOffset = addStringToPool(macName, stringPool);
                    	            nameRecords.push(makeNameRecord(macPlatform, macScript, macLanguage,
                    	                                            nameID, macName.length, macNameOffset));
                    
                    	            var winLanguage = windowsLanguageIds[lang];
                    	            if (winLanguage !== undefined) {
                    	                var winName = encode.UTF16(text);
                    	                var winNameOffset = addStringToPool(winName, stringPool);
                    	                nameRecords.push(makeNameRecord(3, 1, winLanguage,
                    	                                                nameID, winName.length, winNameOffset));
                    	            }
                    	        }
                    	    }
                    
                    	    nameRecords.sort(function(a, b) {
                    	        return ((a.platformID - b.platformID) ||
                    	                (a.encodingID - b.encodingID) ||
                    	                (a.languageID - b.languageID) ||
                    	                (a.nameID - b.nameID));
                    	    });
                    
                    	    var t = new table.Table('name', [
                    	        {name: 'format', type: 'USHORT', value: 0},
                    	        {name: 'count', type: 'USHORT', value: nameRecords.length},
                    	        {name: 'stringOffset', type: 'USHORT', value: 6 + nameRecords.length * 12}
                    	    ]);
                    
                    	    for (var r = 0; r < nameRecords.length; r++) {
                    	        t.fields.push({name: 'record_' + r, type: 'RECORD', value: nameRecords[r]});
                    	    }
                    
                    	    t.fields.push({name: 'strings', type: 'LITERAL', value: stringPool});
                    	    return t;
                    	}
                    
                    	var _name = { parse: parseNameTable, make: makeNameTable };
                    
                    	// The `OS/2` table contains metrics required in OpenType fonts.
                    
                    	var unicodeRanges = [
                    	    {begin: 0x0000, end: 0x007F}, // Basic Latin
                    	    {begin: 0x0080, end: 0x00FF}, // Latin-1 Supplement
                    	    {begin: 0x0100, end: 0x017F}, // Latin Extended-A
                    	    {begin: 0x0180, end: 0x024F}, // Latin Extended-B
                    	    {begin: 0x0250, end: 0x02AF}, // IPA Extensions
                    	    {begin: 0x02B0, end: 0x02FF}, // Spacing Modifier Letters
                    	    {begin: 0x0300, end: 0x036F}, // Combining Diacritical Marks
                    	    {begin: 0x0370, end: 0x03FF}, // Greek and Coptic
                    	    {begin: 0x2C80, end: 0x2CFF}, // Coptic
                    	    {begin: 0x0400, end: 0x04FF}, // Cyrillic
                    	    {begin: 0x0530, end: 0x058F}, // Armenian
                    	    {begin: 0x0590, end: 0x05FF}, // Hebrew
                    	    {begin: 0xA500, end: 0xA63F}, // Vai
                    	    {begin: 0x0600, end: 0x06FF}, // Arabic
                    	    {begin: 0x07C0, end: 0x07FF}, // NKo
                    	    {begin: 0x0900, end: 0x097F}, // Devanagari
                    	    {begin: 0x0980, end: 0x09FF}, // Bengali
                    	    {begin: 0x0A00, end: 0x0A7F}, // Gurmukhi
                    	    {begin: 0x0A80, end: 0x0AFF}, // Gujarati
                    	    {begin: 0x0B00, end: 0x0B7F}, // Oriya
                    	    {begin: 0x0B80, end: 0x0BFF}, // Tamil
                    	    {begin: 0x0C00, end: 0x0C7F}, // Telugu
                    	    {begin: 0x0C80, end: 0x0CFF}, // Kannada
                    	    {begin: 0x0D00, end: 0x0D7F}, // Malayalam
                    	    {begin: 0x0E00, end: 0x0E7F}, // Thai
                    	    {begin: 0x0E80, end: 0x0EFF}, // Lao
                    	    {begin: 0x10A0, end: 0x10FF}, // Georgian
                    	    {begin: 0x1B00, end: 0x1B7F}, // Balinese
                    	    {begin: 0x1100, end: 0x11FF}, // Hangul Jamo
                    	    {begin: 0x1E00, end: 0x1EFF}, // Latin Extended Additional
                    	    {begin: 0x1F00, end: 0x1FFF}, // Greek Extended
                    	    {begin: 0x2000, end: 0x206F}, // General Punctuation
                    	    {begin: 0x2070, end: 0x209F}, // Superscripts And Subscripts
                    	    {begin: 0x20A0, end: 0x20CF}, // Currency Symbol
                    	    {begin: 0x20D0, end: 0x20FF}, // Combining Diacritical Marks For Symbols
                    	    {begin: 0x2100, end: 0x214F}, // Letterlike Symbols
                    	    {begin: 0x2150, end: 0x218F}, // Number Forms
                    	    {begin: 0x2190, end: 0x21FF}, // Arrows
                    	    {begin: 0x2200, end: 0x22FF}, // Mathematical Operators
                    	    {begin: 0x2300, end: 0x23FF}, // Miscellaneous Technical
                    	    {begin: 0x2400, end: 0x243F}, // Control Pictures
                    	    {begin: 0x2440, end: 0x245F}, // Optical Character Recognition
                    	    {begin: 0x2460, end: 0x24FF}, // Enclosed Alphanumerics
                    	    {begin: 0x2500, end: 0x257F}, // Box Drawing
                    	    {begin: 0x2580, end: 0x259F}, // Block Elements
                    	    {begin: 0x25A0, end: 0x25FF}, // Geometric Shapes
                    	    {begin: 0x2600, end: 0x26FF}, // Miscellaneous Symbols
                    	    {begin: 0x2700, end: 0x27BF}, // Dingbats
                    	    {begin: 0x3000, end: 0x303F}, // CJK Symbols And Punctuation
                    	    {begin: 0x3040, end: 0x309F}, // Hiragana
                    	    {begin: 0x30A0, end: 0x30FF}, // Katakana
                    	    {begin: 0x3100, end: 0x312F}, // Bopomofo
                    	    {begin: 0x3130, end: 0x318F}, // Hangul Compatibility Jamo
                    	    {begin: 0xA840, end: 0xA87F}, // Phags-pa
                    	    {begin: 0x3200, end: 0x32FF}, // Enclosed CJK Letters And Months
                    	    {begin: 0x3300, end: 0x33FF}, // CJK Compatibility
                    	    {begin: 0xAC00, end: 0xD7AF}, // Hangul Syllables
                    	    {begin: 0xD800, end: 0xDFFF}, // Non-Plane 0 *
                    	    {begin: 0x10900, end: 0x1091F}, // Phoenicia
                    	    {begin: 0x4E00, end: 0x9FFF}, // CJK Unified Ideographs
                    	    {begin: 0xE000, end: 0xF8FF}, // Private Use Area (plane 0)
                    	    {begin: 0x31C0, end: 0x31EF}, // CJK Strokes
                    	    {begin: 0xFB00, end: 0xFB4F}, // Alphabetic Presentation Forms
                    	    {begin: 0xFB50, end: 0xFDFF}, // Arabic Presentation Forms-A
                    	    {begin: 0xFE20, end: 0xFE2F}, // Combining Half Marks
                    	    {begin: 0xFE10, end: 0xFE1F}, // Vertical Forms
                    	    {begin: 0xFE50, end: 0xFE6F}, // Small Form Variants
                    	    {begin: 0xFE70, end: 0xFEFF}, // Arabic Presentation Forms-B
                    	    {begin: 0xFF00, end: 0xFFEF}, // Halfwidth And Fullwidth Forms
                    	    {begin: 0xFFF0, end: 0xFFFF}, // Specials
                    	    {begin: 0x0F00, end: 0x0FFF}, // Tibetan
                    	    {begin: 0x0700, end: 0x074F}, // Syriac
                    	    {begin: 0x0780, end: 0x07BF}, // Thaana
                    	    {begin: 0x0D80, end: 0x0DFF}, // Sinhala
                    	    {begin: 0x1000, end: 0x109F}, // Myanmar
                    	    {begin: 0x1200, end: 0x137F}, // Ethiopic
                    	    {begin: 0x13A0, end: 0x13FF}, // Cherokee
                    	    {begin: 0x1400, end: 0x167F}, // Unified Canadian Aboriginal Syllabics
                    	    {begin: 0x1680, end: 0x169F}, // Ogham
                    	    {begin: 0x16A0, end: 0x16FF}, // Runic
                    	    {begin: 0x1780, end: 0x17FF}, // Khmer
                    	    {begin: 0x1800, end: 0x18AF}, // Mongolian
                    	    {begin: 0x2800, end: 0x28FF}, // Braille Patterns
                    	    {begin: 0xA000, end: 0xA48F}, // Yi Syllables
                    	    {begin: 0x1700, end: 0x171F}, // Tagalog
                    	    {begin: 0x10300, end: 0x1032F}, // Old Italic
                    	    {begin: 0x10330, end: 0x1034F}, // Gothic
                    	    {begin: 0x10400, end: 0x1044F}, // Deseret
                    	    {begin: 0x1D000, end: 0x1D0FF}, // Byzantine Musical Symbols
                    	    {begin: 0x1D400, end: 0x1D7FF}, // Mathematical Alphanumeric Symbols
                    	    {begin: 0xFF000, end: 0xFFFFD}, // Private Use (plane 15)
                    	    {begin: 0xFE00, end: 0xFE0F}, // Variation Selectors
                    	    {begin: 0xE0000, end: 0xE007F}, // Tags
                    	    {begin: 0x1900, end: 0x194F}, // Limbu
                    	    {begin: 0x1950, end: 0x197F}, // Tai Le
                    	    {begin: 0x1980, end: 0x19DF}, // New Tai Lue
                    	    {begin: 0x1A00, end: 0x1A1F}, // Buginese
                    	    {begin: 0x2C00, end: 0x2C5F}, // Glagolitic
                    	    {begin: 0x2D30, end: 0x2D7F}, // Tifinagh
                    	    {begin: 0x4DC0, end: 0x4DFF}, // Yijing Hexagram Symbols
                    	    {begin: 0xA800, end: 0xA82F}, // Syloti Nagri
                    	    {begin: 0x10000, end: 0x1007F}, // Linear B Syllabary
                    	    {begin: 0x10140, end: 0x1018F}, // Ancient Greek Numbers
                    	    {begin: 0x10380, end: 0x1039F}, // Ugaritic
                    	    {begin: 0x103A0, end: 0x103DF}, // Old Persian
                    	    {begin: 0x10450, end: 0x1047F}, // Shavian
                    	    {begin: 0x10480, end: 0x104AF}, // Osmanya
                    	    {begin: 0x10800, end: 0x1083F}, // Cypriot Syllabary
                    	    {begin: 0x10A00, end: 0x10A5F}, // Kharoshthi
                    	    {begin: 0x1D300, end: 0x1D35F}, // Tai Xuan Jing Symbols
                    	    {begin: 0x12000, end: 0x123FF}, // Cuneiform
                    	    {begin: 0x1D360, end: 0x1D37F}, // Counting Rod Numerals
                    	    {begin: 0x1B80, end: 0x1BBF}, // Sundanese
                    	    {begin: 0x1C00, end: 0x1C4F}, // Lepcha
                    	    {begin: 0x1C50, end: 0x1C7F}, // Ol Chiki
                    	    {begin: 0xA880, end: 0xA8DF}, // Saurashtra
                    	    {begin: 0xA900, end: 0xA92F}, // Kayah Li
                    	    {begin: 0xA930, end: 0xA95F}, // Rejang
                    	    {begin: 0xAA00, end: 0xAA5F}, // Cham
                    	    {begin: 0x10190, end: 0x101CF}, // Ancient Symbols
                    	    {begin: 0x101D0, end: 0x101FF}, // Phaistos Disc
                    	    {begin: 0x102A0, end: 0x102DF}, // Carian
                    	    {begin: 0x1F030, end: 0x1F09F}  // Domino Tiles
                    	];
                    
                    	function getUnicodeRange(unicode) {
                    	    for (var i = 0; i < unicodeRanges.length; i += 1) {
                    	        var range = unicodeRanges[i];
                    	        if (unicode >= range.begin && unicode < range.end) {
                    	            return i;
                    	        }
                    	    }
                    
                    	    return -1;
                    	}
                    
                    	// Parse the OS/2 and Windows metrics `OS/2` table
                    	function parseOS2Table(data, start) {
                    	    var os2 = {};
                    	    var p = new parse.Parser(data, start);
                    	    os2.version = p.parseUShort();
                    	    os2.xAvgCharWidth = p.parseShort();
                    	    os2.usWeightClass = p.parseUShort();
                    	    os2.usWidthClass = p.parseUShort();
                    	    os2.fsType = p.parseUShort();
                    	    os2.ySubscriptXSize = p.parseShort();
                    	    os2.ySubscriptYSize = p.parseShort();
                    	    os2.ySubscriptXOffset = p.parseShort();
                    	    os2.ySubscriptYOffset = p.parseShort();
                    	    os2.ySuperscriptXSize = p.parseShort();
                    	    os2.ySuperscriptYSize = p.parseShort();
                    	    os2.ySuperscriptXOffset = p.parseShort();
                    	    os2.ySuperscriptYOffset = p.parseShort();
                    	    os2.yStrikeoutSize = p.parseShort();
                    	    os2.yStrikeoutPosition = p.parseShort();
                    	    os2.sFamilyClass = p.parseShort();
                    	    os2.panose = [];
                    	    for (var i = 0; i < 10; i++) {
                    	        os2.panose[i] = p.parseByte();
                    	    }
                    
                    	    os2.ulUnicodeRange1 = p.parseULong();
                    	    os2.ulUnicodeRange2 = p.parseULong();
                    	    os2.ulUnicodeRange3 = p.parseULong();
                    	    os2.ulUnicodeRange4 = p.parseULong();
                    	    os2.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());
                    	    os2.fsSelection = p.parseUShort();
                    	    os2.usFirstCharIndex = p.parseUShort();
                    	    os2.usLastCharIndex = p.parseUShort();
                    	    os2.sTypoAscender = p.parseShort();
                    	    os2.sTypoDescender = p.parseShort();
                    	    os2.sTypoLineGap = p.parseShort();
                    	    os2.usWinAscent = p.parseUShort();
                    	    os2.usWinDescent = p.parseUShort();
                    	    if (os2.version >= 1) {
                    	        os2.ulCodePageRange1 = p.parseULong();
                    	        os2.ulCodePageRange2 = p.parseULong();
                    	    }
                    
                    	    if (os2.version >= 2) {
                    	        os2.sxHeight = p.parseShort();
                    	        os2.sCapHeight = p.parseShort();
                    	        os2.usDefaultChar = p.parseUShort();
                    	        os2.usBreakChar = p.parseUShort();
                    	        os2.usMaxContent = p.parseUShort();
                    	    }
                    
                    	    return os2;
                    	}
                    
                    	function makeOS2Table(options) {
                    	    return new table.Table('OS/2', [
                    	        {name: 'version', type: 'USHORT', value: 0x0003},
                    	        {name: 'xAvgCharWidth', type: 'SHORT', value: 0},
                    	        {name: 'usWeightClass', type: 'USHORT', value: 0},
                    	        {name: 'usWidthClass', type: 'USHORT', value: 0},
                    	        {name: 'fsType', type: 'USHORT', value: 0},
                    	        {name: 'ySubscriptXSize', type: 'SHORT', value: 650},
                    	        {name: 'ySubscriptYSize', type: 'SHORT', value: 699},
                    	        {name: 'ySubscriptXOffset', type: 'SHORT', value: 0},
                    	        {name: 'ySubscriptYOffset', type: 'SHORT', value: 140},
                    	        {name: 'ySuperscriptXSize', type: 'SHORT', value: 650},
                    	        {name: 'ySuperscriptYSize', type: 'SHORT', value: 699},
                    	        {name: 'ySuperscriptXOffset', type: 'SHORT', value: 0},
                    	        {name: 'ySuperscriptYOffset', type: 'SHORT', value: 479},
                    	        {name: 'yStrikeoutSize', type: 'SHORT', value: 49},
                    	        {name: 'yStrikeoutPosition', type: 'SHORT', value: 258},
                    	        {name: 'sFamilyClass', type: 'SHORT', value: 0},
                    	        {name: 'bFamilyType', type: 'BYTE', value: 0},
                    	        {name: 'bSerifStyle', type: 'BYTE', value: 0},
                    	        {name: 'bWeight', type: 'BYTE', value: 0},
                    	        {name: 'bProportion', type: 'BYTE', value: 0},
                    	        {name: 'bContrast', type: 'BYTE', value: 0},
                    	        {name: 'bStrokeVariation', type: 'BYTE', value: 0},
                    	        {name: 'bArmStyle', type: 'BYTE', value: 0},
                    	        {name: 'bLetterform', type: 'BYTE', value: 0},
                    	        {name: 'bMidline', type: 'BYTE', value: 0},
                    	        {name: 'bXHeight', type: 'BYTE', value: 0},
                    	        {name: 'ulUnicodeRange1', type: 'ULONG', value: 0},
                    	        {name: 'ulUnicodeRange2', type: 'ULONG', value: 0},
                    	        {name: 'ulUnicodeRange3', type: 'ULONG', value: 0},
                    	        {name: 'ulUnicodeRange4', type: 'ULONG', value: 0},
                    	        {name: 'achVendID', type: 'CHARARRAY', value: 'XXXX'},
                    	        {name: 'fsSelection', type: 'USHORT', value: 0},
                    	        {name: 'usFirstCharIndex', type: 'USHORT', value: 0},
                    	        {name: 'usLastCharIndex', type: 'USHORT', value: 0},
                    	        {name: 'sTypoAscender', type: 'SHORT', value: 0},
                    	        {name: 'sTypoDescender', type: 'SHORT', value: 0},
                    	        {name: 'sTypoLineGap', type: 'SHORT', value: 0},
                    	        {name: 'usWinAscent', type: 'USHORT', value: 0},
                    	        {name: 'usWinDescent', type: 'USHORT', value: 0},
                    	        {name: 'ulCodePageRange1', type: 'ULONG', value: 0},
                    	        {name: 'ulCodePageRange2', type: 'ULONG', value: 0},
                    	        {name: 'sxHeight', type: 'SHORT', value: 0},
                    	        {name: 'sCapHeight', type: 'SHORT', value: 0},
                    	        {name: 'usDefaultChar', type: 'USHORT', value: 0},
                    	        {name: 'usBreakChar', type: 'USHORT', value: 0},
                    	        {name: 'usMaxContext', type: 'USHORT', value: 0}
                    	    ], options);
                    	}
                    
                    	var os2 = { parse: parseOS2Table, make: makeOS2Table, unicodeRanges: unicodeRanges, getUnicodeRange: getUnicodeRange };
                    
                    	// The `post` table stores additional PostScript information, such as glyph names.
                    
                    	// Parse the PostScript `post` table
                    	function parsePostTable(data, start) {
                    	    var post = {};
                    	    var p = new parse.Parser(data, start);
                    	    post.version = p.parseVersion();
                    	    post.italicAngle = p.parseFixed();
                    	    post.underlinePosition = p.parseShort();
                    	    post.underlineThickness = p.parseShort();
                    	    post.isFixedPitch = p.parseULong();
                    	    post.minMemType42 = p.parseULong();
                    	    post.maxMemType42 = p.parseULong();
                    	    post.minMemType1 = p.parseULong();
                    	    post.maxMemType1 = p.parseULong();
                    	    switch (post.version) {
                    	        case 1:
                    	            post.names = standardNames.slice();
                    	            break;
                    	        case 2:
                    	            post.numberOfGlyphs = p.parseUShort();
                    	            post.glyphNameIndex = new Array(post.numberOfGlyphs);
                    	            for (var i = 0; i < post.numberOfGlyphs; i++) {
                    	                post.glyphNameIndex[i] = p.parseUShort();
                    	            }
                    
                    	            post.names = [];
                    	            for (var i$1 = 0; i$1 < post.numberOfGlyphs; i$1++) {
                    	                if (post.glyphNameIndex[i$1] >= standardNames.length) {
                    	                    var nameLength = p.parseChar();
                    	                    post.names.push(p.parseString(nameLength));
                    	                }
                    	            }
                    
                    	            break;
                    	        case 2.5:
                    	            post.numberOfGlyphs = p.parseUShort();
                    	            post.offset = new Array(post.numberOfGlyphs);
                    	            for (var i$2 = 0; i$2 < post.numberOfGlyphs; i$2++) {
                    	                post.offset[i$2] = p.parseChar();
                    	            }
                    
                    	            break;
                    	    }
                    	    return post;
                    	}
                    
                    	function makePostTable() {
                    	    return new table.Table('post', [
                    	        {name: 'version', type: 'FIXED', value: 0x00030000},
                    	        {name: 'italicAngle', type: 'FIXED', value: 0},
                    	        {name: 'underlinePosition', type: 'FWORD', value: 0},
                    	        {name: 'underlineThickness', type: 'FWORD', value: 0},
                    	        {name: 'isFixedPitch', type: 'ULONG', value: 0},
                    	        {name: 'minMemType42', type: 'ULONG', value: 0},
                    	        {name: 'maxMemType42', type: 'ULONG', value: 0},
                    	        {name: 'minMemType1', type: 'ULONG', value: 0},
                    	        {name: 'maxMemType1', type: 'ULONG', value: 0}
                    	    ]);
                    	}
                    
                    	var post = { parse: parsePostTable, make: makePostTable };
                    
                    	// The `GSUB` table contains ligatures, among other things.
                    
                    	var subtableParsers = new Array(9);         // subtableParsers[0] is unused
                    
                    	// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#SS
                    	subtableParsers[1] = function parseLookup1() {
                    	    var start = this.offset + this.relativeOffset;
                    	    var substFormat = this.parseUShort();
                    	    if (substFormat === 1) {
                    	        return {
                    	            substFormat: 1,
                    	            coverage: this.parsePointer(Parser.coverage),
                    	            deltaGlyphId: this.parseUShort()
                    	        };
                    	    } else if (substFormat === 2) {
                    	        return {
                    	            substFormat: 2,
                    	            coverage: this.parsePointer(Parser.coverage),
                    	            substitute: this.parseOffset16List()
                    	        };
                    	    }
                    	    check.assert(false, '0x' + start.toString(16) + ': lookup type 1 format must be 1 or 2.');
                    	};
                    
                    	// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#MS
                    	subtableParsers[2] = function parseLookup2() {
                    	    var substFormat = this.parseUShort();
                    	    check.argument(substFormat === 1, 'GSUB Multiple Substitution Subtable identifier-format must be 1');
                    	    return {
                    	        substFormat: substFormat,
                    	        coverage: this.parsePointer(Parser.coverage),
                    	        sequences: this.parseListOfLists()
                    	    };
                    	};
                    
                    	// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#AS
                    	subtableParsers[3] = function parseLookup3() {
                    	    var substFormat = this.parseUShort();
                    	    check.argument(substFormat === 1, 'GSUB Alternate Substitution Subtable identifier-format must be 1');
                    	    return {
                    	        substFormat: substFormat,
                    	        coverage: this.parsePointer(Parser.coverage),
                    	        alternateSets: this.parseListOfLists()
                    	    };
                    	};
                    
                    	// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#LS
                    	subtableParsers[4] = function parseLookup4() {
                    	    var substFormat = this.parseUShort();
                    	    check.argument(substFormat === 1, 'GSUB ligature table identifier-format must be 1');
                    	    return {
                    	        substFormat: substFormat,
                    	        coverage: this.parsePointer(Parser.coverage),
                    	        ligatureSets: this.parseListOfLists(function() {
                    	            return {
                    	                ligGlyph: this.parseUShort(),
                    	                components: this.parseUShortList(this.parseUShort() - 1)
                    	            };
                    	        })
                    	    };
                    	};
                    
                    	var lookupRecordDesc = {
                    	    sequenceIndex: Parser.uShort,
                    	    lookupListIndex: Parser.uShort
                    	};
                    
                    	// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CSF
                    	subtableParsers[5] = function parseLookup5() {
                    	    var start = this.offset + this.relativeOffset;
                    	    var substFormat = this.parseUShort();
                    
                    	    if (substFormat === 1) {
                    	        return {
                    	            substFormat: substFormat,
                    	            coverage: this.parsePointer(Parser.coverage),
                    	            ruleSets: this.parseListOfLists(function() {
                    	                var glyphCount = this.parseUShort();
                    	                var substCount = this.parseUShort();
                    	                return {
                    	                    input: this.parseUShortList(glyphCount - 1),
                    	                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                    	                };
                    	            })
                    	        };
                    	    } else if (substFormat === 2) {
                    	        return {
                    	            substFormat: substFormat,
                    	            coverage: this.parsePointer(Parser.coverage),
                    	            classDef: this.parsePointer(Parser.classDef),
                    	            classSets: this.parseListOfLists(function() {
                    	                var glyphCount = this.parseUShort();
                    	                var substCount = this.parseUShort();
                    	                return {
                    	                    classes: this.parseUShortList(glyphCount - 1),
                    	                    lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                    	                };
                    	            })
                    	        };
                    	    } else if (substFormat === 3) {
                    	        var glyphCount = this.parseUShort();
                    	        var substCount = this.parseUShort();
                    	        return {
                    	            substFormat: substFormat,
                    	            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),
                    	            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)
                    	        };
                    	    }
                    	    check.assert(false, '0x' + start.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');
                    	};
                    
                    	// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#CC
                    	subtableParsers[6] = function parseLookup6() {
                    	    var start = this.offset + this.relativeOffset;
                    	    var substFormat = this.parseUShort();
                    	    if (substFormat === 1) {
                    	        return {
                    	            substFormat: 1,
                    	            coverage: this.parsePointer(Parser.coverage),
                    	            chainRuleSets: this.parseListOfLists(function() {
                    	                return {
                    	                    backtrack: this.parseUShortList(),
                    	                    input: this.parseUShortList(this.parseShort() - 1),
                    	                    lookahead: this.parseUShortList(),
                    	                    lookupRecords: this.parseRecordList(lookupRecordDesc)
                    	                };
                    	            })
                    	        };
                    	    } else if (substFormat === 2) {
                    	        return {
                    	            substFormat: 2,
                    	            coverage: this.parsePointer(Parser.coverage),
                    	            backtrackClassDef: this.parsePointer(Parser.classDef),
                    	            inputClassDef: this.parsePointer(Parser.classDef),
                    	            lookaheadClassDef: this.parsePointer(Parser.classDef),
                    	            chainClassSet: this.parseListOfLists(function() {
                    	                return {
                    	                    backtrack: this.parseUShortList(),
                    	                    input: this.parseUShortList(this.parseShort() - 1),
                    	                    lookahead: this.parseUShortList(),
                    	                    lookupRecords: this.parseRecordList(lookupRecordDesc)
                    	                };
                    	            })
                    	        };
                    	    } else if (substFormat === 3) {
                    	        return {
                    	            substFormat: 3,
                    	            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    	            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    	            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    	            lookupRecords: this.parseRecordList(lookupRecordDesc)
                    	        };
                    	    }
                    	    check.assert(false, '0x' + start.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');
                    	};
                    
                    	// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#ES
                    	subtableParsers[7] = function parseLookup7() {
                    	    // Extension Substitution subtable
                    	    var substFormat = this.parseUShort();
                    	    check.argument(substFormat === 1, 'GSUB Extension Substitution subtable identifier-format must be 1');
                    	    var extensionLookupType = this.parseUShort();
                    	    var extensionParser = new Parser(this.data, this.offset + this.parseULong());
                    	    return {
                    	        substFormat: 1,
                    	        lookupType: extensionLookupType,
                    	        extension: subtableParsers[extensionLookupType].call(extensionParser)
                    	    };
                    	};
                    
                    	// https://www.microsoft.com/typography/OTSPEC/GSUB.htm#RCCS
                    	subtableParsers[8] = function parseLookup8() {
                    	    var substFormat = this.parseUShort();
                    	    check.argument(substFormat === 1, 'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1');
                    	    return {
                    	        substFormat: substFormat,
                    	        coverage: this.parsePointer(Parser.coverage),
                    	        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    	        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),
                    	        substitutes: this.parseUShortList()
                    	    };
                    	};
                    
                    	// https://www.microsoft.com/typography/OTSPEC/gsub.htm
                    	function parseGsubTable(data, start) {
                    	    start = start || 0;
                    	    var p = new Parser(data, start);
                    	    var tableVersion = p.parseVersion(1);
                    	    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GSUB table version.');
                    	    if (tableVersion === 1) {
                    	        return {
                    	            version: tableVersion,
                    	            scripts: p.parseScriptList(),
                    	            features: p.parseFeatureList(),
                    	            lookups: p.parseLookupList(subtableParsers)
                    	        };
                    	    } else {
                    	        return {
                    	            version: tableVersion,
                    	            scripts: p.parseScriptList(),
                    	            features: p.parseFeatureList(),
                    	            lookups: p.parseLookupList(subtableParsers),
                    	            variations: p.parseFeatureVariationsList()
                    	        };
                    	    }
                    
                    	}
                    
                    	// GSUB Writing //////////////////////////////////////////////
                    	var subtableMakers = new Array(9);
                    
                    	subtableMakers[1] = function makeLookup1(subtable) {
                    	    if (subtable.substFormat === 1) {
                    	        return new table.Table('substitutionTable', [
                    	            {name: 'substFormat', type: 'USHORT', value: 1},
                    	            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)},
                    	            {name: 'deltaGlyphID', type: 'USHORT', value: subtable.deltaGlyphId}
                    	        ]);
                    	    } else {
                    	        return new table.Table('substitutionTable', [
                    	            {name: 'substFormat', type: 'USHORT', value: 2},
                    	            {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
                    	        ].concat(table.ushortList('substitute', subtable.substitute)));
                    	    }
                    	    // check.fail('Lookup type 1 substFormat must be 1 or 2.');
                    	};
                    
                    	subtableMakers[3] = function makeLookup3(subtable) {
                    	    check.assert(subtable.substFormat === 1, 'Lookup type 3 substFormat must be 1.');
                    	    return new table.Table('substitutionTable', [
                    	        {name: 'substFormat', type: 'USHORT', value: 1},
                    	        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
                    	    ].concat(table.tableList('altSet', subtable.alternateSets, function(alternateSet) {
                    	        return new table.Table('alternateSetTable', table.ushortList('alternate', alternateSet));
                    	    })));
                    	};
                    
                    	subtableMakers[4] = function makeLookup4(subtable) {
                    	    check.assert(subtable.substFormat === 1, 'Lookup type 4 substFormat must be 1.');
                    	    return new table.Table('substitutionTable', [
                    	        {name: 'substFormat', type: 'USHORT', value: 1},
                    	        {name: 'coverage', type: 'TABLE', value: new table.Coverage(subtable.coverage)}
                    	    ].concat(table.tableList('ligSet', subtable.ligatureSets, function(ligatureSet) {
                    	        return new table.Table('ligatureSetTable', table.tableList('ligature', ligatureSet, function(ligature) {
                    	            return new table.Table('ligatureTable',
                    	                [{name: 'ligGlyph', type: 'USHORT', value: ligature.ligGlyph}]
                    	                .concat(table.ushortList('component', ligature.components, ligature.components.length + 1))
                    	            );
                    	        }));
                    	    })));
                    	};
                    
                    	function makeGsubTable(gsub) {
                    	    return new table.Table('GSUB', [
                    	        {name: 'version', type: 'ULONG', value: 0x10000},
                    	        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gsub.scripts)},
                    	        {name: 'features', type: 'TABLE', value: new table.FeatureList(gsub.features)},
                    	        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gsub.lookups, subtableMakers)}
                    	    ]);
                    	}
                    
                    	var gsub = { parse: parseGsubTable, make: makeGsubTable };
                    
                    	// The `GPOS` table contains kerning pairs, among other things.
                    
                    	// Parse the metadata `meta` table.
                    	// https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6meta.html
                    	function parseMetaTable(data, start) {
                    	    var p = new parse.Parser(data, start);
                    	    var tableVersion = p.parseULong();
                    	    check.argument(tableVersion === 1, 'Unsupported META table version.');
                    	    p.parseULong(); // flags - currently unused and set to 0
                    	    p.parseULong(); // tableOffset
                    	    var numDataMaps = p.parseULong();
                    
                    	    var tags = {};
                    	    for (var i = 0; i < numDataMaps; i++) {
                    	        var tag = p.parseTag();
                    	        var dataOffset = p.parseULong();
                    	        var dataLength = p.parseULong();
                    	        var text = decode.UTF8(data, start + dataOffset, dataLength);
                    
                    	        tags[tag] = text;
                    	    }
                    	    return tags;
                    	}
                    
                    	function makeMetaTable(tags) {
                    	    var numTags = Object.keys(tags).length;
                    	    var stringPool = '';
                    	    var stringPoolOffset = 16 + numTags * 12;
                    
                    	    var result = new table.Table('meta', [
                    	        {name: 'version', type: 'ULONG', value: 1},
                    	        {name: 'flags', type: 'ULONG', value: 0},
                    	        {name: 'offset', type: 'ULONG', value: stringPoolOffset},
                    	        {name: 'numTags', type: 'ULONG', value: numTags}
                    	    ]);
                    
                    	    for (var tag in tags) {
                    	        var pos = stringPool.length;
                    	        stringPool += tags[tag];
                    
                    	        result.fields.push({name: 'tag ' + tag, type: 'TAG', value: tag});
                    	        result.fields.push({name: 'offset ' + tag, type: 'ULONG', value: stringPoolOffset + pos});
                    	        result.fields.push({name: 'length ' + tag, type: 'ULONG', value: tags[tag].length});
                    	    }
                    
                    	    result.fields.push({name: 'stringPool', type: 'CHARARRAY', value: stringPool});
                    
                    	    return result;
                    	}
                    
                    	var meta = { parse: parseMetaTable, make: makeMetaTable };
                    
                    	// The `sfnt` wrapper provides organization for the tables in the font.
                    
                    	function log2(v) {
                    	    return Math.log(v) / Math.log(2) | 0;
                    	}
                    
                    	function computeCheckSum(bytes) {
                    	    while (bytes.length % 4 !== 0) {
                    	        bytes.push(0);
                    	    }
                    
                    	    var sum = 0;
                    	    for (var i = 0; i < bytes.length; i += 4) {
                    	        sum += (bytes[i] << 24) +
                    	            (bytes[i + 1] << 16) +
                    	            (bytes[i + 2] << 8) +
                    	            (bytes[i + 3]);
                    	    }
                    
                    	    sum %= Math.pow(2, 32);
                    	    return sum;
                    	}
                    
                    	function makeTableRecord(tag, checkSum, offset, length) {
                    	    return new table.Record('Table Record', [
                    	        {name: 'tag', type: 'TAG', value: tag !== undefined ? tag : ''},
                    	        {name: 'checkSum', type: 'ULONG', value: checkSum !== undefined ? checkSum : 0},
                    	        {name: 'offset', type: 'ULONG', value: offset !== undefined ? offset : 0},
                    	        {name: 'length', type: 'ULONG', value: length !== undefined ? length : 0}
                    	    ]);
                    	}
                    
                    	function makeSfntTable(tables) {
                    	    var sfnt = new table.Table('sfnt', [
                    	        {name: 'version', type: 'TAG', value: 'OTTO'},
                    	        {name: 'numTables', type: 'USHORT', value: 0},
                    	        {name: 'searchRange', type: 'USHORT', value: 0},
                    	        {name: 'entrySelector', type: 'USHORT', value: 0},
                    	        {name: 'rangeShift', type: 'USHORT', value: 0}
                    	    ]);
                    	    sfnt.tables = tables;
                    	    sfnt.numTables = tables.length;
                    	    var highestPowerOf2 = Math.pow(2, log2(sfnt.numTables));
                    	    sfnt.searchRange = 16 * highestPowerOf2;
                    	    sfnt.entrySelector = log2(highestPowerOf2);
                    	    sfnt.rangeShift = sfnt.numTables * 16 - sfnt.searchRange;
                    
                    	    var recordFields = [];
                    	    var tableFields = [];
                    
                    	    var offset = sfnt.sizeOf() + (makeTableRecord().sizeOf() * sfnt.numTables);
                    	    while (offset % 4 !== 0) {
                    	        offset += 1;
                    	        tableFields.push({name: 'padding', type: 'BYTE', value: 0});
                    	    }
                    
                    	    for (var i = 0; i < tables.length; i += 1) {
                    	        var t = tables[i];
                    	        check.argument(t.tableName.length === 4, 'Table name' + t.tableName + ' is invalid.');
                    	        var tableLength = t.sizeOf();
                    	        var tableRecord = makeTableRecord(t.tableName, computeCheckSum(t.encode()), offset, tableLength);
                    	        recordFields.push({name: tableRecord.tag + ' Table Record', type: 'RECORD', value: tableRecord});
                    	        tableFields.push({name: t.tableName + ' table', type: 'RECORD', value: t});
                    	        offset += tableLength;
                    	        check.argument(!isNaN(offset), 'Something went wrong calculating the offset.');
                    	        while (offset % 4 !== 0) {
                    	            offset += 1;
                    	            tableFields.push({name: 'padding', type: 'BYTE', value: 0});
                    	        }
                    	    }
                    
                    	    // Table records need to be sorted alphabetically.
                    	    recordFields.sort(function(r1, r2) {
                    	        if (r1.value.tag > r2.value.tag) {
                    	            return 1;
                    	        } else {
                    	            return -1;
                    	        }
                    	    });
                    
                    	    sfnt.fields = sfnt.fields.concat(recordFields);
                    	    sfnt.fields = sfnt.fields.concat(tableFields);
                    	    return sfnt;
                    	}
                    
                    	// Get the metrics for a character. If the string has more than one character
                    	// this function returns metrics for the first available character.
                    	// You can provide optional fallback metrics if no characters are available.
                    	function metricsForChar(font, chars, notFoundMetrics) {
                    	    for (var i = 0; i < chars.length; i += 1) {
                    	        var glyphIndex = font.charToGlyphIndex(chars[i]);
                    	        if (glyphIndex > 0) {
                    	            var glyph = font.glyphs.get(glyphIndex);
                    	            return glyph.getMetrics();
                    	        }
                    	    }
                    
                    	    return notFoundMetrics;
                    	}
                    
                    	function average(vs) {
                    	    var sum = 0;
                    	    for (var i = 0; i < vs.length; i += 1) {
                    	        sum += vs[i];
                    	    }
                    
                    	    return sum / vs.length;
                    	}
                    
                    	// Convert the font object to a SFNT data structure.
                    	// This structure contains all the necessary tables and metadata to create a binary OTF file.
                    	function fontToSfntTable(font) {
                    	    var xMins = [];
                    	    var yMins = [];
                    	    var xMaxs = [];
                    	    var yMaxs = [];
                    	    var advanceWidths = [];
                    	    var leftSideBearings = [];
                    	    var rightSideBearings = [];
                    	    var firstCharIndex;
                    	    var lastCharIndex = 0;
                    	    var ulUnicodeRange1 = 0;
                    	    var ulUnicodeRange2 = 0;
                    	    var ulUnicodeRange3 = 0;
                    	    var ulUnicodeRange4 = 0;
                    
                    	    for (var i = 0; i < font.glyphs.length; i += 1) {
                    	        var glyph = font.glyphs.get(i);
                    	        var unicode = glyph.unicode | 0;
                    
                    	        if (isNaN(glyph.advanceWidth)) {
                    	            throw new Error('Glyph ' + glyph.name + ' (' + i + '): advanceWidth is not a number.');
                    	        }
                    
                    	        if (firstCharIndex > unicode || firstCharIndex === undefined) {
                    	            // ignore .notdef char
                    	            if (unicode > 0) {
                    	                firstCharIndex = unicode;
                    	            }
                    	        }
                    
                    	        if (lastCharIndex < unicode) {
                    	            lastCharIndex = unicode;
                    	        }
                    
                    	        var position = os2.getUnicodeRange(unicode);
                    	        if (position < 32) {
                    	            ulUnicodeRange1 |= 1 << position;
                    	        } else if (position < 64) {
                    	            ulUnicodeRange2 |= 1 << position - 32;
                    	        } else if (position < 96) {
                    	            ulUnicodeRange3 |= 1 << position - 64;
                    	        } else if (position < 123) {
                    	            ulUnicodeRange4 |= 1 << position - 96;
                    	        } else {
                    	            throw new Error('Unicode ranges bits > 123 are reserved for internal usage');
                    	        }
                    	        // Skip non-important characters.
                    	        if (glyph.name === '.notdef') { continue; }
                    	        var metrics = glyph.getMetrics();
                    	        xMins.push(metrics.xMin);
                    	        yMins.push(metrics.yMin);
                    	        xMaxs.push(metrics.xMax);
                    	        yMaxs.push(metrics.yMax);
                    	        leftSideBearings.push(metrics.leftSideBearing);
                    	        rightSideBearings.push(metrics.rightSideBearing);
                    	        advanceWidths.push(glyph.advanceWidth);
                    	    }
                    
                    	    var globals = {
                    	        xMin: Math.min.apply(null, xMins),
                    	        yMin: Math.min.apply(null, yMins),
                    	        xMax: Math.max.apply(null, xMaxs),
                    	        yMax: Math.max.apply(null, yMaxs),
                    	        advanceWidthMax: Math.max.apply(null, advanceWidths),
                    	        advanceWidthAvg: average(advanceWidths),
                    	        minLeftSideBearing: Math.min.apply(null, leftSideBearings),
                    	        maxLeftSideBearing: Math.max.apply(null, leftSideBearings),
                    	        minRightSideBearing: Math.min.apply(null, rightSideBearings)
                    	    };
                    	    globals.ascender = font.ascender;
                    	    globals.descender = font.descender;
                    
                    	    var headTable = head.make({
                    	        flags: 3, // 00000011 (baseline for font at y=0; left sidebearing point at x=0)
                    	        unitsPerEm: font.unitsPerEm,
                    	        xMin: globals.xMin,
                    	        yMin: globals.yMin,
                    	        xMax: globals.xMax,
                    	        yMax: globals.yMax,
                    	        lowestRecPPEM: 3,
                    	        createdTimestamp: font.createdTimestamp
                    	    });
                    
                    	    var hheaTable = hhea.make({
                    	        ascender: globals.ascender,
                    	        descender: globals.descender,
                    	        advanceWidthMax: globals.advanceWidthMax,
                    	        minLeftSideBearing: globals.minLeftSideBearing,
                    	        minRightSideBearing: globals.minRightSideBearing,
                    	        xMaxExtent: globals.maxLeftSideBearing + (globals.xMax - globals.xMin),
                    	        numberOfHMetrics: font.glyphs.length
                    	    });
                    
                    	    var maxpTable = maxp.make(font.glyphs.length);
                    
                    	    var os2Table = os2.make({
                    	        xAvgCharWidth: Math.round(globals.advanceWidthAvg),
                    	        usWeightClass: font.tables.os2.usWeightClass,
                    	        usWidthClass: font.tables.os2.usWidthClass,
                    	        usFirstCharIndex: firstCharIndex,
                    	        usLastCharIndex: lastCharIndex,
                    	        ulUnicodeRange1: ulUnicodeRange1,
                    	        ulUnicodeRange2: ulUnicodeRange2,
                    	        ulUnicodeRange3: ulUnicodeRange3,
                    	        ulUnicodeRange4: ulUnicodeRange4,
                    	        fsSelection: font.tables.os2.fsSelection, // REGULAR
                    	        // See http://typophile.com/node/13081 for more info on vertical metrics.
                    	        // We get metrics for typical characters (such as "x" for xHeight).
                    	        // We provide some fallback characters if characters are unavailable: their
                    	        // ordering was chosen experimentally.
                    	        sTypoAscender: globals.ascender,
                    	        sTypoDescender: globals.descender,
                    	        sTypoLineGap: 0,
                    	        usWinAscent: globals.yMax,
                    	        usWinDescent: Math.abs(globals.yMin),
                    	        ulCodePageRange1: 1, // FIXME: hard-code Latin 1 support for now
                    	        sxHeight: metricsForChar(font, 'xyvw', {yMax: Math.round(globals.ascender / 2)}).yMax,
                    	        sCapHeight: metricsForChar(font, 'HIKLEFJMNTZBDPRAGOQSUVWXY', globals).yMax,
                    	        usDefaultChar: font.hasChar(' ') ? 32 : 0, // Use space as the default character, if available.
                    	        usBreakChar: font.hasChar(' ') ? 32 : 0 // Use space as the break character, if available.
                    	    });
                    
                    	    var hmtxTable = hmtx.make(font.glyphs);
                    	    var cmapTable = cmap.make(font.glyphs);
                    
                    	    var englishFamilyName = font.getEnglishName('fontFamily');
                    	    var englishStyleName = font.getEnglishName('fontSubfamily');
                    	    var englishFullName = englishFamilyName + ' ' + englishStyleName;
                    	    var postScriptName = font.getEnglishName('postScriptName');
                    	    if (!postScriptName) {
                    	        postScriptName = englishFamilyName.replace(/\s/g, '') + '-' + englishStyleName;
                    	    }
                    
                    	    var names = {};
                    	    for (var n in font.names) {
                    	        names[n] = font.names[n];
                    	    }
                    
                    	    if (!names.uniqueID) {
                    	        names.uniqueID = {en: font.getEnglishName('manufacturer') + ':' + englishFullName};
                    	    }
                    
                    	    if (!names.postScriptName) {
                    	        names.postScriptName = {en: postScriptName};
                    	    }
                    
                    	    if (!names.preferredFamily) {
                    	        names.preferredFamily = font.names.fontFamily;
                    	    }
                    
                    	    if (!names.preferredSubfamily) {
                    	        names.preferredSubfamily = font.names.fontSubfamily;
                    	    }
                    
                    	    var languageTags = [];
                    	    var nameTable = _name.make(names, languageTags);
                    	    var ltagTable = (languageTags.length > 0 ? ltag.make(languageTags) : undefined);
                    
                    	    var postTable = post.make();
                    	    var cffTable = cff.make(font.glyphs, {
                    	        version: font.getEnglishName('version'),
                    	        fullName: englishFullName,
                    	        familyName: englishFamilyName,
                    	        weightName: englishStyleName,
                    	        postScriptName: postScriptName,
                    	        unitsPerEm: font.unitsPerEm,
                    	        fontBBox: [0, globals.yMin, globals.ascender, globals.advanceWidthMax]
                    	    });
                    
                    	    var metaTable = (font.metas && Object.keys(font.metas).length > 0) ? meta.make(font.metas) : undefined;
                    
                    	    // The order does not matter because makeSfntTable() will sort them.
                    	    var tables = [headTable, hheaTable, maxpTable, os2Table, nameTable, cmapTable, postTable, cffTable, hmtxTable];
                    	    if (ltagTable) {
                    	        tables.push(ltagTable);
                    	    }
                    	    // Optional tables
                    	    if (font.tables.gsub) {
                    	        tables.push(gsub.make(font.tables.gsub));
                    	    }
                    	    if (metaTable) {
                    	        tables.push(metaTable);
                    	    }
                    
                    	    var sfntTable = makeSfntTable(tables);
                    
                    	    // Compute the font's checkSum and store it in head.checkSumAdjustment.
                    	    var bytes = sfntTable.encode();
                    	    var checkSum = computeCheckSum(bytes);
                    	    var tableFields = sfntTable.fields;
                    	    var checkSumAdjusted = false;
                    	    for (var i$1 = 0; i$1 < tableFields.length; i$1 += 1) {
                    	        if (tableFields[i$1].name === 'head table') {
                    	            tableFields[i$1].value.checkSumAdjustment = 0xB1B0AFBA - checkSum;
                    	            checkSumAdjusted = true;
                    	            break;
                    	        }
                    	    }
                    
                    	    if (!checkSumAdjusted) {
                    	        throw new Error('Could not find head table with checkSum to adjust.');
                    	    }
                    
                    	    return sfntTable;
                    	}
                    
                    	var sfnt = { make: makeSfntTable, fontToTable: fontToSfntTable, computeCheckSum: computeCheckSum };
                    
                    	// The Layout object is the prototype of Substitution objects, and provides
                    
                    	function searchTag(arr, tag) {
                    	    /* jshint bitwise: false */
                    	    var imin = 0;
                    	    var imax = arr.length - 1;
                    	    while (imin <= imax) {
                    	        var imid = (imin + imax) >>> 1;
                    	        var val = arr[imid].tag;
                    	        if (val === tag) {
                    	            return imid;
                    	        } else if (val < tag) {
                    	            imin = imid + 1;
                    	        } else { imax = imid - 1; }
                    	    }
                    	    // Not found: return -1-insertion point
                    	    return -imin - 1;
                    	}
                    
                    	function binSearch(arr, value) {
                    	    /* jshint bitwise: false */
                    	    var imin = 0;
                    	    var imax = arr.length - 1;
                    	    while (imin <= imax) {
                    	        var imid = (imin + imax) >>> 1;
                    	        var val = arr[imid];
                    	        if (val === value) {
                    	            return imid;
                    	        } else if (val < value) {
                    	            imin = imid + 1;
                    	        } else { imax = imid - 1; }
                    	    }
                    	    // Not found: return -1-insertion point
                    	    return -imin - 1;
                    	}
                    
                    	// binary search in a list of ranges (coverage, class definition)
                    	function searchRange(ranges, value) {
                    	    // jshint bitwise: false
                    	    var range;
                    	    var imin = 0;
                    	    var imax = ranges.length - 1;
                    	    while (imin <= imax) {
                    	        var imid = (imin + imax) >>> 1;
                    	        range = ranges[imid];
                    	        var start = range.start;
                    	        if (start === value) {
                    	            return range;
                    	        } else if (start < value) {
                    	            imin = imid + 1;
                    	        } else { imax = imid - 1; }
                    	    }
                    	    if (imin > 0) {
                    	        range = ranges[imin - 1];
                    	        if (value > range.end) { return 0; }
                    	        return range;
                    	    }
                    	}
                    
                    	/**
                    	 * @exports opentype.Layout
                    	 * @class
                    	 */
                    	function Layout(font, tableName) {
                    	    this.font = font;
                    	    this.tableName = tableName;
                    	}
                    
                    	Layout.prototype = {
                    
                    	    /**
                    	     * Binary search an object by "tag" property
                    	     * @instance
                    	     * @function searchTag
                    	     * @memberof opentype.Layout
                    	     * @param  {Array} arr
                    	     * @param  {string} tag
                    	     * @return {number}
                    	     */
                    	    searchTag: searchTag,
                    
                    	    /**
                    	     * Binary search in a list of numbers
                    	     * @instance
                    	     * @function binSearch
                    	     * @memberof opentype.Layout
                    	     * @param  {Array} arr
                    	     * @param  {number} value
                    	     * @return {number}
                    	     */
                    	    binSearch: binSearch,
                    
                    	    /**
                    	     * Get or create the Layout table (GSUB, GPOS etc).
                    	     * @param  {boolean} create - Whether to create a new one.
                    	     * @return {Object} The GSUB or GPOS table.
                    	     */
                    	    getTable: function(create) {
                    	        var layout = this.font.tables[this.tableName];
                    	        if (!layout && create) {
                    	            layout = this.font.tables[this.tableName] = this.createDefaultTable();
                    	        }
                    	        return layout;
                    	    },
                    
                    	    /**
                    	     * Returns all scripts in the substitution table.
                    	     * @instance
                    	     * @return {Array}
                    	     */
                    	    getScriptNames: function() {
                    	        var layout = this.getTable();
                    	        if (!layout) { return []; }
                    	        return layout.scripts.map(function(script) {
                    	            return script.tag;
                    	        });
                    	    },
                    
                    	    /**
                    	     * Returns the best bet for a script name.
                    	     * Returns 'DFLT' if it exists.
                    	     * If not, returns 'latn' if it exists.
                    	     * If neither exist, returns undefined.
                    	     */
                    	    getDefaultScriptName: function() {
                    	        var layout = this.getTable();
                    	        if (!layout) { return; }
                    	        var hasLatn = false;
                    	        for (var i = 0; i < layout.scripts.length; i++) {
                    	            var name = layout.scripts[i].tag;
                    	            if (name === 'DFLT') { return name; }
                    	            if (name === 'latn') { hasLatn = true; }
                    	        }
                    	        if (hasLatn) { return 'latn'; }
                    	    },
                    
                    	    /**
                    	     * Returns all LangSysRecords in the given script.
                    	     * @instance
                    	     * @param {string} [script='DFLT']
                    	     * @param {boolean} create - forces the creation of this script table if it doesn't exist.
                    	     * @return {Object} An object with tag and script properties.
                    	     */
                    	    getScriptTable: function(script, create) {
                    	        var layout = this.getTable(create);
                    	        if (layout) {
                    	            script = script || 'DFLT';
                    	            var scripts = layout.scripts;
                    	            var pos = searchTag(layout.scripts, script);
                    	            if (pos >= 0) {
                    	                return scripts[pos].script;
                    	            } else if (create) {
                    	                var scr = {
                    	                    tag: script,
                    	                    script: {
                    	                        defaultLangSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []},
                    	                        langSysRecords: []
                    	                    }
                    	                };
                    	                scripts.splice(-1 - pos, 0, scr);
                    	                return scr.script;
                    	            }
                    	        }
                    	    },
                    
                    	    /**
                    	     * Returns a language system table
                    	     * @instance
                    	     * @param {string} [script='DFLT']
                    	     * @param {string} [language='dlft']
                    	     * @param {boolean} create - forces the creation of this langSysTable if it doesn't exist.
                    	     * @return {Object}
                    	     */
                    	    getLangSysTable: function(script, language, create) {
                    	        var scriptTable = this.getScriptTable(script, create);
                    	        if (scriptTable) {
                    	            if (!language || language === 'dflt' || language === 'DFLT') {
                    	                return scriptTable.defaultLangSys;
                    	            }
                    	            var pos = searchTag(scriptTable.langSysRecords, language);
                    	            if (pos >= 0) {
                    	                return scriptTable.langSysRecords[pos].langSys;
                    	            } else if (create) {
                    	                var langSysRecord = {
                    	                    tag: language,
                    	                    langSys: {reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: []}
                    	                };
                    	                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);
                    	                return langSysRecord.langSys;
                    	            }
                    	        }
                    	    },
                    
                    	    /**
                    	     * Get a specific feature table.
                    	     * @instance
                    	     * @param {string} [script='DFLT']
                    	     * @param {string} [language='dlft']
                    	     * @param {string} feature - One of the codes listed at https://www.microsoft.com/typography/OTSPEC/featurelist.htm
                    	     * @param {boolean} create - forces the creation of the feature table if it doesn't exist.
                    	     * @return {Object}
                    	     */
                    	    getFeatureTable: function(script, language, feature, create) {
                    	        var langSysTable = this.getLangSysTable(script, language, create);
                    	        if (langSysTable) {
                    	            var featureRecord;
                    	            var featIndexes = langSysTable.featureIndexes;
                    	            var allFeatures = this.font.tables[this.tableName].features;
                    	            // The FeatureIndex array of indices is in arbitrary order,
                    	            // even if allFeatures is sorted alphabetically by feature tag.
                    	            for (var i = 0; i < featIndexes.length; i++) {
                    	                featureRecord = allFeatures[featIndexes[i]];
                    	                if (featureRecord.tag === feature) {
                    	                    return featureRecord.feature;
                    	                }
                    	            }
                    	            if (create) {
                    	                var index = allFeatures.length;
                    	                // Automatic ordering of features would require to shift feature indexes in the script list.
                    	                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, 'Features must be added in alphabetical order.');
                    	                featureRecord = {
                    	                    tag: feature,
                    	                    feature: { params: 0, lookupListIndexes: [] }
                    	                };
                    	                allFeatures.push(featureRecord);
                    	                featIndexes.push(index);
                    	                return featureRecord.feature;
                    	            }
                    	        }
                    	    },
                    
                    	    /**
                    	     * Get the lookup tables of a given type for a script/language/feature.
                    	     * @instance
                    	     * @param {string} [script='DFLT']
                    	     * @param {string} [language='dlft']
                    	     * @param {string} feature - 4-letter feature code
                    	     * @param {number} lookupType - 1 to 9
                    	     * @param {boolean} create - forces the creation of the lookup table if it doesn't exist, with no subtables.
                    	     * @return {Object[]}
                    	     */
                    	    getLookupTables: function(script, language, feature, lookupType, create) {
                    	        var featureTable = this.getFeatureTable(script, language, feature, create);
                    	        var tables = [];
                    	        if (featureTable) {
                    	            var lookupTable;
                    	            var lookupListIndexes = featureTable.lookupListIndexes;
                    	            var allLookups = this.font.tables[this.tableName].lookups;
                    	            // lookupListIndexes are in no particular order, so use naive search.
                    	            for (var i = 0; i < lookupListIndexes.length; i++) {
                    	                lookupTable = allLookups[lookupListIndexes[i]];
                    	                if (lookupTable.lookupType === lookupType) {
                    	                    tables.push(lookupTable);
                    	                }
                    	            }
                    	            if (tables.length === 0 && create) {
                    	                lookupTable = {
                    	                    lookupType: lookupType,
                    	                    lookupFlag: 0,
                    	                    subtables: [],
                    	                    markFilteringSet: undefined
                    	                };
                    	                var index = allLookups.length;
                    	                allLookups.push(lookupTable);
                    	                lookupListIndexes.push(index);
                    	                return [lookupTable];
                    	            }
                    	        }
                    	        return tables;
                    	    },
                    
                    	    /**
                    	     * Find a glyph in a class definition table
                    	     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#class-definition-table
                    	     * @param {object} classDefTable - an OpenType Layout class definition table
                    	     * @param {number} glyphIndex - the index of the glyph to find
                    	     * @returns {number} -1 if not found
                    	     */
                    	    getGlyphClass: function(classDefTable, glyphIndex) {
                    	        switch (classDefTable.format) {
                    	            case 1:
                    	                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {
                    	                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];
                    	                }
                    	                return 0;
                    	            case 2:
                    	                var range = searchRange(classDefTable.ranges, glyphIndex);
                    	                return range ? range.classId : 0;
                    	        }
                    	    },
                    
                    	    /**
                    	     * Find a glyph in a coverage table
                    	     * https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2#coverage-table
                    	     * @param {object} coverageTable - an OpenType Layout coverage table
                    	     * @param {number} glyphIndex - the index of the glyph to find
                    	     * @returns {number} -1 if not found
                    	     */
                    	    getCoverageIndex: function(coverageTable, glyphIndex) {
                    	        switch (coverageTable.format) {
                    	            case 1:
                    	                var index = binSearch(coverageTable.glyphs, glyphIndex);
                    	                return index >= 0 ? index : -1;
                    	            case 2:
                    	                var range = searchRange(coverageTable.ranges, glyphIndex);
                    	                return range ? range.index + glyphIndex - range.start : -1;
                    	        }
                    	    },
                    
                    	    /**
                    	     * Returns the list of glyph indexes of a coverage table.
                    	     * Format 1: the list is stored raw
                    	     * Format 2: compact list as range records.
                    	     * @instance
                    	     * @param  {Object} coverageTable
                    	     * @return {Array}
                    	     */
                    	    expandCoverage: function(coverageTable) {
                    	        if (coverageTable.format === 1) {
                    	            return coverageTable.glyphs;
                    	        } else {
                    	            var glyphs = [];
                    	            var ranges = coverageTable.ranges;
                    	            for (var i = 0; i < ranges.length; i++) {
                    	                var range = ranges[i];
                    	                var start = range.start;
                    	                var end = range.end;
                    	                for (var j = start; j <= end; j++) {
                    	                    glyphs.push(j);
                    	                }
                    	            }
                    	            return glyphs;
                    	        }
                    	    }
                    
                    	};
                    
                    	// The Position object provides utility methods to manipulate
                    
                    	/**
                    	 * @exports opentype.Position
                    	 * @class
                    	 * @extends opentype.Layout
                    	 * @param {opentype.Font}
                    	 * @constructor
                    	 */
                    	function Position(font) {
                    	    Layout.call(this, font, 'gpos');
                    	}
                    
                    	Position.prototype = Layout.prototype;
                    
                    	/**
                    	 * Init some data for faster and easier access later.
                    	 */
                    	Position.prototype.init = function() {
                    	    var script = this.getDefaultScriptName();
                    	    this.defaultKerningTables = this.getKerningTables(script);
                    	};
                    
                    	/**
                    	 * Find a glyph pair in a list of lookup tables of type 2 and retrieve the xAdvance kerning value.
                    	 *
                    	 * @param {integer} leftIndex - left glyph index
                    	 * @param {integer} rightIndex - right glyph index
                    	 * @returns {integer}
                    	 */
                    	Position.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {
                    	    var this$1 = this;
                    
                    	    for (var i = 0; i < kerningLookups.length; i++) {
                    	        var subtables = kerningLookups[i].subtables;
                    	        for (var j = 0; j < subtables.length; j++) {
                    	            var subtable = subtables[j];
                    	            var covIndex = this$1.getCoverageIndex(subtable.coverage, leftIndex);
                    	            if (covIndex < 0) { continue; }
                    	            switch (subtable.posFormat) {
                    	                case 1:
                    	                    // Search Pair Adjustment Positioning Format 1
                    	                    var pairSet = subtable.pairSets[covIndex];
                    	                    for (var k = 0; k < pairSet.length; k++) {
                    	                        var pair = pairSet[k];
                    	                        if (pair.secondGlyph === rightIndex) {
                    	                            return pair.value1 && pair.value1.xAdvance || 0;
                    	                        }
                    	                    }
                    	                    break;      // left glyph found, not right glyph - try next subtable
                    	                case 2:
                    	                    // Search Pair Adjustment Positioning Format 2
                    	                    var class1 = this$1.getGlyphClass(subtable.classDef1, leftIndex);
                    	                    var class2 = this$1.getGlyphClass(subtable.classDef2, rightIndex);
                    	                    var pair$1 = subtable.classRecords[class1][class2];
                    	                    return pair$1.value1 && pair$1.value1.xAdvance || 0;
                    	            }
                    	        }
                    	    }
                    	    return 0;
                    	};
                    
                    	/**
                    	 * List all kerning lookup tables.
                    	 *
                    	 * @param {string} [script='DFLT'] - use font.position.getDefaultScriptName() for a better default value
                    	 * @param {string} [language='dflt']
                    	 * @return {object[]} The list of kerning lookup tables (may be empty), or undefined if there is no GPOS table (and we should use the kern table)
                    	 */
                    	Position.prototype.getKerningTables = function(script, language) {
                    	    if (this.font.tables.gpos) {
                    	        return this.getLookupTables(script, language, 'kern', 2);
                    	    }
                    	};
                    
                    	// The Substitution object provides utility methods to manipulate
                    
                    	/**
                    	 * @exports opentype.Substitution
                    	 * @class
                    	 * @extends opentype.Layout
                    	 * @param {opentype.Font}
                    	 * @constructor
                    	 */
                    	function Substitution(font) {
                    	    Layout.call(this, font, 'gsub');
                    	}
                    
                    	// Check if 2 arrays of primitives are equal.
                    	function arraysEqual(ar1, ar2) {
                    	    var n = ar1.length;
                    	    if (n !== ar2.length) { return false; }
                    	    for (var i = 0; i < n; i++) {
                    	        if (ar1[i] !== ar2[i]) { return false; }
                    	    }
                    	    return true;
                    	}
                    
                    	// Find the first subtable of a lookup table in a particular format.
                    	function getSubstFormat(lookupTable, format, defaultSubtable) {
                    	    var subtables = lookupTable.subtables;
                    	    for (var i = 0; i < subtables.length; i++) {
                    	        var subtable = subtables[i];
                    	        if (subtable.substFormat === format) {
                    	            return subtable;
                    	        }
                    	    }
                    	    if (defaultSubtable) {
                    	        subtables.push(defaultSubtable);
                    	        return defaultSubtable;
                    	    }
                    	    return undefined;
                    	}
                    
                    	Substitution.prototype = Layout.prototype;
                    
                    	/**
                    	 * Create a default GSUB table.
                    	 * @return {Object} gsub - The GSUB table.
                    	 */
                    	Substitution.prototype.createDefaultTable = function() {
                    	    // Generate a default empty GSUB table with just a DFLT script and dflt lang sys.
                    	    return {
                    	        version: 1,
                    	        scripts: [{
                    	            tag: 'DFLT',
                    	            script: {
                    	                defaultLangSys: { reserved: 0, reqFeatureIndex: 0xffff, featureIndexes: [] },
                    	                langSysRecords: []
                    	            }
                    	        }],
                    	        features: [],
                    	        lookups: []
                    	    };
                    	};
                    
                    	/**
                    	 * List all single substitutions (lookup type 1) for a given script, language, and feature.
                    	 * @param {string} [script='DFLT']
                    	 * @param {string} [language='dflt']
                    	 * @param {string} feature - 4-character feature name ('aalt', 'salt', 'ss01'...)
                    	 * @return {Array} substitutions - The list of substitutions.
                    	 */
                    	Substitution.prototype.getSingle = function(feature, script, language) {
                    	    var this$1 = this;
                    
                    	    var substitutions = [];
                    	    var lookupTables = this.getLookupTables(script, language, feature, 1);
                    	    for (var idx = 0; idx < lookupTables.length; idx++) {
                    	        var subtables = lookupTables[idx].subtables;
                    	        for (var i = 0; i < subtables.length; i++) {
                    	            var subtable = subtables[i];
                    	            var glyphs = this$1.expandCoverage(subtable.coverage);
                    	            var j = (void 0);
                    	            if (subtable.substFormat === 1) {
                    	                var delta = subtable.deltaGlyphId;
                    	                for (j = 0; j < glyphs.length; j++) {
                    	                    var glyph = glyphs[j];
                    	                    substitutions.push({ sub: glyph, by: glyph + delta });
                    	                }
                    	            } else {
                    	                var substitute = subtable.substitute;
                    	                for (j = 0; j < glyphs.length; j++) {
                    	                    substitutions.push({ sub: glyphs[j], by: substitute[j] });
                    	                }
                    	            }
                    	        }
                    	    }
                    	    return substitutions;
                    	};
                    
                    	/**
                    	 * List all alternates (lookup type 3) for a given script, language, and feature.
                    	 * @param {string} [script='DFLT']
                    	 * @param {string} [language='dflt']
                    	 * @param {string} feature - 4-character feature name ('aalt', 'salt'...)
                    	 * @return {Array} alternates - The list of alternates
                    	 */
                    	Substitution.prototype.getAlternates = function(feature, script, language) {
                    	    var this$1 = this;
                    
                    	    var alternates = [];
                    	    var lookupTables = this.getLookupTables(script, language, feature, 3);
                    	    for (var idx = 0; idx < lookupTables.length; idx++) {
                    	        var subtables = lookupTables[idx].subtables;
                    	        for (var i = 0; i < subtables.length; i++) {
                    	            var subtable = subtables[i];
                    	            var glyphs = this$1.expandCoverage(subtable.coverage);
                    	            var alternateSets = subtable.alternateSets;
                    	            for (var j = 0; j < glyphs.length; j++) {
                    	                alternates.push({ sub: glyphs[j], by: alternateSets[j] });
                    	            }
                    	        }
                    	    }
                    	    return alternates;
                    	};
                    
                    	/**
                    	 * List all ligatures (lookup type 4) for a given script, language, and feature.
                    	 * The result is an array of ligature objects like { sub: [ids], by: id }
                    	 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
                    	 * @param {string} [script='DFLT']
                    	 * @param {string} [language='dflt']
                    	 * @return {Array} ligatures - The list of ligatures.
                    	 */
                    	Substitution.prototype.getLigatures = function(feature, script, language) {
                    	    var this$1 = this;
                    
                    	    var ligatures = [];
                    	    var lookupTables = this.getLookupTables(script, language, feature, 4);
                    	    for (var idx = 0; idx < lookupTables.length; idx++) {
                    	        var subtables = lookupTables[idx].subtables;
                    	        for (var i = 0; i < subtables.length; i++) {
                    	            var subtable = subtables[i];
                    	            var glyphs = this$1.expandCoverage(subtable.coverage);
                    	            var ligatureSets = subtable.ligatureSets;
                    	            for (var j = 0; j < glyphs.length; j++) {
                    	                var startGlyph = glyphs[j];
                    	                var ligSet = ligatureSets[j];
                    	                for (var k = 0; k < ligSet.length; k++) {
                    	                    var lig = ligSet[k];
                    	                    ligatures.push({
                    	                        sub: [startGlyph].concat(lig.components),
                    	                        by: lig.ligGlyph
                    	                    });
                    	                }
                    	            }
                    	        }
                    	    }
                    	    return ligatures;
                    	};
                    
                    	/**
                    	 * Add or modify a single substitution (lookup type 1)
                    	 * Format 2, more flexible, is always used.
                    	 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
                    	 * @param {Object} substitution - { sub: id, delta: number } for format 1 or { sub: id, by: id } for format 2.
                    	 * @param {string} [script='DFLT']
                    	 * @param {string} [language='dflt']
                    	 */
                    	Substitution.prototype.addSingle = function(feature, substitution, script, language) {
                    	    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];
                    	    var subtable = getSubstFormat(lookupTable, 2, {                // lookup type 1 subtable, format 2, coverage format 1
                    	        substFormat: 2,
                    	        coverage: {format: 1, glyphs: []},
                    	        substitute: []
                    	    });
                    	    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
                    	    var coverageGlyph = substitution.sub;
                    	    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                    	    if (pos < 0) {
                    	        pos = -1 - pos;
                    	        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                    	        subtable.substitute.splice(pos, 0, 0);
                    	    }
                    	    subtable.substitute[pos] = substitution.by;
                    	};
                    
                    	/**
                    	 * Add or modify an alternate substitution (lookup type 1)
                    	 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
                    	 * @param {Object} substitution - { sub: id, by: [ids] }
                    	 * @param {string} [script='DFLT']
                    	 * @param {string} [language='dflt']
                    	 */
                    	Substitution.prototype.addAlternate = function(feature, substitution, script, language) {
                    	    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];
                    	    var subtable = getSubstFormat(lookupTable, 1, {                // lookup type 3 subtable, format 1, coverage format 1
                    	        substFormat: 1,
                    	        coverage: {format: 1, glyphs: []},
                    	        alternateSets: []
                    	    });
                    	    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
                    	    var coverageGlyph = substitution.sub;
                    	    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                    	    if (pos < 0) {
                    	        pos = -1 - pos;
                    	        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                    	        subtable.alternateSets.splice(pos, 0, 0);
                    	    }
                    	    subtable.alternateSets[pos] = substitution.by;
                    	};
                    
                    	/**
                    	 * Add a ligature (lookup type 4)
                    	 * Ligatures with more components must be stored ahead of those with fewer components in order to be found
                    	 * @param {string} feature - 4-letter feature name ('liga', 'rlig', 'dlig'...)
                    	 * @param {Object} ligature - { sub: [ids], by: id }
                    	 * @param {string} [script='DFLT']
                    	 * @param {string} [language='dflt']
                    	 */
                    	Substitution.prototype.addLigature = function(feature, ligature, script, language) {
                    	    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];
                    	    var subtable = lookupTable.subtables[0];
                    	    if (!subtable) {
                    	        subtable = {                // lookup type 4 subtable, format 1, coverage format 1
                    	            substFormat: 1,
                    	            coverage: { format: 1, glyphs: [] },
                    	            ligatureSets: []
                    	        };
                    	        lookupTable.subtables[0] = subtable;
                    	    }
                    	    check.assert(subtable.coverage.format === 1, 'Ligature: unable to modify coverage table format ' + subtable.coverage.format);
                    	    var coverageGlyph = ligature.sub[0];
                    	    var ligComponents = ligature.sub.slice(1);
                    	    var ligatureTable = {
                    	        ligGlyph: ligature.by,
                    	        components: ligComponents
                    	    };
                    	    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);
                    	    if (pos >= 0) {
                    	        // ligatureSet already exists
                    	        var ligatureSet = subtable.ligatureSets[pos];
                    	        for (var i = 0; i < ligatureSet.length; i++) {
                    	            // If ligature already exists, return.
                    	            if (arraysEqual(ligatureSet[i].components, ligComponents)) {
                    	                return;
                    	            }
                    	        }
                    	        // ligature does not exist: add it.
                    	        ligatureSet.push(ligatureTable);
                    	    } else {
                    	        // Create a new ligatureSet and add coverage for the first glyph.
                    	        pos = -1 - pos;
                    	        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);
                    	        subtable.ligatureSets.splice(pos, 0, [ligatureTable]);
                    	    }
                    	};
                    
                    	/**
                    	 * List all feature data for a given script and language.
                    	 * @param {string} feature - 4-letter feature name
                    	 * @param {string} [script='DFLT']
                    	 * @param {string} [language='dflt']
                    	 * @return {Array} substitutions - The list of substitutions.
                    	 */
                    	Substitution.prototype.getFeature = function(feature, script, language) {
                    	    if (/ss\d\d/.test(feature)) {
                    	        // ss01 - ss20
                    	        return this.getSingle(feature, script, language);
                    	    }
                    	    switch (feature) {
                    	        case 'aalt':
                    	        case 'salt':
                    	            return this.getSingle(feature, script, language)
                    	                    .concat(this.getAlternates(feature, script, language));
                    	        case 'dlig':
                    	        case 'liga':
                    	        case 'rlig': return this.getLigatures(feature, script, language);
                    	    }
                    	    return undefined;
                    	};
                    
                    	/**
                    	 * Add a substitution to a feature for a given script and language.
                    	 * @param {string} feature - 4-letter feature name
                    	 * @param {Object} sub - the substitution to add (an object like { sub: id or [ids], by: id or [ids] })
                    	 * @param {string} [script='DFLT']
                    	 * @param {string} [language='dflt']
                    	 */
                    	Substitution.prototype.add = function(feature, sub, script, language) {
                    	    if (/ss\d\d/.test(feature)) {
                    	        // ss01 - ss20
                    	        return this.addSingle(feature, sub, script, language);
                    	    }
                    	    switch (feature) {
                    	        case 'aalt':
                    	        case 'salt':
                    	            if (typeof sub.by === 'number') {
                    	                return this.addSingle(feature, sub, script, language);
                    	            }
                    	            return this.addAlternate(feature, sub, script, language);
                    	        case 'dlig':
                    	        case 'liga':
                    	        case 'rlig':
                    	            return this.addLigature(feature, sub, script, language);
                    	    }
                    	    return undefined;
                    	};
                    
                    	function isBrowser() {
                    	    return typeof window !== 'undefined';
                    	}
                    
                    	function nodeBufferToArrayBuffer(buffer) {
                    	    var ab = new ArrayBuffer(buffer.length);
                    	    var view = new Uint8Array(ab);
                    	    for (var i = 0; i < buffer.length; ++i) {
                    	        view[i] = buffer[i];
                    	    }
                    
                    	    return ab;
                    	}
                    
                    	function arrayBufferToNodeBuffer(ab) {
                    	    var buffer = new Buffer(ab.byteLength);
                    	    var view = new Uint8Array(ab);
                    	    for (var i = 0; i < buffer.length; ++i) {
                    	        buffer[i] = view[i];
                    	    }
                    
                    	    return buffer;
                    	}
                    
                    	function checkArgument(expression, message) {
                    	    if (!expression) {
                    	        throw message;
                    	    }
                    	}
                    
                    	// The `glyf` table describes the glyphs in TrueType outline format.
                    
                    	// Parse the coordinate data for a glyph.
                    	function parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {
                    	    var v;
                    	    if ((flag & shortVectorBitMask) > 0) {
                    	        // The coordinate is 1 byte long.
                    	        v = p.parseByte();
                    	        // The `same` bit is re-used for short values to signify the sign of the value.
                    	        if ((flag & sameBitMask) === 0) {
                    	            v = -v;
                    	        }
                    
                    	        v = previousValue + v;
                    	    } else {
                    	        //  The coordinate is 2 bytes long.
                    	        // If the `same` bit is set, the coordinate is the same as the previous coordinate.
                    	        if ((flag & sameBitMask) > 0) {
                    	            v = previousValue;
                    	        } else {
                    	            // Parse the coordinate as a signed 16-bit delta value.
                    	            v = previousValue + p.parseShort();
                    	        }
                    	    }
                    
                    	    return v;
                    	}
                    
                    	// Parse a TrueType glyph.
                    	function parseGlyph(glyph, data, start) {
                    	    var p = new parse.Parser(data, start);
                    	    glyph.numberOfContours = p.parseShort();
                    	    glyph._xMin = p.parseShort();
                    	    glyph._yMin = p.parseShort();
                    	    glyph._xMax = p.parseShort();
                    	    glyph._yMax = p.parseShort();
                    	    var flags;
                    	    var flag;
                    
                    	    if (glyph.numberOfContours > 0) {
                    	        // This glyph is not a composite.
                    	        var endPointIndices = glyph.endPointIndices = [];
                    	        for (var i = 0; i < glyph.numberOfContours; i += 1) {
                    	            endPointIndices.push(p.parseUShort());
                    	        }
                    
                    	        glyph.instructionLength = p.parseUShort();
                    	        glyph.instructions = [];
                    	        for (var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1) {
                    	            glyph.instructions.push(p.parseByte());
                    	        }
                    
                    	        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;
                    	        flags = [];
                    	        for (var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1) {
                    	            flag = p.parseByte();
                    	            flags.push(flag);
                    	            // If bit 3 is set, we repeat this flag n times, where n is the next byte.
                    	            if ((flag & 8) > 0) {
                    	                var repeatCount = p.parseByte();
                    	                for (var j = 0; j < repeatCount; j += 1) {
                    	                    flags.push(flag);
                    	                    i$2 += 1;
                    	                }
                    	            }
                    	        }
                    
                    	        check.argument(flags.length === numberOfCoordinates, 'Bad flags.');
                    
                    	        if (endPointIndices.length > 0) {
                    	            var points = [];
                    	            var point;
                    	            // X/Y coordinates are relative to the previous point, except for the first point which is relative to 0,0.
                    	            if (numberOfCoordinates > 0) {
                    	                for (var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1) {
                    	                    flag = flags[i$3];
                    	                    point = {};
                    	                    point.onCurve = !!(flag & 1);
                    	                    point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;
                    	                    points.push(point);
                    	                }
                    
                    	                var px = 0;
                    	                for (var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1) {
                    	                    flag = flags[i$4];
                    	                    point = points[i$4];
                    	                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);
                    	                    px = point.x;
                    	                }
                    
                    	                var py = 0;
                    	                for (var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1) {
                    	                    flag = flags[i$5];
                    	                    point = points[i$5];
                    	                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);
                    	                    py = point.y;
                    	                }
                    	            }
                    
                    	            glyph.points = points;
                    	        } else {
                    	            glyph.points = [];
                    	        }
                    	    } else if (glyph.numberOfContours === 0) {
                    	        glyph.points = [];
                    	    } else {
                    	        glyph.isComposite = true;
                    	        glyph.points = [];
                    	        glyph.components = [];
                    	        var moreComponents = true;
                    	        while (moreComponents) {
                    	            flags = p.parseUShort();
                    	            var component = {
                    	                glyphIndex: p.parseUShort(),
                    	                xScale: 1,
                    	                scale01: 0,
                    	                scale10: 0,
                    	                yScale: 1,
                    	                dx: 0,
                    	                dy: 0
                    	            };
                    	            if ((flags & 1) > 0) {
                    	                // The arguments are words
                    	                if ((flags & 2) > 0) {
                    	                    // values are offset
                    	                    component.dx = p.parseShort();
                    	                    component.dy = p.parseShort();
                    	                } else {
                    	                    // values are matched points
                    	                    component.matchedPoints = [p.parseUShort(), p.parseUShort()];
                    	                }
                    
                    	            } else {
                    	                // The arguments are bytes
                    	                if ((flags & 2) > 0) {
                    	                    // values are offset
                    	                    component.dx = p.parseChar();
                    	                    component.dy = p.parseChar();
                    	                } else {
                    	                    // values are matched points
                    	                    component.matchedPoints = [p.parseByte(), p.parseByte()];
                    	                }
                    	            }
                    
                    	            if ((flags & 8) > 0) {
                    	                // We have a scale
                    	                component.xScale = component.yScale = p.parseF2Dot14();
                    	            } else if ((flags & 64) > 0) {
                    	                // We have an X / Y scale
                    	                component.xScale = p.parseF2Dot14();
                    	                component.yScale = p.parseF2Dot14();
                    	            } else if ((flags & 128) > 0) {
                    	                // We have a 2x2 transformation
                    	                component.xScale = p.parseF2Dot14();
                    	                component.scale01 = p.parseF2Dot14();
                    	                component.scale10 = p.parseF2Dot14();
                    	                component.yScale = p.parseF2Dot14();
                    	            }
                    
                    	            glyph.components.push(component);
                    	            moreComponents = !!(flags & 32);
                    	        }
                    	        if (flags & 0x100) {
                    	            // We have instructions
                    	            glyph.instructionLength = p.parseUShort();
                    	            glyph.instructions = [];
                    	            for (var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1) {
                    	                glyph.instructions.push(p.parseByte());
                    	            }
                    	        }
                    	    }
                    	}
                    
                    	// Transform an array of points and return a new array.
                    	function transformPoints(points, transform) {
                    	    var newPoints = [];
                    	    for (var i = 0; i < points.length; i += 1) {
                    	        var pt = points[i];
                    	        var newPt = {
                    	            x: transform.xScale * pt.x + transform.scale01 * pt.y + transform.dx,
                    	            y: transform.scale10 * pt.x + transform.yScale * pt.y + transform.dy,
                    	            onCurve: pt.onCurve,
                    	            lastPointOfContour: pt.lastPointOfContour
                    	        };
                    	        newPoints.push(newPt);
                    	    }
                    
                    	    return newPoints;
                    	}
                    
                    	function getContours(points) {
                    	    var contours = [];
                    	    var currentContour = [];
                    	    for (var i = 0; i < points.length; i += 1) {
                    	        var pt = points[i];
                    	        currentContour.push(pt);
                    	        if (pt.lastPointOfContour) {
                    	            contours.push(currentContour);
                    	            currentContour = [];
                    	        }
                    	    }
                    
                    	    check.argument(currentContour.length === 0, 'There are still points left in the current contour.');
                    	    return contours;
                    	}
                    
                    	// Convert the TrueType glyph outline to a Path.
                    	function getPath(points) {
                    	    var p = new Path();
                    	    if (!points) {
                    	        return p;
                    	    }
                    
                    	    var contours = getContours(points);
                    
                    	    for (var contourIndex = 0; contourIndex < contours.length; ++contourIndex) {
                    	        var contour = contours[contourIndex];
                    
                    	        var prev = null;
                    	        var curr = contour[contour.length - 1];
                    	        var next = contour[0];
                    
                    	        if (curr.onCurve) {
                    	            p.moveTo(curr.x, curr.y);
                    	        } else {
                    	            if (next.onCurve) {
                    	                p.moveTo(next.x, next.y);
                    	            } else {
                    	                // If both first and last points are off-curve, start at their middle.
                    	                var start = {x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5};
                    	                p.moveTo(start.x, start.y);
                    	            }
                    	        }
                    
                    	        for (var i = 0; i < contour.length; ++i) {
                    	            prev = curr;
                    	            curr = next;
                    	            next = contour[(i + 1) % contour.length];
                    
                    	            if (curr.onCurve) {
                    	                // This is a straight line.
                    	                p.lineTo(curr.x, curr.y);
                    	            } else {
                    	                var prev2 = prev;
                    	                var next2 = next;
                    
                    	                if (!prev.onCurve) {
                    	                    prev2 = { x: (curr.x + prev.x) * 0.5, y: (curr.y + prev.y) * 0.5 };
                    	                }
                    
                    	                if (!next.onCurve) {
                    	                    next2 = { x: (curr.x + next.x) * 0.5, y: (curr.y + next.y) * 0.5 };
                    	                }
                    
                    	                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);
                    	            }
                    	        }
                    
                    	        p.closePath();
                    	    }
                    	    return p;
                    	}
                    
                    	function buildPath(glyphs, glyph) {
                    	    if (glyph.isComposite) {
                    	        for (var j = 0; j < glyph.components.length; j += 1) {
                    	            var component = glyph.components[j];
                    	            var componentGlyph = glyphs.get(component.glyphIndex);
                    	            // Force the ttfGlyphLoader to parse the glyph.
                    	            componentGlyph.getPath();
                    	            if (componentGlyph.points) {
                    	                var transformedPoints = (void 0);
                    	                if (component.matchedPoints === undefined) {
                    	                    // component positioned by offset
                    	                    transformedPoints = transformPoints(componentGlyph.points, component);
                    	                } else {
                    	                    // component positioned by matched points
                    	                    if ((component.matchedPoints[0] > glyph.points.length - 1) ||
                    	                        (component.matchedPoints[1] > componentGlyph.points.length - 1)) {
                    	                        throw Error('Matched points out of range in ' + glyph.name);
                    	                    }
                    	                    var firstPt = glyph.points[component.matchedPoints[0]];
                    	                    var secondPt = componentGlyph.points[component.matchedPoints[1]];
                    	                    var transform = {
                    	                        xScale: component.xScale, scale01: component.scale01,
                    	                        scale10: component.scale10, yScale: component.yScale,
                    	                        dx: 0, dy: 0
                    	                    };
                    	                    secondPt = transformPoints([secondPt], transform)[0];
                    	                    transform.dx = firstPt.x - secondPt.x;
                    	                    transform.dy = firstPt.y - secondPt.y;
                    	                    transformedPoints = transformPoints(componentGlyph.points, transform);
                    	                }
                    	                glyph.points = glyph.points.concat(transformedPoints);
                    	            }
                    	        }
                    	    }
                    
                    	    return getPath(glyph.points);
                    	}
                    
                    	// Parse all the glyphs according to the offsets from the `loca` table.
                    	function parseGlyfTable(data, start, loca, font) {
                    	    var glyphs = new glyphset.GlyphSet(font);
                    
                    	    // The last element of the loca table is invalid.
                    	    for (var i = 0; i < loca.length - 1; i += 1) {
                    	        var offset = loca[i];
                    	        var nextOffset = loca[i + 1];
                    	        if (offset !== nextOffset) {
                    	            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));
                    	        } else {
                    	            glyphs.push(i, glyphset.glyphLoader(font, i));
                    	        }
                    	    }
                    
                    	    return glyphs;
                    	}
                    
                    	var glyf = { getPath: getPath, parse: parseGlyfTable };
                    
                    	/* A TrueType font hinting interpreter.
                    	*
                    	* (c) 2017 Axel Kittenberger
                    	*
                    	* This interpreter has been implemented according to this documentation:
                    	* https://developer.apple.com/fonts/TrueType-Reference-Manual/RM05/Chap5.html
                    	*
                    	* According to the documentation F24DOT6 values are used for pixels.
                    	* That means calculation is 1/64 pixel accurate and uses integer operations.
                    	* However, Javascript has floating point operations by default and only
                    	* those are available. One could make a case to simulate the 1/64 accuracy
                    	* exactly by truncating after every division operation
                    	* (for example with << 0) to get pixel exactly results as other TrueType
                    	* implementations. It may make sense since some fonts are pixel optimized
                    	* by hand using DELTAP instructions. The current implementation doesn't
                    	* and rather uses full floating point precision.
                    	*
                    	* xScale, yScale and rotation is currently ignored.
                    	*
                    	* A few non-trivial instructions are missing as I didn't encounter yet
                    	* a font that used them to test a possible implementation.
                    	*
                    	* Some fonts seem to use undocumented features regarding the twilight zone.
                    	* Only some of them are implemented as they were encountered.
                    	*
                    	* The exports.DEBUG statements are removed on the minified distribution file.
                    	*/
                    
                    	var instructionTable;
                    	var exec;
                    	var execGlyph;
                    	var execComponent;
                    
                    	/*
                    	* Creates a hinting object.
                    	*
                    	* There ought to be exactly one
                    	* for each truetype font that is used for hinting.
                    	*/
                    	function Hinting(font) {
                    	    // the font this hinting object is for
                    	    this.font = font;
                    
                    	    this.getCommands = function (hPoints) {
                    	        return glyf.getPath(hPoints).commands;
                    	    };
                    
                    	    // cached states
                    	    this._fpgmState  =
                    	    this._prepState  =
                    	        undefined;
                    
                    	    // errorState
                    	    // 0 ... all okay
                    	    // 1 ... had an error in a glyf,
                    	    //       continue working but stop spamming
                    	    //       the console
                    	    // 2 ... error at prep, stop hinting at this ppem
                    	    // 3 ... error at fpeg, stop hinting for this font at all
                    	    this._errorState = 0;
                    	}
                    
                    	/*
                    	* Not rounding.
                    	*/
                    	function roundOff(v) {
                    	    return v;
                    	}
                    
                    	/*
                    	* Rounding to grid.
                    	*/
                    	function roundToGrid(v) {
                    	    //Rounding in TT is supposed to "symmetrical around zero"
                    	    return Math.sign(v) * Math.round(Math.abs(v));
                    	}
                    
                    	/*
                    	* Rounding to double grid.
                    	*/
                    	function roundToDoubleGrid(v) {
                    	    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;
                    	}
                    
                    	/*
                    	* Rounding to half grid.
                    	*/
                    	function roundToHalfGrid(v) {
                    	    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);
                    	}
                    
                    	/*
                    	* Rounding to up to grid.
                    	*/
                    	function roundUpToGrid(v) {
                    	    return Math.sign(v) * Math.ceil(Math.abs(v));
                    	}
                    
                    	/*
                    	* Rounding to down to grid.
                    	*/
                    	function roundDownToGrid(v) {
                    	    return Math.sign(v) * Math.floor(Math.abs(v));
                    	}
                    
                    	/*
                    	* Super rounding.
                    	*/
                    	var roundSuper = function (v) {
                    	    var period = this.srPeriod;
                    	    var phase = this.srPhase;
                    	    var threshold = this.srThreshold;
                    	    var sign = 1;
                    
                    	    if (v < 0) {
                    	        v = -v;
                    	        sign = -1;
                    	    }
                    
                    	    v += threshold - phase;
                    
                    	    v = Math.trunc(v / period) * period;
                    
                    	    v += phase;
                    
                    	    // according to http://xgridfit.sourceforge.net/round.html
                    	    if (v < 0) { return phase * sign; }
                    
                    	    return v * sign;
                    	};
                    
                    	/*
                    	* Unit vector of x-axis.
                    	*/
                    	var xUnitVector = {
                    	    x: 1,
                    
                    	    y: 0,
                    
                    	    axis: 'x',
                    
                    	    // Gets the projected distance between two points.
                    	    // o1/o2 ... if true, respective original position is used.
                    	    distance: function (p1, p2, o1, o2) {
                    	        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);
                    	    },
                    
                    	    // Moves point p so the moved position has the same relative
                    	    // position to the moved positions of rp1 and rp2 than the
                    	    // original positions had.
                    	    //
                    	    // See APPENDIX on INTERPOLATE at the bottom of this file.
                    	    interpolate: function (p, rp1, rp2, pv) {
                    	        var do1;
                    	        var do2;
                    	        var doa1;
                    	        var doa2;
                    	        var dm1;
                    	        var dm2;
                    	        var dt;
                    
                    	        if (!pv || pv === this) {
                    	            do1 = p.xo - rp1.xo;
                    	            do2 = p.xo - rp2.xo;
                    	            dm1 = rp1.x - rp1.xo;
                    	            dm2 = rp2.x - rp2.xo;
                    	            doa1 = Math.abs(do1);
                    	            doa2 = Math.abs(do2);
                    	            dt = doa1 + doa2;
                    
                    	            if (dt === 0) {
                    	                p.x = p.xo + (dm1 + dm2) / 2;
                    	                return;
                    	            }
                    
                    	            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;
                    	            return;
                    	        }
                    
                    	        do1 = pv.distance(p, rp1, true, true);
                    	        do2 = pv.distance(p, rp2, true, true);
                    	        dm1 = pv.distance(rp1, rp1, false, true);
                    	        dm2 = pv.distance(rp2, rp2, false, true);
                    	        doa1 = Math.abs(do1);
                    	        doa2 = Math.abs(do2);
                    	        dt = doa1 + doa2;
                    
                    	        if (dt === 0) {
                    	            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                    	            return;
                    	        }
                    
                    	        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
                    	    },
                    
                    	    // Slope of line normal to this
                    	    normalSlope: Number.NEGATIVE_INFINITY,
                    
                    	    // Sets the point 'p' relative to point 'rp'
                    	    // by the distance 'd'.
                    	    //
                    	    // See APPENDIX on SETRELATIVE at the bottom of this file.
                    	    //
                    	    // p   ... point to set
                    	    // rp  ... reference point
                    	    // d   ... distance on projection vector
                    	    // pv  ... projection vector (undefined = this)
                    	    // org ... if true, uses the original position of rp as reference.
                    	    setRelative: function (p, rp, d, pv, org) {
                    	        if (!pv || pv === this) {
                    	            p.x = (org ? rp.xo : rp.x) + d;
                    	            return;
                    	        }
                    
                    	        var rpx = org ? rp.xo : rp.x;
                    	        var rpy = org ? rp.yo : rp.y;
                    	        var rpdx = rpx + d * pv.x;
                    	        var rpdy = rpy + d * pv.y;
                    
                    	        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;
                    	    },
                    
                    	    // Slope of vector line.
                    	    slope: 0,
                    
                    	    // Touches the point p.
                    	    touch: function (p) {
                    	        p.xTouched = true;
                    	    },
                    
                    	    // Tests if a point p is touched.
                    	    touched: function (p) {
                    	        return p.xTouched;
                    	    },
                    
                    	    // Untouches the point p.
                    	    untouch: function (p) {
                    	        p.xTouched = false;
                    	    }
                    	};
                    
                    	/*
                    	* Unit vector of y-axis.
                    	*/
                    	var yUnitVector = {
                    	    x: 0,
                    
                    	    y: 1,
                    
                    	    axis: 'y',
                    
                    	    // Gets the projected distance between two points.
                    	    // o1/o2 ... if true, respective original position is used.
                    	    distance: function (p1, p2, o1, o2) {
                    	        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);
                    	    },
                    
                    	    // Moves point p so the moved position has the same relative
                    	    // position to the moved positions of rp1 and rp2 than the
                    	    // original positions had.
                    	    //
                    	    // See APPENDIX on INTERPOLATE at the bottom of this file.
                    	    interpolate: function (p, rp1, rp2, pv) {
                    	        var do1;
                    	        var do2;
                    	        var doa1;
                    	        var doa2;
                    	        var dm1;
                    	        var dm2;
                    	        var dt;
                    
                    	        if (!pv || pv === this) {
                    	            do1 = p.yo - rp1.yo;
                    	            do2 = p.yo - rp2.yo;
                    	            dm1 = rp1.y - rp1.yo;
                    	            dm2 = rp2.y - rp2.yo;
                    	            doa1 = Math.abs(do1);
                    	            doa2 = Math.abs(do2);
                    	            dt = doa1 + doa2;
                    
                    	            if (dt === 0) {
                    	                p.y = p.yo + (dm1 + dm2) / 2;
                    	                return;
                    	            }
                    
                    	            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;
                    	            return;
                    	        }
                    
                    	        do1 = pv.distance(p, rp1, true, true);
                    	        do2 = pv.distance(p, rp2, true, true);
                    	        dm1 = pv.distance(rp1, rp1, false, true);
                    	        dm2 = pv.distance(rp2, rp2, false, true);
                    	        doa1 = Math.abs(do1);
                    	        doa2 = Math.abs(do2);
                    	        dt = doa1 + doa2;
                    
                    	        if (dt === 0) {
                    	            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                    	            return;
                    	        }
                    
                    	        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
                    	    },
                    
                    	    // Slope of line normal to this.
                    	    normalSlope: 0,
                    
                    	    // Sets the point 'p' relative to point 'rp'
                    	    // by the distance 'd'
                    	    //
                    	    // See APPENDIX on SETRELATIVE at the bottom of this file.
                    	    //
                    	    // p   ... point to set
                    	    // rp  ... reference point
                    	    // d   ... distance on projection vector
                    	    // pv  ... projection vector (undefined = this)
                    	    // org ... if true, uses the original position of rp as reference.
                    	    setRelative: function (p, rp, d, pv, org) {
                    	        if (!pv || pv === this) {
                    	            p.y = (org ? rp.yo : rp.y) + d;
                    	            return;
                    	        }
                    
                    	        var rpx = org ? rp.xo : rp.x;
                    	        var rpy = org ? rp.yo : rp.y;
                    	        var rpdx = rpx + d * pv.x;
                    	        var rpdy = rpy + d * pv.y;
                    
                    	        p.y = rpdy + pv.normalSlope * (p.x - rpdx);
                    	    },
                    
                    	    // Slope of vector line.
                    	    slope: Number.POSITIVE_INFINITY,
                    
                    	    // Touches the point p.
                    	    touch: function (p) {
                    	        p.yTouched = true;
                    	    },
                    
                    	    // Tests if a point p is touched.
                    	    touched: function (p) {
                    	        return p.yTouched;
                    	    },
                    
                    	    // Untouches the point p.
                    	    untouch: function (p) {
                    	        p.yTouched = false;
                    	    }
                    	};
                    
                    	Object.freeze(xUnitVector);
                    	Object.freeze(yUnitVector);
                    
                    	/*
                    	* Creates a unit vector that is not x- or y-axis.
                    	*/
                    	function UnitVector(x, y) {
                    	    this.x = x;
                    	    this.y = y;
                    	    this.axis = undefined;
                    	    this.slope = y / x;
                    	    this.normalSlope = -x / y;
                    	    Object.freeze(this);
                    	}
                    
                    	/*
                    	* Gets the projected distance between two points.
                    	* o1/o2 ... if true, respective original position is used.
                    	*/
                    	UnitVector.prototype.distance = function(p1, p2, o1, o2) {
                    	    return (
                    	        this.x * xUnitVector.distance(p1, p2, o1, o2) +
                    	        this.y * yUnitVector.distance(p1, p2, o1, o2)
                    	    );
                    	};
                    
                    	/*
                    	* Moves point p so the moved position has the same relative
                    	* position to the moved positions of rp1 and rp2 than the
                    	* original positions had.
                    	*
                    	* See APPENDIX on INTERPOLATE at the bottom of this file.
                    	*/
                    	UnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {
                    	    var dm1;
                    	    var dm2;
                    	    var do1;
                    	    var do2;
                    	    var doa1;
                    	    var doa2;
                    	    var dt;
                    
                    	    do1 = pv.distance(p, rp1, true, true);
                    	    do2 = pv.distance(p, rp2, true, true);
                    	    dm1 = pv.distance(rp1, rp1, false, true);
                    	    dm2 = pv.distance(rp2, rp2, false, true);
                    	    doa1 = Math.abs(do1);
                    	    doa2 = Math.abs(do2);
                    	    dt = doa1 + doa2;
                    
                    	    if (dt === 0) {
                    	        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);
                    	        return;
                    	    }
                    
                    	    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);
                    	};
                    
                    	/*
                    	* Sets the point 'p' relative to point 'rp'
                    	* by the distance 'd'
                    	*
                    	* See APPENDIX on SETRELATIVE at the bottom of this file.
                    	*
                    	* p   ...  point to set
                    	* rp  ... reference point
                    	* d   ... distance on projection vector
                    	* pv  ... projection vector (undefined = this)
                    	* org ... if true, uses the original position of rp as reference.
                    	*/
                    	UnitVector.prototype.setRelative = function(p, rp, d, pv, org) {
                    	    pv = pv || this;
                    
                    	    var rpx = org ? rp.xo : rp.x;
                    	    var rpy = org ? rp.yo : rp.y;
                    	    var rpdx = rpx + d * pv.x;
                    	    var rpdy = rpy + d * pv.y;
                    
                    	    var pvns = pv.normalSlope;
                    	    var fvs = this.slope;
                    
                    	    var px = p.x;
                    	    var py = p.y;
                    
                    	    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);
                    	    p.y = fvs * (p.x - px) + py;
                    	};
                    
                    	/*
                    	* Touches the point p.
                    	*/
                    	UnitVector.prototype.touch = function(p) {
                    	    p.xTouched = true;
                    	    p.yTouched = true;
                    	};
                    
                    	/*
                    	* Returns a unit vector with x/y coordinates.
                    	*/
                    	function getUnitVector(x, y) {
                    	    var d = Math.sqrt(x * x + y * y);
                    
                    	    x /= d;
                    	    y /= d;
                    
                    	    if (x === 1 && y === 0) { return xUnitVector; }
                    	    else if (x === 0 && y === 1) { return yUnitVector; }
                    	    else { return new UnitVector(x, y); }
                    	}
                    
                    	/*
                    	* Creates a point in the hinting engine.
                    	*/
                    	function HPoint(
                    	    x,
                    	    y,
                    	    lastPointOfContour,
                    	    onCurve
                    	) {
                    	    this.x = this.xo = Math.round(x * 64) / 64; // hinted x value and original x-value
                    	    this.y = this.yo = Math.round(y * 64) / 64; // hinted y value and original y-value
                    
                    	    this.lastPointOfContour = lastPointOfContour;
                    	    this.onCurve = onCurve;
                    	    this.prevPointOnContour = undefined;
                    	    this.nextPointOnContour = undefined;
                    	    this.xTouched = false;
                    	    this.yTouched = false;
                    
                    	    Object.preventExtensions(this);
                    	}
                    
                    	/*
                    	* Returns the next touched point on the contour.
                    	*
                    	* v  ... unit vector to test touch axis.
                    	*/
                    	HPoint.prototype.nextTouched = function(v) {
                    	    var p = this.nextPointOnContour;
                    
                    	    while (!v.touched(p) && p !== this) { p = p.nextPointOnContour; }
                    
                    	    return p;
                    	};
                    
                    	/*
                    	* Returns the previous touched point on the contour
                    	*
                    	* v  ... unit vector to test touch axis.
                    	*/
                    	HPoint.prototype.prevTouched = function(v) {
                    	    var p = this.prevPointOnContour;
                    
                    	    while (!v.touched(p) && p !== this) { p = p.prevPointOnContour; }
                    
                    	    return p;
                    	};
                    
                    	/*
                    	* The zero point.
                    	*/
                    	var HPZero = Object.freeze(new HPoint(0, 0));
                    
                    	/*
                    	* The default state of the interpreter.
                    	*
                    	* Note: Freezing the defaultState and then deriving from it
                    	* makes the V8 Javascript engine going awkward,
                    	* so this is avoided, albeit the defaultState shouldn't
                    	* ever change.
                    	*/
                    	var defaultState = {
                    	    cvCutIn: 17 / 16,    // control value cut in
                    	    deltaBase: 9,
                    	    deltaShift: 0.125,
                    	    loop: 1,             // loops some instructions
                    	    minDis: 1,           // minimum distance
                    	    autoFlip: true
                    	};
                    
                    	/*
                    	* The current state of the interpreter.
                    	*
                    	* env  ... 'fpgm' or 'prep' or 'glyf'
                    	* prog ... the program
                    	*/
                    	function State(env, prog) {
                    	    this.env = env;
                    	    this.stack = [];
                    	    this.prog = prog;
                    
                    	    switch (env) {
                    	        case 'glyf' :
                    	            this.zp0 = this.zp1 = this.zp2 = 1;
                    	            this.rp0 = this.rp1 = this.rp2 = 0;
                    	            /* fall through */
                    	        case 'prep' :
                    	            this.fv = this.pv = this.dpv = xUnitVector;
                    	            this.round = roundToGrid;
                    	    }
                    	}
                    
                    	/*
                    	* Executes a glyph program.
                    	*
                    	* This does the hinting for each glyph.
                    	*
                    	* Returns an array of moved points.
                    	*
                    	* glyph: the glyph to hint
                    	* ppem: the size the glyph is rendered for
                    	*/
                    	Hinting.prototype.exec = function(glyph, ppem) {
                    	    if (typeof ppem !== 'number') {
                    	        throw new Error('Point size is not a number!');
                    	    }
                    
                    	    // Received a fatal error, don't do any hinting anymore.
                    	    if (this._errorState > 2) { return; }
                    
                    	    var font = this.font;
                    	    var prepState = this._prepState;
                    
                    	    if (!prepState || prepState.ppem !== ppem) {
                    	        var fpgmState = this._fpgmState;
                    
                    	        if (!fpgmState) {
                    	            // Executes the fpgm state.
                    	            // This is used by fonts to define functions.
                    	            State.prototype = defaultState;
                    
                    	            fpgmState =
                    	            this._fpgmState =
                    	                new State('fpgm', font.tables.fpgm);
                    
                    	            fpgmState.funcs = [ ];
                    	            fpgmState.font = font;
                    
                    	            if (exports.DEBUG) {
                    	                console.log('---EXEC FPGM---');
                    	                fpgmState.step = -1;
                    	            }
                    
                    	            try {
                    	                exec(fpgmState);
                    	            } catch (e) {
                    	                console.log('Hinting error in FPGM:' + e);
                    	                this._errorState = 3;
                    	                return;
                    	            }
                    	        }
                    
                    	        // Executes the prep program for this ppem setting.
                    	        // This is used by fonts to set cvt values
                    	        // depending on to be rendered font size.
                    
                    	        State.prototype = fpgmState;
                    	        prepState =
                    	        this._prepState =
                    	            new State('prep', font.tables.prep);
                    
                    	        prepState.ppem = ppem;
                    
                    	        // Creates a copy of the cvt table
                    	        // and scales it to the current ppem setting.
                    	        var oCvt = font.tables.cvt;
                    	        if (oCvt) {
                    	            var cvt = prepState.cvt = new Array(oCvt.length);
                    	            var scale = ppem / font.unitsPerEm;
                    	            for (var c = 0; c < oCvt.length; c++) {
                    	                cvt[c] = oCvt[c] * scale;
                    	            }
                    	        } else {
                    	            prepState.cvt = [];
                    	        }
                    
                    	        if (exports.DEBUG) {
                    	            console.log('---EXEC PREP---');
                    	            prepState.step = -1;
                    	        }
                    
                    	        try {
                    	            exec(prepState);
                    	        } catch (e) {
                    	            if (this._errorState < 2) {
                    	                console.log('Hinting error in PREP:' + e);
                    	            }
                    	            this._errorState = 2;
                    	        }
                    	    }
                    
                    	    if (this._errorState > 1) { return; }
                    
                    	    try {
                    	        return execGlyph(glyph, prepState);
                    	    } catch (e) {
                    	        if (this._errorState < 1) {
                    	            console.log('Hinting error:' + e);
                    	            console.log('Note: further hinting errors are silenced');
                    	        }
                    	        this._errorState = 1;
                    	        return undefined;
                    	    }
                    	};
                    
                    	/*
                    	* Executes the hinting program for a glyph.
                    	*/
                    	execGlyph = function(glyph, prepState) {
                    	    // original point positions
                    	    var xScale = prepState.ppem / prepState.font.unitsPerEm;
                    	    var yScale = xScale;
                    	    var components = glyph.components;
                    	    var contours;
                    	    var gZone;
                    	    var state;
                    
                    	    State.prototype = prepState;
                    	    if (!components) {
                    	        state = new State('glyf', glyph.instructions);
                    	        if (exports.DEBUG) {
                    	            console.log('---EXEC GLYPH---');
                    	            state.step = -1;
                    	        }
                    	        execComponent(glyph, state, xScale, yScale);
                    	        gZone = state.gZone;
                    	    } else {
                    	        var font = prepState.font;
                    	        gZone = [];
                    	        contours = [];
                    	        for (var i = 0; i < components.length; i++) {
                    	            var c = components[i];
                    	            var cg = font.glyphs.get(c.glyphIndex);
                    
                    	            state = new State('glyf', cg.instructions);
                    
                    	            if (exports.DEBUG) {
                    	                console.log('---EXEC COMP ' + i + '---');
                    	                state.step = -1;
                    	            }
                    
                    	            execComponent(cg, state, xScale, yScale);
                    	            // appends the computed points to the result array
                    	            // post processes the component points
                    	            var dx = Math.round(c.dx * xScale);
                    	            var dy = Math.round(c.dy * yScale);
                    	            var gz = state.gZone;
                    	            var cc = state.contours;
                    	            for (var pi = 0; pi < gz.length; pi++) {
                    	                var p = gz[pi];
                    	                p.xTouched = p.yTouched = false;
                    	                p.xo = p.x = p.x + dx;
                    	                p.yo = p.y = p.y + dy;
                    	            }
                    
                    	            var gLen = gZone.length;
                    	            gZone.push.apply(gZone, gz);
                    	            for (var j = 0; j < cc.length; j++) {
                    	                contours.push(cc[j] + gLen);
                    	            }
                    	        }
                    
                    	        if (glyph.instructions && !state.inhibitGridFit) {
                    	            // the composite has instructions on its own
                    	            state = new State('glyf', glyph.instructions);
                    
                    	            state.gZone = state.z0 = state.z1 = state.z2 = gZone;
                    
                    	            state.contours = contours;
                    
                    	            // note: HPZero cannot be used here, since
                    	            //       the point might be modified
                    	            gZone.push(
                    	                new HPoint(0, 0),
                    	                new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
                    	            );
                    
                    	            if (exports.DEBUG) {
                    	                console.log('---EXEC COMPOSITE---');
                    	                state.step = -1;
                    	            }
                    
                    	            exec(state);
                    
                    	            gZone.length -= 2;
                    	        }
                    	    }
                    
                    	    return gZone;
                    	};
                    
                    	/*
                    	* Executes the hinting program for a component of a multi-component glyph
                    	* or of the glyph itself for a non-component glyph.
                    	*/
                    	execComponent = function(glyph, state, xScale, yScale)
                    	{
                    	    var points = glyph.points || [];
                    	    var pLen = points.length;
                    	    var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];
                    	    var contours = state.contours = [];
                    
                    	    // Scales the original points and
                    	    // makes copies for the hinted points.
                    	    var cp; // current point
                    	    for (var i = 0; i < pLen; i++) {
                    	        cp = points[i];
                    
                    	        gZone[i] = new HPoint(
                    	            cp.x * xScale,
                    	            cp.y * yScale,
                    	            cp.lastPointOfContour,
                    	            cp.onCurve
                    	        );
                    	    }
                    
                    	    // Chain links the contours.
                    	    var sp; // start point
                    	    var np; // next point
                    
                    	    for (var i$1 = 0; i$1 < pLen; i$1++) {
                    	        cp = gZone[i$1];
                    
                    	        if (!sp) {
                    	            sp = cp;
                    	            contours.push(i$1);
                    	        }
                    
                    	        if (cp.lastPointOfContour) {
                    	            cp.nextPointOnContour = sp;
                    	            sp.prevPointOnContour = cp;
                    	            sp = undefined;
                    	        } else {
                    	            np = gZone[i$1 + 1];
                    	            cp.nextPointOnContour = np;
                    	            np.prevPointOnContour = cp;
                    	        }
                    	    }
                    
                    	    if (state.inhibitGridFit) { return; }
                    
                    	    if (exports.DEBUG) {
                    	        console.log('PROCESSING GLYPH', state.stack);
                    	        for (var i$2 = 0; i$2 < pLen; i$2++) {
                    	            console.log(i$2, gZone[i$2].x, gZone[i$2].y);
                    	        }
                    	    }
                    
                    	    gZone.push(
                    	        new HPoint(0, 0),
                    	        new HPoint(Math.round(glyph.advanceWidth * xScale), 0)
                    	    );
                    
                    	    exec(state);
                    
                    	    // Removes the extra points.
                    	    gZone.length -= 2;
                    
                    	    if (exports.DEBUG) {
                    	        console.log('FINISHED GLYPH', state.stack);
                    	        for (var i$3 = 0; i$3 < pLen; i$3++) {
                    	            console.log(i$3, gZone[i$3].x, gZone[i$3].y);
                    	        }
                    	    }
                    	};
                    
                    	/*
                    	* Executes the program loaded in state.
                    	*/
                    	exec = function(state) {
                    	    var prog = state.prog;
                    
                    	    if (!prog) { return; }
                    
                    	    var pLen = prog.length;
                    	    var ins;
                    
                    	    for (state.ip = 0; state.ip < pLen; state.ip++) {
                    	        if (exports.DEBUG) { state.step++; }
                    	        ins = instructionTable[prog[state.ip]];
                    
                    	        if (!ins) {
                    	            throw new Error(
                    	                'unknown instruction: 0x' +
                    	                Number(prog[state.ip]).toString(16)
                    	            );
                    	        }
                    
                    	        ins(state);
                    
                    	        // very extensive debugging for each step
                    	        /*
                    	        if (exports.DEBUG) {
                    	            var da;
                    	            if (state.gZone) {
                    	                da = [];
                    	                for (let i = 0; i < state.gZone.length; i++)
                    	                {
                    	                    da.push(i + ' ' +
                    	                        state.gZone[i].x * 64 + ' ' +
                    	                        state.gZone[i].y * 64 + ' ' +
                    	                        (state.gZone[i].xTouched ? 'x' : '') +
                    	                        (state.gZone[i].yTouched ? 'y' : '')
                    	                    );
                    	                }
                    	                console.log('GZ', da);
                    	            }
                    
                    	            if (state.tZone) {
                    	                da = [];
                    	                for (let i = 0; i < state.tZone.length; i++) {
                    	                    da.push(i + ' ' +
                    	                        state.tZone[i].x * 64 + ' ' +
                    	                        state.tZone[i].y * 64 + ' ' +
                    	                        (state.tZone[i].xTouched ? 'x' : '') +
                    	                        (state.tZone[i].yTouched ? 'y' : '')
                    	                    );
                    	                }
                    	                console.log('TZ', da);
                    	            }
                    
                    	            if (state.stack.length > 10) {
                    	                console.log(
                    	                    state.stack.length,
                    	                    '...', state.stack.slice(state.stack.length - 10)
                    	                );
                    	            } else {
                    	                console.log(state.stack.length, state.stack);
                    	            }
                    	        }
                    	        */
                    	    }
                    	};
                    
                    	/*
                    	* Initializes the twilight zone.
                    	*
                    	* This is only done if a SZPx instruction
                    	* refers to the twilight zone.
                    	*/
                    	function initTZone(state)
                    	{
                    	    var tZone = state.tZone = new Array(state.gZone.length);
                    
                    	    // no idea if this is actually correct...
                    	    for (var i = 0; i < tZone.length; i++)
                    	    {
                    	        tZone[i] = new HPoint(0, 0);
                    	    }
                    	}
                    
                    	/*
                    	* Skips the instruction pointer ahead over an IF/ELSE block.
                    	* handleElse .. if true breaks on matching ELSE
                    	*/
                    	function skip(state, handleElse)
                    	{
                    	    var prog = state.prog;
                    	    var ip = state.ip;
                    	    var nesting = 1;
                    	    var ins;
                    
                    	    do {
                    	        ins = prog[++ip];
                    	        if (ins === 0x58) // IF
                    	            { nesting++; }
                    	        else if (ins === 0x59) // EIF
                    	            { nesting--; }
                    	        else if (ins === 0x40) // NPUSHB
                    	            { ip += prog[ip + 1] + 1; }
                    	        else if (ins === 0x41) // NPUSHW
                    	            { ip += 2 * prog[ip + 1] + 1; }
                    	        else if (ins >= 0xB0 && ins <= 0xB7) // PUSHB
                    	            { ip += ins - 0xB0 + 1; }
                    	        else if (ins >= 0xB8 && ins <= 0xBF) // PUSHW
                    	            { ip += (ins - 0xB8 + 1) * 2; }
                    	        else if (handleElse && nesting === 1 && ins === 0x1B) // ELSE
                    	            { break; }
                    	    } while (nesting > 0);
                    
                    	    state.ip = ip;
                    	}
                    
                    	/*----------------------------------------------------------*
                    	*          And then a lot of instructions...                *
                    	*----------------------------------------------------------*/
                    
                    	// SVTCA[a] Set freedom and projection Vectors To Coordinate Axis
                    	// 0x00-0x01
                    	function SVTCA(v, state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'SVTCA[' + v.axis + ']'); }
                    
                    	    state.fv = state.pv = state.dpv = v;
                    	}
                    
                    	// SPVTCA[a] Set Projection Vector to Coordinate Axis
                    	// 0x02-0x03
                    	function SPVTCA(v, state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'SPVTCA[' + v.axis + ']'); }
                    
                    	    state.pv = state.dpv = v;
                    	}
                    
                    	// SFVTCA[a] Set Freedom Vector to Coordinate Axis
                    	// 0x04-0x05
                    	function SFVTCA(v, state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'SFVTCA[' + v.axis + ']'); }
                    
                    	    state.fv = v;
                    	}
                    
                    	// SPVTL[a] Set Projection Vector To Line
                    	// 0x06-0x07
                    	function SPVTL(a, state) {
                    	    var stack = state.stack;
                    	    var p2i = stack.pop();
                    	    var p1i = stack.pop();
                    	    var p2 = state.z2[p2i];
                    	    var p1 = state.z1[p1i];
                    
                    	    if (exports.DEBUG) { console.log('SPVTL[' + a + ']', p2i, p1i); }
                    
                    	    var dx;
                    	    var dy;
                    
                    	    if (!a) {
                    	        dx = p1.x - p2.x;
                    	        dy = p1.y - p2.y;
                    	    } else {
                    	        dx = p2.y - p1.y;
                    	        dy = p1.x - p2.x;
                    	    }
                    
                    	    state.pv = state.dpv = getUnitVector(dx, dy);
                    	}
                    
                    	// SFVTL[a] Set Freedom Vector To Line
                    	// 0x08-0x09
                    	function SFVTL(a, state) {
                    	    var stack = state.stack;
                    	    var p2i = stack.pop();
                    	    var p1i = stack.pop();
                    	    var p2 = state.z2[p2i];
                    	    var p1 = state.z1[p1i];
                    
                    	    if (exports.DEBUG) { console.log('SFVTL[' + a + ']', p2i, p1i); }
                    
                    	    var dx;
                    	    var dy;
                    
                    	    if (!a) {
                    	        dx = p1.x - p2.x;
                    	        dy = p1.y - p2.y;
                    	    } else {
                    	        dx = p2.y - p1.y;
                    	        dy = p1.x - p2.x;
                    	    }
                    
                    	    state.fv = getUnitVector(dx, dy);
                    	}
                    
                    	// SPVFS[] Set Projection Vector From Stack
                    	// 0x0A
                    	function SPVFS(state) {
                    	    var stack = state.stack;
                    	    var y = stack.pop();
                    	    var x = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }
                    
                    	    state.pv = state.dpv = getUnitVector(x, y);
                    	}
                    
                    	// SFVFS[] Set Freedom Vector From Stack
                    	// 0x0B
                    	function SFVFS(state) {
                    	    var stack = state.stack;
                    	    var y = stack.pop();
                    	    var x = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SPVFS[]', y, x); }
                    
                    	    state.fv = getUnitVector(x, y);
                    	}
                    
                    	// GPV[] Get Projection Vector
                    	// 0x0C
                    	function GPV(state) {
                    	    var stack = state.stack;
                    	    var pv = state.pv;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'GPV[]'); }
                    
                    	    stack.push(pv.x * 0x4000);
                    	    stack.push(pv.y * 0x4000);
                    	}
                    
                    	// GFV[] Get Freedom Vector
                    	// 0x0C
                    	function GFV(state) {
                    	    var stack = state.stack;
                    	    var fv = state.fv;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'GFV[]'); }
                    
                    	    stack.push(fv.x * 0x4000);
                    	    stack.push(fv.y * 0x4000);
                    	}
                    
                    	// SFVTPV[] Set Freedom Vector To Projection Vector
                    	// 0x0E
                    	function SFVTPV(state) {
                    	    state.fv = state.pv;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SFVTPV[]'); }
                    	}
                    
                    	// ISECT[] moves point p to the InterSECTion of two lines
                    	// 0x0F
                    	function ISECT(state)
                    	{
                    	    var stack = state.stack;
                    	    var pa0i = stack.pop();
                    	    var pa1i = stack.pop();
                    	    var pb0i = stack.pop();
                    	    var pb1i = stack.pop();
                    	    var pi = stack.pop();
                    	    var z0 = state.z0;
                    	    var z1 = state.z1;
                    	    var pa0 = z0[pa0i];
                    	    var pa1 = z0[pa1i];
                    	    var pb0 = z1[pb0i];
                    	    var pb1 = z1[pb1i];
                    	    var p = state.z2[pi];
                    
                    	    if (exports.DEBUG) { console.log('ISECT[], ', pa0i, pa1i, pb0i, pb1i, pi); }
                    
                    	    // math from
                    	    // en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line
                    
                    	    var x1 = pa0.x;
                    	    var y1 = pa0.y;
                    	    var x2 = pa1.x;
                    	    var y2 = pa1.y;
                    	    var x3 = pb0.x;
                    	    var y3 = pb0.y;
                    	    var x4 = pb1.x;
                    	    var y4 = pb1.y;
                    
                    	    var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);
                    	    var f1 = x1 * y2 - y1 * x2;
                    	    var f2 = x3 * y4 - y3 * x4;
                    
                    	    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;
                    	    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;
                    	}
                    
                    	// SRP0[] Set Reference Point 0
                    	// 0x10
                    	function SRP0(state) {
                    	    state.rp0 = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SRP0[]', state.rp0); }
                    	}
                    
                    	// SRP1[] Set Reference Point 1
                    	// 0x11
                    	function SRP1(state) {
                    	    state.rp1 = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SRP1[]', state.rp1); }
                    	}
                    
                    	// SRP1[] Set Reference Point 2
                    	// 0x12
                    	function SRP2(state) {
                    	    state.rp2 = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SRP2[]', state.rp2); }
                    	}
                    
                    	// SZP0[] Set Zone Pointer 0
                    	// 0x13
                    	function SZP0(state) {
                    	    var n = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SZP0[]', n); }
                    
                    	    state.zp0 = n;
                    
                    	    switch (n) {
                    	        case 0:
                    	            if (!state.tZone) { initTZone(state); }
                    	            state.z0 = state.tZone;
                    	            break;
                    	        case 1 :
                    	            state.z0 = state.gZone;
                    	            break;
                    	        default :
                    	            throw new Error('Invalid zone pointer');
                    	    }
                    	}
                    
                    	// SZP1[] Set Zone Pointer 1
                    	// 0x14
                    	function SZP1(state) {
                    	    var n = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SZP1[]', n); }
                    
                    	    state.zp1 = n;
                    
                    	    switch (n) {
                    	        case 0:
                    	            if (!state.tZone) { initTZone(state); }
                    	            state.z1 = state.tZone;
                    	            break;
                    	        case 1 :
                    	            state.z1 = state.gZone;
                    	            break;
                    	        default :
                    	            throw new Error('Invalid zone pointer');
                    	    }
                    	}
                    
                    	// SZP2[] Set Zone Pointer 2
                    	// 0x15
                    	function SZP2(state) {
                    	    var n = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SZP2[]', n); }
                    
                    	    state.zp2 = n;
                    
                    	    switch (n) {
                    	        case 0:
                    	            if (!state.tZone) { initTZone(state); }
                    	            state.z2 = state.tZone;
                    	            break;
                    	        case 1 :
                    	            state.z2 = state.gZone;
                    	            break;
                    	        default :
                    	            throw new Error('Invalid zone pointer');
                    	    }
                    	}
                    
                    	// SZPS[] Set Zone PointerS
                    	// 0x16
                    	function SZPS(state) {
                    	    var n = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SZPS[]', n); }
                    
                    	    state.zp0 = state.zp1 = state.zp2 = n;
                    
                    	    switch (n) {
                    	        case 0:
                    	            if (!state.tZone) { initTZone(state); }
                    	            state.z0 = state.z1 = state.z2 = state.tZone;
                    	            break;
                    	        case 1 :
                    	            state.z0 = state.z1 = state.z2 = state.gZone;
                    	            break;
                    	        default :
                    	            throw new Error('Invalid zone pointer');
                    	    }
                    	}
                    
                    	// SLOOP[] Set LOOP variable
                    	// 0x17
                    	function SLOOP(state) {
                    	    state.loop = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SLOOP[]', state.loop); }
                    	}
                    
                    	// RTG[] Round To Grid
                    	// 0x18
                    	function RTG(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'RTG[]'); }
                    
                    	    state.round = roundToGrid;
                    	}
                    
                    	// RTHG[] Round To Half Grid
                    	// 0x19
                    	function RTHG(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'RTHG[]'); }
                    
                    	    state.round = roundToHalfGrid;
                    	}
                    
                    	// SMD[] Set Minimum Distance
                    	// 0x1A
                    	function SMD(state) {
                    	    var d = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SMD[]', d); }
                    
                    	    state.minDis = d / 0x40;
                    	}
                    
                    	// ELSE[] ELSE clause
                    	// 0x1B
                    	function ELSE(state) {
                    	    // This instruction has been reached by executing a then branch
                    	    // so it just skips ahead until matching EIF.
                    	    //
                    	    // In case the IF was negative the IF[] instruction already
                    	    // skipped forward over the ELSE[]
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'ELSE[]'); }
                    
                    	    skip(state, false);
                    	}
                    
                    	// JMPR[] JuMP Relative
                    	// 0x1C
                    	function JMPR(state) {
                    	    var o = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'JMPR[]', o); }
                    
                    	    // A jump by 1 would do nothing.
                    	    state.ip += o - 1;
                    	}
                    
                    	// SCVTCI[] Set Control Value Table Cut-In
                    	// 0x1D
                    	function SCVTCI(state) {
                    	    var n = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SCVTCI[]', n); }
                    
                    	    state.cvCutIn = n / 0x40;
                    	}
                    
                    	// DUP[] DUPlicate top stack element
                    	// 0x20
                    	function DUP(state) {
                    	    var stack = state.stack;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'DUP[]'); }
                    
                    	    stack.push(stack[stack.length - 1]);
                    	}
                    
                    	// POP[] POP top stack element
                    	// 0x21
                    	function POP(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'POP[]'); }
                    
                    	    state.stack.pop();
                    	}
                    
                    	// CLEAR[] CLEAR the stack
                    	// 0x22
                    	function CLEAR(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'CLEAR[]'); }
                    
                    	    state.stack.length = 0;
                    	}
                    
                    	// SWAP[] SWAP the top two elements on the stack
                    	// 0x23
                    	function SWAP(state) {
                    	    var stack = state.stack;
                    
                    	    var a = stack.pop();
                    	    var b = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SWAP[]'); }
                    
                    	    stack.push(a);
                    	    stack.push(b);
                    	}
                    
                    	// DEPTH[] DEPTH of the stack
                    	// 0x24
                    	function DEPTH(state) {
                    	    var stack = state.stack;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'DEPTH[]'); }
                    
                    	    stack.push(stack.length);
                    	}
                    
                    	// LOOPCALL[] LOOPCALL function
                    	// 0x2A
                    	function LOOPCALL(state) {
                    	    var stack = state.stack;
                    	    var fn = stack.pop();
                    	    var c = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'LOOPCALL[]', fn, c); }
                    
                    	    // saves callers program
                    	    var cip = state.ip;
                    	    var cprog = state.prog;
                    
                    	    state.prog = state.funcs[fn];
                    
                    	    // executes the function
                    	    for (var i = 0; i < c; i++) {
                    	        exec(state);
                    
                    	        if (exports.DEBUG) { console.log(
                    	            ++state.step,
                    	            i + 1 < c ? 'next loopcall' : 'done loopcall',
                    	            i
                    	        ); }
                    	    }
                    
                    	    // restores the callers program
                    	    state.ip = cip;
                    	    state.prog = cprog;
                    	}
                    
                    	// CALL[] CALL function
                    	// 0x2B
                    	function CALL(state) {
                    	    var fn = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'CALL[]', fn); }
                    
                    	    // saves callers program
                    	    var cip = state.ip;
                    	    var cprog = state.prog;
                    
                    	    state.prog = state.funcs[fn];
                    
                    	    // executes the function
                    	    exec(state);
                    
                    	    // restores the callers program
                    	    state.ip = cip;
                    	    state.prog = cprog;
                    
                    	    if (exports.DEBUG) { console.log(++state.step, 'returning from', fn); }
                    	}
                    
                    	// CINDEX[] Copy the INDEXed element to the top of the stack
                    	// 0x25
                    	function CINDEX(state) {
                    	    var stack = state.stack;
                    	    var k = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'CINDEX[]', k); }
                    
                    	    // In case of k == 1, it copies the last element after popping
                    	    // thus stack.length - k.
                    	    stack.push(stack[stack.length - k]);
                    	}
                    
                    	// MINDEX[] Move the INDEXed element to the top of the stack
                    	// 0x26
                    	function MINDEX(state) {
                    	    var stack = state.stack;
                    	    var k = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'MINDEX[]', k); }
                    
                    	    stack.push(stack.splice(stack.length - k, 1)[0]);
                    	}
                    
                    	// FDEF[] Function DEFinition
                    	// 0x2C
                    	function FDEF(state) {
                    	    if (state.env !== 'fpgm') { throw new Error('FDEF not allowed here'); }
                    	    var stack = state.stack;
                    	    var prog = state.prog;
                    	    var ip = state.ip;
                    
                    	    var fn = stack.pop();
                    	    var ipBegin = ip;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'FDEF[]', fn); }
                    
                    	    while (prog[++ip] !== 0x2D){ }
                    
                    	    state.ip = ip;
                    	    state.funcs[fn] = prog.slice(ipBegin + 1, ip);
                    	}
                    
                    	// MDAP[a] Move Direct Absolute Point
                    	// 0x2E-0x2F
                    	function MDAP(round, state) {
                    	    var pi = state.stack.pop();
                    	    var p = state.z0[pi];
                    	    var fv = state.fv;
                    	    var pv = state.pv;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'MDAP[' + round + ']', pi); }
                    
                    	    var d = pv.distance(p, HPZero);
                    
                    	    if (round) { d = state.round(d); }
                    
                    	    fv.setRelative(p, HPZero, d, pv);
                    	    fv.touch(p);
                    
                    	    state.rp0 = state.rp1 = pi;
                    	}
                    
                    	// IUP[a] Interpolate Untouched Points through the outline
                    	// 0x30
                    	function IUP(v, state) {
                    	    var z2 = state.z2;
                    	    var pLen = z2.length - 2;
                    	    var cp;
                    	    var pp;
                    	    var np;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'IUP[' + v.axis + ']'); }
                    
                    	    for (var i = 0; i < pLen; i++) {
                    	        cp = z2[i]; // current point
                    
                    	        // if this point has been touched go on
                    	        if (v.touched(cp)) { continue; }
                    
                    	        pp = cp.prevTouched(v);
                    
                    	        // no point on the contour has been touched?
                    	        if (pp === cp) { continue; }
                    
                    	        np = cp.nextTouched(v);
                    
                    	        if (pp === np) {
                    	            // only one point on the contour has been touched
                    	            // so simply moves the point like that
                    
                    	            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);
                    	        }
                    
                    	        v.interpolate(cp, pp, np, v);
                    	    }
                    	}
                    
                    	// SHP[] SHift Point using reference point
                    	// 0x32-0x33
                    	function SHP(a, state) {
                    	    var stack = state.stack;
                    	    var rpi = a ? state.rp1 : state.rp2;
                    	    var rp = (a ? state.z0 : state.z1)[rpi];
                    	    var fv = state.fv;
                    	    var pv = state.pv;
                    	    var loop = state.loop;
                    	    var z2 = state.z2;
                    
                    	    while (loop--)
                    	    {
                    	        var pi = stack.pop();
                    	        var p = z2[pi];
                    
                    	        var d = pv.distance(rp, rp, false, true);
                    	        fv.setRelative(p, p, d, pv);
                    	        fv.touch(p);
                    
                    	        if (exports.DEBUG) {
                    	            console.log(
                    	                state.step,
                    	                (state.loop > 1 ?
                    	                   'loop ' + (state.loop - loop) + ': ' :
                    	                   ''
                    	                ) +
                    	                'SHP[' + (a ? 'rp1' : 'rp2') + ']', pi
                    	            );
                    	        }
                    	    }
                    
                    	    state.loop = 1;
                    	}
                    
                    	// SHC[] SHift Contour using reference point
                    	// 0x36-0x37
                    	function SHC(a, state) {
                    	    var stack = state.stack;
                    	    var rpi = a ? state.rp1 : state.rp2;
                    	    var rp = (a ? state.z0 : state.z1)[rpi];
                    	    var fv = state.fv;
                    	    var pv = state.pv;
                    	    var ci = stack.pop();
                    	    var sp = state.z2[state.contours[ci]];
                    	    var p = sp;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SHC[' + a + ']', ci); }
                    
                    	    var d = pv.distance(rp, rp, false, true);
                    
                    	    do {
                    	        if (p !== rp) { fv.setRelative(p, p, d, pv); }
                    	        p = p.nextPointOnContour;
                    	    } while (p !== sp);
                    	}
                    
                    	// SHZ[] SHift Zone using reference point
                    	// 0x36-0x37
                    	function SHZ(a, state) {
                    	    var stack = state.stack;
                    	    var rpi = a ? state.rp1 : state.rp2;
                    	    var rp = (a ? state.z0 : state.z1)[rpi];
                    	    var fv = state.fv;
                    	    var pv = state.pv;
                    
                    	    var e = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SHZ[' + a + ']', e); }
                    
                    	    var z;
                    	    switch (e) {
                    	        case 0 : z = state.tZone; break;
                    	        case 1 : z = state.gZone; break;
                    	        default : throw new Error('Invalid zone');
                    	    }
                    
                    	    var p;
                    	    var d = pv.distance(rp, rp, false, true);
                    	    var pLen = z.length - 2;
                    	    for (var i = 0; i < pLen; i++)
                    	    {
                    	        p = z[i];
                    	        fv.setRelative(p, p, d, pv);
                    	        //if (p !== rp) fv.setRelative(p, p, d, pv);
                    	    }
                    	}
                    
                    	// SHPIX[] SHift point by a PIXel amount
                    	// 0x38
                    	function SHPIX(state) {
                    	    var stack = state.stack;
                    	    var loop = state.loop;
                    	    var fv = state.fv;
                    	    var d = stack.pop() / 0x40;
                    	    var z2 = state.z2;
                    
                    	    while (loop--) {
                    	        var pi = stack.pop();
                    	        var p = z2[pi];
                    
                    	        if (exports.DEBUG) {
                    	            console.log(
                    	                state.step,
                    	                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    	                'SHPIX[]', pi, d
                    	            );
                    	        }
                    
                    	        fv.setRelative(p, p, d);
                    	        fv.touch(p);
                    	    }
                    
                    	    state.loop = 1;
                    	}
                    
                    	// IP[] Interpolate Point
                    	// 0x39
                    	function IP(state) {
                    	    var stack = state.stack;
                    	    var rp1i = state.rp1;
                    	    var rp2i = state.rp2;
                    	    var loop = state.loop;
                    	    var rp1 = state.z0[rp1i];
                    	    var rp2 = state.z1[rp2i];
                    	    var fv = state.fv;
                    	    var pv = state.dpv;
                    	    var z2 = state.z2;
                    
                    	    while (loop--) {
                    	        var pi = stack.pop();
                    	        var p = z2[pi];
                    
                    	        if (exports.DEBUG) {
                    	            console.log(
                    	                state.step,
                    	                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    	                'IP[]', pi, rp1i, '<->', rp2i
                    	            );
                    	        }
                    
                    	        fv.interpolate(p, rp1, rp2, pv);
                    
                    	        fv.touch(p);
                    	    }
                    
                    	    state.loop = 1;
                    	}
                    
                    	// MSIRP[a] Move Stack Indirect Relative Point
                    	// 0x3A-0x3B
                    	function MSIRP(a, state) {
                    	    var stack = state.stack;
                    	    var d = stack.pop() / 64;
                    	    var pi = stack.pop();
                    	    var p = state.z1[pi];
                    	    var rp0 = state.z0[state.rp0];
                    	    var fv = state.fv;
                    	    var pv = state.pv;
                    
                    	    fv.setRelative(p, rp0, d, pv);
                    	    fv.touch(p);
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'MSIRP[' + a + ']', d, pi); }
                    
                    	    state.rp1 = state.rp0;
                    	    state.rp2 = pi;
                    	    if (a) { state.rp0 = pi; }
                    	}
                    
                    	// ALIGNRP[] Align to reference point.
                    	// 0x3C
                    	function ALIGNRP(state) {
                    	    var stack = state.stack;
                    	    var rp0i = state.rp0;
                    	    var rp0 = state.z0[rp0i];
                    	    var loop = state.loop;
                    	    var fv = state.fv;
                    	    var pv = state.pv;
                    	    var z1 = state.z1;
                    
                    	    while (loop--) {
                    	        var pi = stack.pop();
                    	        var p = z1[pi];
                    
                    	        if (exports.DEBUG) {
                    	            console.log(
                    	                state.step,
                    	                (state.loop > 1 ? 'loop ' + (state.loop - loop) + ': ' : '') +
                    	                'ALIGNRP[]', pi
                    	            );
                    	        }
                    
                    	        fv.setRelative(p, rp0, 0, pv);
                    	        fv.touch(p);
                    	    }
                    
                    	    state.loop = 1;
                    	}
                    
                    	// RTG[] Round To Double Grid
                    	// 0x3D
                    	function RTDG(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'RTDG[]'); }
                    
                    	    state.round = roundToDoubleGrid;
                    	}
                    
                    	// MIAP[a] Move Indirect Absolute Point
                    	// 0x3E-0x3F
                    	function MIAP(round, state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    	    var pi = stack.pop();
                    	    var p = state.z0[pi];
                    	    var fv = state.fv;
                    	    var pv = state.pv;
                    	    var cv = state.cvt[n];
                    
                    	    if (exports.DEBUG) {
                    	        console.log(
                    	            state.step,
                    	            'MIAP[' + round + ']',
                    	            n, '(', cv, ')', pi
                    	        );
                    	    }
                    
                    	    var d = pv.distance(p, HPZero);
                    
                    	    if (round) {
                    	        if (Math.abs(d - cv) < state.cvCutIn) { d = cv; }
                    
                    	        d = state.round(d);
                    	    }
                    
                    	    fv.setRelative(p, HPZero, d, pv);
                    
                    	    if (state.zp0 === 0) {
                    	        p.xo = p.x;
                    	        p.yo = p.y;
                    	    }
                    
                    	    fv.touch(p);
                    
                    	    state.rp0 = state.rp1 = pi;
                    	}
                    
                    	// NPUSB[] PUSH N Bytes
                    	// 0x40
                    	function NPUSHB(state) {
                    	    var prog = state.prog;
                    	    var ip = state.ip;
                    	    var stack = state.stack;
                    
                    	    var n = prog[++ip];
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'NPUSHB[]', n); }
                    
                    	    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }
                    
                    	    state.ip = ip;
                    	}
                    
                    	// NPUSHW[] PUSH N Words
                    	// 0x41
                    	function NPUSHW(state) {
                    	    var ip = state.ip;
                    	    var prog = state.prog;
                    	    var stack = state.stack;
                    	    var n = prog[++ip];
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'NPUSHW[]', n); }
                    
                    	    for (var i = 0; i < n; i++) {
                    	        var w = (prog[++ip] << 8) | prog[++ip];
                    	        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }
                    	        stack.push(w);
                    	    }
                    
                    	    state.ip = ip;
                    	}
                    
                    	// WS[] Write Store
                    	// 0x42
                    	function WS(state) {
                    	    var stack = state.stack;
                    	    var store = state.store;
                    
                    	    if (!store) { store = state.store = []; }
                    
                    	    var v = stack.pop();
                    	    var l = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'WS', v, l); }
                    
                    	    store[l] = v;
                    	}
                    
                    	// RS[] Read Store
                    	// 0x43
                    	function RS(state) {
                    	    var stack = state.stack;
                    	    var store = state.store;
                    
                    	    var l = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'RS', l); }
                    
                    	    var v = (store && store[l]) || 0;
                    
                    	    stack.push(v);
                    	}
                    
                    	// WCVTP[] Write Control Value Table in Pixel units
                    	// 0x44
                    	function WCVTP(state) {
                    	    var stack = state.stack;
                    
                    	    var v = stack.pop();
                    	    var l = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'WCVTP', v, l); }
                    
                    	    state.cvt[l] = v / 0x40;
                    	}
                    
                    	// RCVT[] Read Control Value Table entry
                    	// 0x45
                    	function RCVT(state) {
                    	    var stack = state.stack;
                    	    var cvte = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'RCVT', cvte); }
                    
                    	    stack.push(state.cvt[cvte] * 0x40);
                    	}
                    
                    	// GC[] Get Coordinate projected onto the projection vector
                    	// 0x46-0x47
                    	function GC(a, state) {
                    	    var stack = state.stack;
                    	    var pi = stack.pop();
                    	    var p = state.z2[pi];
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'GC[' + a + ']', pi); }
                    
                    	    stack.push(state.dpv.distance(p, HPZero, a, false) * 0x40);
                    	}
                    
                    	// MD[a] Measure Distance
                    	// 0x49-0x4A
                    	function MD(a, state) {
                    	    var stack = state.stack;
                    	    var pi2 = stack.pop();
                    	    var pi1 = stack.pop();
                    	    var p2 = state.z1[pi2];
                    	    var p1 = state.z0[pi1];
                    	    var d = state.dpv.distance(p1, p2, a, a);
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'MD[' + a + ']', pi2, pi1, '->', d); }
                    
                    	    state.stack.push(Math.round(d * 64));
                    	}
                    
                    	// MPPEM[] Measure Pixels Per EM
                    	// 0x4B
                    	function MPPEM(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'MPPEM[]'); }
                    	    state.stack.push(state.ppem);
                    	}
                    
                    	// FLIPON[] set the auto FLIP Boolean to ON
                    	// 0x4D
                    	function FLIPON(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'FLIPON[]'); }
                    	    state.autoFlip = true;
                    	}
                    
                    	// LT[] Less Than
                    	// 0x50
                    	function LT(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'LT[]', e2, e1); }
                    
                    	    stack.push(e1 < e2 ? 1 : 0);
                    	}
                    
                    	// LTEQ[] Less Than or EQual
                    	// 0x53
                    	function LTEQ(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'LTEQ[]', e2, e1); }
                    
                    	    stack.push(e1 <= e2 ? 1 : 0);
                    	}
                    
                    	// GTEQ[] Greater Than
                    	// 0x52
                    	function GT(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'GT[]', e2, e1); }
                    
                    	    stack.push(e1 > e2 ? 1 : 0);
                    	}
                    
                    	// GTEQ[] Greater Than or EQual
                    	// 0x53
                    	function GTEQ(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'GTEQ[]', e2, e1); }
                    
                    	    stack.push(e1 >= e2 ? 1 : 0);
                    	}
                    
                    	// EQ[] EQual
                    	// 0x54
                    	function EQ(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'EQ[]', e2, e1); }
                    
                    	    stack.push(e2 === e1 ? 1 : 0);
                    	}
                    
                    	// NEQ[] Not EQual
                    	// 0x55
                    	function NEQ(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'NEQ[]', e2, e1); }
                    
                    	    stack.push(e2 !== e1 ? 1 : 0);
                    	}
                    
                    	// ODD[] ODD
                    	// 0x56
                    	function ODD(state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'ODD[]', n); }
                    
                    	    stack.push(Math.trunc(n) % 2 ? 1 : 0);
                    	}
                    
                    	// EVEN[] EVEN
                    	// 0x57
                    	function EVEN(state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'EVEN[]', n); }
                    
                    	    stack.push(Math.trunc(n) % 2 ? 0 : 1);
                    	}
                    
                    	// IF[] IF test
                    	// 0x58
                    	function IF(state) {
                    	    var test = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'IF[]', test); }
                    
                    	    // if test is true it just continues
                    	    // if not the ip is skipped until matching ELSE or EIF
                    	    if (!test) {
                    	        skip(state, true);
                    
                    	        if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }
                    	    }
                    	}
                    
                    	// EIF[] End IF
                    	// 0x59
                    	function EIF(state) {
                    	    // this can be reached normally when
                    	    // executing an else branch.
                    	    // -> just ignore it
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'EIF[]'); }
                    	}
                    
                    	// AND[] logical AND
                    	// 0x5A
                    	function AND(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'AND[]', e2, e1); }
                    
                    	    stack.push(e2 && e1 ? 1 : 0);
                    	}
                    
                    	// OR[] logical OR
                    	// 0x5B
                    	function OR(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'OR[]', e2, e1); }
                    
                    	    stack.push(e2 || e1 ? 1 : 0);
                    	}
                    
                    	// NOT[] logical NOT
                    	// 0x5C
                    	function NOT(state) {
                    	    var stack = state.stack;
                    	    var e = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'NOT[]', e); }
                    
                    	    stack.push(e ? 0 : 1);
                    	}
                    
                    	// DELTAP1[] DELTA exception P1
                    	// DELTAP2[] DELTA exception P2
                    	// DELTAP3[] DELTA exception P3
                    	// 0x5D, 0x71, 0x72
                    	function DELTAP123(b, state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    	    var fv = state.fv;
                    	    var pv = state.pv;
                    	    var ppem = state.ppem;
                    	    var base = state.deltaBase + (b - 1) * 16;
                    	    var ds = state.deltaShift;
                    	    var z0 = state.z0;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'DELTAP[' + b + ']', n, stack); }
                    
                    	    for (var i = 0; i < n; i++) {
                    	        var pi = stack.pop();
                    	        var arg = stack.pop();
                    	        var appem = base + ((arg & 0xF0) >> 4);
                    	        if (appem !== ppem) { continue; }
                    
                    	        var mag = (arg & 0x0F) - 8;
                    	        if (mag >= 0) { mag++; }
                    	        if (exports.DEBUG) { console.log(state.step, 'DELTAPFIX', pi, 'by', mag * ds); }
                    
                    	        var p = z0[pi];
                    	        fv.setRelative(p, p, mag * ds, pv);
                    	    }
                    	}
                    
                    	// SDB[] Set Delta Base in the graphics state
                    	// 0x5E
                    	function SDB(state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SDB[]', n); }
                    
                    	    state.deltaBase = n;
                    	}
                    
                    	// SDS[] Set Delta Shift in the graphics state
                    	// 0x5F
                    	function SDS(state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SDS[]', n); }
                    
                    	    state.deltaShift = Math.pow(0.5, n);
                    	}
                    
                    	// ADD[] ADD
                    	// 0x60
                    	function ADD(state) {
                    	    var stack = state.stack;
                    	    var n2 = stack.pop();
                    	    var n1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'ADD[]', n2, n1); }
                    
                    	    stack.push(n1 + n2);
                    	}
                    
                    	// SUB[] SUB
                    	// 0x61
                    	function SUB(state) {
                    	    var stack = state.stack;
                    	    var n2 = stack.pop();
                    	    var n1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SUB[]', n2, n1); }
                    
                    	    stack.push(n1 - n2);
                    	}
                    
                    	// DIV[] DIV
                    	// 0x62
                    	function DIV(state) {
                    	    var stack = state.stack;
                    	    var n2 = stack.pop();
                    	    var n1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'DIV[]', n2, n1); }
                    
                    	    stack.push(n1 * 64 / n2);
                    	}
                    
                    	// MUL[] MUL
                    	// 0x63
                    	function MUL(state) {
                    	    var stack = state.stack;
                    	    var n2 = stack.pop();
                    	    var n1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'MUL[]', n2, n1); }
                    
                    	    stack.push(n1 * n2 / 64);
                    	}
                    
                    	// ABS[] ABSolute value
                    	// 0x64
                    	function ABS(state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'ABS[]', n); }
                    
                    	    stack.push(Math.abs(n));
                    	}
                    
                    	// NEG[] NEGate
                    	// 0x65
                    	function NEG(state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'NEG[]', n); }
                    
                    	    stack.push(-n);
                    	}
                    
                    	// FLOOR[] FLOOR
                    	// 0x66
                    	function FLOOR(state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'FLOOR[]', n); }
                    
                    	    stack.push(Math.floor(n / 0x40) * 0x40);
                    	}
                    
                    	// CEILING[] CEILING
                    	// 0x67
                    	function CEILING(state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'CEILING[]', n); }
                    
                    	    stack.push(Math.ceil(n / 0x40) * 0x40);
                    	}
                    
                    	// ROUND[ab] ROUND value
                    	// 0x68-0x6B
                    	function ROUND(dt, state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'ROUND[]'); }
                    
                    	    stack.push(state.round(n / 0x40) * 0x40);
                    	}
                    
                    	// WCVTF[] Write Control Value Table in Funits
                    	// 0x70
                    	function WCVTF(state) {
                    	    var stack = state.stack;
                    	    var v = stack.pop();
                    	    var l = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'WCVTF[]', v, l); }
                    
                    	    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;
                    	}
                    
                    	// DELTAC1[] DELTA exception C1
                    	// DELTAC2[] DELTA exception C2
                    	// DELTAC3[] DELTA exception C3
                    	// 0x73, 0x74, 0x75
                    	function DELTAC123(b, state) {
                    	    var stack = state.stack;
                    	    var n = stack.pop();
                    	    var ppem = state.ppem;
                    	    var base = state.deltaBase + (b - 1) * 16;
                    	    var ds = state.deltaShift;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'DELTAC[' + b + ']', n, stack); }
                    
                    	    for (var i = 0; i < n; i++) {
                    	        var c = stack.pop();
                    	        var arg = stack.pop();
                    	        var appem = base + ((arg & 0xF0) >> 4);
                    	        if (appem !== ppem) { continue; }
                    
                    	        var mag = (arg & 0x0F) - 8;
                    	        if (mag >= 0) { mag++; }
                    
                    	        var delta = mag * ds;
                    
                    	        if (exports.DEBUG) { console.log(state.step, 'DELTACFIX', c, 'by', delta); }
                    
                    	        state.cvt[c] += delta;
                    	    }
                    	}
                    
                    	// SROUND[] Super ROUND
                    	// 0x76
                    	function SROUND(state) {
                    	    var n = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SROUND[]', n); }
                    
                    	    state.round = roundSuper;
                    
                    	    var period;
                    
                    	    switch (n & 0xC0) {
                    	        case 0x00:
                    	            period = 0.5;
                    	            break;
                    	        case 0x40:
                    	            period = 1;
                    	            break;
                    	        case 0x80:
                    	            period = 2;
                    	            break;
                    	        default:
                    	            throw new Error('invalid SROUND value');
                    	    }
                    
                    	    state.srPeriod = period;
                    
                    	    switch (n & 0x30) {
                    	        case 0x00:
                    	            state.srPhase = 0;
                    	            break;
                    	        case 0x10:
                    	            state.srPhase = 0.25 * period;
                    	            break;
                    	        case 0x20:
                    	            state.srPhase = 0.5  * period;
                    	            break;
                    	        case 0x30:
                    	            state.srPhase = 0.75 * period;
                    	            break;
                    	        default: throw new Error('invalid SROUND value');
                    	    }
                    
                    	    n &= 0x0F;
                    
                    	    if (n === 0) { state.srThreshold = 0; }
                    	    else { state.srThreshold = (n / 8 - 0.5) * period; }
                    	}
                    
                    	// S45ROUND[] Super ROUND 45 degrees
                    	// 0x77
                    	function S45ROUND(state) {
                    	    var n = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'S45ROUND[]', n); }
                    
                    	    state.round = roundSuper;
                    
                    	    var period;
                    
                    	    switch (n & 0xC0) {
                    	        case 0x00:
                    	            period = Math.sqrt(2) / 2;
                    	            break;
                    	        case 0x40:
                    	            period = Math.sqrt(2);
                    	            break;
                    	        case 0x80:
                    	            period = 2 * Math.sqrt(2);
                    	            break;
                    	        default:
                    	            throw new Error('invalid S45ROUND value');
                    	    }
                    
                    	    state.srPeriod = period;
                    
                    	    switch (n & 0x30) {
                    	        case 0x00:
                    	            state.srPhase = 0;
                    	            break;
                    	        case 0x10:
                    	            state.srPhase = 0.25 * period;
                    	            break;
                    	        case 0x20:
                    	            state.srPhase = 0.5  * period;
                    	            break;
                    	        case 0x30:
                    	            state.srPhase = 0.75 * period;
                    	            break;
                    	        default:
                    	            throw new Error('invalid S45ROUND value');
                    	    }
                    
                    	    n &= 0x0F;
                    
                    	    if (n === 0) { state.srThreshold = 0; }
                    	    else { state.srThreshold = (n / 8 - 0.5) * period; }
                    	}
                    
                    	// ROFF[] Round Off
                    	// 0x7A
                    	function ROFF(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'ROFF[]'); }
                    
                    	    state.round = roundOff;
                    	}
                    
                    	// RUTG[] Round Up To Grid
                    	// 0x7C
                    	function RUTG(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'RUTG[]'); }
                    
                    	    state.round = roundUpToGrid;
                    	}
                    
                    	// RDTG[] Round Down To Grid
                    	// 0x7D
                    	function RDTG(state) {
                    	    if (exports.DEBUG) { console.log(state.step, 'RDTG[]'); }
                    
                    	    state.round = roundDownToGrid;
                    	}
                    
                    	// SCANCTRL[] SCAN conversion ConTRoL
                    	// 0x85
                    	function SCANCTRL(state) {
                    	    var n = state.stack.pop();
                    
                    	    // ignored by opentype.js
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SCANCTRL[]', n); }
                    	}
                    
                    	// SDPVTL[a] Set Dual Projection Vector To Line
                    	// 0x86-0x87
                    	function SDPVTL(a, state) {
                    	    var stack = state.stack;
                    	    var p2i = stack.pop();
                    	    var p1i = stack.pop();
                    	    var p2 = state.z2[p2i];
                    	    var p1 = state.z1[p1i];
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'SDPVTL[' + a + ']', p2i, p1i); }
                    
                    	    var dx;
                    	    var dy;
                    
                    	    if (!a) {
                    	        dx = p1.x - p2.x;
                    	        dy = p1.y - p2.y;
                    	    } else {
                    	        dx = p2.y - p1.y;
                    	        dy = p1.x - p2.x;
                    	    }
                    
                    	    state.dpv = getUnitVector(dx, dy);
                    	}
                    
                    	// GETINFO[] GET INFOrmation
                    	// 0x88
                    	function GETINFO(state) {
                    	    var stack = state.stack;
                    	    var sel = stack.pop();
                    	    var r = 0;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'GETINFO[]', sel); }
                    
                    	    // v35 as in no subpixel hinting
                    	    if (sel & 0x01) { r = 35; }
                    
                    	    // TODO rotation and stretch currently not supported
                    	    // and thus those GETINFO are always 0.
                    
                    	    // opentype.js is always gray scaling
                    	    if (sel & 0x20) { r |= 0x1000; }
                    
                    	    stack.push(r);
                    	}
                    
                    	// ROLL[] ROLL the top three stack elements
                    	// 0x8A
                    	function ROLL(state) {
                    	    var stack = state.stack;
                    	    var a = stack.pop();
                    	    var b = stack.pop();
                    	    var c = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'ROLL[]'); }
                    
                    	    stack.push(b);
                    	    stack.push(a);
                    	    stack.push(c);
                    	}
                    
                    	// MAX[] MAXimum of top two stack elements
                    	// 0x8B
                    	function MAX(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'MAX[]', e2, e1); }
                    
                    	    stack.push(Math.max(e1, e2));
                    	}
                    
                    	// MIN[] MINimum of top two stack elements
                    	// 0x8C
                    	function MIN(state) {
                    	    var stack = state.stack;
                    	    var e2 = stack.pop();
                    	    var e1 = stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'MIN[]', e2, e1); }
                    
                    	    stack.push(Math.min(e1, e2));
                    	}
                    
                    	// SCANTYPE[] SCANTYPE
                    	// 0x8D
                    	function SCANTYPE(state) {
                    	    var n = state.stack.pop();
                    	    // ignored by opentype.js
                    	    if (exports.DEBUG) { console.log(state.step, 'SCANTYPE[]', n); }
                    	}
                    
                    	// INSTCTRL[] INSTCTRL
                    	// 0x8D
                    	function INSTCTRL(state) {
                    	    var s = state.stack.pop();
                    	    var v = state.stack.pop();
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'INSTCTRL[]', s, v); }
                    
                    	    switch (s) {
                    	        case 1 : state.inhibitGridFit = !!v; return;
                    	        case 2 : state.ignoreCvt = !!v; return;
                    	        default: throw new Error('invalid INSTCTRL[] selector');
                    	    }
                    	}
                    
                    	// PUSHB[abc] PUSH Bytes
                    	// 0xB0-0xB7
                    	function PUSHB(n, state) {
                    	    var stack = state.stack;
                    	    var prog = state.prog;
                    	    var ip = state.ip;
                    
                    	    if (exports.DEBUG) { console.log(state.step, 'PUSHB[' + n + ']'); }
                    
                    	    for (var i = 0; i < n; i++) { stack.push(prog[++ip]); }
                    
                    	    state.ip = ip;
                    	}
                    
                    	// PUSHW[abc] PUSH Words
                    	// 0xB8-0xBF
                    	function PUSHW(n, state) {
                    	    var ip = state.ip;
                    	    var prog = state.prog;
                    	    var stack = state.stack;
                    
                    	    if (exports.DEBUG) { console.log(state.ip, 'PUSHW[' + n + ']'); }
                    
                    	    for (var i = 0; i < n; i++) {
                    	        var w = (prog[++ip] << 8) | prog[++ip];
                    	        if (w & 0x8000) { w = -((w ^ 0xffff) + 1); }
                    	        stack.push(w);
                    	    }
                    
                    	    state.ip = ip;
                    	}
                    
                    	// MDRP[abcde] Move Direct Relative Point
                    	// 0xD0-0xEF
                    	// (if indirect is 0)
                    	//
                    	// and
                    	//
                    	// MIRP[abcde] Move Indirect Relative Point
                    	// 0xE0-0xFF
                    	// (if indirect is 1)
                    
                    	function MDRP_MIRP(indirect, setRp0, keepD, ro, dt, state) {
                    	    var stack = state.stack;
                    	    var cvte = indirect && stack.pop();
                    	    var pi = stack.pop();
                    	    var rp0i = state.rp0;
                    	    var rp = state.z0[rp0i];
                    	    var p = state.z1[pi];
                    
                    	    var md = state.minDis;
                    	    var fv = state.fv;
                    	    var pv = state.dpv;
                    	    var od; // original distance
                    	    var d; // moving distance
                    	    var sign; // sign of distance
                    	    var cv;
                    
                    	    d = od = pv.distance(p, rp, true, true);
                    	    sign = d >= 0 ? 1 : -1; // Math.sign would be 0 in case of 0
                    
                    	    // TODO consider autoFlip
                    	    d = Math.abs(d);
                    
                    	    if (indirect) {
                    	        cv = state.cvt[cvte];
                    
                    	        if (ro && Math.abs(d - cv) < state.cvCutIn) { d = cv; }
                    	    }
                    
                    	    if (keepD && d < md) { d = md; }
                    
                    	    if (ro) { d = state.round(d); }
                    
                    	    fv.setRelative(p, rp, sign * d, pv);
                    	    fv.touch(p);
                    
                    	    if (exports.DEBUG) {
                    	        console.log(
                    	            state.step,
                    	            (indirect ? 'MIRP[' : 'MDRP[') +
                    	            (setRp0 ? 'M' : 'm') +
                    	            (keepD ? '>' : '_') +
                    	            (ro ? 'R' : '_') +
                    	            (dt === 0 ? 'Gr' : (dt === 1 ? 'Bl' : (dt === 2 ? 'Wh' : ''))) +
                    	            ']',
                    	            indirect ?
                    	                cvte + '(' + state.cvt[cvte] + ',' +  cv + ')' :
                    	                '',
                    	            pi,
                    	            '(d =', od, '->', sign * d, ')'
                    	        );
                    	    }
                    
                    	    state.rp1 = state.rp0;
                    	    state.rp2 = pi;
                    	    if (setRp0) { state.rp0 = pi; }
                    	}
                    
                    	/*
                    	* The instruction table.
                    	*/
                    	instructionTable = [
                    	    /* 0x00 */ SVTCA.bind(undefined, yUnitVector),
                    	    /* 0x01 */ SVTCA.bind(undefined, xUnitVector),
                    	    /* 0x02 */ SPVTCA.bind(undefined, yUnitVector),
                    	    /* 0x03 */ SPVTCA.bind(undefined, xUnitVector),
                    	    /* 0x04 */ SFVTCA.bind(undefined, yUnitVector),
                    	    /* 0x05 */ SFVTCA.bind(undefined, xUnitVector),
                    	    /* 0x06 */ SPVTL.bind(undefined, 0),
                    	    /* 0x07 */ SPVTL.bind(undefined, 1),
                    	    /* 0x08 */ SFVTL.bind(undefined, 0),
                    	    /* 0x09 */ SFVTL.bind(undefined, 1),
                    	    /* 0x0A */ SPVFS,
                    	    /* 0x0B */ SFVFS,
                    	    /* 0x0C */ GPV,
                    	    /* 0x0D */ GFV,
                    	    /* 0x0E */ SFVTPV,
                    	    /* 0x0F */ ISECT,
                    	    /* 0x10 */ SRP0,
                    	    /* 0x11 */ SRP1,
                    	    /* 0x12 */ SRP2,
                    	    /* 0x13 */ SZP0,
                    	    /* 0x14 */ SZP1,
                    	    /* 0x15 */ SZP2,
                    	    /* 0x16 */ SZPS,
                    	    /* 0x17 */ SLOOP,
                    	    /* 0x18 */ RTG,
                    	    /* 0x19 */ RTHG,
                    	    /* 0x1A */ SMD,
                    	    /* 0x1B */ ELSE,
                    	    /* 0x1C */ JMPR,
                    	    /* 0x1D */ SCVTCI,
                    	    /* 0x1E */ undefined,   // TODO SSWCI
                    	    /* 0x1F */ undefined,   // TODO SSW
                    	    /* 0x20 */ DUP,
                    	    /* 0x21 */ POP,
                    	    /* 0x22 */ CLEAR,
                    	    /* 0x23 */ SWAP,
                    	    /* 0x24 */ DEPTH,
                    	    /* 0x25 */ CINDEX,
                    	    /* 0x26 */ MINDEX,
                    	    /* 0x27 */ undefined,   // TODO ALIGNPTS
                    	    /* 0x28 */ undefined,
                    	    /* 0x29 */ undefined,   // TODO UTP
                    	    /* 0x2A */ LOOPCALL,
                    	    /* 0x2B */ CALL,
                    	    /* 0x2C */ FDEF,
                    	    /* 0x2D */ undefined,   // ENDF (eaten by FDEF)
                    	    /* 0x2E */ MDAP.bind(undefined, 0),
                    	    /* 0x2F */ MDAP.bind(undefined, 1),
                    	    /* 0x30 */ IUP.bind(undefined, yUnitVector),
                    	    /* 0x31 */ IUP.bind(undefined, xUnitVector),
                    	    /* 0x32 */ SHP.bind(undefined, 0),
                    	    /* 0x33 */ SHP.bind(undefined, 1),
                    	    /* 0x34 */ SHC.bind(undefined, 0),
                    	    /* 0x35 */ SHC.bind(undefined, 1),
                    	    /* 0x36 */ SHZ.bind(undefined, 0),
                    	    /* 0x37 */ SHZ.bind(undefined, 1),
                    	    /* 0x38 */ SHPIX,
                    	    /* 0x39 */ IP,
                    	    /* 0x3A */ MSIRP.bind(undefined, 0),
                    	    /* 0x3B */ MSIRP.bind(undefined, 1),
                    	    /* 0x3C */ ALIGNRP,
                    	    /* 0x3D */ RTDG,
                    	    /* 0x3E */ MIAP.bind(undefined, 0),
                    	    /* 0x3F */ MIAP.bind(undefined, 1),
                    	    /* 0x40 */ NPUSHB,
                    	    /* 0x41 */ NPUSHW,
                    	    /* 0x42 */ WS,
                    	    /* 0x43 */ RS,
                    	    /* 0x44 */ WCVTP,
                    	    /* 0x45 */ RCVT,
                    	    /* 0x46 */ GC.bind(undefined, 0),
                    	    /* 0x47 */ GC.bind(undefined, 1),
                    	    /* 0x48 */ undefined,   // TODO SCFS
                    	    /* 0x49 */ MD.bind(undefined, 0),
                    	    /* 0x4A */ MD.bind(undefined, 1),
                    	    /* 0x4B */ MPPEM,
                    	    /* 0x4C */ undefined,   // TODO MPS
                    	    /* 0x4D */ FLIPON,
                    	    /* 0x4E */ undefined,   // TODO FLIPOFF
                    	    /* 0x4F */ undefined,   // TODO DEBUG
                    	    /* 0x50 */ LT,
                    	    /* 0x51 */ LTEQ,
                    	    /* 0x52 */ GT,
                    	    /* 0x53 */ GTEQ,
                    	    /* 0x54 */ EQ,
                    	    /* 0x55 */ NEQ,
                    	    /* 0x56 */ ODD,
                    	    /* 0x57 */ EVEN,
                    	    /* 0x58 */ IF,
                    	    /* 0x59 */ EIF,
                    	    /* 0x5A */ AND,
                    	    /* 0x5B */ OR,
                    	    /* 0x5C */ NOT,
                    	    /* 0x5D */ DELTAP123.bind(undefined, 1),
                    	    /* 0x5E */ SDB,
                    	    /* 0x5F */ SDS,
                    	    /* 0x60 */ ADD,
                    	    /* 0x61 */ SUB,
                    	    /* 0x62 */ DIV,
                    	    /* 0x63 */ MUL,
                    	    /* 0x64 */ ABS,
                    	    /* 0x65 */ NEG,
                    	    /* 0x66 */ FLOOR,
                    	    /* 0x67 */ CEILING,
                    	    /* 0x68 */ ROUND.bind(undefined, 0),
                    	    /* 0x69 */ ROUND.bind(undefined, 1),
                    	    /* 0x6A */ ROUND.bind(undefined, 2),
                    	    /* 0x6B */ ROUND.bind(undefined, 3),
                    	    /* 0x6C */ undefined,   // TODO NROUND[ab]
                    	    /* 0x6D */ undefined,   // TODO NROUND[ab]
                    	    /* 0x6E */ undefined,   // TODO NROUND[ab]
                    	    /* 0x6F */ undefined,   // TODO NROUND[ab]
                    	    /* 0x70 */ WCVTF,
                    	    /* 0x71 */ DELTAP123.bind(undefined, 2),
                    	    /* 0x72 */ DELTAP123.bind(undefined, 3),
                    	    /* 0x73 */ DELTAC123.bind(undefined, 1),
                    	    /* 0x74 */ DELTAC123.bind(undefined, 2),
                    	    /* 0x75 */ DELTAC123.bind(undefined, 3),
                    	    /* 0x76 */ SROUND,
                    	    /* 0x77 */ S45ROUND,
                    	    /* 0x78 */ undefined,   // TODO JROT[]
                    	    /* 0x79 */ undefined,   // TODO JROF[]
                    	    /* 0x7A */ ROFF,
                    	    /* 0x7B */ undefined,
                    	    /* 0x7C */ RUTG,
                    	    /* 0x7D */ RDTG,
                    	    /* 0x7E */ POP, // actually SANGW, supposed to do only a pop though
                    	    /* 0x7F */ POP, // actually AA, supposed to do only a pop though
                    	    /* 0x80 */ undefined,   // TODO FLIPPT
                    	    /* 0x81 */ undefined,   // TODO FLIPRGON
                    	    /* 0x82 */ undefined,   // TODO FLIPRGOFF
                    	    /* 0x83 */ undefined,
                    	    /* 0x84 */ undefined,
                    	    /* 0x85 */ SCANCTRL,
                    	    /* 0x86 */ SDPVTL.bind(undefined, 0),
                    	    /* 0x87 */ SDPVTL.bind(undefined, 1),
                    	    /* 0x88 */ GETINFO,
                    	    /* 0x89 */ undefined,   // TODO IDEF
                    	    /* 0x8A */ ROLL,
                    	    /* 0x8B */ MAX,
                    	    /* 0x8C */ MIN,
                    	    /* 0x8D */ SCANTYPE,
                    	    /* 0x8E */ INSTCTRL,
                    	    /* 0x8F */ undefined,
                    	    /* 0x90 */ undefined,
                    	    /* 0x91 */ undefined,
                    	    /* 0x92 */ undefined,
                    	    /* 0x93 */ undefined,
                    	    /* 0x94 */ undefined,
                    	    /* 0x95 */ undefined,
                    	    /* 0x96 */ undefined,
                    	    /* 0x97 */ undefined,
                    	    /* 0x98 */ undefined,
                    	    /* 0x99 */ undefined,
                    	    /* 0x9A */ undefined,
                    	    /* 0x9B */ undefined,
                    	    /* 0x9C */ undefined,
                    	    /* 0x9D */ undefined,
                    	    /* 0x9E */ undefined,
                    	    /* 0x9F */ undefined,
                    	    /* 0xA0 */ undefined,
                    	    /* 0xA1 */ undefined,
                    	    /* 0xA2 */ undefined,
                    	    /* 0xA3 */ undefined,
                    	    /* 0xA4 */ undefined,
                    	    /* 0xA5 */ undefined,
                    	    /* 0xA6 */ undefined,
                    	    /* 0xA7 */ undefined,
                    	    /* 0xA8 */ undefined,
                    	    /* 0xA9 */ undefined,
                    	    /* 0xAA */ undefined,
                    	    /* 0xAB */ undefined,
                    	    /* 0xAC */ undefined,
                    	    /* 0xAD */ undefined,
                    	    /* 0xAE */ undefined,
                    	    /* 0xAF */ undefined,
                    	    /* 0xB0 */ PUSHB.bind(undefined, 1),
                    	    /* 0xB1 */ PUSHB.bind(undefined, 2),
                    	    /* 0xB2 */ PUSHB.bind(undefined, 3),
                    	    /* 0xB3 */ PUSHB.bind(undefined, 4),
                    	    /* 0xB4 */ PUSHB.bind(undefined, 5),
                    	    /* 0xB5 */ PUSHB.bind(undefined, 6),
                    	    /* 0xB6 */ PUSHB.bind(undefined, 7),
                    	    /* 0xB7 */ PUSHB.bind(undefined, 8),
                    	    /* 0xB8 */ PUSHW.bind(undefined, 1),
                    	    /* 0xB9 */ PUSHW.bind(undefined, 2),
                    	    /* 0xBA */ PUSHW.bind(undefined, 3),
                    	    /* 0xBB */ PUSHW.bind(undefined, 4),
                    	    /* 0xBC */ PUSHW.bind(undefined, 5),
                    	    /* 0xBD */ PUSHW.bind(undefined, 6),
                    	    /* 0xBE */ PUSHW.bind(undefined, 7),
                    	    /* 0xBF */ PUSHW.bind(undefined, 8),
                    	    /* 0xC0 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 0),
                    	    /* 0xC1 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 1),
                    	    /* 0xC2 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 2),
                    	    /* 0xC3 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 0, 3),
                    	    /* 0xC4 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 0),
                    	    /* 0xC5 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 1),
                    	    /* 0xC6 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 2),
                    	    /* 0xC7 */ MDRP_MIRP.bind(undefined, 0, 0, 0, 1, 3),
                    	    /* 0xC8 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 0),
                    	    /* 0xC9 */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 1),
                    	    /* 0xCA */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 2),
                    	    /* 0xCB */ MDRP_MIRP.bind(undefined, 0, 0, 1, 0, 3),
                    	    /* 0xCC */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 0),
                    	    /* 0xCD */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 1),
                    	    /* 0xCE */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 2),
                    	    /* 0xCF */ MDRP_MIRP.bind(undefined, 0, 0, 1, 1, 3),
                    	    /* 0xD0 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 0),
                    	    /* 0xD1 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 1),
                    	    /* 0xD2 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 2),
                    	    /* 0xD3 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 0, 3),
                    	    /* 0xD4 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 0),
                    	    /* 0xD5 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 1),
                    	    /* 0xD6 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 2),
                    	    /* 0xD7 */ MDRP_MIRP.bind(undefined, 0, 1, 0, 1, 3),
                    	    /* 0xD8 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 0),
                    	    /* 0xD9 */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 1),
                    	    /* 0xDA */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 2),
                    	    /* 0xDB */ MDRP_MIRP.bind(undefined, 0, 1, 1, 0, 3),
                    	    /* 0xDC */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 0),
                    	    /* 0xDD */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 1),
                    	    /* 0xDE */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 2),
                    	    /* 0xDF */ MDRP_MIRP.bind(undefined, 0, 1, 1, 1, 3),
                    	    /* 0xE0 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 0),
                    	    /* 0xE1 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 1),
                    	    /* 0xE2 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 2),
                    	    /* 0xE3 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 0, 3),
                    	    /* 0xE4 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 0),
                    	    /* 0xE5 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 1),
                    	    /* 0xE6 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 2),
                    	    /* 0xE7 */ MDRP_MIRP.bind(undefined, 1, 0, 0, 1, 3),
                    	    /* 0xE8 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 0),
                    	    /* 0xE9 */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 1),
                    	    /* 0xEA */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 2),
                    	    /* 0xEB */ MDRP_MIRP.bind(undefined, 1, 0, 1, 0, 3),
                    	    /* 0xEC */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 0),
                    	    /* 0xED */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 1),
                    	    /* 0xEE */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 2),
                    	    /* 0xEF */ MDRP_MIRP.bind(undefined, 1, 0, 1, 1, 3),
                    	    /* 0xF0 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 0),
                    	    /* 0xF1 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 1),
                    	    /* 0xF2 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 2),
                    	    /* 0xF3 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 0, 3),
                    	    /* 0xF4 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 0),
                    	    /* 0xF5 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 1),
                    	    /* 0xF6 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 2),
                    	    /* 0xF7 */ MDRP_MIRP.bind(undefined, 1, 1, 0, 1, 3),
                    	    /* 0xF8 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 0),
                    	    /* 0xF9 */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 1),
                    	    /* 0xFA */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 2),
                    	    /* 0xFB */ MDRP_MIRP.bind(undefined, 1, 1, 1, 0, 3),
                    	    /* 0xFC */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 0),
                    	    /* 0xFD */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 1),
                    	    /* 0xFE */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 2),
                    	    /* 0xFF */ MDRP_MIRP.bind(undefined, 1, 1, 1, 1, 3)
                    	];
                    
                    	/*****************************
                    	  Mathematical Considerations
                    	******************************
                    
                    	fv ... refers to freedom vector
                    	pv ... refers to projection vector
                    	rp ... refers to reference point
                    	p  ... refers to to point being operated on
                    	d  ... refers to distance
                    
                    	SETRELATIVE:
                    	============
                    
                    	case freedom vector == x-axis:
                    	------------------------------
                    
                    	                        (pv)
                    	                     .-'
                    	              rpd .-'
                    	               .-*
                    	          d .-'90°'
                    	         .-'       '
                    	      .-'           '
                    	   *-'               ' b
                    	  rp                  '
                    	                       '
                    	                        '
                    	            p *----------*-------------- (fv)
                    	                          pm
                    
                    	  rpdx = rpx + d * pv.x
                    	  rpdy = rpy + d * pv.y
                    
                    	  equation of line b
                    
                    	   y - rpdy = pvns * (x- rpdx)
                    
                    	   y = p.y
                    
                    	   x = rpdx + ( p.y - rpdy ) / pvns
                    
                    
                    	case freedom vector == y-axis:
                    	------------------------------
                    
                    	    * pm
                    	    |\
                    	    | \
                    	    |  \
                    	    |   \
                    	    |    \
                    	    |     \
                    	    |      \
                    	    |       \
                    	    |        \
                    	    |         \ b
                    	    |          \
                    	    |           \
                    	    |            \    .-' (pv)
                    	    |         90° \.-'
                    	    |           .-'* rpd
                    	    |        .-'
                    	    *     *-'  d
                    	    p     rp
                    
                    	  rpdx = rpx + d * pv.x
                    	  rpdy = rpy + d * pv.y
                    
                    	  equation of line b:
                    	           pvns ... normal slope to pv
                    
                    	   y - rpdy = pvns * (x - rpdx)
                    
                    	   x = p.x
                    
                    	   y = rpdy +  pvns * (p.x - rpdx)
                    
                    
                    
                    	generic case:
                    	-------------
                    
                    
                    	                              .'(fv)
                    	                            .'
                    	                          .* pm
                    	                        .' !
                    	                      .'    .
                    	                    .'      !
                    	                  .'         . b
                    	                .'           !
                    	               *              .
                    	              p               !
                    	                         90°   .    ... (pv)
                    	                           ...-*-'''
                    	                  ...---'''    rpd
                    	         ...---'''   d
                    	   *--'''
                    	  rp
                    
                    	    rpdx = rpx + d * pv.x
                    	    rpdy = rpy + d * pv.y
                    
                    	 equation of line b:
                    	    pvns... normal slope to pv
                    
                    	    y - rpdy = pvns * (x - rpdx)
                    
                    	 equation of freedom vector line:
                    	    fvs ... slope of freedom vector (=fy/fx)
                    
                    	    y - py = fvs * (x - px)
                    
                    
                    	  on pm both equations are true for same x/y
                    
                    	    y - rpdy = pvns * (x - rpdx)
                    
                    	    y - py = fvs * (x - px)
                    
                    	  form to y and set equal:
                    
                    	    pvns * (x - rpdx) + rpdy = fvs * (x - px) + py
                    
                    	  expand:
                    
                    	    pvns * x - pvns * rpdx + rpdy = fvs * x - fvs * px + py
                    
                    	  switch:
                    
                    	    fvs * x - fvs * px + py = pvns * x - pvns * rpdx + rpdy
                    
                    	  solve for x:
                    
                    	    fvs * x - pvns * x = fvs * px - pvns * rpdx - py + rpdy
                    
                    
                    
                    	          fvs * px - pvns * rpdx + rpdy - py
                    	    x =  -----------------------------------
                    	                 fvs - pvns
                    
                    	  and:
                    
                    	    y = fvs * (x - px) + py
                    
                    
                    
                    	INTERPOLATE:
                    	============
                    
                    	Examples of point interpolation.
                    
                    	The weight of the movement of the reference point gets bigger
                    	the further the other reference point is away, thus the safest
                    	option (that is avoiding 0/0 divisions) is to weight the
                    	original distance of the other point by the sum of both distances.
                    
                    	If the sum of both distances is 0, then move the point by the
                    	arithmetic average of the movement of both reference points.
                    
                    
                    
                    
                    	           (+6)
                    	    rp1o *---->*rp1
                    	         .     .                          (+12)
                    	         .     .                  rp2o *---------->* rp2
                    	         .     .                       .           .
                    	         .     .                       .           .
                    	         .    10          20           .           .
                    	         |.........|...................|           .
                    	               .   .                               .
                    	               .   . (+8)                          .
                    	                po *------>*p                      .
                    	               .           .                       .
                    	               .    12     .          24           .
                    	               |...........|.......................|
                    	                                  36
                    
                    
                    	-------
                    
                    
                    
                    	           (+10)
                    	    rp1o *-------->*rp1
                    	         .         .                      (-10)
                    	         .         .              rp2 *<---------* rpo2
                    	         .         .                   .         .
                    	         .         .                   .         .
                    	         .    10   .          30       .         .
                    	         |.........|.............................|
                    	                   .                   .
                    	                   . (+5)              .
                    	                po *--->* p            .
                    	                   .    .              .
                    	                   .    .   20         .
                    	                   |....|..............|
                    	                     5        15
                    
                    
                    	-------
                    
                    
                    	           (+10)
                    	    rp1o *-------->*rp1
                    	         .         .
                    	         .         .
                    	    rp2o *-------->*rp2
                    
                    
                    	                               (+10)
                    	                          po *-------->* p
                    
                    	-------
                    
                    
                    	           (+10)
                    	    rp1o *-------->*rp1
                    	         .         .
                    	         .         .(+30)
                    	    rp2o *---------------------------->*rp2
                    
                    
                    	                                        (+25)
                    	                          po *----------------------->* p
                    
                    
                    
                    	vim: set ts=4 sw=4 expandtab:
                    	*****/
                    
                    	/**
                    	 * Converts a string into a list of tokens.
                    	 */
                    
                    	/**
                    	 * Create a new token
                    	 * @param {string} char a single char
                    	 */
                    	function Token(char) {
                    	    this.char = char;
                    	    this.state = {};
                    	    this.activeState = null;
                    	}
                    
                    	/**
                    	 * Create a new context range
                    	 * @param {number} startIndex range start index
                    	 * @param {number} endOffset range end index offset
                    	 * @param {string} contextName owner context name
                    	 */
                    	function ContextRange(startIndex, endOffset, contextName) {
                    	    this.contextName = contextName;
                    	    this.startIndex = startIndex;
                    	    this.endOffset = endOffset;
                    	}
                    
                    	/**
                    	 * Check context start and end
                    	 * @param {string} contextName a unique context name
                    	 * @param {function} checkStart a predicate function the indicates a context's start
                    	 * @param {function} checkEnd a predicate function the indicates a context's end
                    	 */
                    	function ContextChecker(contextName, checkStart, checkEnd) {
                    	    this.contextName = contextName;
                    	    this.openRange = null;
                    	    this.ranges = [];
                    	    this.checkStart = checkStart;
                    	    this.checkEnd = checkEnd;
                    	}
                    
                    	/**
                    	 * Create a context params
                    	 * @param {array} context a list of items
                    	 * @param {number} currentIndex current item index
                    	 */
                    	function ContextParams(context, currentIndex) {
                    	    this.context = context;
                    	    this.index = currentIndex;
                    	    this.length = context.length;
                    	    this.current = context[currentIndex];
                    	    this.backtrack = context.slice(0, currentIndex);
                    	    this.lookahead = context.slice(currentIndex + 1);
                    	}
                    
                    	/**
                    	 * Create an event instance
                    	 * @param {string} eventId event unique id
                    	 */
                    	function Event(eventId) {
                    	    this.eventId = eventId;
                    	    this.subscribers = [];
                    	}
                    
                    	/**
                    	 * Initialize a core events and auto subscribe required event handlers
                    	 * @param {any} events an object that enlists core events handlers
                    	 */
                    	function initializeCoreEvents(events) {
                    	    var this$1 = this;
                    
                    	    var coreEvents = [
                    	        'start', 'end', 'next', 'newToken', 'contextStart',
                    	        'contextEnd', 'insertToken', 'removeToken', 'removeRange',
                    	        'replaceToken', 'replaceRange', 'composeRUD', 'updateContextsRanges'
                    	    ];
                    
                    	    coreEvents.forEach(function (eventId) {
                    	        Object.defineProperty(this$1.events, eventId, {
                    	            value: new Event(eventId)
                    	        });
                    	    });
                    
                    	    if (!!events) {
                    	        coreEvents.forEach(function (eventId) {
                    	            var event = events[eventId];
                    	            if (typeof event === 'function') {
                    	                this$1.events[eventId].subscribe(event);
                    	            }
                    	        });
                    	    }
                    	    var requiresContextUpdate = [
                    	        'insertToken', 'removeToken', 'removeRange',
                    	        'replaceToken', 'replaceRange', 'composeRUD'
                    	    ];
                    	    requiresContextUpdate.forEach(function (eventId) {
                    	        this$1.events[eventId].subscribe(
                    	            this$1.updateContextsRanges
                    	        );
                    	    });
                    	}
                    
                    	/**
                    	 * Converts a string into a list of tokens
                    	 * @param {any} events tokenizer core events
                    	 */
                    	function Tokenizer(events) {
                    	    this.tokens = [];
                    	    this.registeredContexts = {};
                    	    this.contextCheckers = [];
                    	    this.events = {};
                    	    this.registeredModifiers = [];
                    
                    	    initializeCoreEvents.call(this, events);
                    	}
                    
                    	/**
                    	 * Sets the state of a token, usually called by a state modifier.
                    	 * @param {string} key state item key
                    	 * @param {any} value state item value
                    	 */
                    	Token.prototype.setState = function(key, value) {
                    	    this.state[key] = value;
                    	    this.activeState = { key: key, value: this.state[key] };
                    	    return this.activeState;
                    	};
                    
                    	Token.prototype.getState = function (stateId) {
                    	    return this.state[stateId] || null;
                    	};
                    
                    	/**
                    	 * Checks if an index exists in the tokens list.
                    	 * @param {number} index token index
                    	 */
                    	Tokenizer.prototype.inboundIndex = function(index) {
                    	    return index >= 0 && index < this.tokens.length;
                    	};
                    
                    	/**
                    	 * Compose and apply a list of operations (replace, update, delete)
                    	 * @param {array} RUDs replace, update and delete operations
                    	 * TODO: Perf. Optimization (lengthBefore === lengthAfter ? dispatch once)
                    	 */
                    	Tokenizer.prototype.composeRUD = function (RUDs) {
                    	    var this$1 = this;
                    
                    	    var silent = true;
                    	    var state = RUDs.map(function (RUD) { return (
                    	        this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent))
                    	    ); });
                    	    var hasFAILObject = function (obj) { return (
                    	        typeof obj === 'object' &&
                    	        obj.hasOwnProperty('FAIL')
                    	    ); };
                    	    if (state.every(hasFAILObject)) {
                    	        return {
                    	            FAIL: "composeRUD: one or more operations hasn't completed successfully",
                    	            report: state.filter(hasFAILObject)
                    	        };
                    	    }
                    	    this.dispatch('composeRUD', [state.filter(function (op) { return !hasFAILObject(op); })]);
                    	};
                    
                    	/**
                    	 * Replace a range of tokens with a list of tokens
                    	 * @param {number} startIndex range start index
                    	 * @param {number} offset range offset
                    	 * @param {token} tokens a list of tokens to replace
                    	 * @param {boolean} silent dispatch events and update context ranges
                    	 */
                    	Tokenizer.prototype.replaceRange = function (startIndex, offset, tokens, silent) {
                    	    offset = offset !== null ? offset : this.tokens.length;
                    	    var isTokenType = tokens.every(function (token) { return token instanceof Token; });
                    	    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {
                    	        var replaced = this.tokens.splice.apply(
                    	            this.tokens, [startIndex, offset].concat(tokens)
                    	        );
                    	        if (!silent) { this.dispatch('replaceToken', [startIndex, offset, tokens]); }
                    	        return [replaced, tokens];
                    	    } else {
                    	        return { FAIL: 'replaceRange: invalid tokens or startIndex.' };
                    	    }
                    	};
                    
                    	/**
                    	 * Replace a token with another token
                    	 * @param {number} index token index
                    	 * @param {token} token a token to replace
                    	 * @param {boolean} silent dispatch events and update context ranges
                    	 */
                    	Tokenizer.prototype.replaceToken = function (index, token, silent) {
                    	    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {
                    	        var replaced = this.tokens.splice(index, 1, token);
                    	        if (!silent) { this.dispatch('replaceToken', [index, token]); }
                    	        return [replaced[0], token];
                    	    } else {
                    	        return { FAIL: 'replaceToken: invalid token or index.' };
                    	    }
                    	};
                    
                    	/**
                    	 * Removes a range of tokens
                    	 * @param {number} startIndex range start index
                    	 * @param {number} offset range offset
                    	 * @param {boolean} silent dispatch events and update context ranges
                    	 */
                    	Tokenizer.prototype.removeRange = function(startIndex, offset, silent) {
                    	    offset = !isNaN(offset) ? offset : this.tokens.length;
                    	    var tokens = this.tokens.splice(startIndex, offset);
                    	    if (!silent) { this.dispatch('removeRange', [tokens, startIndex, offset]); }
                    	    return tokens;
                    	};
                    
                    	/**
                    	 * Remove a token at a certain index
                    	 * @param {number} index token index
                    	 * @param {boolean} silent dispatch events and update context ranges
                    	 */
                    	Tokenizer.prototype.removeToken = function(index, silent) {
                    	    if (!isNaN(index) && this.inboundIndex(index)) {
                    	        var token = this.tokens.splice(index, 1);
                    	        if (!silent) { this.dispatch('removeToken', [token, index]); }
                    	        return token;
                    	    } else {
                    	        return { FAIL: 'removeToken: invalid token index.' };
                    	    }
                    	};
                    
                    	/**
                    	 * Insert a list of tokens at a certain index
                    	 * @param {array} tokens a list of tokens to insert
                    	 * @param {number} index insert the list of tokens at index
                    	 * @param {boolean} silent dispatch events and update context ranges
                    	 */
                    	Tokenizer.prototype.insertToken = function (tokens, index, silent) {
                    	    var tokenType = tokens.every(
                    	        function (token) { return token instanceof Token; }
                    	    );
                    	    if (tokenType) {
                    	        this.tokens.splice.apply(
                    	            this.tokens, [index, 0].concat(tokens)
                    	        );
                    	        if (!silent) { this.dispatch('insertToken', [tokens, index]); }
                    	        return tokens;
                    	    } else {
                    	        return { FAIL: 'insertToken: invalid token(s).' };
                    	    }
                    	};
                    
                    	/**
                    	 * A state modifier that is called on 'newToken' event
                    	 * @param {string} modifierId state modifier id
                    	 * @param {function} condition a predicate function that returns true or false
                    	 * @param {function} modifier a function to update token state
                    	 */
                    	Tokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {
                    	    this.events.newToken.subscribe(function(token, contextParams) {
                    	        var conditionParams = [token, contextParams];
                    	        var canApplyModifier = (
                    	            condition === null ||
                    	            condition.apply(this, conditionParams) === true
                    	        );
                    	        var modifierParams = [token, contextParams];
                    	        if (canApplyModifier) {
                    	            var newStateValue = modifier.apply(this, modifierParams);
                    	            token.setState(modifierId, newStateValue);
                    	        }
                    	    });
                    	    this.registeredModifiers.push(modifierId);
                    	};
                    
                    	/**
                    	 * Subscribe a handler to an event
                    	 * @param {function} eventHandler an event handler function
                    	 */
                    	Event.prototype.subscribe = function (eventHandler) {
                    	    if (typeof eventHandler === 'function') {
                    	        return ((this.subscribers.push(eventHandler)) - 1);
                    	    } else {
                    	        return { FAIL: ("invalid '" + (this.eventId) + "' event handler")};
                    	    }
                    	};
                    
                    	/**
                    	 * Unsubscribe an event handler
                    	 * @param {string} subsId subscription id
                    	 */
                    	Event.prototype.unsubscribe = function (subsId) {
                    	    this.subscribers.splice(subsId, 1);
                    	};
                    
                    	/**
                    	 * Sets context params current value index
                    	 * @param {number} index context params current value index
                    	 */
                    	ContextParams.prototype.setCurrentIndex = function(index) {
                    	    this.index = index;
                    	    this.current = this.context[index];
                    	    this.backtrack = this.context.slice(0, index);
                    	    this.lookahead = this.context.slice(index + 1);
                    	};
                    
                    	/**
                    	 * Get an item at an offset from the current value
                    	 * example (current value is 3):
                    	 *  1    2   [3]   4    5   |   items values
                    	 * -2   -1    0    1    2   |   offset values
                    	 * @param {number} offset an offset from current value index
                    	 */
                    	ContextParams.prototype.get = function (offset) {
                    	    switch (true) {
                    	        case (offset === 0):
                    	            return this.current;
                    	        case (offset < 0 && Math.abs(offset) <= this.backtrack.length):
                    	            return this.backtrack.slice(offset)[0];
                    	        case (offset > 0 && offset <= this.lookahead.length):
                    	            return this.lookahead[offset - 1];
                    	        default:
                    	            return null;
                    	    }
                    	};
                    
                    	/**
                    	 * Converts a context range into a string value
                    	 * @param {contextRange} range a context range
                    	 */
                    	Tokenizer.prototype.rangeToText = function (range) {
                    	    if (range instanceof ContextRange) {
                    	        return (
                    	            this.getRangeTokens(range)
                    	                .map(function (token) { return token.char; }).join('')
                    	        );
                    	    }
                    	};
                    
                    	/**
                    	 * Converts all tokens into a string
                    	 */
                    	Tokenizer.prototype.getText = function () {
                    	    return this.tokens.map(function (token) { return token.char; }).join('');
                    	};
                    
                    	/**
                    	 * Get a context by name
                    	 * @param {string} contextName context name to get
                    	 */
                    	Tokenizer.prototype.getContext = function (contextName) {
                    	    var context = this.registeredContexts[contextName];
                    	    return !!context ? context : null;
                    	};
                    
                    	/**
                    	 * Subscribes a new event handler to an event
                    	 * @param {string} eventName event name to subscribe to
                    	 * @param {function} eventHandler a function to be invoked on event
                    	 */
                    	Tokenizer.prototype.on = function(eventName, eventHandler) {
                    	    var event = this.events[eventName];
                    	    if (!!event) {
                    	        return event.subscribe(eventHandler);
                    	    } else {
                    	        return null;
                    	    }
                    	};
                    
                    	/**
                    	 * Dispatches an event
                    	 * @param {string} eventName event name
                    	 * @param {any} args event handler arguments
                    	 */
                    	Tokenizer.prototype.dispatch = function(eventName, args) {
                    	    var this$1 = this;
                    
                    	    var event = this.events[eventName];
                    	    if (event instanceof Event) {
                    	        event.subscribers.forEach(function (subscriber) {
                    	            subscriber.apply(this$1, args || []);
                    	        });
                    	    }
                    	};
                    
                    	/**
                    	 * Register a new context checker
                    	 * @param {string} contextName a unique context name
                    	 * @param {function} contextStartCheck a predicate function that returns true on context start
                    	 * @param {function} contextEndCheck  a predicate function that returns true on context end
                    	 * TODO: call tokenize on registration to update context ranges with the new context.
                    	 */
                    	Tokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {
                    	    if (!!this.getContext(contextName)) { return {
                    	        FAIL:
                    	        ("context name '" + contextName + "' is already registered.")
                    	    }; }
                    	    if (typeof contextStartCheck !== 'function') { return {
                    	        FAIL:
                    	        "missing context start check."
                    	    }; }
                    	    if (typeof contextEndCheck !== 'function') { return {
                    	        FAIL:
                    	        "missing context end check."
                    	    }; }
                    	    var contextCheckers = new ContextChecker(
                    	        contextName, contextStartCheck, contextEndCheck
                    	    );
                    	    this.registeredContexts[contextName] = contextCheckers;
                    	    this.contextCheckers.push(contextCheckers);
                    	    return contextCheckers;
                    	};
                    
                    	/**
                    	 * Gets a context range tokens
                    	 * @param {contextRange} range a context range
                    	 */
                    	Tokenizer.prototype.getRangeTokens = function(range) {
                    	    var endIndex = range.startIndex + range.endOffset;
                    	    return [].concat(
                    	        this.tokens
                    	            .slice(range.startIndex, endIndex)
                    	    );
                    	};
                    
                    	/**
                    	 * Gets the ranges of a context
                    	 * @param {string} contextName context name
                    	 */
                    	Tokenizer.prototype.getContextRanges = function(contextName) {
                    	    var context = this.getContext(contextName);
                    	    if (!!context) {
                    	        return context.ranges;
                    	    } else {
                    	        return { FAIL: ("context checker '" + contextName + "' is not registered.") };
                    	    }
                    	};
                    
                    	/**
                    	 * Resets context ranges to run context update
                    	 */
                    	Tokenizer.prototype.resetContextsRanges = function () {
                    	    var registeredContexts = this.registeredContexts;
                    	    for (var contextName in registeredContexts) {
                    	        if (registeredContexts.hasOwnProperty(contextName)) {
                    	            var context = registeredContexts[contextName];
                    	            context.ranges = [];
                    	        }
                    	    }
                    	};
                    
                    	/**
                    	 * Updates context ranges
                    	 */
                    	Tokenizer.prototype.updateContextsRanges = function () {
                    	    var this$1 = this;
                    
                    	    this.resetContextsRanges();
                    	    var chars = this.tokens.map(function (token) { return token.char; });
                    	    for (var i = 0; i < chars.length; i++) {
                    	        var contextParams = new ContextParams(chars, i);
                    	        this$1.runContextCheck(contextParams);
                    	    }
                    	    this.dispatch('updateContextsRanges', [this.registeredContexts]);
                    	};
                    
                    	/**
                    	 * Sets the end offset of an open range
                    	 * @param {number} offset range end offset
                    	 * @param {string} contextName context name
                    	 */
                    	Tokenizer.prototype.setEndOffset = function (offset, contextName) {
                    	    var startIndex = this.getContext(contextName).openRange.startIndex;
                    	    var range = new ContextRange(startIndex, offset, contextName);
                    	    var ranges = this.getContext(contextName).ranges;
                    	    range.rangeId = contextName + "." + (ranges.length);
                    	    ranges.push(range);
                    	    this.getContext(contextName).openRange = null;
                    	    return range;
                    	};
                    
                    	/**
                    	 * Runs a context check on the current context
                    	 * @param {contextParams} contextParams current context params
                    	 */
                    	Tokenizer.prototype.runContextCheck = function(contextParams) {
                    	    var this$1 = this;
                    
                    	    var index = contextParams.index;
                    	    this.contextCheckers.forEach(function (contextChecker) {
                    	        var contextName = contextChecker.contextName;
                    	        var openRange = this$1.getContext(contextName).openRange;
                    	        if (!openRange && contextChecker.checkStart(contextParams)) {
                    	            openRange = new ContextRange(index, null, contextName);
                    	            this$1.getContext(contextName).openRange = openRange;
                    	            this$1.dispatch('contextStart', [contextName, index]);
                    	        }
                    	        if (!!openRange && contextChecker.checkEnd(contextParams)) {
                    	            var offset = (index - openRange.startIndex) + 1;
                    	            var range = this$1.setEndOffset(offset, contextName);
                    	            this$1.dispatch('contextEnd', [contextName, range]);
                    	        }
                    	    });
                    	};
                    
                    	/**
                    	 * Converts a text into a list of tokens
                    	 * @param {string} text a text to tokenize
                    	 */
                    	Tokenizer.prototype.tokenize = function (text) {
                    	    var this$1 = this;
                    
                    	    this.tokens = [];
                    	    this.resetContextsRanges();
                    	    var chars = Array.from(text);
                    	    this.dispatch('start');
                    	    for (var i = 0; i < chars.length; i++) {
                    	        var char = chars[i];
                    	        var contextParams = new ContextParams(chars, i);
                    	        this$1.dispatch('next', [contextParams]);
                    	        this$1.runContextCheck(contextParams);
                    	        var token = new Token(char);
                    	        this$1.tokens.push(token);
                    	        this$1.dispatch('newToken', [token, contextParams]);
                    	    }
                    	    this.dispatch('end', [this.tokens]);
                    	    return this.tokens;
                    	};
                    
                    	// ╭─┄┄┄────────────────────────┄─────────────────────────────────────────────╮
                    	// ┊ Character Class Assertions ┊ Checks if a char belongs to a certain class ┊
                    	// ╰─╾──────────────────────────┄─────────────────────────────────────────────╯
                    	// jscs:disable maximumLineLength
                    	/**
                    	 * Check if a char is Arabic
                    	 * @param {string} c a single char
                    	 */
                    	function isArabicChar(c) {
                    	    return /[\u0600-\u065F\u066A-\u06D2\u06FA-\u06FF]/.test(c);
                    	}
                    
                    	/**
                    	 * Check if a char is an isolated arabic char
                    	 * @param {string} c a single char
                    	 */
                    	function isIsolatedArabicChar(char) {
                    	    return /[\u0630\u0690\u0621\u0631\u0661\u0671\u0622\u0632\u0672\u0692\u06C2\u0623\u0673\u0693\u06C3\u0624\u0694\u06C4\u0625\u0675\u0695\u06C5\u06E5\u0676\u0696\u06C6\u0627\u0677\u0697\u06C7\u0648\u0688\u0698\u06C8\u0689\u0699\u06C9\u068A\u06CA\u066B\u068B\u06CB\u068C\u068D\u06CD\u06FD\u068E\u06EE\u06FE\u062F\u068F\u06CF\u06EF]/.test(char);
                    	}
                    
                    	/**
                    	 * Check if a char is an Arabic Tashkeel char
                    	 * @param {string} c a single char
                    	 */
                    	function isTashkeelArabicChar(char) {
                    	    return /[\u0600-\u0605\u060C-\u060E\u0610-\u061B\u061E\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED]/.test(char);
                    	}
                    
                    	/**
                    	 * Check if a char is whitespace char
                    	 * @param {string} c a single char
                    	 */
                    	function isWhiteSpace(c) {
                    	    return /\s/.test(c);
                    	}
                    
                    	/**
                    	 * Arabic word context checkers
                    	 */
                    
                    	function arabicWordStartCheck(contextParams) {
                    	    var char = contextParams.current;
                    	    var prevChar = contextParams.get(-1);
                    	    return (
                    	        // ? arabic first char
                    	        (prevChar === null && isArabicChar(char)) ||
                    	        // ? arabic char preceded with a non arabic char
                    	        (!isArabicChar(prevChar) && isArabicChar(char))
                    	    );
                    	}
                    
                    	function arabicWordEndCheck(contextParams) {
                    	    var nextChar = contextParams.get(1);
                    	    return (
                    	        // ? last arabic char
                    	        (nextChar === null) ||
                    	        // ? next char is not arabic
                    	        (!isArabicChar(nextChar))
                    	    );
                    	}
                    	var arabicWordCheck = { arabicWordStartCheck: arabicWordStartCheck, arabicWordEndCheck: arabicWordEndCheck };
                    
                    	/**
                    	 * Arabic sentence context checkers
                    	 */
                    
                    	function arabicSentenceStartCheck(contextParams) {
                    	    var char = contextParams.current;
                    	    var prevChar = contextParams.get(-1);
                    	    return (
                    	        // ? an arabic char preceded with a non arabic char
                    	        (isArabicChar(char) || isTashkeelArabicChar(char)) &&
                    	        !isArabicChar(prevChar)
                    	    );
                    	}
                    
                    	function arabicSentenceEndCheck(contextParams) {
                    	    var nextChar = contextParams.get(1);
                    	    switch (true) {
                    	        case nextChar === null:
                    	            return true;
                    	        case (!isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar)):
                    	            var nextIsWhitespace = isWhiteSpace(nextChar);
                    	            if (!nextIsWhitespace) { return true; }
                    	            if (nextIsWhitespace) {
                    	                var arabicCharAhead = false;
                    	                arabicCharAhead = (
                    	                    contextParams.lookahead.some(
                    	                        function (c) { return isArabicChar(c) || isTashkeelArabicChar(c); }
                    	                    )
                    	                );
                    	                if (!arabicCharAhead) { return true; }
                    	            }
                    	            break;
                    	        default:
                    	            return false;
                    	    }
                    	}
                    	var arabicSentenceCheck = { arabicSentenceStartCheck: arabicSentenceStartCheck, arabicSentenceEndCheck: arabicSentenceEndCheck };
                    
                    	/**
                    	 * Apply Arabic presentation forms to a range of tokens
                    	 */
                    	/**
                    	 * Check if a char can be connected to it's preceding char
                    	 * @param {ContextParams} charContextParams context params of a char
                    	 */
                    	function willConnectPrev(charContextParams) {
                    	    var backtrack = [].concat(charContextParams.backtrack);
                    	    for (var i = backtrack.length - 1; i >= 0; i--) {
                    	        var prevChar = backtrack[i];
                    	        var isolated = isIsolatedArabicChar(prevChar);
                    	        var tashkeel = isTashkeelArabicChar(prevChar);
                    	        if (!isolated && !tashkeel) { return true; }
                    	        if (isolated) { return false; }
                    	    }
                    	    return false;
                    	}
                    
                    	/**
                    	 * Check if a char can be connected to it's proceeding char
                    	 * @param {ContextParams} charContextParams context params of a char
                    	 */
                    	function willConnectNext(charContextParams) {
                    	    if (isIsolatedArabicChar(charContextParams.current)) { return false; }
                    	    for (var i = 0; i < charContextParams.lookahead.length; i++) {
                    	        var nextChar = charContextParams.lookahead[i];
                    	        var tashkeel = isTashkeelArabicChar(nextChar);
                    	        if (!tashkeel) { return true; }
                    	    }
                    	    return false;
                    	}
                    
                    	/**
                    	 * Apply arabic presentation forms to a list of tokens
                    	 * @param {ContextRange} range a range of tokens
                    	 */
                    	function arabicPresentationForms(range) {
                    	    var features = this.features.arab;
                    	    var rangeTokens = this.tokenizer.getRangeTokens(range);
                    	    if (rangeTokens.length === 1) { return; }
                    	    var getSubstitutionIndex = function (substitution) { return (
                    	        substitution.length === 1 &&
                    	        substitution[0].id === 12 &&
                    	        substitution[0].substitution
                    	    ); };
                    	    var applyForm = function (tag, token, params) {
                    	        if (!features.hasOwnProperty(tag)) { return; }
                    	        var substitution = features[tag].lookup(params) || null;
                    	        var substIndex = getSubstitutionIndex(substitution)[0];
                    	        if (substIndex >= 0) {
                    	            return token.setState(tag, substIndex);
                    	        }
                    	    };
                    	    var tokensParams = new ContextParams(rangeTokens, 0);
                    	    var charContextParams = new ContextParams(rangeTokens.map(function (t){ return t.char; }), 0);
                    	    rangeTokens.forEach(function (token, i) {
                    	        if (isTashkeelArabicChar(token.char)) { return; }
                    	        tokensParams.setCurrentIndex(i);
                    	        charContextParams.setCurrentIndex(i);
                    	        var CONNECT = 0; // 2 bits 00 (10: can connect next) (01: can connect prev)
                    	        if (willConnectPrev(charContextParams)) { CONNECT |= 1; }
                    	        if (willConnectNext(charContextParams)) { CONNECT |= 2; }
                    	        switch (CONNECT) {
                    	            case 0: // isolated * original form
                    	                return;
                    	            case 1: // fina
                    	                applyForm('fina', token, tokensParams);
                    	                break;
                    	            case 2: // init
                    	                applyForm('init', token, tokensParams);
                    	                break;
                    	            case 3: // medi
                    	                applyForm('medi', token, tokensParams);
                    	                break;
                    	        }
                    	    });
                    	}
                    
                    	/**
                    	 * Apply Arabic required ligatures feature to a range of tokens
                    	 */
                    
                    	/**
                    	 * Apply Arabic required ligatures to a context range
                    	 * @param {ContextRange} range a range of tokens
                    	 */
                    	function arabicRequiredLigatures(range) {
                    	    var features = this.features.arab;
                    	    if (!features.hasOwnProperty('rlig')) { return; }
                    	    var tokens = this.tokenizer.getRangeTokens(range);
                    	    for (var i = 0; i < tokens.length; i++) {
                    	        var lookupParams = new ContextParams(tokens, i);
                    	        var substitution = features.rlig.lookup(lookupParams) || null;
                    	        var chainingContext = (
                    	            substitution.length === 1 &&
                    	            substitution[0].id === 63 &&
                    	            substitution[0].substitution
                    	        );
                    	        var ligature = (
                    	            substitution.length === 1 &&
                    	            substitution[0].id === 41 &&
                    	            substitution[0].substitution[0]
                    	        );
                    	        var token = tokens[i];
                    	        if (!!ligature) {
                    	            token.setState('rlig', [ligature.ligGlyph]);
                    	            for (var c = 0; c < ligature.components.length; c++) {
                    	                var component = ligature.components[c];
                    	                var lookaheadToken = lookupParams.get(c + 1);
                    	                if (lookaheadToken.activeState.value === component) {
                    	                    lookaheadToken.state.deleted = true;
                    	                }
                    	            }
                    	        } else if (chainingContext) {
                    	            var substIndex = (
                    	                chainingContext &&
                    	                chainingContext.length === 1 &&
                    	                chainingContext[0].id === 12 &&
                    	                chainingContext[0].substitution
                    	            );
                    	            if (!!substIndex && substIndex >= 0) { token.setState('rlig', substIndex); }
                    	        }
                    	    }
                    	}
                    
                    	/**
                    	 * Infer bidirectional properties for a given text and apply
                    	 * the corresponding layout rules.
                    	 */
                    
                    	/**
                    	 * Create Bidi. features
                    	 * @param {string} baseDir text base direction. value either 'ltr' or 'rtl'
                    	 */
                    	function Bidi(baseDir) {
                    	    this.baseDir = baseDir || 'ltr';
                    	    this.tokenizer = new Tokenizer();
                    	    this.features = [];
                    	}
                    
                    	/**
                    	 * Sets Bidi text
                    	 * @param {string} text a text input
                    	 */
                    	Bidi.prototype.setText = function (text) {
                    	    this.text = text;
                    	};
                    
                    	/**
                    	 * Store essential context checks:
                    	 * arabic word check for applying gsub features
                    	 * arabic sentence check for adjusting arabic layout
                    	 */
                    	Bidi.prototype.contextChecks = ({
                    	    arabicWordCheck: arabicWordCheck,
                    	    arabicSentenceCheck: arabicSentenceCheck
                    	});
                    
                    	/**
                    	 * Register arabic word check
                    	 */
                    	function registerArabicWordCheck() {
                    	    var checks = this.contextChecks.arabicWordCheck;
                    	    return this.tokenizer.registerContextChecker(
                    	        'arabicWord',
                    	        checks.arabicWordStartCheck,
                    	        checks.arabicWordEndCheck
                    	    );
                    	}
                    
                    	/**
                    	 * Register arabic sentence check
                    	 */
                    	function registerArabicSentenceCheck() {
                    	    var checks = this.contextChecks.arabicSentenceCheck;
                    	    return this.tokenizer.registerContextChecker(
                    	        'arabicSentence',
                    	        checks.arabicSentenceStartCheck,
                    	        checks.arabicSentenceEndCheck
                    	    );
                    	}
                    
                    	/**
                    	 * Perform pre tokenization procedure then
                    	 * tokenize text input
                    	 */
                    	function tokenizeText() {
                    	    registerArabicWordCheck.call(this);
                    	    registerArabicSentenceCheck.call(this);
                    	    return this.tokenizer.tokenize(this.text);
                    	}
                    
                    	/**
                    	 * Reverse arabic sentence layout
                    	 * TODO: check base dir before applying adjustments - priority low
                    	 */
                    	function reverseArabicSentences() {
                    	    var this$1 = this;
                    
                    	    var ranges = this.tokenizer.getContextRanges('arabicSentence');
                    	    ranges.forEach(function (range) {
                    	        var rangeTokens = this$1.tokenizer.getRangeTokens(range);
                    	        this$1.tokenizer.replaceRange(
                    	            range.startIndex,
                    	            range.endOffset,
                    	            rangeTokens.reverse()
                    	        );
                    	    });
                    	}
                    
                    	/**
                    	 * Subscribe arabic presentation form features
                    	 * @param {feature} feature a feature to apply
                    	 */
                    	Bidi.prototype.subscribeArabicForms = function(feature) {
                    	    var this$1 = this;
                    
                    	    this.tokenizer.events.contextEnd.subscribe(
                    	        function (contextName, range) {
                    	            if (contextName === 'arabicWord') {
                    	                return arabicPresentationForms.call(
                    	                    this$1.tokenizer, range, feature
                    	                );
                    	            }
                    	        }
                    	    );
                    	};
                    
                    	/**
                    	 * Apply Gsub features
                    	 * @param {feature} features a list of features
                    	 */
                    	Bidi.prototype.applyFeatures = function (features) {
                    	    var this$1 = this;
                    
                    	    for (var i = 0; i < features.length; i++) {
                    	        var feature = features[i];
                    	        if (feature) {
                    	            var script = feature.script;
                    	            if (!this$1.features[script]) {
                    	                this$1.features[script] = {};
                    	            }
                    	            this$1.features[script][feature.tag] = feature;
                    	        }
                    	    }
                    	};
                    
                    	/**
                    	 * Register a state modifier
                    	 * @param {string} modifierId state modifier id
                    	 * @param {function} condition a predicate function that returns true or false
                    	 * @param {function} modifier a modifier function to set token state
                    	 */
                    	Bidi.prototype.registerModifier = function (modifierId, condition, modifier) {
                    	    this.tokenizer.registerModifier(modifierId, condition, modifier);
                    	};
                    
                    	/**
                    	 * Check if 'glyphIndex' is registered
                    	 */
                    	function checkGlyphIndexStatus() {
                    	    if (this.tokenizer.registeredModifiers.indexOf('glyphIndex') === -1) {
                    	        throw new Error(
                    	            'glyphIndex modifier is required to apply ' +
                    	            'arabic presentation features.'
                    	        );
                    	    }
                    	}
                    
                    	/**
                    	 * Apply arabic presentation forms features
                    	 */
                    	function applyArabicPresentationForms() {
                    	    var this$1 = this;
                    
                    	    if (!this.features.hasOwnProperty('arab')) { return; }
                    	    checkGlyphIndexStatus.call(this);
                    	    var ranges = this.tokenizer.getContextRanges('arabicWord');
                    	    ranges.forEach(function (range) {
                    	        arabicPresentationForms.call(this$1, range);
                    	    });
                    	}
                    
                    	/**
                    	 * Apply required arabic ligatures
                    	 */
                    	function applyArabicRequireLigatures() {
                    	    var this$1 = this;
                    
                    	    if (!this.features.hasOwnProperty('arab')) { return; }
                    	    if (!this.features.arab.hasOwnProperty('rlig')) { return; }
                    	    checkGlyphIndexStatus.call(this);
                    	    var ranges = this.tokenizer.getContextRanges('arabicWord');
                    	    ranges.forEach(function (range) {
                    	        arabicRequiredLigatures.call(this$1, range);
                    	    });
                    	}
                    
                    	/**
                    	 * process text input
                    	 * @param {string} text an input text
                    	 */
                    	Bidi.prototype.processText = function(text) {
                    	    if (!this.text || this.text !== text) {
                    	        this.setText(text);
                    	        tokenizeText.call(this);
                    	        applyArabicPresentationForms.call(this);
                    	        applyArabicRequireLigatures.call(this);
                    	        reverseArabicSentences.call(this);
                    	    }
                    	};
                    
                    	/**
                    	 * Process a string of text to identify and adjust
                    	 * bidirectional text entities.
                    	 * @param {string} text input text
                    	 */
                    	Bidi.prototype.getBidiText = function (text) {
                    	    this.processText(text);
                    	    return this.tokenizer.getText();
                    	};
                    
                    	/**
                    	 * Get the current state index of each token
                    	 * @param {text} text an input text
                    	 */
                    	Bidi.prototype.getTextGlyphs = function (text) {
                    	    var this$1 = this;
                    
                    	    this.processText(text);
                    	    var indexes = [];
                    	    for (var i = 0; i < this.tokenizer.tokens.length; i++) {
                    	        var token = this$1.tokenizer.tokens[i];
                    	        if (token.state.deleted) { continue; }
                    	        var index = token.activeState.value;
                    	        indexes.push(Array.isArray(index) ? index[0] : index);
                    	    }
                    	    return indexes;
                    	};
                    
                    	/**
                    	 * Query a feature by some of it's properties to lookup a glyph substitution.
                    	 */
                    
                    	// DEFAULT TEXT BASE DIRECTION
                    	var BASE_DIR = 'ltr';
                    
                    	/**
                    	 * Create feature query instance
                    	 * @param {Font} font opentype font instance
                    	 * @param {string} baseDir text base direction
                    	 */
                    	function FeatureQuery(font, baseDir) {
                    	    this.font = font;
                    	    this.features = {};
                    	    BASE_DIR = !!baseDir ? baseDir : BASE_DIR;
                    	}
                    
                    	/**
                    	 * Create a new feature lookup
                    	 * @param {string} tag feature tag
                    	 * @param {feature} feature reference to feature at gsub table
                    	 * @param {FeatureLookups} feature lookups associated with this feature
                    	 * @param {string} script gsub script tag
                    	 */
                    	function Feature(tag, feature, featureLookups, script) {
                    	    this.tag = tag;
                    	    this.featureRef = feature;
                    	    this.lookups = featureLookups.lookups;
                    	    this.script = script;
                    	}
                    
                    	/**
                    	 * Create a coverage table lookup
                    	 * @param {any} coverageTable gsub coverage table
                    	 */
                    	function Coverage$1(coverageTable) {
                    	    this.table = coverageTable;
                    	}
                    
                    	/**
                    	 * Create a ligature set lookup
                    	 * @param {any} ligatureSets gsub ligature set
                    	 */
                    	function LigatureSets(ligatureSets) {
                    	    this.ligatureSets = ligatureSets;
                    	}
                    
                    	/**
                    	 * Lookup a glyph ligature
                    	 * @param {ContextParams} contextParams context params to lookup
                    	 * @param {number} ligSetIndex ligature set index at ligature sets
                    	 */
                    	LigatureSets.prototype.lookup = function (contextParams, ligSetIndex) {
                    	    var ligatureSet = this.ligatureSets[ligSetIndex];
                    	    var matchComponents = function (components, indexes) {
                    	        if (components.length > indexes.length) { return null; }
                    	        for (var c = 0; c < components.length; c++) {
                    	            var component = components[c];
                    	            var index = indexes[c];
                    	            if (component !== index) { return false; }
                    	        }
                    	        return true;
                    	    };
                    	    for (var s = 0; s < ligatureSet.length; s++) {
                    	        var ligSetItem = ligatureSet[s];
                    	        var lookaheadIndexes = contextParams.lookahead.map(
                    	            function (token) { return token.activeState.value; }
                    	        );
                    	        if (BASE_DIR === 'rtl') { lookaheadIndexes.reverse(); }
                    	        var componentsMatch = matchComponents(
                    	            ligSetItem.components, lookaheadIndexes
                    	        );
                    	        if (componentsMatch) { return ligSetItem; }
                    	    }
                    	    return null;
                    	};
                    
                    	/**
                    	 * Create a feature substitution
                    	 * @param {any} lookups a reference to gsub lookups
                    	 * @param {Lookuptable} lookupTable a feature lookup table
                    	 * @param {any} subtable substitution table
                    	 */
                    	function Substitution$1(lookups, lookupTable, subtable) {
                    	    this.lookups = lookups;
                    	    this.subtable = subtable;
                    	    this.lookupTable = lookupTable;
                    	    if (subtable.hasOwnProperty('coverage')) {
                    	        this.coverage = new Coverage$1(
                    	            subtable.coverage
                    	        );
                    	    }
                    	    if (subtable.hasOwnProperty('inputCoverage')) {
                    	        this.inputCoverage = subtable.inputCoverage.map(
                    	            function (table) { return new Coverage$1(table); }
                    	        );
                    	    }
                    	    if (subtable.hasOwnProperty('backtrackCoverage')) {
                    	        this.backtrackCoverage = subtable.backtrackCoverage.map(
                    	            function (table) { return new Coverage$1(table); }
                    	        );
                    	    }
                    	    if (subtable.hasOwnProperty('lookaheadCoverage')) {
                    	        this.lookaheadCoverage = subtable.lookaheadCoverage.map(
                    	            function (table) { return new Coverage$1(table); }
                    	        );
                    	    }
                    	    if (subtable.hasOwnProperty('ligatureSets')) {
                    	        this.ligatureSets = new LigatureSets(subtable.ligatureSets);
                    	    }
                    	}
                    
                    	/**
                    	 * Create a lookup table lookup
                    	 * @param {number} index table index at gsub lookups
                    	 * @param {any} lookups a reference to gsub lookups
                    	 */
                    	function LookupTable(index, lookups) {
                    	    this.index = index;
                    	    this.subtables = lookups[index].subtables.map(
                    	        function (subtable) { return new Substitution$1(
                    	            lookups, lookups[index], subtable
                    	        ); }
                    	    );
                    	}
                    
                    	function FeatureLookups(lookups, lookupListIndexes) {
                    	    this.lookups = lookupListIndexes.map(
                    	        function (index) { return new LookupTable(index, lookups); }
                    	    );
                    	}
                    
                    	/**
                    	 * Lookup a lookup table subtables
                    	 * @param {ContextParams} contextParams context params to lookup
                    	 */
                    	LookupTable.prototype.lookup = function (contextParams) {
                    	    var this$1 = this;
                    
                    	    var substitutions = [];
                    	    for (var i = 0; i < this.subtables.length; i++) {
                    	        var subsTable = this$1.subtables[i];
                    	        var substitution = subsTable.lookup(contextParams);
                    	        if (substitution !== null || substitution.length) {
                    	            substitutions = substitutions.concat(substitution);
                    	        }
                    	    }
                    	    return substitutions;
                    	};
                    
                    	/**
                    	 * Handle a single substitution - format 2
                    	 * @param {ContextParams} contextParams context params to lookup
                    	 */
                    	function singleSubstitutionFormat2(contextParams) {
                    	    var glyphIndex = contextParams.current.activeState.value;
                    	    glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;
                    	    var substituteIndex = this.coverage.lookup(glyphIndex);
                    	    if (substituteIndex === -1) { return []; }
                    	    return [this.subtable.substitute[substituteIndex]];
                    	}
                    
                    	/**
                    	 * Lookup a list of coverage tables
                    	 * @param {any} coverageList a list of coverage tables
                    	 * @param {any} contextParams context params to lookup
                    	 */
                    	function lookupCoverageList(coverageList, contextParams) {
                    	    var lookupList = [];
                    	    for (var i = 0; i < coverageList.length; i++) {
                    	        var coverage = coverageList[i];
                    	        var glyphIndex = contextParams.current.activeState.value;
                    	        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;
                    	        var lookupIndex = coverage.lookup(glyphIndex);
                    	        if (lookupIndex !== -1) {
                    	            lookupList.push(lookupIndex);
                    	        }
                    	    }
                    	    if (lookupList.length !== coverageList.length) { return -1; }
                    	    return lookupList;
                    	}
                    
                    	/**
                    	 * Handle chaining context substitution - format 3
                    	 * @param {any} contextParams context params to lookup
                    	 */
                    	function chainingSubstitutionFormat3(contextParams) {
                    	    var this$1 = this;
                    
                    	    var lookupsCount = (
                    	        this.inputCoverage.length +
                    	        this.lookaheadCoverage.length +
                    	        this.backtrackCoverage.length
                    	    );
                    	    if (contextParams.context.length < lookupsCount) { return []; }
                    	    // INPUT LOOKUP //
                    	    var inputLookups = lookupCoverageList(
                    	        this.inputCoverage, contextParams
                    	    );
                    	    if (inputLookups === -1) { return []; }
                    	    // LOOKAHEAD LOOKUP //
                    	    var lookaheadOffset = this.inputCoverage.length - 1;
                    	    if (contextParams.lookahead.length < this.lookaheadCoverage.length) { return []; }
                    	    var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);
                    	    while (lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)) {
                    	        lookaheadContext.shift();
                    	    }
                    	    var lookaheadParams = new ContextParams(lookaheadContext, 0);
                    	    var lookaheadLookups = lookupCoverageList(
                    	        this.lookaheadCoverage, lookaheadParams
                    	    );
                    	    // BACKTRACK LOOKUP //
                    	    var backtrackContext = [].concat(contextParams.backtrack);
                    	    backtrackContext.reverse();
                    	    while (backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)) {
                    	        backtrackContext.shift();
                    	    }
                    	    if (backtrackContext.length < this.backtrackCoverage.length) { return []; }
                    	    var backtrackParams = new ContextParams(backtrackContext, 0);
                    	    var backtrackLookups = lookupCoverageList(
                    	        this.backtrackCoverage, backtrackParams
                    	    );
                    	    var contextRulesMatch = (
                    	        inputLookups.length === this.inputCoverage.length &&
                    	        lookaheadLookups.length === this.lookaheadCoverage.length &&
                    	        backtrackLookups.length === this.backtrackCoverage.length
                    	    );
                    	    var substitutions = [];
                    	    if (contextRulesMatch) {
                    	        var lookupRecords = this.subtable.lookupRecords;
                    	        for (var i = 0; i < lookupRecords.length; i++) {
                    	            var lookupRecord = lookupRecords[i];
                    	            for (var j = 0; j < inputLookups.length; j++) {
                    	                var inputContext = new ContextParams([contextParams.get(j)], 0);
                    	                var lookupIndex = lookupRecord.lookupListIndex;
                    	                var lookupTable = new LookupTable(lookupIndex, this$1.lookups);
                    	                var lookup = lookupTable.lookup(inputContext);
                    	                substitutions = substitutions.concat(lookup);
                    	            }
                    	        }
                    	    }
                    	    return substitutions;
                    	}
                    
                    	/**
                    	 * Handle ligature substitution - format 1
                    	 * @param {any} contextParams context params to lookup
                    	 */
                    	function ligatureSubstitutionFormat1(contextParams) {
                    	    // COVERAGE LOOKUP //
                    	    var glyphIndex = contextParams.current.activeState.value;
                    	    var ligSetIndex = this.coverage.lookup(glyphIndex);
                    	    if (ligSetIndex === -1) { return []; }
                    	    // COMPONENTS LOOKUP * note that components is logically ordered
                    	    var ligGlyphs = this.ligatureSets.lookup(contextParams, ligSetIndex);
                    	    return ligGlyphs ? [ligGlyphs] : [];
                    	}
                    
                    	/**
                    	 * [ LOOKUP TYPES ]
                    	 * -------------------------------
                    	 * Single                        1;
                    	 * Multiple                      2;
                    	 * Alternate                     3;
                    	 * Ligature                      4;
                    	 * Context                       5;
                    	 * ChainingContext               6;
                    	 * ExtensionSubstitution         7;
                    	 * ReverseChainingContext        8;
                    	 * -------------------------------
                    	 * @param {any} contextParams context params to lookup
                    	 */
                    	Substitution$1.prototype.lookup = function (contextParams) {
                    	    var substitutions = [];
                    	    var lookupType = this.lookupTable.lookupType;
                    	    var substFormat = this.subtable.substFormat;
                    	    if (lookupType === 1 && substFormat === 2) {
                    	        var substitution = singleSubstitutionFormat2.call(this, contextParams);
                    	        if (substitution.length > 0) {
                    	            substitutions.push({ id: 12, substitution: substitution });
                    	        }
                    	    }
                    	    if (lookupType === 6 && substFormat === 3) {
                    	        var substitution$1 = chainingSubstitutionFormat3.call(this, contextParams);
                    	        if (substitution$1.length > 0) {
                    	            substitutions.push({ id: 63, substitution: substitution$1 });
                    	        }
                    	    }
                    	    if (lookupType === 4 && substFormat === 1) {
                    	        var substitution$2 = ligatureSubstitutionFormat1.call(this, contextParams);
                    	        if (substitution$2.length > 0) {
                    	            substitutions.push({ id: 41, substitution: substitution$2 });
                    	        }
                    	    }
                    	    return substitutions;
                    	};
                    
                    	/**
                    	 * Lookup a coverage table
                    	 * @param {number} glyphIndex to lookup
                    	 */
                    	Coverage$1.prototype.lookup = function (glyphIndex) {
                    	    if (!glyphIndex) { return -1; }
                    	    switch (this.table.format) {
                    	        case 1:
                    	            return this.table.glyphs.indexOf(glyphIndex);
                    
                    	        case 2:
                    	            var ranges = this.table.ranges;
                    	            for (var i = 0; i < ranges.length; i++) {
                    	                var range = ranges[i];
                    	                if (glyphIndex >= range.start && glyphIndex <= range.end) {
                    	                    var offset = glyphIndex - range.start;
                    	                    return range.index + offset;
                    	                }
                    	            }
                    	            break;
                    	        default:
                    	            return -1; // not found
                    	    }
                    	    return -1;
                    	};
                    
                    	/**
                    	 * Lookup a feature for a substitution or more
                    	 * @param {any} contextParams context params to lookup
                    	 */
                    	Feature.prototype.lookup = function(contextParams) {
                    	    var this$1 = this;
                    
                    	    var lookups = [];
                    	    for (var i = 0; i < this.lookups.length; i++) {
                    	        var lookupTable = this$1.lookups[i];
                    	        var lookup = lookupTable.lookup(contextParams);
                    	        if (lookup !== null || lookup.length) {
                    	            lookups = lookups.concat(lookup);
                    	        }
                    	    }
                    	    return lookups;
                    	};
                    
                    	/**
                    	 * Get feature indexes of a specific script
                    	 * @param {string} scriptTag script tag
                    	 */
                    	FeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {
                    	    if (!scriptTag) { return []; }
                    	    var tables = this.font.tables;
                    	    if (!tables.gsub) { return []; }
                    	    var scripts = this.font.tables.gsub.scripts;
                    	    for (var i = 0; i < scripts.length; i++) {
                    	        var script = scripts[i];
                    	        if (script.tag === scriptTag) {
                    	            var defaultLangSys = script.script.defaultLangSys;
                    	            return defaultLangSys.featureIndexes;
                    	        } else {
                    	            var langSysRecords = script.langSysRecords;
                    	            if (!!langSysRecords) {
                    	                for (var j = 0; j < langSysRecords.length; j++) {
                    	                    var langSysRecord = langSysRecords[j];
                    	                    if (langSysRecord.tag === scriptTag) {
                    	                        var langSys = langSysRecord.langSys;
                    	                        return langSys.featureIndexes;
                    	                    }
                    	                }
                    	            }
                    	        }
                    	    }
                    	    return [];
                    	};
                    
                    	/**
                    	 * Map a feature tag to a gsub feature
                    	 * @param {any} features gsub features
                    	 * @param {*} scriptTag script tag
                    	 */
                    	FeatureQuery.prototype.mapTagsToFeatures = function (features, scriptTag) {
                    	    var this$1 = this;
                    
                    	    var tags = {};
                    	    for (var i = 0; i < features.length; i++) {
                    	        var feature = features[i].feature;
                    	        var tag = features[i].tag;
                    	        var lookups = this$1.font.tables.gsub.lookups;
                    	        var featureLookups = new FeatureLookups(lookups, feature.lookupListIndexes);
                    	        tags[tag] = new Feature(tag, feature, featureLookups, scriptTag);
                    	    }
                    	    this.features[scriptTag].tags = tags;
                    	};
                    
                    	/**
                    	 * Get features of a specific script
                    	 * @param {string} scriptTag script tag
                    	 */
                    	FeatureQuery.prototype.getScriptFeatures = function (scriptTag) {
                    	    var features = this.features[scriptTag];
                    	    if (this.features.hasOwnProperty(scriptTag)) { return features; }
                    	    var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);
                    	    if (!featuresIndexes) { return null; }
                    	    var gsub = this.font.tables.gsub;
                    	    features = featuresIndexes.map(function (index) { return gsub.features[index]; });
                    	    this.features[scriptTag] = features;
                    	    this.mapTagsToFeatures(features, scriptTag);
                    	    return features;
                    	};
                    
                    	/**
                    	 * Query a feature by it's properties
                    	 * @param {any} query an object that describes the properties of a query
                    	 */
                    	FeatureQuery.prototype.getFeature = function (query) {
                    	    if (!this.font) { return { FAIL: "No font was found"}; }
                    	    if (!this.features.hasOwnProperty(query.script)) {
                    	        this.getScriptFeatures(query.script);
                    	    }
                    	    return this.features[query.script].tags[query.tag] || null;
                    	};
                    
                    	// The Font object
                    
                    	/**
                    	 * @typedef FontOptions
                    	 * @type Object
                    	 * @property {Boolean} empty - whether to create a new empty font
                    	 * @property {string} familyName
                    	 * @property {string} styleName
                    	 * @property {string=} fullName
                    	 * @property {string=} postScriptName
                    	 * @property {string=} designer
                    	 * @property {string=} designerURL
                    	 * @property {string=} manufacturer
                    	 * @property {string=} manufacturerURL
                    	 * @property {string=} license
                    	 * @property {string=} licenseURL
                    	 * @property {string=} version
                    	 * @property {string=} description
                    	 * @property {string=} copyright
                    	 * @property {string=} trademark
                    	 * @property {Number} unitsPerEm
                    	 * @property {Number} ascender
                    	 * @property {Number} descender
                    	 * @property {Number} createdTimestamp
                    	 * @property {string=} weightClass
                    	 * @property {string=} widthClass
                    	 * @property {string=} fsSelection
                    	 */
                    
                    	/**
                    	 * A Font represents a loaded OpenType font file.
                    	 * It contains a set of glyphs and methods to draw text on a drawing context,
                    	 * or to get a path representing the text.
                    	 * @exports opentype.Font
                    	 * @class
                    	 * @param {FontOptions}
                    	 * @constructor
                    	 */
                    	function Font(options) {
                    	    options = options || {};
                    
                    	    if (!options.empty) {
                    	        // Check that we've provided the minimum set of names.
                    	        checkArgument(options.familyName, 'When creating a new Font object, familyName is required.');
                    	        checkArgument(options.styleName, 'When creating a new Font object, styleName is required.');
                    	        checkArgument(options.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.');
                    	        checkArgument(options.ascender, 'When creating a new Font object, ascender is required.');
                    	        checkArgument(options.descender, 'When creating a new Font object, descender is required.');
                    	        checkArgument(options.descender < 0, 'Descender should be negative (e.g. -512).');
                    
                    	        // OS X will complain if the names are empty, so we put a single space everywhere by default.
                    	        this.names = {
                    	            fontFamily: {en: options.familyName || ' '},
                    	            fontSubfamily: {en: options.styleName || ' '},
                    	            fullName: {en: options.fullName || options.familyName + ' ' + options.styleName},
                    	            // postScriptName may not contain any whitespace
                    	            postScriptName: {en: options.postScriptName || (options.familyName + options.styleName).replace(/\s/g, '')},
                    	            designer: {en: options.designer || ' '},
                    	            designerURL: {en: options.designerURL || ' '},
                    	            manufacturer: {en: options.manufacturer || ' '},
                    	            manufacturerURL: {en: options.manufacturerURL || ' '},
                    	            license: {en: options.license || ' '},
                    	            licenseURL: {en: options.licenseURL || ' '},
                    	            version: {en: options.version || 'Version 0.1'},
                    	            description: {en: options.description || ' '},
                    	            copyright: {en: options.copyright || ' '},
                    	            trademark: {en: options.trademark || ' '}
                    	        };
                    	        this.unitsPerEm = options.unitsPerEm || 1000;
                    	        this.ascender = options.ascender;
                    	        this.descender = options.descender;
                    	        this.createdTimestamp = options.createdTimestamp;
                    	        this.tables = { os2: {
                    	            usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,
                    	            usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,
                    	            fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR
                    	        } };
                    	    }
                    
                    	    this.supported = true; // Deprecated: parseBuffer will throw an error if font is not supported.
                    	    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);
                    	    this.encoding = new DefaultEncoding(this);
                    	    this.position = new Position(this);
                    	    this.substitution = new Substitution(this);
                    	    this.tables = this.tables || {};
                    
                    	    Object.defineProperty(this, 'hinting', {
                    	        get: function() {
                    	            if (this._hinting) { return this._hinting; }
                    	            if (this.outlinesFormat === 'truetype') {
                    	                return (this._hinting = new Hinting(this));
                    	            }
                    	        }
                    	    });
                    	}
                    
                    	/**
                    	 * Check if the font has a glyph for the given character.
                    	 * @param  {string}
                    	 * @return {Boolean}
                    	 */
                    	Font.prototype.hasChar = function(c) {
                    	    return this.encoding.charToGlyphIndex(c) !== null;
                    	};
                    
                    	/**
                    	 * Convert the given character to a single glyph index.
                    	 * Note that this function assumes that there is a one-to-one mapping between
                    	 * the given character and a glyph; for complex scripts this might not be the case.
                    	 * @param  {string}
                    	 * @return {Number}
                    	 */
                    	Font.prototype.charToGlyphIndex = function(s) {
                    	    return this.encoding.charToGlyphIndex(s);
                    	};
                    
                    	/**
                    	 * Convert the given character to a single Glyph object.
                    	 * Note that this function assumes that there is a one-to-one mapping between
                    	 * the given character and a glyph; for complex scripts this might not be the case.
                    	 * @param  {string}
                    	 * @return {opentype.Glyph}
                    	 */
                    	Font.prototype.charToGlyph = function(c) {
                    	    var glyphIndex = this.charToGlyphIndex(c);
                    	    var glyph = this.glyphs.get(glyphIndex);
                    	    if (!glyph) {
                    	        // .notdef
                    	        glyph = this.glyphs.get(0);
                    	    }
                    
                    	    return glyph;
                    	};
                    
                    	/**
                    	 * Convert the given text to a list of Glyph objects.
                    	 * Note that there is no strict one-to-one mapping between characters and
                    	 * glyphs, so the list of returned glyphs can be larger or smaller than the
                    	 * length of the given string.
                    	 * @param  {string}
                    	 * @param  {GlyphRenderOptions} [options]
                    	 * @return {opentype.Glyph[]}
                    	 */
                    	Font.prototype.stringToGlyphs = function(s, options) {
                    	    var this$1 = this;
                    
                    	    options = options || this.defaultRenderOptions;
                    
                    	    var bidi = new Bidi();
                    
                    	    // Create and register 'glyphIndex' state modifier
                    	    var charToGlyphIndexMod = function (token) { return this$1.charToGlyphIndex(token.char); };
                    	    bidi.registerModifier('glyphIndex', null, charToGlyphIndexMod);
                    
                    	    var arabFeatureQuery = new FeatureQuery(this);
                    	    var arabFeatures = ['init', 'medi', 'fina', 'rlig'];
                    	    bidi.applyFeatures(
                    	        arabFeatures.map(function (tag) {
                    	            var query = { tag: tag, script: 'arab' };
                    	            var feature = arabFeatureQuery.getFeature(query);
                    	            if (!!feature) { return feature; }
                    	        })
                    	    );
                    	    var indexes = bidi.getTextGlyphs(s);
                    
                    	    var length = indexes.length;
                    
                    	    // Apply substitutions on glyph indexes
                    	    if (options.features) {
                    	        var script = options.script || this.substitution.getDefaultScriptName();
                    	        var manyToOne = [];
                    	        if (options.features.liga) { manyToOne = manyToOne.concat(this.substitution.getFeature('liga', script, options.language)); }
                    	        if (options.features.rlig) { manyToOne = manyToOne.concat(this.substitution.getFeature('rlig', script, options.language)); }
                    	        for (var i = 0; i < length; i += 1) {
                    	            for (var j = 0; j < manyToOne.length; j++) {
                    	                var ligature = manyToOne[j];
                    	                var components = ligature.sub;
                    	                var compCount = components.length;
                    	                var k = 0;
                    	                while (k < compCount && components[k] === indexes[i + k]) { k++; }
                    	                if (k === compCount) {
                    	                    indexes.splice(i, compCount, ligature.by);
                    	                    length = length - compCount + 1;
                    	                }
                    	            }
                    	        }
                    	    }
                    
                    	    // convert glyph indexes to glyph objects
                    	    var glyphs = new Array(length);
                    	    var notdef = this.glyphs.get(0);
                    	    for (var i$1 = 0; i$1 < length; i$1 += 1) {
                    	        glyphs[i$1] = this$1.glyphs.get(indexes[i$1]) || notdef;
                    	    }
                    	    return glyphs;
                    	};
                    
                    	/**
                    	 * @param  {string}
                    	 * @return {Number}
                    	 */
                    	Font.prototype.nameToGlyphIndex = function(name) {
                    	    return this.glyphNames.nameToGlyphIndex(name);
                    	};
                    
                    	/**
                    	 * @param  {string}
                    	 * @return {opentype.Glyph}
                    	 */
                    	Font.prototype.nameToGlyph = function(name) {
                    	    var glyphIndex = this.nameToGlyphIndex(name);
                    	    var glyph = this.glyphs.get(glyphIndex);
                    	    if (!glyph) {
                    	        // .notdef
                    	        glyph = this.glyphs.get(0);
                    	    }
                    
                    	    return glyph;
                    	};
                    
                    	/**
                    	 * @param  {Number}
                    	 * @return {String}
                    	 */
                    	Font.prototype.glyphIndexToName = function(gid) {
                    	    if (!this.glyphNames.glyphIndexToName) {
                    	        return '';
                    	    }
                    
                    	    return this.glyphNames.glyphIndexToName(gid);
                    	};
                    
                    	/**
                    	 * Retrieve the value of the kerning pair between the left glyph (or its index)
                    	 * and the right glyph (or its index). If no kerning pair is found, return 0.
                    	 * The kerning value gets added to the advance width when calculating the spacing
                    	 * between glyphs.
                    	 * For GPOS kerning, this method uses the default script and language, which covers
                    	 * most use cases. To have greater control, use font.position.getKerningValue .
                    	 * @param  {opentype.Glyph} leftGlyph
                    	 * @param  {opentype.Glyph} rightGlyph
                    	 * @return {Number}
                    	 */
                    	Font.prototype.getKerningValue = function(leftGlyph, rightGlyph) {
                    	    leftGlyph = leftGlyph.index || leftGlyph;
                    	    rightGlyph = rightGlyph.index || rightGlyph;
                    	    var gposKerning = this.position.defaultKerningTables;
                    	    if (gposKerning) { 
                    	        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);
                    	    }
                    	    // "kern" table
                    	    return this.kerningPairs[leftGlyph + ',' + rightGlyph] || 0;
                    	};
                    
                    	/**
                    	 * @typedef GlyphRenderOptions
                    	 * @type Object
                    	 * @property {string} [script] - script used to determine which features to apply. By default, 'DFLT' or 'latn' is used.
                    	 *                               See https://www.microsoft.com/typography/otspec/scripttags.htm
                    	 * @property {string} [language='dflt'] - language system used to determine which features to apply.
                    	 *                                        See https://www.microsoft.com/typography/developers/opentype/languagetags.aspx
                    	 * @property {boolean} [kerning=true] - whether to include kerning values
                    	 * @property {object} [features] - OpenType Layout feature tags. Used to enable or disable the features of the given script/language system.
                    	 *                                 See https://www.microsoft.com/typography/otspec/featuretags.htm
                    	 */
                    	Font.prototype.defaultRenderOptions = {
                    	    kerning: true,
                    	    features: {
                    	        liga: true,
                    	        rlig: true
                    	    }
                    	};
                    
                    	/**
                    	 * Helper function that invokes the given callback for each glyph in the given text.
                    	 * The callback gets `(glyph, x, y, fontSize, options)`.* @param  {string} text
                    	 * @param {string} text - The text to apply.
                    	 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param  {GlyphRenderOptions=} options
                    	 * @param  {Function} callback
                    	 */
                    	Font.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {
                    	    var this$1 = this;
                    
                    	    x = x !== undefined ? x : 0;
                    	    y = y !== undefined ? y : 0;
                    	    fontSize = fontSize !== undefined ? fontSize : 72;
                    	    options = options || this.defaultRenderOptions;
                    	    var fontScale = 1 / this.unitsPerEm * fontSize;
                    	    var glyphs = this.stringToGlyphs(text, options);
                    	    var kerningLookups;
                    	    if (options.kerning) {
                    	        var script = options.script || this.position.getDefaultScriptName();
                    	        kerningLookups = this.position.getKerningTables(script, options.language);
                    	    }
                    	    for (var i = 0; i < glyphs.length; i += 1) {
                    	        var glyph = glyphs[i];
                    	        callback.call(this$1, glyph, x, y, fontSize, options);
                    	        if (glyph.advanceWidth) {
                    	            x += glyph.advanceWidth * fontScale;
                    	        }
                    
                    	        if (options.kerning && i < glyphs.length - 1) {
                    	            // We should apply position adjustment lookups in a more generic way.
                    	            // Here we only use the xAdvance value.
                    	            var kerningValue = kerningLookups ?
                    	                  this$1.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) :
                    	                  this$1.getKerningValue(glyph, glyphs[i + 1]);
                    	            x += kerningValue * fontScale;
                    	        }
                    
                    	        if (options.letterSpacing) {
                    	            x += options.letterSpacing * fontSize;
                    	        } else if (options.tracking) {
                    	            x += (options.tracking / 1000) * fontSize;
                    	        }
                    	    }
                    	    return x;
                    	};
                    
                    	/**
                    	 * Create a Path object that represents the given text.
                    	 * @param  {string} text - The text to create.
                    	 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param  {GlyphRenderOptions=} options
                    	 * @return {opentype.Path}
                    	 */
                    	Font.prototype.getPath = function(text, x, y, fontSize, options) {
                    	    var fullPath = new Path();
                    	    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
                    	        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
                    	        fullPath.extend(glyphPath);
                    	    });
                    	    return fullPath;
                    	};
                    
                    	/**
                    	 * Create an array of Path objects that represent the glyphs of a given text.
                    	 * @param  {string} text - The text to create.
                    	 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param  {GlyphRenderOptions=} options
                    	 * @return {opentype.Path[]}
                    	 */
                    	Font.prototype.getPaths = function(text, x, y, fontSize, options) {
                    	    var glyphPaths = [];
                    	    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
                    	        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);
                    	        glyphPaths.push(glyphPath);
                    	    });
                    
                    	    return glyphPaths;
                    	};
                    
                    	/**
                    	 * Returns the advance width of a text.
                    	 *
                    	 * This is something different than Path.getBoundingBox() as for example a
                    	 * suffixed whitespace increases the advanceWidth but not the bounding box
                    	 * or an overhanging letter like a calligraphic 'f' might have a quite larger
                    	 * bounding box than its advance width.
                    	 *
                    	 * This corresponds to canvas2dContext.measureText(text).width
                    	 *
                    	 * @param  {string} text - The text to create.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param  {GlyphRenderOptions=} options
                    	 * @return advance width
                    	 */
                    	Font.prototype.getAdvanceWidth = function(text, fontSize, options) {
                    	    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});
                    	};
                    
                    	/**
                    	 * Draw the text on the given drawing context.
                    	 * @param  {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
                    	 * @param  {string} text - The text to create.
                    	 * @param  {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param  {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param  {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param  {GlyphRenderOptions=} options
                    	 */
                    	Font.prototype.draw = function(ctx, text, x, y, fontSize, options) {
                    	    this.getPath(text, x, y, fontSize, options).draw(ctx);
                    	};
                    
                    	/**
                    	 * Draw the points of all glyphs in the text.
                    	 * On-curve points will be drawn in blue, off-curve points will be drawn in red.
                    	 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
                    	 * @param {string} text - The text to create.
                    	 * @param {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param {GlyphRenderOptions=} options
                    	 */
                    	Font.prototype.drawPoints = function(ctx, text, x, y, fontSize, options) {
                    	    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
                    	        glyph.drawPoints(ctx, gX, gY, gFontSize);
                    	    });
                    	};
                    
                    	/**
                    	 * Draw lines indicating important font measurements for all glyphs in the text.
                    	 * Black lines indicate the origin of the coordinate system (point 0,0).
                    	 * Blue lines indicate the glyph bounding box.
                    	 * Green line indicates the advance width of the glyph.
                    	 * @param {CanvasRenderingContext2D} ctx - A 2D drawing context, like Canvas.
                    	 * @param {string} text - The text to create.
                    	 * @param {number} [x=0] - Horizontal position of the beginning of the text.
                    	 * @param {number} [y=0] - Vertical position of the *baseline* of the text.
                    	 * @param {number} [fontSize=72] - Font size in pixels. We scale the glyph units by `1 / unitsPerEm * fontSize`.
                    	 * @param {GlyphRenderOptions=} options
                    	 */
                    	Font.prototype.drawMetrics = function(ctx, text, x, y, fontSize, options) {
                    	    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {
                    	        glyph.drawMetrics(ctx, gX, gY, gFontSize);
                    	    });
                    	};
                    
                    	/**
                    	 * @param  {string}
                    	 * @return {string}
                    	 */
                    	Font.prototype.getEnglishName = function(name) {
                    	    var translations = this.names[name];
                    	    if (translations) {
                    	        return translations.en;
                    	    }
                    	};
                    
                    	/**
                    	 * Validate
                    	 */
                    	Font.prototype.validate = function() {
                    	    var _this = this;
                    
                    	    function assert(predicate, message) {
                    	    }
                    
                    	    function assertNamePresent(name) {
                    	        var englishName = _this.getEnglishName(name);
                    	        assert(englishName && englishName.trim().length > 0,
                    	               'No English ' + name + ' specified.');
                    	    }
                    
                    	    // Identification information
                    	    assertNamePresent('fontFamily');
                    	    assertNamePresent('weightName');
                    	    assertNamePresent('manufacturer');
                    	    assertNamePresent('copyright');
                    	    assertNamePresent('version');
                    
                    	    // Dimension information
                    	    assert(this.unitsPerEm > 0, 'No unitsPerEm specified.');
                    	};
                    
                    	/**
                    	 * Convert the font object to a SFNT data structure.
                    	 * This structure contains all the necessary tables and metadata to create a binary OTF file.
                    	 * @return {opentype.Table}
                    	 */
                    	Font.prototype.toTables = function() {
                    	    return sfnt.fontToTable(this);
                    	};
                    	/**
                    	 * @deprecated Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.
                    	 */
                    	Font.prototype.toBuffer = function() {
                    	    console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.');
                    	    return this.toArrayBuffer();
                    	};
                    	/**
                    	 * Converts a `opentype.Font` into an `ArrayBuffer`
                    	 * @return {ArrayBuffer}
                    	 */
                    	Font.prototype.toArrayBuffer = function() {
                    	    var sfntTable = this.toTables();
                    	    var bytes = sfntTable.encode();
                    	    var buffer = new ArrayBuffer(bytes.length);
                    	    var intArray = new Uint8Array(buffer);
                    	    for (var i = 0; i < bytes.length; i++) {
                    	        intArray[i] = bytes[i];
                    	    }
                    
                    	    return buffer;
                    	};
                    
                    	/**
                    	 * Initiate a download of the OpenType font.
                    	 */
                    	Font.prototype.download = function(fileName) {
                    	    var familyName = this.getEnglishName('fontFamily');
                    	    var styleName = this.getEnglishName('fontSubfamily');
                    	    fileName = fileName || familyName.replace(/\s/g, '') + '-' + styleName + '.otf';
                    	    var arrayBuffer = this.toArrayBuffer();
                    
                    	    if (isBrowser()) {
                    	        window.URL = window.URL || window.webkitURL;
                    
                    	        if (window.URL) {
                    	            var dataView = new DataView(arrayBuffer);
                    	            var blob = new Blob([dataView], {type: 'font/opentype'});
                    
                    	            var link = document.createElement('a');
                    	            link.href = window.URL.createObjectURL(blob);
                    	            link.download = fileName;
                    
                    	            var event = document.createEvent('MouseEvents');
                    	            event.initEvent('click', true, false);
                    	            link.dispatchEvent(event);
                    	        } else {
                    	            console.warn('Font file could not be downloaded. Try using a different browser.');
                    	        }
                    	    } else {
                    	        var fs = require('fs');
                    	        var buffer = arrayBufferToNodeBuffer(arrayBuffer);
                    	        fs.writeFileSync(fileName, buffer);
                    	    }
                    	};
                    	/**
                    	 * @private
                    	 */
                    	Font.prototype.fsSelectionValues = {
                    	    ITALIC:              0x001, //1
                    	    UNDERSCORE:          0x002, //2
                    	    NEGATIVE:            0x004, //4
                    	    OUTLINED:            0x008, //8
                    	    STRIKEOUT:           0x010, //16
                    	    BOLD:                0x020, //32
                    	    REGULAR:             0x040, //64
                    	    USER_TYPO_METRICS:   0x080, //128
                    	    WWS:                 0x100, //256
                    	    OBLIQUE:             0x200  //512
                    	};
                    
                    	/**
                    	 * @private
                    	 */
                    	Font.prototype.usWidthClasses = {
                    	    ULTRA_CONDENSED: 1,
                    	    EXTRA_CONDENSED: 2,
                    	    CONDENSED: 3,
                    	    SEMI_CONDENSED: 4,
                    	    MEDIUM: 5,
                    	    SEMI_EXPANDED: 6,
                    	    EXPANDED: 7,
                    	    EXTRA_EXPANDED: 8,
                    	    ULTRA_EXPANDED: 9
                    	};
                    
                    	/**
                    	 * @private
                    	 */
                    	Font.prototype.usWeightClasses = {
                    	    THIN: 100,
                    	    EXTRA_LIGHT: 200,
                    	    LIGHT: 300,
                    	    NORMAL: 400,
                    	    MEDIUM: 500,
                    	    SEMI_BOLD: 600,
                    	    BOLD: 700,
                    	    EXTRA_BOLD: 800,
                    	    BLACK:    900
                    	};
                    
                    	// The `fvar` table stores font variation axes and instances.
                    
                    	function addName(name, names) {
                    	    var nameString = JSON.stringify(name);
                    	    var nameID = 256;
                    	    for (var nameKey in names) {
                    	        var n = parseInt(nameKey);
                    	        if (!n || n < 256) {
                    	            continue;
                    	        }
                    
                    	        if (JSON.stringify(names[nameKey]) === nameString) {
                    	            return n;
                    	        }
                    
                    	        if (nameID <= n) {
                    	            nameID = n + 1;
                    	        }
                    	    }
                    
                    	    names[nameID] = name;
                    	    return nameID;
                    	}
                    
                    	function makeFvarAxis(n, axis, names) {
                    	    var nameID = addName(axis.name, names);
                    	    return [
                    	        {name: 'tag_' + n, type: 'TAG', value: axis.tag},
                    	        {name: 'minValue_' + n, type: 'FIXED', value: axis.minValue << 16},
                    	        {name: 'defaultValue_' + n, type: 'FIXED', value: axis.defaultValue << 16},
                    	        {name: 'maxValue_' + n, type: 'FIXED', value: axis.maxValue << 16},
                    	        {name: 'flags_' + n, type: 'USHORT', value: 0},
                    	        {name: 'nameID_' + n, type: 'USHORT', value: nameID}
                    	    ];
                    	}
                    
                    	function parseFvarAxis(data, start, names) {
                    	    var axis = {};
                    	    var p = new parse.Parser(data, start);
                    	    axis.tag = p.parseTag();
                    	    axis.minValue = p.parseFixed();
                    	    axis.defaultValue = p.parseFixed();
                    	    axis.maxValue = p.parseFixed();
                    	    p.skip('uShort', 1);  // reserved for flags; no values defined
                    	    axis.name = names[p.parseUShort()] || {};
                    	    return axis;
                    	}
                    
                    	function makeFvarInstance(n, inst, axes, names) {
                    	    var nameID = addName(inst.name, names);
                    	    var fields = [
                    	        {name: 'nameID_' + n, type: 'USHORT', value: nameID},
                    	        {name: 'flags_' + n, type: 'USHORT', value: 0}
                    	    ];
                    
                    	    for (var i = 0; i < axes.length; ++i) {
                    	        var axisTag = axes[i].tag;
                    	        fields.push({
                    	            name: 'axis_' + n + ' ' + axisTag,
                    	            type: 'FIXED',
                    	            value: inst.coordinates[axisTag] << 16
                    	        });
                    	    }
                    
                    	    return fields;
                    	}
                    
                    	function parseFvarInstance(data, start, axes, names) {
                    	    var inst = {};
                    	    var p = new parse.Parser(data, start);
                    	    inst.name = names[p.parseUShort()] || {};
                    	    p.skip('uShort', 1);  // reserved for flags; no values defined
                    
                    	    inst.coordinates = {};
                    	    for (var i = 0; i < axes.length; ++i) {
                    	        inst.coordinates[axes[i].tag] = p.parseFixed();
                    	    }
                    
                    	    return inst;
                    	}
                    
                    	function makeFvarTable(fvar, names) {
                    	    var result = new table.Table('fvar', [
                    	        {name: 'version', type: 'ULONG', value: 0x10000},
                    	        {name: 'offsetToData', type: 'USHORT', value: 0},
                    	        {name: 'countSizePairs', type: 'USHORT', value: 2},
                    	        {name: 'axisCount', type: 'USHORT', value: fvar.axes.length},
                    	        {name: 'axisSize', type: 'USHORT', value: 20},
                    	        {name: 'instanceCount', type: 'USHORT', value: fvar.instances.length},
                    	        {name: 'instanceSize', type: 'USHORT', value: 4 + fvar.axes.length * 4}
                    	    ]);
                    	    result.offsetToData = result.sizeOf();
                    
                    	    for (var i = 0; i < fvar.axes.length; i++) {
                    	        result.fields = result.fields.concat(makeFvarAxis(i, fvar.axes[i], names));
                    	    }
                    
                    	    for (var j = 0; j < fvar.instances.length; j++) {
                    	        result.fields = result.fields.concat(makeFvarInstance(j, fvar.instances[j], fvar.axes, names));
                    	    }
                    
                    	    return result;
                    	}
                    
                    	function parseFvarTable(data, start, names) {
                    	    var p = new parse.Parser(data, start);
                    	    var tableVersion = p.parseULong();
                    	    check.argument(tableVersion === 0x00010000, 'Unsupported fvar table version.');
                    	    var offsetToData = p.parseOffset16();
                    	    // Skip countSizePairs.
                    	    p.skip('uShort', 1);
                    	    var axisCount = p.parseUShort();
                    	    var axisSize = p.parseUShort();
                    	    var instanceCount = p.parseUShort();
                    	    var instanceSize = p.parseUShort();
                    
                    	    var axes = [];
                    	    for (var i = 0; i < axisCount; i++) {
                    	        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));
                    	    }
                    
                    	    var instances = [];
                    	    var instanceStart = start + offsetToData + axisCount * axisSize;
                    	    for (var j = 0; j < instanceCount; j++) {
                    	        instances.push(parseFvarInstance(data, instanceStart + j * instanceSize, axes, names));
                    	    }
                    
                    	    return {axes: axes, instances: instances};
                    	}
                    
                    	var fvar = { make: makeFvarTable, parse: parseFvarTable };
                    
                    	// The `GPOS` table contains kerning pairs, among other things.
                    
                    	var subtableParsers$1 = new Array(10);         // subtableParsers[0] is unused
                    
                    	// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-1-single-adjustment-positioning-subtable
                    	// this = Parser instance
                    	subtableParsers$1[1] = function parseLookup1() {
                    	    var start = this.offset + this.relativeOffset;
                    	    var posformat = this.parseUShort();
                    	    if (posformat === 1) {
                    	        return {
                    	            posFormat: 1,
                    	            coverage: this.parsePointer(Parser.coverage),
                    	            value: this.parseValueRecord()
                    	        };
                    	    } else if (posformat === 2) {
                    	        return {
                    	            posFormat: 2,
                    	            coverage: this.parsePointer(Parser.coverage),
                    	            values: this.parseValueRecordList()
                    	        };
                    	    }
                    	    check.assert(false, '0x' + start.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');
                    	};
                    
                    	// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#lookup-type-2-pair-adjustment-positioning-subtable
                    	subtableParsers$1[2] = function parseLookup2() {
                    	    var start = this.offset + this.relativeOffset;
                    	    var posFormat = this.parseUShort();
                    	    check.assert(posFormat === 1 || posFormat === 2, '0x' + start.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.');
                    	    var coverage = this.parsePointer(Parser.coverage);
                    	    var valueFormat1 = this.parseUShort();
                    	    var valueFormat2 = this.parseUShort();
                    	    if (posFormat === 1) {
                    	        // Adjustments for Glyph Pairs
                    	        return {
                    	            posFormat: posFormat,
                    	            coverage: coverage,
                    	            valueFormat1: valueFormat1,
                    	            valueFormat2: valueFormat2,
                    	            pairSets: this.parseList(Parser.pointer(Parser.list(function() {
                    	                return {        // pairValueRecord
                    	                    secondGlyph: this.parseUShort(),
                    	                    value1: this.parseValueRecord(valueFormat1),
                    	                    value2: this.parseValueRecord(valueFormat2)
                    	                };
                    	            })))
                    	        };
                    	    } else if (posFormat === 2) {
                    	        var classDef1 = this.parsePointer(Parser.classDef);
                    	        var classDef2 = this.parsePointer(Parser.classDef);
                    	        var class1Count = this.parseUShort();
                    	        var class2Count = this.parseUShort();
                    	        return {
                    	            // Class Pair Adjustment
                    	            posFormat: posFormat,
                    	            coverage: coverage,
                    	            valueFormat1: valueFormat1,
                    	            valueFormat2: valueFormat2,
                    	            classDef1: classDef1,
                    	            classDef2: classDef2,
                    	            class1Count: class1Count,
                    	            class2Count: class2Count,
                    	            classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {
                    	                return {
                    	                    value1: this.parseValueRecord(valueFormat1),
                    	                    value2: this.parseValueRecord(valueFormat2)
                    	                };
                    	            }))
                    	        };
                    	    }
                    	};
                    
                    	subtableParsers$1[3] = function parseLookup3() { return { error: 'GPOS Lookup 3 not supported' }; };
                    	subtableParsers$1[4] = function parseLookup4() { return { error: 'GPOS Lookup 4 not supported' }; };
                    	subtableParsers$1[5] = function parseLookup5() { return { error: 'GPOS Lookup 5 not supported' }; };
                    	subtableParsers$1[6] = function parseLookup6() { return { error: 'GPOS Lookup 6 not supported' }; };
                    	subtableParsers$1[7] = function parseLookup7() { return { error: 'GPOS Lookup 7 not supported' }; };
                    	subtableParsers$1[8] = function parseLookup8() { return { error: 'GPOS Lookup 8 not supported' }; };
                    	subtableParsers$1[9] = function parseLookup9() { return { error: 'GPOS Lookup 9 not supported' }; };
                    
                    	// https://docs.microsoft.com/en-us/typography/opentype/spec/gpos
                    	function parseGposTable(data, start) {
                    	    start = start || 0;
                    	    var p = new Parser(data, start);
                    	    var tableVersion = p.parseVersion(1);
                    	    check.argument(tableVersion === 1 || tableVersion === 1.1, 'Unsupported GPOS table version ' + tableVersion);
                    
                    	    if (tableVersion === 1) {
                    	        return {
                    	            version: tableVersion,
                    	            scripts: p.parseScriptList(),
                    	            features: p.parseFeatureList(),
                    	            lookups: p.parseLookupList(subtableParsers$1)
                    	        };
                    	    } else {
                    	        return {
                    	            version: tableVersion,
                    	            scripts: p.parseScriptList(),
                    	            features: p.parseFeatureList(),
                    	            lookups: p.parseLookupList(subtableParsers$1),
                    	            variations: p.parseFeatureVariationsList()
                    	        };
                    	    }
                    
                    	}
                    
                    	// GPOS Writing //////////////////////////////////////////////
                    	// NOT SUPPORTED
                    	var subtableMakers$1 = new Array(10);
                    
                    	function makeGposTable(gpos) {
                    	    return new table.Table('GPOS', [
                    	        {name: 'version', type: 'ULONG', value: 0x10000},
                    	        {name: 'scripts', type: 'TABLE', value: new table.ScriptList(gpos.scripts)},
                    	        {name: 'features', type: 'TABLE', value: new table.FeatureList(gpos.features)},
                    	        {name: 'lookups', type: 'TABLE', value: new table.LookupList(gpos.lookups, subtableMakers$1)}
                    	    ]);
                    	}
                    
                    	var gpos = { parse: parseGposTable, make: makeGposTable };
                    
                    	// The `kern` table contains kerning pairs.
                    
                    	function parseWindowsKernTable(p) {
                    	    var pairs = {};
                    	    // Skip nTables.
                    	    p.skip('uShort');
                    	    var subtableVersion = p.parseUShort();
                    	    check.argument(subtableVersion === 0, 'Unsupported kern sub-table version.');
                    	    // Skip subtableLength, subtableCoverage
                    	    p.skip('uShort', 2);
                    	    var nPairs = p.parseUShort();
                    	    // Skip searchRange, entrySelector, rangeShift.
                    	    p.skip('uShort', 3);
                    	    for (var i = 0; i < nPairs; i += 1) {
                    	        var leftIndex = p.parseUShort();
                    	        var rightIndex = p.parseUShort();
                    	        var value = p.parseShort();
                    	        pairs[leftIndex + ',' + rightIndex] = value;
                    	    }
                    	    return pairs;
                    	}
                    
                    	function parseMacKernTable(p) {
                    	    var pairs = {};
                    	    // The Mac kern table stores the version as a fixed (32 bits) but we only loaded the first 16 bits.
                    	    // Skip the rest.
                    	    p.skip('uShort');
                    	    var nTables = p.parseULong();
                    	    //check.argument(nTables === 1, 'Only 1 subtable is supported (got ' + nTables + ').');
                    	    if (nTables > 1) {
                    	        console.warn('Only the first kern subtable is supported.');
                    	    }
                    	    p.skip('uLong');
                    	    var coverage = p.parseUShort();
                    	    var subtableVersion = coverage & 0xFF;
                    	    p.skip('uShort');
                    	    if (subtableVersion === 0) {
                    	        var nPairs = p.parseUShort();
                    	        // Skip searchRange, entrySelector, rangeShift.
                    	        p.skip('uShort', 3);
                    	        for (var i = 0; i < nPairs; i += 1) {
                    	            var leftIndex = p.parseUShort();
                    	            var rightIndex = p.parseUShort();
                    	            var value = p.parseShort();
                    	            pairs[leftIndex + ',' + rightIndex] = value;
                    	        }
                    	    }
                    	    return pairs;
                    	}
                    
                    	// Parse the `kern` table which contains kerning pairs.
                    	function parseKernTable(data, start) {
                    	    var p = new parse.Parser(data, start);
                    	    var tableVersion = p.parseUShort();
                    	    if (tableVersion === 0) {
                    	        return parseWindowsKernTable(p);
                    	    } else if (tableVersion === 1) {
                    	        return parseMacKernTable(p);
                    	    } else {
                    	        throw new Error('Unsupported kern table version (' + tableVersion + ').');
                    	    }
                    	}
                    
                    	var kern = { parse: parseKernTable };
                    
                    	// The `loca` table stores the offsets to the locations of the glyphs in the font.
                    
                    	// Parse the `loca` table. This table stores the offsets to the locations of the glyphs in the font,
                    	// relative to the beginning of the glyphData table.
                    	// The number of glyphs stored in the `loca` table is specified in the `maxp` table (under numGlyphs)
                    	// The loca table has two versions: a short version where offsets are stored as uShorts, and a long
                    	// version where offsets are stored as uLongs. The `head` table specifies which version to use
                    	// (under indexToLocFormat).
                    	function parseLocaTable(data, start, numGlyphs, shortVersion) {
                    	    var p = new parse.Parser(data, start);
                    	    var parseFn = shortVersion ? p.parseUShort : p.parseULong;
                    	    // There is an extra entry after the last index element to compute the length of the last glyph.
                    	    // That's why we use numGlyphs + 1.
                    	    var glyphOffsets = [];
                    	    for (var i = 0; i < numGlyphs + 1; i += 1) {
                    	        var glyphOffset = parseFn.call(p);
                    	        if (shortVersion) {
                    	            // The short table version stores the actual offset divided by 2.
                    	            glyphOffset *= 2;
                    	        }
                    
                    	        glyphOffsets.push(glyphOffset);
                    	    }
                    
                    	    return glyphOffsets;
                    	}
                    
                    	var loca = { parse: parseLocaTable };
                    
                    	// opentype.js
                    
                    	/**
                    	 * The opentype library.
                    	 * @namespace opentype
                    	 */
                    
                    	// File loaders /////////////////////////////////////////////////////////
                    	/**
                    	 * Loads a font from a file. The callback throws an error message as the first parameter if it fails
                    	 * and the font as an ArrayBuffer in the second parameter if it succeeds.
                    	 * @param  {string} path - The path of the file
                    	 * @param  {Function} callback - The function to call when the font load completes
                    	 */
                    	function loadFromFile(path, callback) {
                    	    var fs = require('fs');
                    	    fs.readFile(path, function(err, buffer) {
                    	        if (err) {
                    	            return callback(err.message);
                    	        }
                    
                    	        callback(null, nodeBufferToArrayBuffer(buffer));
                    	    });
                    	}
                    	/**
                    	 * Loads a font from a URL. The callback throws an error message as the first parameter if it fails
                    	 * and the font as an ArrayBuffer in the second parameter if it succeeds.
                    	 * @param  {string} url - The URL of the font file.
                    	 * @param  {Function} callback - The function to call when the font load completes
                    	 */
                    	function loadFromUrl(url, callback) {
                    	    var request = new XMLHttpRequest();
                    	    request.open('get', url, true);
                    	    request.responseType = 'arraybuffer';
                    	    request.onload = function() {
                    	        if (request.response) {
                    	            return callback(null, request.response);
                    	        } else {
                    	            return callback('Font could not be loaded: ' + request.statusText);
                    	        }
                    	    };
                    
                    	    request.onerror = function () {
                    	        callback('Font could not be loaded');
                    	    };
                    
                    	    request.send();
                    	}
                    
                    	// Table Directory Entries //////////////////////////////////////////////
                    	/**
                    	 * Parses OpenType table entries.
                    	 * @param  {DataView}
                    	 * @param  {Number}
                    	 * @return {Object[]}
                    	 */
                    	function parseOpenTypeTableEntries(data, numTables) {
                    	    var tableEntries = [];
                    	    var p = 12;
                    	    for (var i = 0; i < numTables; i += 1) {
                    	        var tag = parse.getTag(data, p);
                    	        var checksum = parse.getULong(data, p + 4);
                    	        var offset = parse.getULong(data, p + 8);
                    	        var length = parse.getULong(data, p + 12);
                    	        tableEntries.push({tag: tag, checksum: checksum, offset: offset, length: length, compression: false});
                    	        p += 16;
                    	    }
                    
                    	    return tableEntries;
                    	}
                    
                    	/**
                    	 * Parses WOFF table entries.
                    	 * @param  {DataView}
                    	 * @param  {Number}
                    	 * @return {Object[]}
                    	 */
                    	function parseWOFFTableEntries(data, numTables) {
                    	    var tableEntries = [];
                    	    var p = 44; // offset to the first table directory entry.
                    	    for (var i = 0; i < numTables; i += 1) {
                    	        var tag = parse.getTag(data, p);
                    	        var offset = parse.getULong(data, p + 4);
                    	        var compLength = parse.getULong(data, p + 8);
                    	        var origLength = parse.getULong(data, p + 12);
                    	        var compression = (void 0);
                    	        if (compLength < origLength) {
                    	            compression = 'WOFF';
                    	        } else {
                    	            compression = false;
                    	        }
                    
                    	        tableEntries.push({tag: tag, offset: offset, compression: compression,
                    	            compressedLength: compLength, length: origLength});
                    	        p += 20;
                    	    }
                    
                    	    return tableEntries;
                    	}
                    
                    	/**
                    	 * @typedef TableData
                    	 * @type Object
                    	 * @property {DataView} data - The DataView
                    	 * @property {number} offset - The data offset.
                    	 */
                    
                    	/**
                    	 * @param  {DataView}
                    	 * @param  {Object}
                    	 * @return {TableData}
                    	 */
                    	function uncompressTable(data, tableEntry) {
                    	    if (tableEntry.compression === 'WOFF') {
                    	        var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);
                    	        var outBuffer = new Uint8Array(tableEntry.length);
                    	        tinyInflate(inBuffer, outBuffer);
                    	        if (outBuffer.byteLength !== tableEntry.length) {
                    	            throw new Error('Decompression error: ' + tableEntry.tag + ' decompressed length doesn\'t match recorded length');
                    	        }
                    
                    	        var view = new DataView(outBuffer.buffer, 0);
                    	        return {data: view, offset: 0};
                    	    } else {
                    	        return {data: data, offset: tableEntry.offset};
                    	    }
                    	}
                    
                    	// Public API ///////////////////////////////////////////////////////////
                    
                    	/**
                    	 * Parse the OpenType file data (as an ArrayBuffer) and return a Font object.
                    	 * Throws an error if the font could not be parsed.
                    	 * @param  {ArrayBuffer}
                    	 * @return {opentype.Font}
                    	 */
                    	function parseBuffer(buffer) {
                    	    var indexToLocFormat;
                    	    var ltagTable;
                    
                    	    // Since the constructor can also be called to create new fonts from scratch, we indicate this
                    	    // should be an empty font that we'll fill with our own data.
                    	    var font = new Font({empty: true});
                    
                    	    // OpenType fonts use big endian byte ordering.
                    	    // We can't rely on typed array view types, because they operate with the endianness of the host computer.
                    	    // Instead we use DataViews where we can specify endianness.
                    	    var data = new DataView(buffer, 0);
                    	    var numTables;
                    	    var tableEntries = [];
                    	    var signature = parse.getTag(data, 0);
                    	    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === 'true' || signature === 'typ1') {
                    	        font.outlinesFormat = 'truetype';
                    	        numTables = parse.getUShort(data, 4);
                    	        tableEntries = parseOpenTypeTableEntries(data, numTables);
                    	    } else if (signature === 'OTTO') {
                    	        font.outlinesFormat = 'cff';
                    	        numTables = parse.getUShort(data, 4);
                    	        tableEntries = parseOpenTypeTableEntries(data, numTables);
                    	    } else if (signature === 'wOFF') {
                    	        var flavor = parse.getTag(data, 4);
                    	        if (flavor === String.fromCharCode(0, 1, 0, 0)) {
                    	            font.outlinesFormat = 'truetype';
                    	        } else if (flavor === 'OTTO') {
                    	            font.outlinesFormat = 'cff';
                    	        } else {
                    	            throw new Error('Unsupported OpenType flavor ' + signature);
                    	        }
                    
                    	        numTables = parse.getUShort(data, 12);
                    	        tableEntries = parseWOFFTableEntries(data, numTables);
                    	    } else {
                    	        throw new Error('Unsupported OpenType signature ' + signature);
                    	    }
                    
                    	    var cffTableEntry;
                    	    var fvarTableEntry;
                    	    var glyfTableEntry;
                    	    var gposTableEntry;
                    	    var gsubTableEntry;
                    	    var hmtxTableEntry;
                    	    var kernTableEntry;
                    	    var locaTableEntry;
                    	    var nameTableEntry;
                    	    var metaTableEntry;
                    	    var p;
                    
                    	    for (var i = 0; i < numTables; i += 1) {
                    	        var tableEntry = tableEntries[i];
                    	        var table = (void 0);
                    	        switch (tableEntry.tag) {
                    	            case 'cmap':
                    	                table = uncompressTable(data, tableEntry);
                    	                font.tables.cmap = cmap.parse(table.data, table.offset);
                    	                font.encoding = new CmapEncoding(font.tables.cmap);
                    	                break;
                    	            case 'cvt ' :
                    	                table = uncompressTable(data, tableEntry);
                    	                p = new parse.Parser(table.data, table.offset);
                    	                font.tables.cvt = p.parseShortList(tableEntry.length / 2);
                    	                break;
                    	            case 'fvar':
                    	                fvarTableEntry = tableEntry;
                    	                break;
                    	            case 'fpgm' :
                    	                table = uncompressTable(data, tableEntry);
                    	                p = new parse.Parser(table.data, table.offset);
                    	                font.tables.fpgm = p.parseByteList(tableEntry.length);
                    	                break;
                    	            case 'head':
                    	                table = uncompressTable(data, tableEntry);
                    	                font.tables.head = head.parse(table.data, table.offset);
                    	                font.unitsPerEm = font.tables.head.unitsPerEm;
                    	                indexToLocFormat = font.tables.head.indexToLocFormat;
                    	                break;
                    	            case 'hhea':
                    	                table = uncompressTable(data, tableEntry);
                    	                font.tables.hhea = hhea.parse(table.data, table.offset);
                    	                font.ascender = font.tables.hhea.ascender;
                    	                font.descender = font.tables.hhea.descender;
                    	                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;
                    	                break;
                    	            case 'hmtx':
                    	                hmtxTableEntry = tableEntry;
                    	                break;
                    	            case 'ltag':
                    	                table = uncompressTable(data, tableEntry);
                    	                ltagTable = ltag.parse(table.data, table.offset);
                    	                break;
                    	            case 'maxp':
                    	                table = uncompressTable(data, tableEntry);
                    	                font.tables.maxp = maxp.parse(table.data, table.offset);
                    	                font.numGlyphs = font.tables.maxp.numGlyphs;
                    	                break;
                    	            case 'name':
                    	                nameTableEntry = tableEntry;
                    	                break;
                    	            case 'OS/2':
                    	                table = uncompressTable(data, tableEntry);
                    	                font.tables.os2 = os2.parse(table.data, table.offset);
                    	                break;
                    	            case 'post':
                    	                table = uncompressTable(data, tableEntry);
                    	                font.tables.post = post.parse(table.data, table.offset);
                    	                font.glyphNames = new GlyphNames(font.tables.post);
                    	                break;
                    	            case 'prep' :
                    	                table = uncompressTable(data, tableEntry);
                    	                p = new parse.Parser(table.data, table.offset);
                    	                font.tables.prep = p.parseByteList(tableEntry.length);
                    	                break;
                    	            case 'glyf':
                    	                glyfTableEntry = tableEntry;
                    	                break;
                    	            case 'loca':
                    	                locaTableEntry = tableEntry;
                    	                break;
                    	            case 'CFF ':
                    	                cffTableEntry = tableEntry;
                    	                break;
                    	            case 'kern':
                    	                kernTableEntry = tableEntry;
                    	                break;
                    	            case 'GPOS':
                    	                gposTableEntry = tableEntry;
                    	                break;
                    	            case 'GSUB':
                    	                gsubTableEntry = tableEntry;
                    	                break;
                    	            case 'meta':
                    	                metaTableEntry = tableEntry;
                    	                break;
                    	        }
                    	    }
                    
                    	    var nameTable = uncompressTable(data, nameTableEntry);
                    	    font.tables.name = _name.parse(nameTable.data, nameTable.offset, ltagTable);
                    	    font.names = font.tables.name;
                    
                    	    if (glyfTableEntry && locaTableEntry) {
                    	        var shortVersion = indexToLocFormat === 0;
                    	        var locaTable = uncompressTable(data, locaTableEntry);
                    	        var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);
                    	        var glyfTable = uncompressTable(data, glyfTableEntry);
                    	        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font);
                    	    } else if (cffTableEntry) {
                    	        var cffTable = uncompressTable(data, cffTableEntry);
                    	        cff.parse(cffTable.data, cffTable.offset, font);
                    	    } else {
                    	        throw new Error('Font doesn\'t contain TrueType or CFF outlines.');
                    	    }
                    
                    	    var hmtxTable = uncompressTable(data, hmtxTableEntry);
                    	    hmtx.parse(hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs);
                    	    addGlyphNames(font);
                    
                    	    if (kernTableEntry) {
                    	        var kernTable = uncompressTable(data, kernTableEntry);
                    	        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);
                    	    } else {
                    	        font.kerningPairs = {};
                    	    }
                    
                    	    if (gposTableEntry) {
                    	        var gposTable = uncompressTable(data, gposTableEntry);
                    	        font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);
                    	        font.position.init();
                    	    }
                    
                    	    if (gsubTableEntry) {
                    	        var gsubTable = uncompressTable(data, gsubTableEntry);
                    	        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);
                    	    }
                    
                    	    if (fvarTableEntry) {
                    	        var fvarTable = uncompressTable(data, fvarTableEntry);
                    	        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);
                    	    }
                    
                    	    if (metaTableEntry) {
                    	        var metaTable = uncompressTable(data, metaTableEntry);
                    	        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);
                    	        font.metas = font.tables.meta;
                    	    }
                    
                    	    return font;
                    	}
                    
                    	/**
                    	 * Asynchronously load the font from a URL or a filesystem. When done, call the callback
                    	 * with two arguments `(err, font)`. The `err` will be null on success,
                    	 * the `font` is a Font object.
                    	 * We use the node.js callback convention so that
                    	 * opentype.js can integrate with frameworks like async.js.
                    	 * @alias opentype.load
                    	 * @param  {string} url - The URL of the font to load.
                    	 * @param  {Function} callback - The callback.
                    	 */
                    	function load(url, callback) {
                    	    var isNode$$1 = typeof window === 'undefined';
                    	    var loadFn = isNode$$1 ? loadFromFile : loadFromUrl;
                    	    loadFn(url, function(err, arrayBuffer) {
                    	        if (err) {
                    	            return callback(err);
                    	        }
                    	        var font;
                    	        try {
                    	            font = parseBuffer(arrayBuffer);
                    	        } catch (e) {
                    	            return callback(e, null);
                    	        }
                    	        return callback(null, font);
                    	    });
                    	}
                    
                    	/**
                    	 * Synchronously load the font from a URL or file.
                    	 * When done, returns the font object or throws an error.
                    	 * @alias opentype.loadSync
                    	 * @param  {string} url - The URL of the font to load.
                    	 * @return {opentype.Font}
                    	 */
                    	function loadSync(url) {
                    	    var fs = require('fs');
                    	    var buffer = fs.readFileSync(url);
                    	    return parseBuffer(nodeBufferToArrayBuffer(buffer));
                    	}
                    
                    	exports.Font = Font;
                    	exports.Glyph = Glyph;
                    	exports.Path = Path;
                    	exports.BoundingBox = BoundingBox;
                    	exports._parse = parse;
                    	exports.parse = parseBuffer;
                    	exports.load = load;
                    	exports.loadSync = loadSync;
                    
                    	Object.defineProperty(exports, '__esModule', { value: true });
                    
                    })));
                    this.earcut = function(points,holeIndices){
                    	//https://github.com/mapbox/earcut
                    	
                        var outputPoints = [];
                        earcut(points,holeIndices).forEach(function(a){ outputPoints = outputPoints.concat([ points[(a*2)],points[(a*2)+1] ]); });
                        return outputPoints;
                    
                        function earcut(data, holeIndices, dim) {
                    
                            dim = dim || 2;
                    
                            var hasHoles = holeIndices && holeIndices.length,
                                outerLen = hasHoles ? holeIndices[0] * dim : data.length,
                                outerNode = linkedList(data, 0, outerLen, dim, true),
                                triangles = [];
                    
                            if (!outerNode || outerNode.next === outerNode.prev) return triangles;
                    
                            var minX, minY, maxX, maxY, x, y, invSize;
                    
                            if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
                    
                            // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
                            if (data.length > 80 * dim) {
                                minX = maxX = data[0];
                                minY = maxY = data[1];
                    
                                for (var i = dim; i < outerLen; i += dim) {
                                    x = data[i];
                                    y = data[i + 1];
                                    if (x < minX) minX = x;
                                    if (y < minY) minY = y;
                                    if (x > maxX) maxX = x;
                                    if (y > maxY) maxY = y;
                                }
                    
                                // minX, minY and invSize are later used to transform coords into integers for z-order calculation
                                invSize = Math.max(maxX - minX, maxY - minY);
                                invSize = invSize !== 0 ? 1 / invSize : 0;
                            }
                    
                            earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
                    
                            return triangles;
                        }
                    
                        // create a circular doubly linked list from polygon points in the specified winding order
                        function linkedList(data, start, end, dim, clockwise) {
                            var i, last;
                    
                            if (clockwise === (signedArea(data, start, end, dim) > 0)) {
                                for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
                            } else {
                                for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
                            }
                    
                            if (last && equals(last, last.next)) {
                                removeNode(last);
                                last = last.next;
                            }
                    
                            return last;
                        }
                    
                        // eliminate colinear or duplicate points
                        function filterPoints(start, end) {
                            if (!start) return start;
                            if (!end) end = start;
                    
                            var p = start,
                                again;
                            do {
                                again = false;
                    
                                if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
                                    removeNode(p);
                                    p = end = p.prev;
                                    if (p === p.next) break;
                                    again = true;
                    
                                } else {
                                    p = p.next;
                                }
                            } while (again || p !== end);
                    
                            return end;
                        }
                    
                        // main ear slicing loop which triangulates a polygon (given as a linked list)
                        function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
                            if (!ear) return;
                    
                            // interlink polygon nodes in z-order
                            if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
                    
                            var stop = ear,
                                prev, next;
                    
                            // iterate through ears, slicing them one by one
                            while (ear.prev !== ear.next) {
                                prev = ear.prev;
                                next = ear.next;
                    
                                if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
                                    // cut off the triangle
                                    triangles.push(prev.i / dim);
                                    triangles.push(ear.i / dim);
                                    triangles.push(next.i / dim);
                    
                                    removeNode(ear);
                    
                                    // skipping the next vertex leads to less sliver triangles
                                    ear = next.next;
                                    stop = next.next;
                    
                                    continue;
                                }
                    
                                ear = next;
                    
                                // if we looped through the whole remaining polygon and can't find any more ears
                                if (ear === stop) {
                                    // try filtering points and slicing again
                                    if (!pass) {
                                        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
                    
                                    // if this didn't work, try curing all small self-intersections locally
                                    } else if (pass === 1) {
                                        ear = cureLocalIntersections(ear, triangles, dim);
                                        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
                    
                                    // as a last resort, try splitting the remaining polygon into two
                                    } else if (pass === 2) {
                                        splitEarcut(ear, triangles, dim, minX, minY, invSize);
                                    }
                    
                                    break;
                                }
                            }
                        }
                    
                        // check whether a polygon node forms a valid ear with adjacent nodes
                        function isEar(ear) {
                            var a = ear.prev,
                                b = ear,
                                c = ear.next;
                    
                            if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
                    
                            // now make sure we don't have other points inside the potential ear
                            var p = ear.next.next;
                    
                            while (p !== ear.prev) {
                                if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                                    area(p.prev, p, p.next) >= 0) return false;
                                p = p.next;
                            }
                    
                            return true;
                        }
                    
                        function isEarHashed(ear, minX, minY, invSize) {
                            var a = ear.prev,
                                b = ear,
                                c = ear.next;
                    
                            if (area(a, b, c) >= 0) return false; // reflex, can't be an ear
                    
                            // triangle bbox; min & max are calculated like this for speed
                            var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
                                minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
                                maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
                                maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);
                    
                            // z-order range for the current triangle bbox;
                            var minZ = zOrder(minTX, minTY, minX, minY, invSize),
                                maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);
                    
                            var p = ear.prevZ,
                                n = ear.nextZ;
                    
                            // look for points inside the triangle in both directions
                            while (p && p.z >= minZ && n && n.z <= maxZ) {
                                if (p !== ear.prev && p !== ear.next &&
                                    pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                                    area(p.prev, p, p.next) >= 0) return false;
                                p = p.prevZ;
                    
                                if (n !== ear.prev && n !== ear.next &&
                                    pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                                    area(n.prev, n, n.next) >= 0) return false;
                                n = n.nextZ;
                            }
                    
                            // look for remaining points in decreasing z-order
                            while (p && p.z >= minZ) {
                                if (p !== ear.prev && p !== ear.next &&
                                    pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
                                    area(p.prev, p, p.next) >= 0) return false;
                                p = p.prevZ;
                            }
                    
                            // look for remaining points in increasing z-order
                            while (n && n.z <= maxZ) {
                                if (n !== ear.prev && n !== ear.next &&
                                    pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
                                    area(n.prev, n, n.next) >= 0) return false;
                                n = n.nextZ;
                            }
                    
                            return true;
                        }
                    
                        // go through all polygon nodes and cure small local self-intersections
                        function cureLocalIntersections(start, triangles, dim) {
                            var p = start;
                            do {
                                var a = p.prev,
                                    b = p.next.next;
                    
                                if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
                    
                                    triangles.push(a.i / dim);
                                    triangles.push(p.i / dim);
                                    triangles.push(b.i / dim);
                    
                                    // remove two nodes involved
                                    removeNode(p);
                                    removeNode(p.next);
                    
                                    p = start = b;
                                }
                                p = p.next;
                            } while (p !== start);
                    
                            return p;
                        }
                    
                        // try splitting polygon into two and triangulate them independently
                        function splitEarcut(start, triangles, dim, minX, minY, invSize) {
                            // look for a valid diagonal that divides the polygon into two
                            var a = start;
                            do {
                                var b = a.next.next;
                                while (b !== a.prev) {
                                    if (a.i !== b.i && isValidDiagonal(a, b)) {
                                        // split the polygon in two by the diagonal
                                        var c = splitPolygon(a, b);
                    
                                        // filter colinear points around the cuts
                                        a = filterPoints(a, a.next);
                                        c = filterPoints(c, c.next);
                    
                                        // run earcut on each half
                                        earcutLinked(a, triangles, dim, minX, minY, invSize);
                                        earcutLinked(c, triangles, dim, minX, minY, invSize);
                                        return;
                                    }
                                    b = b.next;
                                }
                                a = a.next;
                            } while (a !== start);
                        }
                    
                        // link every hole into the outer loop, producing a single-ring polygon without holes
                        function eliminateHoles(data, holeIndices, outerNode, dim) {
                            var queue = [],
                                i, len, start, end, list;
                    
                            for (i = 0, len = holeIndices.length; i < len; i++) {
                                start = holeIndices[i] * dim;
                                end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                                list = linkedList(data, start, end, dim, false);
                                if (list === list.next) list.steiner = true;
                                queue.push(getLeftmost(list));
                            }
                    
                            queue.sort(compareX);
                    
                            // process holes from left to right
                            for (i = 0; i < queue.length; i++) {
                                eliminateHole(queue[i], outerNode);
                                outerNode = filterPoints(outerNode, outerNode.next);
                            }
                    
                            return outerNode;
                        }
                    
                        function compareX(a, b) {
                            return a.x - b.x;
                        }
                    
                        // find a bridge between vertices that connects hole with an outer ring and and link it
                        function eliminateHole(hole, outerNode) {
                            outerNode = findHoleBridge(hole, outerNode);
                            if (outerNode) {
                                var b = splitPolygon(outerNode, hole);
                                filterPoints(b, b.next);
                            }
                        }
                    
                        // David Eberly's algorithm for finding a bridge between hole and outer polygon
                        function findHoleBridge(hole, outerNode) {
                            var p = outerNode,
                                hx = hole.x,
                                hy = hole.y,
                                qx = -Infinity,
                                m;
                    
                            // find a segment intersected by a ray from the hole's leftmost point to the left;
                            // segment's endpoint with lesser x will be potential connection point
                            do {
                                if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
                                    var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                                    if (x <= hx && x > qx) {
                                        qx = x;
                                        if (x === hx) {
                                            if (hy === p.y) return p;
                                            if (hy === p.next.y) return p.next;
                                        }
                                        m = p.x < p.next.x ? p : p.next;
                                    }
                                }
                                p = p.next;
                            } while (p !== outerNode);
                    
                            if (!m) return null;
                    
                            if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint
                    
                            // look for points inside the triangle of hole point, segment intersection and endpoint;
                            // if there are no points found, we have a valid connection;
                            // otherwise choose the point of the minimum angle with the ray as connection point
                    
                            var stop = m,
                                mx = m.x,
                                my = m.y,
                                tanMin = Infinity,
                                tan;
                    
                            p = m.next;
                    
                            while (p !== stop) {
                                if (hx >= p.x && p.x >= mx && hx !== p.x &&
                                        pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
                    
                                    tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
                    
                                    if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                                        m = p;
                                        tanMin = tan;
                                    }
                                }
                    
                                p = p.next;
                            }
                    
                            return m;
                        }
                    
                        // interlink polygon nodes in z-order
                        function indexCurve(start, minX, minY, invSize) {
                            var p = start;
                            do {
                                if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
                                p.prevZ = p.prev;
                                p.nextZ = p.next;
                                p = p.next;
                            } while (p !== start);
                    
                            p.prevZ.nextZ = null;
                            p.prevZ = null;
                    
                            sortLinked(p);
                        }
                    
                        // Simon Tatham's linked list merge sort algorithm
                        // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
                        function sortLinked(list) {
                            var i, p, q, e, tail, numMerges, pSize, qSize,
                                inSize = 1;
                    
                            do {
                                p = list;
                                list = null;
                                tail = null;
                                numMerges = 0;
                    
                                while (p) {
                                    numMerges++;
                                    q = p;
                                    pSize = 0;
                                    for (i = 0; i < inSize; i++) {
                                        pSize++;
                                        q = q.nextZ;
                                        if (!q) break;
                                    }
                                    qSize = inSize;
                    
                                    while (pSize > 0 || (qSize > 0 && q)) {
                    
                                        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                                            e = p;
                                            p = p.nextZ;
                                            pSize--;
                                        } else {
                                            e = q;
                                            q = q.nextZ;
                                            qSize--;
                                        }
                    
                                        if (tail) tail.nextZ = e;
                                        else list = e;
                    
                                        e.prevZ = tail;
                                        tail = e;
                                    }
                    
                                    p = q;
                                }
                    
                                tail.nextZ = null;
                                inSize *= 2;
                    
                            } while (numMerges > 1);
                    
                            return list;
                        }
                    
                        // z-order of a point given coords and inverse of the longer side of data bbox
                        function zOrder(x, y, minX, minY, invSize) {
                            // coords are transformed into non-negative 15-bit integer range
                            x = 32767 * (x - minX) * invSize;
                            y = 32767 * (y - minY) * invSize;
                    
                            x = (x | (x << 8)) & 0x00FF00FF;
                            x = (x | (x << 4)) & 0x0F0F0F0F;
                            x = (x | (x << 2)) & 0x33333333;
                            x = (x | (x << 1)) & 0x55555555;
                    
                            y = (y | (y << 8)) & 0x00FF00FF;
                            y = (y | (y << 4)) & 0x0F0F0F0F;
                            y = (y | (y << 2)) & 0x33333333;
                            y = (y | (y << 1)) & 0x55555555;
                    
                            return x | (y << 1);
                        }
                    
                        // find the leftmost node of a polygon ring
                        function getLeftmost(start) {
                            var p = start,
                                leftmost = start;
                            do {
                                if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;
                                p = p.next;
                            } while (p !== start);
                    
                            return leftmost;
                        }
                    
                        // check if a point lies within a convex triangle
                        function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
                            return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
                                (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
                                (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
                        }
                    
                        // check if a diagonal between two polygon nodes is valid (lies in polygon interior)
                        function isValidDiagonal(a, b) {
                            return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
                                locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
                        }
                    
                        // signed area of a triangle
                        function area(p, q, r) {
                            return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
                        }
                    
                        // check if two points are equal
                        function equals(p1, p2) {
                            return p1.x === p2.x && p1.y === p2.y;
                        }
                    
                        // check if two segments intersect
                        function intersects(p1, q1, p2, q2) {
                            if ((equals(p1, p2) && equals(q1, q2)) ||
                                (equals(p1, q2) && equals(p2, q1))) return true;
                            return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
                                area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
                        }
                    
                        // check if a polygon diagonal intersects any polygon segments
                        function intersectsPolygon(a, b) {
                            var p = a;
                            do {
                                if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                                        intersects(p, p.next, a, b)) return true;
                                p = p.next;
                            } while (p !== a);
                    
                            return false;
                        }
                    
                        // check if a polygon diagonal is locally inside the polygon
                        function locallyInside(a, b) {
                            return area(a.prev, a, a.next) < 0 ?
                                area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
                                area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
                        }
                    
                        // check if the middle point of a polygon diagonal is inside the polygon
                        function middleInside(a, b) {
                            var p = a,
                                inside = false,
                                px = (a.x + b.x) / 2,
                                py = (a.y + b.y) / 2;
                            do {
                                if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                                        (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
                                    inside = !inside;
                                p = p.next;
                            } while (p !== a);
                    
                            return inside;
                        }
                    
                        // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
                        // if one belongs to the outer ring and another to a hole, it merges it into a single ring
                        function splitPolygon(a, b) {
                            var a2 = new Node(a.i, a.x, a.y),
                                b2 = new Node(b.i, b.x, b.y),
                                an = a.next,
                                bp = b.prev;
                    
                            a.next = b;
                            b.prev = a;
                    
                            a2.next = an;
                            an.prev = a2;
                    
                            b2.next = a2;
                            a2.prev = b2;
                    
                            bp.next = b2;
                            b2.prev = bp;
                    
                            return b2;
                        }
                    
                        // create a node and optionally link it with previous one (in a circular doubly linked list)
                        function insertNode(i, x, y, last) {
                            var p = new Node(i, x, y);
                    
                            if (!last) {
                                p.prev = p;
                                p.next = p;
                    
                            } else {
                                p.next = last.next;
                                p.prev = last;
                                last.next.prev = p;
                                last.next = p;
                            }
                            return p;
                        }
                    
                        function removeNode(p) {
                            p.next.prev = p.prev;
                            p.prev.next = p.next;
                    
                            if (p.prevZ) p.prevZ.nextZ = p.nextZ;
                            if (p.nextZ) p.nextZ.prevZ = p.prevZ;
                        }
                    
                        function Node(i, x, y) {
                            // vertex index in coordinates array
                            this.i = i;
                    
                            // vertex coordinates
                            this.x = x;
                            this.y = y;
                    
                            // previous and next vertex nodes in a polygon ring
                            this.prev = null;
                            this.next = null;
                    
                            // z-order curve value
                            this.z = null;
                    
                            // previous and next nodes in z-order
                            this.prevZ = null;
                            this.nextZ = null;
                    
                            // indicates whether this is a steiner point
                            this.steiner = false;
                        }
                    
                        // // return a percentage difference between the polygon area and its triangulation area;
                        // // used to verify correctness of triangulation
                        // earcut.deviation = function (data, holeIndices, dim, triangles) {
                        //     var hasHoles = holeIndices && holeIndices.length;
                        //     var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
                    
                        //     var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
                        //     if (hasHoles) {
                        //         for (var i = 0, len = holeIndices.length; i < len; i++) {
                        //             var start = holeIndices[i] * dim;
                        //             var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
                        //             polygonArea -= Math.abs(signedArea(data, start, end, dim));
                        //         }
                        //     }
                    
                        //     var trianglesArea = 0;
                        //     for (i = 0; i < triangles.length; i += 3) {
                        //         var a = triangles[i] * dim;
                        //         var b = triangles[i + 1] * dim;
                        //         var c = triangles[i + 2] * dim;
                        //         trianglesArea += Math.abs(
                        //             (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
                        //             (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
                        //     }
                    
                        //     return polygonArea === 0 && trianglesArea === 0 ? 0 :
                        //         Math.abs((trianglesArea - polygonArea) / polygonArea);
                        // };
                    
                        function signedArea(data, start, end, dim) {
                            var sum = 0;
                            for (var i = start, j = end - dim; i < end; i += dim) {
                                sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
                                j = i;
                            }
                            return sum;
                        }
                    
                        // // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
                        // earcut.flatten = function (data) {
                        //     var dim = data[0][0].length,
                        //         result = {vertices: [], holes: [], dimensions: dim},
                        //         holeIndex = 0;
                    
                        //     for (var i = 0; i < data.length; i++) {
                        //         for (var j = 0; j < data[i].length; j++) {
                        //             for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
                        //         }
                        //         if (i > 0) {
                        //             holeIndex += data[i - 1].length;
                        //             result.holes.push(holeIndex);
                        //         }
                        //     }
                        //     return result;
                        // };
                    };
                    (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
                    	/*
                    	 * @copyright 2016 Sean Connelly (@voidqk), http://syntheti.cc
                    	 * @license MIT
                    	 * @preserve Project Home: https://github.com/voidqk/polybooljs
                    	 */
                    	
                        // Modified by Metasophiea <metasophiea@gmail.com>
                    
                    
                    	var BuildLog = require('./lib/build-log');
                    	var Epsilon = require('./lib/epsilon');
                    	var Intersecter = require('./lib/intersecter');
                    	var SegmentChainer = require('./lib/segment-chainer');
                    	var SegmentSelector = require('./lib/segment-selector');
                    	var GeoJSON = require('./lib/geojson');
                    	
                    	var buildLog = false;
                    	var epsilon = Epsilon();
                    	
                    	var PolyBool;
                    	PolyBool = {
                    		// getter/setter for buildLog
                    		buildLog: function(bl){
                    			if (bl === true)
                    				buildLog = BuildLog();
                    			else if (bl === false)
                    				buildLog = false;
                    			return buildLog === false ? false : buildLog.list;
                    		},
                    		// getter/setter for epsilon
                    		epsilon: function(v){
                    			return epsilon.epsilon(v);
                    		},
                    	
                    		// core API
                    		segments: function(poly){
                    			var i = Intersecter(true, epsilon, buildLog);
                    			poly.regions.forEach(i.addRegion);
                    			return {
                    				segments: i.calculate(poly.inverted),
                    				inverted: poly.inverted
                    			};
                    		},
                    		combine: function(segments1, segments2){
                    			var i3 = Intersecter(false, epsilon, buildLog);
                    			return {
                    				combined: i3.calculate(
                    					segments1.segments, segments1.inverted,
                    					segments2.segments, segments2.inverted
                    				),
                    				inverted1: segments1.inverted,
                    				inverted2: segments2.inverted
                    			};
                    		},
                    		selectUnion: function(combined){
                    			return {
                    				segments: SegmentSelector.union(combined.combined, buildLog),
                    				inverted: combined.inverted1 || combined.inverted2
                    			}
                    		},
                    		selectIntersect: function(combined){
                    			return {
                    				segments: SegmentSelector.intersect(combined.combined, buildLog),
                    				inverted: combined.inverted1 && combined.inverted2
                    			}
                    		},
                    		selectDifference: function(combined){
                    			return {
                    				segments: SegmentSelector.difference(combined.combined, buildLog),
                    				inverted: combined.inverted1 && !combined.inverted2
                    			}
                    		},
                    		selectDifferenceRev: function(combined){
                    			return {
                    				segments: SegmentSelector.differenceRev(combined.combined, buildLog),
                    				inverted: !combined.inverted1 && combined.inverted2
                    			}
                    		},
                    		selectXor: function(combined){
                    			return {
                    				segments: SegmentSelector.xor(combined.combined, buildLog),
                    				inverted: combined.inverted1 !== combined.inverted2
                    			}
                    		},
                    		polygon: function(segments){
                    			return {
                    				regions: SegmentChainer(segments.segments, epsilon, buildLog),
                    				inverted: segments.inverted
                    			};
                    		},
                    	
                    		// GeoJSON converters
                    		polygonFromGeoJSON: function(geojson){
                    			return GeoJSON.toPolygon(PolyBool, geojson);
                    		},
                    		polygonToGeoJSON: function(poly){
                    			return GeoJSON.fromPolygon(PolyBool, epsilon, poly);
                    		},
                    	
                    		// helper functions for common operations
                    		union: function(poly1, poly2){
                    			return operate(poly1, poly2, PolyBool.selectUnion);
                    		},
                    		intersect: function(poly1, poly2){
                    			return operate(poly1, poly2, PolyBool.selectIntersect);
                    		},
                    		difference: function(poly1, poly2){
                    			return operate(poly1, poly2, PolyBool.selectDifference);
                    		},
                    		differenceRev: function(poly1, poly2){
                    			return operate(poly1, poly2, PolyBool.selectDifferenceRev);
                    		},
                    		xor: function(poly1, poly2){
                    			return operate(poly1, poly2, PolyBool.selectXor);
                    		}
                    	};
                    
                    	thirdparty.PolyBool = PolyBool;
                    	
                    	function operate(poly1, poly2, selector){
                    		var seg1 = PolyBool.segments(poly1);
                    		var seg2 = PolyBool.segments(poly2);
                    		var comb = PolyBool.combine(seg1, seg2);
                    		var seg3 = selector(comb);
                    		return PolyBool.polygon(seg3);
                    	}
                    		
                    	},{"./lib/build-log":2,"./lib/epsilon":3,"./lib/geojson":4,"./lib/intersecter":5,"./lib/segment-chainer":7,"./lib/segment-selector":8}],2:[function(require,module,exports){
                    	// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
                    	// MIT License
                    	// Project Home: https://github.com/voidqk/polybooljs
                    	
                    	//
                    	// used strictly for logging the processing of the algorithm... only useful if you intend on
                    	// looking under the covers (for pretty UI's or debugging)
                    	//
                    	
                    	function BuildLog(){
                    		var my;
                    		var nextSegmentId = 0;
                    		var curVert = false;
                    	
                    		function push(type, data){
                    			my.list.push({
                    				type: type,
                    				data: data ? JSON.parse(JSON.stringify(data)) : void 0
                    			});
                    			return my;
                    		}
                    	
                    		my = {
                    			list: [],
                    			segmentId: function(){
                    				return nextSegmentId++;
                    			},
                    			checkIntersection: function(seg1, seg2){
                    				return push('check', { seg1: seg1, seg2: seg2 });
                    			},
                    			segmentChop: function(seg, end){
                    				push('div_seg', { seg: seg, pt: end });
                    				return push('chop', { seg: seg, pt: end });
                    			},
                    			statusRemove: function(seg){
                    				return push('pop_seg', { seg: seg });
                    			},
                    			segmentUpdate: function(seg){
                    				return push('seg_update', { seg: seg });
                    			},
                    			segmentNew: function(seg, primary){
                    				return push('new_seg', { seg: seg, primary: primary });
                    			},
                    			segmentRemove: function(seg){
                    				return push('rem_seg', { seg: seg });
                    			},
                    			tempStatus: function(seg, above, below){
                    				return push('temp_status', { seg: seg, above: above, below: below });
                    			},
                    			rewind: function(seg){
                    				return push('rewind', { seg: seg });
                    			},
                    			status: function(seg, above, below){
                    				return push('status', { seg: seg, above: above, below: below });
                    			},
                    			vert: function(x){
                    				if (x === curVert)
                    					return my;
                    				curVert = x;
                    				return push('vert', { x: x });
                    			},
                    			log: function(data){
                    				if (typeof data !== 'string')
                    					data = JSON.stringify(data, false, '  ');
                    				return push('log', { txt: data });
                    			},
                    			reset: function(){
                    				return push('reset');
                    			},
                    			selected: function(segs){
                    				return push('selected', { segs: segs });
                    			},
                    			chainStart: function(seg){
                    				return push('chain_start', { seg: seg });
                    			},
                    			chainRemoveHead: function(index, pt){
                    				return push('chain_rem_head', { index: index, pt: pt });
                    			},
                    			chainRemoveTail: function(index, pt){
                    				return push('chain_rem_tail', { index: index, pt: pt });
                    			},
                    			chainNew: function(pt1, pt2){
                    				return push('chain_new', { pt1: pt1, pt2: pt2 });
                    			},
                    			chainMatch: function(index){
                    				return push('chain_match', { index: index });
                    			},
                    			chainClose: function(index){
                    				return push('chain_close', { index: index });
                    			},
                    			chainAddHead: function(index, pt){
                    				return push('chain_add_head', { index: index, pt: pt });
                    			},
                    			chainAddTail: function(index, pt){
                    				return push('chain_add_tail', { index: index, pt: pt, });
                    			},
                    			chainConnect: function(index1, index2){
                    				return push('chain_con', { index1: index1, index2: index2 });
                    			},
                    			chainReverse: function(index){
                    				return push('chain_rev', { index: index });
                    			},
                    			chainJoin: function(index1, index2){
                    				return push('chain_join', { index1: index1, index2: index2 });
                    			},
                    			done: function(){
                    				return push('done');
                    			}
                    		};
                    		return my;
                    	}
                    	
                    	module.exports = BuildLog;
                    	
                    	},{}],3:[function(require,module,exports){
                    	// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
                    	// MIT License
                    	// Project Home: https://github.com/voidqk/polybooljs
                    	
                    	//
                    	// provides the raw computation functions that takes epsilon into account
                    	//
                    	// zero is defined to be between (-epsilon, epsilon) exclusive
                    	//
                    	
                    	function Epsilon(eps){
                    		if (typeof eps !== 'number')
                    			eps = 0.0000000001; // sane default? sure why not
                    		var my = {
                    			epsilon: function(v){
                    				if (typeof v === 'number')
                    					eps = v;
                    				return eps;
                    			},
                    			pointAboveOrOnLine: function(pt, left, right){
                    				var Ax = left[0];
                    				var Ay = left[1];
                    				var Bx = right[0];
                    				var By = right[1];
                    				var Cx = pt[0];
                    				var Cy = pt[1];
                    				return (Bx - Ax) * (Cy - Ay) - (By - Ay) * (Cx - Ax) >= -eps;
                    			},
                    			pointBetween: function(p, left, right){
                    				// p must be collinear with left->right
                    				// returns false if p == left, p == right, or left == right
                    				var d_py_ly = p[1] - left[1];
                    				var d_rx_lx = right[0] - left[0];
                    				var d_px_lx = p[0] - left[0];
                    				var d_ry_ly = right[1] - left[1];
                    	
                    				var dot = d_px_lx * d_rx_lx + d_py_ly * d_ry_ly;
                    				// if `dot` is 0, then `p` == `left` or `left` == `right` (reject)
                    				// if `dot` is less than 0, then `p` is to the left of `left` (reject)
                    				if (dot < eps)
                    					return false;
                    	
                    				var sqlen = d_rx_lx * d_rx_lx + d_ry_ly * d_ry_ly;
                    				// if `dot` > `sqlen`, then `p` is to the right of `right` (reject)
                    				// therefore, if `dot - sqlen` is greater than 0, then `p` is to the right of `right` (reject)
                    				if (dot - sqlen > -eps)
                    					return false;
                    	
                    				return true;
                    			},
                    			pointsSameX: function(p1, p2){
                    				return Math.abs(p1[0] - p2[0]) < eps;
                    			},
                    			pointsSameY: function(p1, p2){
                    				return Math.abs(p1[1] - p2[1]) < eps;
                    			},
                    			pointsSame: function(p1, p2){
                    				return my.pointsSameX(p1, p2) && my.pointsSameY(p1, p2);
                    			},
                    			pointsCompare: function(p1, p2){
                    				// returns -1 if p1 is smaller, 1 if p2 is smaller, 0 if equal
                    				if (my.pointsSameX(p1, p2))
                    					return my.pointsSameY(p1, p2) ? 0 : (p1[1] < p2[1] ? -1 : 1);
                    				return p1[0] < p2[0] ? -1 : 1;
                    			},
                    			pointsCollinear: function(pt1, pt2, pt3){
                    				// does pt1->pt2->pt3 make a straight line?
                    				// essentially this is just checking to see if the slope(pt1->pt2) === slope(pt2->pt3)
                    				// if slopes are equal, then they must be collinear, because they share pt2
                    				var dx1 = pt1[0] - pt2[0];
                    				var dy1 = pt1[1] - pt2[1];
                    				var dx2 = pt2[0] - pt3[0];
                    				var dy2 = pt2[1] - pt3[1];
                    				return Math.abs(dx1 * dy2 - dx2 * dy1) < eps;
                    			},
                    			linesIntersect: function(a0, a1, b0, b1){
                    				// returns false if the lines are coincident (e.g., parallel or on top of each other)
                    				//
                    				// returns an object if the lines intersect:
                    				//   {
                    				//     pt: [x, y],    where the intersection point is at
                    				//     alongA: where intersection point is along A,
                    				//     alongB: where intersection point is along B
                    				//   }
                    				//
                    				//  alongA and alongB will each be one of: -2, -1, 0, 1, 2
                    				//
                    				//  with the following meaning:
                    				//
                    				//    -2   intersection point is before segment's first point
                    				//    -1   intersection point is directly on segment's first point
                    				//     0   intersection point is between segment's first and second points (exclusive)
                    				//     1   intersection point is directly on segment's second point
                    				//     2   intersection point is after segment's second point
                    				var adx = a1[0] - a0[0];
                    				var ady = a1[1] - a0[1];
                    				var bdx = b1[0] - b0[0];
                    				var bdy = b1[1] - b0[1];
                    	
                    				var axb = adx * bdy - ady * bdx;
                    				if (Math.abs(axb) < eps)
                    					return false; // lines are coincident
                    	
                    				var dx = a0[0] - b0[0];
                    				var dy = a0[1] - b0[1];
                    	
                    				var A = (bdx * dy - bdy * dx) / axb;
                    				var B = (adx * dy - ady * dx) / axb;
                    	
                    				var ret = {
                    					alongA: 0,
                    					alongB: 0,
                    					pt: [
                    						a0[0] + A * adx,
                    						a0[1] + A * ady
                    					]
                    				};
                    	
                    				// categorize where intersection point is along A and B
                    	
                    				if (A <= -eps)
                    					ret.alongA = -2;
                    				else if (A < eps)
                    					ret.alongA = -1;
                    				else if (A - 1 <= -eps)
                    					ret.alongA = 0;
                    				else if (A - 1 < eps)
                    					ret.alongA = 1;
                    				else
                    					ret.alongA = 2;
                    	
                    				if (B <= -eps)
                    					ret.alongB = -2;
                    				else if (B < eps)
                    					ret.alongB = -1;
                    				else if (B - 1 <= -eps)
                    					ret.alongB = 0;
                    				else if (B - 1 < eps)
                    					ret.alongB = 1;
                    				else
                    					ret.alongB = 2;
                    	
                    				return ret;
                    			},
                    			pointInsideRegion: function(pt, region){
                    				var x = pt[0];
                    				var y = pt[1];
                    				var last_x = region[region.length - 1][0];
                    				var last_y = region[region.length - 1][1];
                    				var inside = false;
                    				for (var i = 0; i < region.length; i++){
                    					var curr_x = region[i][0];
                    					var curr_y = region[i][1];
                    	
                    					// if y is between curr_y and last_y, and
                    					// x is to the right of the boundary created by the line
                    					if ((curr_y - y > eps) != (last_y - y > eps) &&
                    						(last_x - curr_x) * (y - curr_y) / (last_y - curr_y) + curr_x - x > eps)
                    						inside = !inside
                    	
                    					last_x = curr_x;
                    					last_y = curr_y;
                    				}
                    				return inside;
                    			}
                    		};
                    		return my;
                    	}
                    	
                    	module.exports = Epsilon;
                    	
                    	},{}],4:[function(require,module,exports){
                    	// (c) Copyright 2017, Sean Connelly (@voidqk), http://syntheti.cc
                    	// MIT License
                    	// Project Home: https://github.com/voidqk/polybooljs
                    	
                    	//
                    	// convert between PolyBool polygon format and GeoJSON formats (Polygon and MultiPolygon)
                    	//
                    	
                    	var GeoJSON = {
                    		// convert a GeoJSON object to a PolyBool polygon
                    		toPolygon: function(PolyBool, geojson){
                    	
                    			// converts list of LineString's to segments
                    			function GeoPoly(coords){
                    				// check for empty coords
                    				if (coords.length <= 0)
                    					return PolyBool.segments({ inverted: false, regions: [] });
                    	
                    				// convert LineString to segments
                    				function LineString(ls){
                    					// remove tail which should be the same as head
                    					var reg = ls.slice(0, ls.length - 1);
                    					return PolyBool.segments({ inverted: false, regions: [reg] });
                    				}
                    	
                    				// the first LineString is considered the outside
                    				var out = LineString(coords[0]);
                    	
                    				// the rest of the LineStrings are considered interior holes, so subtract them from the
                    				// current result
                    				for (var i = 1; i < coords.length; i++)
                    					out = PolyBool.selectDifference(PolyBool.combine(out, LineString(coords[i])));
                    	
                    				return out;
                    			}
                    	
                    			if (geojson.type === 'Polygon'){
                    				// single polygon, so just convert it and we're done
                    				return PolyBool.polygon(GeoPoly(geojson.coordinates));
                    			}
                    			else if (geojson.type === 'MultiPolygon'){
                    				// multiple polygons, so union all the polygons together
                    				var out = PolyBool.segments({ inverted: false, regions: [] });
                    				for (var i = 0; i < geojson.coordinates.length; i++)
                    					out = PolyBool.selectUnion(PolyBool.combine(out, GeoPoly(geojson.coordinates[i])));
                    				return PolyBool.polygon(out);
                    			}
                    			throw new Error('PolyBool: Cannot convert GeoJSON object to PolyBool polygon');
                    		},
                    	
                    		// convert a PolyBool polygon to a GeoJSON object
                    		fromPolygon: function(PolyBool, eps, poly){
                    			// make sure out polygon is clean
                    			poly = PolyBool.polygon(PolyBool.segments(poly));
                    	
                    			// test if r1 is inside r2
                    			function regionInsideRegion(r1, r2){
                    				// we're guaranteed no lines intersect (because the polygon is clean), but a vertex
                    				// could be on the edge -- so we just average pt[0] and pt[1] to produce a point on the
                    				// edge of the first line, which cannot be on an edge
                    				return eps.pointInsideRegion([
                    					(r1[0][0] + r1[1][0]) * 0.5,
                    					(r1[0][1] + r1[1][1]) * 0.5
                    				], r2);
                    			}
                    	
                    			// calculate inside heirarchy
                    			//
                    			//  _____________________   _______    roots -> A       -> F
                    			// |          A          | |   F   |            |          |
                    			// |  _______   _______  | |  ___  |            +-- B      +-- G
                    			// | |   B   | |   C   | | | |   | |            |   |
                    			// | |  ___  | |  ___  | | | |   | |            |   +-- D
                    			// | | | D | | | | E | | | | | G | |            |
                    			// | | |___| | | |___| | | | |   | |            +-- C
                    			// | |_______| |_______| | | |___| |                |
                    			// |_____________________| |_______|                +-- E
                    	
                    			function newNode(region){
                    				return {
                    					region: region,
                    					children: []
                    				};
                    			}
                    	
                    			var roots = newNode(null);
                    	
                    			function addChild(root, region){
                    				// first check if we're inside any children
                    				for (var i = 0; i < root.children.length; i++){
                    					var child = root.children[i];
                    					if (regionInsideRegion(region, child.region)){
                    						// we are, so insert inside them instead
                    						addChild(child, region);
                    						return;
                    					}
                    				}
                    	
                    				// not inside any children, so check to see if any children are inside us
                    				var node = newNode(region);
                    				for (var i = 0; i < root.children.length; i++){
                    					var child = root.children[i];
                    					if (regionInsideRegion(child.region, region)){
                    						// oops... move the child beneath us, and remove them from root
                    						node.children.push(child);
                    						root.children.splice(i, 1);
                    						i--;
                    					}
                    				}
                    	
                    				// now we can add ourselves
                    				root.children.push(node);
                    			}
                    	
                    			// add all regions to the root
                    			for (var i = 0; i < poly.regions.length; i++){
                    				var region = poly.regions[i];
                    				if (region.length < 3) // regions must have at least 3 points (sanity check)
                    					continue;
                    				addChild(roots, region);
                    			}
                    	
                    			// with our heirarchy, we can distinguish between exterior borders, and interior holes
                    			// the root nodes are exterior, children are interior, children's children are exterior,
                    			// children's children's children are interior, etc
                    	
                    			// while we're at it, exteriors are counter-clockwise, and interiors are clockwise
                    	
                    			function forceWinding(region, clockwise){
                    				// first, see if we're clockwise or counter-clockwise
                    				// https://en.wikipedia.org/wiki/Shoelace_formula
                    				var winding = 0;
                    				var last_x = region[region.length - 1][0];
                    				var last_y = region[region.length - 1][1];
                    				var copy = [];
                    				for (var i = 0; i < region.length; i++){
                    					var curr_x = region[i][0];
                    					var curr_y = region[i][1];
                    					copy.push([curr_x, curr_y]); // create a copy while we're at it
                    					winding += curr_y * last_x - curr_x * last_y;
                    					last_x = curr_x;
                    					last_y = curr_y;
                    				}
                    				// this assumes Cartesian coordinates (Y is positive going up)
                    				var isclockwise = winding < 0;
                    				if (isclockwise !== clockwise)
                    					copy.reverse();
                    				// while we're here, the last point must be the first point...
                    				copy.push([copy[0][0], copy[0][1]]);
                    				return copy;
                    			}
                    	
                    			var geopolys = [];
                    	
                    			function addExterior(node){
                    				var poly = [forceWinding(node.region, false)];
                    				geopolys.push(poly);
                    				// children of exteriors are interior
                    				for (var i = 0; i < node.children.length; i++)
                    					poly.push(getInterior(node.children[i]));
                    			}
                    	
                    			function getInterior(node){
                    				// children of interiors are exterior
                    				for (var i = 0; i < node.children.length; i++)
                    					addExterior(node.children[i]);
                    				// return the clockwise interior
                    				return forceWinding(node.region, true);
                    			}
                    	
                    			// root nodes are exterior
                    			for (var i = 0; i < roots.children.length; i++)
                    				addExterior(roots.children[i]);
                    	
                    			// lastly, construct the approrpriate GeoJSON object
                    	
                    			if (geopolys.length <= 0) // empty GeoJSON Polygon
                    				return { type: 'Polygon', coordinates: [] };
                    			if (geopolys.length == 1) // use a GeoJSON Polygon
                    				return { type: 'Polygon', coordinates: geopolys[0] };
                    			return { // otherwise, use a GeoJSON MultiPolygon
                    				type: 'MultiPolygon',
                    				coordinates: geopolys
                    			};
                    		}
                    	};
                    	
                    	module.exports = GeoJSON;
                    	
                    	},{}],5:[function(require,module,exports){
                    	// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
                    	// MIT License
                    	// Project Home: https://github.com/voidqk/polybooljs
                    	
                    	//
                    	// this is the core work-horse
                    	//
                    	
                    	var LinkedList = require('./linked-list');
                    	
                    	function Intersecter(selfIntersection, eps, buildLog){
                    		// selfIntersection is true/false depending on the phase of the overall algorithm
                    	
                    		//
                    		// segment creation
                    		//
                    	
                    		function segmentNew(start, end){
                    			return {
                    				id: buildLog ? buildLog.segmentId() : -1,
                    				start: start,
                    				end: end,
                    				myFill: {
                    					above: null, // is there fill above us?
                    					below: null  // is there fill below us?
                    				},
                    				otherFill: null
                    			};
                    		}
                    	
                    		function segmentCopy(start, end, seg){
                    			return {
                    				id: buildLog ? buildLog.segmentId() : -1,
                    				start: start,
                    				end: end,
                    				myFill: {
                    					above: seg.myFill.above,
                    					below: seg.myFill.below
                    				},
                    				otherFill: null
                    			};
                    		}
                    	
                    		//
                    		// event logic
                    		//
                    	
                    		var event_root = LinkedList.create();
                    	
                    		function eventCompare(p1_isStart, p1_1, p1_2, p2_isStart, p2_1, p2_2){
                    			// compare the selected points first
                    			var comp = eps.pointsCompare(p1_1, p2_1);
                    			if (comp !== 0)
                    				return comp;
                    			// the selected points are the same
                    	
                    			if (eps.pointsSame(p1_2, p2_2)) // if the non-selected points are the same too...
                    				return 0; // then the segments are equal
                    	
                    			if (p1_isStart !== p2_isStart) // if one is a start and the other isn't...
                    				return p1_isStart ? 1 : -1; // favor the one that isn't the start
                    	
                    			// otherwise, we'll have to calculate which one is below the other manually
                    			return eps.pointAboveOrOnLine(p1_2,
                    				p2_isStart ? p2_1 : p2_2, // order matters
                    				p2_isStart ? p2_2 : p2_1
                    			) ? 1 : -1;
                    		}
                    	
                    		function eventAdd(ev, other_pt){
                    			event_root.insertBefore(ev, function(here){
                    				// should ev be inserted before here?
                    				var comp = eventCompare(
                    					ev  .isStart, ev  .pt,      other_pt,
                    					here.isStart, here.pt, here.other.pt
                    				);
                    				return comp < 0;
                    			});
                    		}
                    	
                    		function eventAddSegmentStart(seg, primary){
                    			var ev_start = LinkedList.node({
                    				isStart: true,
                    				pt: seg.start,
                    				seg: seg,
                    				primary: primary,
                    				other: null,
                    				status: null
                    			});
                    			eventAdd(ev_start, seg.end);
                    			return ev_start;
                    		}
                    	
                    		function eventAddSegmentEnd(ev_start, seg, primary){
                    			var ev_end = LinkedList.node({
                    				isStart: false,
                    				pt: seg.end,
                    				seg: seg,
                    				primary: primary,
                    				other: ev_start,
                    				status: null
                    			});
                    			ev_start.other = ev_end;
                    			eventAdd(ev_end, ev_start.pt);
                    		}
                    	
                    		function eventAddSegment(seg, primary){
                    			var ev_start = eventAddSegmentStart(seg, primary);
                    			eventAddSegmentEnd(ev_start, seg, primary);
                    			return ev_start;
                    		}
                    	
                    		function eventUpdateEnd(ev, end){
                    			// slides an end backwards
                    			//   (start)------------(end)    to:
                    			//   (start)---(end)
                    	
                    			if (buildLog)
                    				buildLog.segmentChop(ev.seg, end);
                    	
                    			ev.other.remove();
                    			ev.seg.end = end;
                    			ev.other.pt = end;
                    			eventAdd(ev.other, ev.pt);
                    		}
                    	
                    		function eventDivide(ev, pt){
                    			var ns = segmentCopy(pt, ev.seg.end, ev.seg);
                    			eventUpdateEnd(ev, pt);
                    			return eventAddSegment(ns, ev.primary);
                    		}
                    	
                    		function calculate(primaryPolyInverted, secondaryPolyInverted){
                    			// if selfIntersection is true then there is no secondary polygon, so that isn't used
                    	
                    			//
                    			// status logic
                    			//
                    	
                    			var status_root = LinkedList.create();
                    	
                    			function statusCompare(ev1, ev2){
                    				var a1 = ev1.seg.start;
                    				var a2 = ev1.seg.end;
                    				var b1 = ev2.seg.start;
                    				var b2 = ev2.seg.end;
                    	
                    				if (eps.pointsCollinear(a1, b1, b2)){
                    					if (eps.pointsCollinear(a2, b1, b2))
                    						return 1;//eventCompare(true, a1, a2, true, b1, b2);
                    					return eps.pointAboveOrOnLine(a2, b1, b2) ? 1 : -1;
                    				}
                    				return eps.pointAboveOrOnLine(a1, b1, b2) ? 1 : -1;
                    			}
                    	
                    			function statusFindSurrounding(ev){
                    				return status_root.findTransition(function(here){
                    					var comp = statusCompare(ev, here.ev);
                    					return comp > 0;
                    				});
                    			}
                    	
                    			function checkIntersection(ev1, ev2){
                    				// returns the segment equal to ev1, or false if nothing equal
                    	
                    				var seg1 = ev1.seg;
                    				var seg2 = ev2.seg;
                    				var a1 = seg1.start;
                    				var a2 = seg1.end;
                    				var b1 = seg2.start;
                    				var b2 = seg2.end;
                    	
                    				if (buildLog)
                    					buildLog.checkIntersection(seg1, seg2);
                    	
                    				var i = eps.linesIntersect(a1, a2, b1, b2);
                    	
                    				if (i === false){
                    					// segments are parallel or coincident
                    	
                    					// if points aren't collinear, then the segments are parallel, so no intersections
                    					if (!eps.pointsCollinear(a1, a2, b1))
                    						return false;
                    					// otherwise, segments are on top of each other somehow (aka coincident)
                    	
                    					if (eps.pointsSame(a1, b2) || eps.pointsSame(a2, b1))
                    						return false; // segments touch at endpoints... no intersection
                    	
                    					var a1_equ_b1 = eps.pointsSame(a1, b1);
                    					var a2_equ_b2 = eps.pointsSame(a2, b2);
                    	
                    					if (a1_equ_b1 && a2_equ_b2)
                    						return ev2; // segments are exactly equal
                    	
                    					var a1_between = !a1_equ_b1 && eps.pointBetween(a1, b1, b2);
                    					var a2_between = !a2_equ_b2 && eps.pointBetween(a2, b1, b2);
                    	
                    					// handy for debugging:
                    					// buildLog.log({
                    					//	a1_equ_b1: a1_equ_b1,
                    					//	a2_equ_b2: a2_equ_b2,
                    					//	a1_between: a1_between,
                    					//	a2_between: a2_between
                    					// });
                    	
                    					if (a1_equ_b1){
                    						if (a2_between){
                    							//  (a1)---(a2)
                    							//  (b1)----------(b2)
                    							eventDivide(ev2, a2);
                    						}
                    						else{
                    							//  (a1)----------(a2)
                    							//  (b1)---(b2)
                    							eventDivide(ev1, b2);
                    						}
                    						return ev2;
                    					}
                    					else if (a1_between){
                    						if (!a2_equ_b2){
                    							// make a2 equal to b2
                    							if (a2_between){
                    								//         (a1)---(a2)
                    								//  (b1)-----------------(b2)
                    								eventDivide(ev2, a2);
                    							}
                    							else{
                    								//         (a1)----------(a2)
                    								//  (b1)----------(b2)
                    								eventDivide(ev1, b2);
                    							}
                    						}
                    	
                    						//         (a1)---(a2)
                    						//  (b1)----------(b2)
                    						eventDivide(ev2, a1);
                    					}
                    				}
                    				else{
                    					// otherwise, lines intersect at i.pt, which may or may not be between the endpoints
                    	
                    					// is A divided between its endpoints? (exclusive)
                    					if (i.alongA === 0){
                    						if (i.alongB === -1) // yes, at exactly b1
                    							eventDivide(ev1, b1);
                    						else if (i.alongB === 0) // yes, somewhere between B's endpoints
                    							eventDivide(ev1, i.pt);
                    						else if (i.alongB === 1) // yes, at exactly b2
                    							eventDivide(ev1, b2);
                    					}
                    	
                    					// is B divided between its endpoints? (exclusive)
                    					if (i.alongB === 0){
                    						if (i.alongA === -1) // yes, at exactly a1
                    							eventDivide(ev2, a1);
                    						else if (i.alongA === 0) // yes, somewhere between A's endpoints (exclusive)
                    							eventDivide(ev2, i.pt);
                    						else if (i.alongA === 1) // yes, at exactly a2
                    							eventDivide(ev2, a2);
                    					}
                    				}
                    				return false;
                    			}
                    	
                    			//
                    			// main event loop
                    			//
                    			var segments = [];
                    			while (!event_root.isEmpty()){
                    				var ev = event_root.getHead();
                    	
                    				if (buildLog)
                    					buildLog.vert(ev.pt[0]);
                    	
                    				if (ev.isStart){
                    	
                    					if (buildLog)
                    						buildLog.segmentNew(ev.seg, ev.primary);
                    	
                    					var surrounding = statusFindSurrounding(ev);
                    					var above = surrounding.before ? surrounding.before.ev : null;
                    					var below = surrounding.after ? surrounding.after.ev : null;
                    	
                    					if (buildLog){
                    						buildLog.tempStatus(
                    							ev.seg,
                    							above ? above.seg : false,
                    							below ? below.seg : false
                    						);
                    					}
                    	
                    					function checkBothIntersections(){
                    						if (above){
                    							var eve = checkIntersection(ev, above);
                    							if (eve)
                    								return eve;
                    						}
                    						if (below)
                    							return checkIntersection(ev, below);
                    						return false;
                    					}
                    	
                    					var eve = checkBothIntersections();
                    					if (eve){
                    						// ev and eve are equal
                    						// we'll keep eve and throw away ev
                    	
                    						// merge ev.seg's fill information into eve.seg
                    	
                    						if (selfIntersection){
                    							var toggle; // are we a toggling edge?
                    							if (ev.seg.myFill.below === null)
                    								toggle = true;
                    							else
                    								toggle = ev.seg.myFill.above !== ev.seg.myFill.below;
                    	
                    							// merge two segments that belong to the same polygon
                    							// think of this as sandwiching two segments together, where `eve.seg` is
                    							// the bottom -- this will cause the above fill flag to toggle
                    							if (toggle)
                    								eve.seg.myFill.above = !eve.seg.myFill.above;
                    						}
                    						else{
                    							// merge two segments that belong to different polygons
                    							// each segment has distinct knowledge, so no special logic is needed
                    							// note that this can only happen once per segment in this phase, because we
                    							// are guaranteed that all self-intersections are gone
                    							eve.seg.otherFill = ev.seg.myFill;
                    						}
                    	
                    						if (buildLog)
                    							buildLog.segmentUpdate(eve.seg);
                    	
                    						ev.other.remove();
                    						ev.remove();
                    					}
                    	
                    					if (event_root.getHead() !== ev){
                    						// something was inserted before us in the event queue, so loop back around and
                    						// process it before continuing
                    						if (buildLog)
                    							buildLog.rewind(ev.seg);
                    						continue;
                    					}
                    	
                    					//
                    					// calculate fill flags
                    					//
                    					if (selfIntersection){
                    						var toggle; // are we a toggling edge?
                    						if (ev.seg.myFill.below === null) // if we are a new segment...
                    							toggle = true; // then we toggle
                    						else // we are a segment that has previous knowledge from a division
                    							toggle = ev.seg.myFill.above !== ev.seg.myFill.below; // calculate toggle
                    	
                    						// next, calculate whether we are filled below us
                    						if (!below){ // if nothing is below us...
                    							// we are filled below us if the polygon is inverted
                    							ev.seg.myFill.below = primaryPolyInverted;
                    						}
                    						else{
                    							// otherwise, we know the answer -- it's the same if whatever is below
                    							// us is filled above it
                    							ev.seg.myFill.below = below.seg.myFill.above;
                    						}
                    	
                    						// since now we know if we're filled below us, we can calculate whether
                    						// we're filled above us by applying toggle to whatever is below us
                    						if (toggle)
                    							ev.seg.myFill.above = !ev.seg.myFill.below;
                    						else
                    							ev.seg.myFill.above = ev.seg.myFill.below;
                    					}
                    					else{
                    						// now we fill in any missing transition information, since we are all-knowing
                    						// at this point
                    	
                    						if (ev.seg.otherFill === null){
                    							// if we don't have other information, then we need to figure out if we're
                    							// inside the other polygon
                    							var inside;
                    							if (!below){
                    								// if nothing is below us, then we're inside if the other polygon is
                    								// inverted
                    								inside =
                    									ev.primary ? secondaryPolyInverted : primaryPolyInverted;
                    							}
                    							else{ // otherwise, something is below us
                    								// so copy the below segment's other polygon's above
                    								if (ev.primary === below.primary)
                    									inside = below.seg.otherFill.above;
                    								else
                    									inside = below.seg.myFill.above;
                    							}
                    							ev.seg.otherFill = {
                    								above: inside,
                    								below: inside
                    							};
                    						}
                    					}
                    	
                    					if (buildLog){
                    						buildLog.status(
                    							ev.seg,
                    							above ? above.seg : false,
                    							below ? below.seg : false
                    						);
                    					}
                    	
                    					// insert the status and remember it for later removal
                    					ev.other.status = surrounding.insert(LinkedList.node({ ev: ev }));
                    				}
                    				else{
                    					var st = ev.status;
                    	
                    					if (st === null){
                    						throw new Error('PolyBool: Zero-length segment detected; your epsilon is ' +
                    							'probably too small or too large');
                    					}
                    	
                    					// removing the status will create two new adjacent edges, so we'll need to check
                    					// for those
                    					if (status_root.exists(st.prev) && status_root.exists(st.next))
                    						checkIntersection(st.prev.ev, st.next.ev);
                    	
                    					if (buildLog)
                    						buildLog.statusRemove(st.ev.seg);
                    	
                    					// remove the status
                    					st.remove();
                    	
                    					// if we've reached this point, we've calculated everything there is to know, so
                    					// save the segment for reporting
                    					if (!ev.primary){
                    						// make sure `seg.myFill` actually points to the primary polygon though
                    						var s = ev.seg.myFill;
                    						ev.seg.myFill = ev.seg.otherFill;
                    						ev.seg.otherFill = s;
                    					}
                    					segments.push(ev.seg);
                    				}
                    	
                    				// remove the event and continue
                    				event_root.getHead().remove();
                    			}
                    	
                    			if (buildLog)
                    				buildLog.done();
                    	
                    			return segments;
                    		}
                    	
                    		// return the appropriate API depending on what we're doing
                    		if (!selfIntersection){
                    			// performing combination of polygons, so only deal with already-processed segments
                    			return {
                    				calculate: function(segments1, inverted1, segments2, inverted2){
                    					// segmentsX come from the self-intersection API, or this API
                    					// invertedX is whether we treat that list of segments as an inverted polygon or not
                    					// returns segments that can be used for further operations
                    					segments1.forEach(function(seg){
                    						eventAddSegment(segmentCopy(seg.start, seg.end, seg), true);
                    					});
                    					segments2.forEach(function(seg){
                    						eventAddSegment(segmentCopy(seg.start, seg.end, seg), false);
                    					});
                    					return calculate(inverted1, inverted2);
                    				}
                    			};
                    		}
                    	
                    		// otherwise, performing self-intersection, so deal with regions
                    		return {
                    			addRegion: function(region){
                    				// regions are a list of points:
                    				//  [ [0, 0], [100, 0], [50, 100] ]
                    				// you can add multiple regions before running calculate
                    				var pt1;
                    				var pt2 = region[region.length - 1];
                    				for (var i = 0; i < region.length; i++){
                    					pt1 = pt2;
                    					pt2 = region[i];
                    	
                    					var forward = eps.pointsCompare(pt1, pt2);
                    					if (forward === 0) // points are equal, so we have a zero-length segment
                    						continue; // just skip it
                    	
                    					eventAddSegment(
                    						segmentNew(
                    							forward < 0 ? pt1 : pt2,
                    							forward < 0 ? pt2 : pt1
                    						),
                    						true
                    					);
                    				}
                    			},
                    			calculate: function(inverted){
                    				// is the polygon inverted?
                    				// returns segments
                    				return calculate(inverted, false);
                    			}
                    		};
                    	}
                    	
                    	module.exports = Intersecter;
                    	
                    	},{"./linked-list":6}],6:[function(require,module,exports){
                    	// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
                    	// MIT License
                    	// Project Home: https://github.com/voidqk/polybooljs
                    	
                    	//
                    	// simple linked list implementation that allows you to traverse down nodes and save positions
                    	//
                    	
                    	var LinkedList = {
                    		create: function(){
                    			var my = {
                    				root: { root: true, next: null },
                    				exists: function(node){
                    					if (node === null || node === my.root)
                    						return false;
                    					return true;
                    				},
                    				isEmpty: function(){
                    					return my.root.next === null;
                    				},
                    				getHead: function(){
                    					return my.root.next;
                    				},
                    				insertBefore: function(node, check){
                    					var last = my.root;
                    					var here = my.root.next;
                    					while (here !== null){
                    						if (check(here)){
                    							node.prev = here.prev;
                    							node.next = here;
                    							here.prev.next = node;
                    							here.prev = node;
                    							return;
                    						}
                    						last = here;
                    						here = here.next;
                    					}
                    					last.next = node;
                    					node.prev = last;
                    					node.next = null;
                    				},
                    				findTransition: function(check){
                    					var prev = my.root;
                    					var here = my.root.next;
                    					while (here !== null){
                    						if (check(here))
                    							break;
                    						prev = here;
                    						here = here.next;
                    					}
                    					return {
                    						before: prev === my.root ? null : prev,
                    						after: here,
                    						insert: function(node){
                    							node.prev = prev;
                    							node.next = here;
                    							prev.next = node;
                    							if (here !== null)
                    								here.prev = node;
                    							return node;
                    						}
                    					};
                    				}
                    			};
                    			return my;
                    		},
                    		node: function(data){
                    			data.prev = null;
                    			data.next = null;
                    			data.remove = function(){
                    				data.prev.next = data.next;
                    				if (data.next)
                    					data.next.prev = data.prev;
                    				data.prev = null;
                    				data.next = null;
                    			};
                    			return data;
                    		}
                    	};
                    	
                    	module.exports = LinkedList;
                    	
                    	},{}],7:[function(require,module,exports){
                    	// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
                    	// MIT License
                    	// Project Home: https://github.com/voidqk/polybooljs
                    	
                    	//
                    	// converts a list of segments into a list of regions, while also removing unnecessary verticies
                    	//
                    	
                    	function SegmentChainer(segments, eps, buildLog){
                    		var chains = [];
                    		var regions = [];
                    	
                    		segments.forEach(function(seg){
                    			var pt1 = seg.start;
                    			var pt2 = seg.end;
                    			if (eps.pointsSame(pt1, pt2)){
                    				console.warn('PolyBool: Warning: Zero-length segment detected; your epsilon is ' +
                    					'probably too small or too large');
                    				return;
                    			}
                    	
                    			if (buildLog)
                    				buildLog.chainStart(seg);
                    	
                    			// search for two chains that this segment matches
                    			var first_match = {
                    				index: 0,
                    				matches_head: false,
                    				matches_pt1: false
                    			};
                    			var second_match = {
                    				index: 0,
                    				matches_head: false,
                    				matches_pt1: false
                    			};
                    			var next_match = first_match;
                    			function setMatch(index, matches_head, matches_pt1){
                    				// return true if we've matched twice
                    				next_match.index = index;
                    				next_match.matches_head = matches_head;
                    				next_match.matches_pt1 = matches_pt1;
                    				if (next_match === first_match){
                    					next_match = second_match;
                    					return false;
                    				}
                    				next_match = null;
                    				return true; // we've matched twice, we're done here
                    			}
                    			for (var i = 0; i < chains.length; i++){
                    				var chain = chains[i];
                    				var head  = chain[0];
                    				var head2 = chain[1];
                    				var tail  = chain[chain.length - 1];
                    				var tail2 = chain[chain.length - 2];
                    				if (eps.pointsSame(head, pt1)){
                    					if (setMatch(i, true, true))
                    						break;
                    				}
                    				else if (eps.pointsSame(head, pt2)){
                    					if (setMatch(i, true, false))
                    						break;
                    				}
                    				else if (eps.pointsSame(tail, pt1)){
                    					if (setMatch(i, false, true))
                    						break;
                    				}
                    				else if (eps.pointsSame(tail, pt2)){
                    					if (setMatch(i, false, false))
                    						break;
                    				}
                    			}
                    	
                    			if (next_match === first_match){
                    				// we didn't match anything, so create a new chain
                    				chains.push([ pt1, pt2 ]);
                    				if (buildLog)
                    					buildLog.chainNew(pt1, pt2);
                    				return;
                    			}
                    	
                    			if (next_match === second_match){
                    				// we matched a single chain
                    	
                    				if (buildLog)
                    					buildLog.chainMatch(first_match.index);
                    	
                    				// add the other point to the apporpriate end, and check to see if we've closed the
                    				// chain into a loop
                    	
                    				var index = first_match.index;
                    				var pt = first_match.matches_pt1 ? pt2 : pt1; // if we matched pt1, then we add pt2, etc
                    				var addToHead = first_match.matches_head; // if we matched at head, then add to the head
                    	
                    				var chain = chains[index];
                    				var grow  = addToHead ? chain[0] : chain[chain.length - 1];
                    				var grow2 = addToHead ? chain[1] : chain[chain.length - 2];
                    				var oppo  = addToHead ? chain[chain.length - 1] : chain[0];
                    				var oppo2 = addToHead ? chain[chain.length - 2] : chain[1];
                    	
                    				if (eps.pointsCollinear(grow2, grow, pt)){
                    					// grow isn't needed because it's directly between grow2 and pt:
                    					// grow2 ---grow---> pt
                    					if (addToHead){
                    						if (buildLog)
                    							buildLog.chainRemoveHead(first_match.index, pt);
                    						chain.shift();
                    					}
                    					else{
                    						if (buildLog)
                    							buildLog.chainRemoveTail(first_match.index, pt);
                    						chain.pop();
                    					}
                    					grow = grow2; // old grow is gone... new grow is what grow2 was
                    				}
                    	
                    				if (eps.pointsSame(oppo, pt)){
                    					// we're closing the loop, so remove chain from chains
                    					chains.splice(index, 1);
                    	
                    					if (eps.pointsCollinear(oppo2, oppo, grow)){
                    						// oppo isn't needed because it's directly between oppo2 and grow:
                    						// oppo2 ---oppo--->grow
                    						if (addToHead){
                    							if (buildLog)
                    								buildLog.chainRemoveTail(first_match.index, grow);
                    							chain.pop();
                    						}
                    						else{
                    							if (buildLog)
                    								buildLog.chainRemoveHead(first_match.index, grow);
                    							chain.shift();
                    						}
                    					}
                    	
                    					if (buildLog)
                    						buildLog.chainClose(first_match.index);
                    	
                    					// we have a closed chain!
                    					regions.push(chain);
                    					return;
                    				}
                    	
                    				// not closing a loop, so just add it to the apporpriate side
                    				if (addToHead){
                    					if (buildLog)
                    						buildLog.chainAddHead(first_match.index, pt);
                    					chain.unshift(pt);
                    				}
                    				else{
                    					if (buildLog)
                    						buildLog.chainAddTail(first_match.index, pt);
                    					chain.push(pt);
                    				}
                    				return;
                    			}
                    	
                    			// otherwise, we matched two chains, so we need to combine those chains together
                    	
                    			function reverseChain(index){
                    				if (buildLog)
                    					buildLog.chainReverse(index);
                    				chains[index].reverse(); // gee, that's easy
                    			}
                    	
                    			function appendChain(index1, index2){
                    				// index1 gets index2 appended to it, and index2 is removed
                    				var chain1 = chains[index1];
                    				var chain2 = chains[index2];
                    				var tail  = chain1[chain1.length - 1];
                    				var tail2 = chain1[chain1.length - 2];
                    				var head  = chain2[0];
                    				var head2 = chain2[1];
                    	
                    				if (eps.pointsCollinear(tail2, tail, head)){
                    					// tail isn't needed because it's directly between tail2 and head
                    					// tail2 ---tail---> head
                    					if (buildLog)
                    						buildLog.chainRemoveTail(index1, tail);
                    					chain1.pop();
                    					tail = tail2; // old tail is gone... new tail is what tail2 was
                    				}
                    	
                    				if (eps.pointsCollinear(tail, head, head2)){
                    					// head isn't needed because it's directly between tail and head2
                    					// tail ---head---> head2
                    					if (buildLog)
                    						buildLog.chainRemoveHead(index2, head);
                    					chain2.shift();
                    				}
                    	
                    				if (buildLog)
                    					buildLog.chainJoin(index1, index2);
                    				chains[index1] = chain1.concat(chain2);
                    				chains.splice(index2, 1);
                    			}
                    	
                    			var F = first_match.index;
                    			var S = second_match.index;
                    	
                    			if (buildLog)
                    				buildLog.chainConnect(F, S);
                    	
                    			var reverseF = chains[F].length < chains[S].length; // reverse the shorter chain, if needed
                    			if (first_match.matches_head){
                    				if (second_match.matches_head){
                    					if (reverseF){
                    						// <<<< F <<<< --- >>>> S >>>>
                    						reverseChain(F);
                    						// >>>> F >>>> --- >>>> S >>>>
                    						appendChain(F, S);
                    					}
                    					else{
                    						// <<<< F <<<< --- >>>> S >>>>
                    						reverseChain(S);
                    						// <<<< F <<<< --- <<<< S <<<<   logically same as:
                    						// >>>> S >>>> --- >>>> F >>>>
                    						appendChain(S, F);
                    					}
                    				}
                    				else{
                    					// <<<< F <<<< --- <<<< S <<<<   logically same as:
                    					// >>>> S >>>> --- >>>> F >>>>
                    					appendChain(S, F);
                    				}
                    			}
                    			else{
                    				if (second_match.matches_head){
                    					// >>>> F >>>> --- >>>> S >>>>
                    					appendChain(F, S);
                    				}
                    				else{
                    					if (reverseF){
                    						// >>>> F >>>> --- <<<< S <<<<
                    						reverseChain(F);
                    						// <<<< F <<<< --- <<<< S <<<<   logically same as:
                    						// >>>> S >>>> --- >>>> F >>>>
                    						appendChain(S, F);
                    					}
                    					else{
                    						// >>>> F >>>> --- <<<< S <<<<
                    						reverseChain(S);
                    						// >>>> F >>>> --- >>>> S >>>>
                    						appendChain(F, S);
                    					}
                    				}
                    			}
                    		});
                    	
                    		return regions;
                    	}
                    	
                    	module.exports = SegmentChainer;
                    	
                    	},{}],8:[function(require,module,exports){
                    	// (c) Copyright 2016, Sean Connelly (@voidqk), http://syntheti.cc
                    	// MIT License
                    	// Project Home: https://github.com/voidqk/polybooljs
                    	
                    	//
                    	// filter a list of segments based on boolean operations
                    	//
                    	
                    	function select(segments, selection, buildLog){
                    		var result = [];
                    		segments.forEach(function(seg){
                    			var index =
                    				(seg.myFill.above ? 8 : 0) +
                    				(seg.myFill.below ? 4 : 0) +
                    				((seg.otherFill && seg.otherFill.above) ? 2 : 0) +
                    				((seg.otherFill && seg.otherFill.below) ? 1 : 0);
                    			if (selection[index] !== 0){
                    				// copy the segment to the results, while also calculating the fill status
                    				result.push({
                    					id: buildLog ? buildLog.segmentId() : -1,
                    					start: seg.start,
                    					end: seg.end,
                    					myFill: {
                    						above: selection[index] === 1, // 1 if filled above
                    						below: selection[index] === 2  // 2 if filled below
                    					},
                    					otherFill: null
                    				});
                    			}
                    		});
                    	
                    		if (buildLog)
                    			buildLog.selected(result);
                    	
                    		return result;
                    	}
                    	
                    	var SegmentSelector = {
                    		union: function(segments, buildLog){ // primary | secondary
                    			// above1 below1 above2 below2    Keep?               Value
                    			//    0      0      0      0   =>   no                  0
                    			//    0      0      0      1   =>   yes filled below    2
                    			//    0      0      1      0   =>   yes filled above    1
                    			//    0      0      1      1   =>   no                  0
                    			//    0      1      0      0   =>   yes filled below    2
                    			//    0      1      0      1   =>   yes filled below    2
                    			//    0      1      1      0   =>   no                  0
                    			//    0      1      1      1   =>   no                  0
                    			//    1      0      0      0   =>   yes filled above    1
                    			//    1      0      0      1   =>   no                  0
                    			//    1      0      1      0   =>   yes filled above    1
                    			//    1      0      1      1   =>   no                  0
                    			//    1      1      0      0   =>   no                  0
                    			//    1      1      0      1   =>   no                  0
                    			//    1      1      1      0   =>   no                  0
                    			//    1      1      1      1   =>   no                  0
                    			return select(segments, [
                    				0, 2, 1, 0,
                    				2, 2, 0, 0,
                    				1, 0, 1, 0,
                    				0, 0, 0, 0
                    			], buildLog);
                    		},
                    		intersect: function(segments, buildLog){ // primary & secondary
                    			// above1 below1 above2 below2    Keep?               Value
                    			//    0      0      0      0   =>   no                  0
                    			//    0      0      0      1   =>   no                  0
                    			//    0      0      1      0   =>   no                  0
                    			//    0      0      1      1   =>   no                  0
                    			//    0      1      0      0   =>   no                  0
                    			//    0      1      0      1   =>   yes filled below    2
                    			//    0      1      1      0   =>   no                  0
                    			//    0      1      1      1   =>   yes filled below    2
                    			//    1      0      0      0   =>   no                  0
                    			//    1      0      0      1   =>   no                  0
                    			//    1      0      1      0   =>   yes filled above    1
                    			//    1      0      1      1   =>   yes filled above    1
                    			//    1      1      0      0   =>   no                  0
                    			//    1      1      0      1   =>   yes filled below    2
                    			//    1      1      1      0   =>   yes filled above    1
                    			//    1      1      1      1   =>   no                  0
                    			return select(segments, [
                    				0, 0, 0, 0,
                    				0, 2, 0, 2,
                    				0, 0, 1, 1,
                    				0, 2, 1, 0
                    			], buildLog);
                    		},
                    		difference: function(segments, buildLog){ // primary - secondary
                    			// above1 below1 above2 below2    Keep?               Value
                    			//    0      0      0      0   =>   no                  0
                    			//    0      0      0      1   =>   no                  0
                    			//    0      0      1      0   =>   no                  0
                    			//    0      0      1      1   =>   no                  0
                    			//    0      1      0      0   =>   yes filled below    2
                    			//    0      1      0      1   =>   no                  0
                    			//    0      1      1      0   =>   yes filled below    2
                    			//    0      1      1      1   =>   no                  0
                    			//    1      0      0      0   =>   yes filled above    1
                    			//    1      0      0      1   =>   yes filled above    1
                    			//    1      0      1      0   =>   no                  0
                    			//    1      0      1      1   =>   no                  0
                    			//    1      1      0      0   =>   no                  0
                    			//    1      1      0      1   =>   yes filled above    1
                    			//    1      1      1      0   =>   yes filled below    2
                    			//    1      1      1      1   =>   no                  0
                    			return select(segments, [
                    				0, 0, 0, 0,
                    				2, 0, 2, 0,
                    				1, 1, 0, 0,
                    				0, 1, 2, 0
                    			], buildLog);
                    		},
                    		differenceRev: function(segments, buildLog){ // secondary - primary
                    			// above1 below1 above2 below2    Keep?               Value
                    			//    0      0      0      0   =>   no                  0
                    			//    0      0      0      1   =>   yes filled below    2
                    			//    0      0      1      0   =>   yes filled above    1
                    			//    0      0      1      1   =>   no                  0
                    			//    0      1      0      0   =>   no                  0
                    			//    0      1      0      1   =>   no                  0
                    			//    0      1      1      0   =>   yes filled above    1
                    			//    0      1      1      1   =>   yes filled above    1
                    			//    1      0      0      0   =>   no                  0
                    			//    1      0      0      1   =>   yes filled below    2
                    			//    1      0      1      0   =>   no                  0
                    			//    1      0      1      1   =>   yes filled below    2
                    			//    1      1      0      0   =>   no                  0
                    			//    1      1      0      1   =>   no                  0
                    			//    1      1      1      0   =>   no                  0
                    			//    1      1      1      1   =>   no                  0
                    			return select(segments, [
                    				0, 2, 1, 0,
                    				0, 0, 1, 1,
                    				0, 2, 0, 2,
                    				0, 0, 0, 0
                    			], buildLog);
                    		},
                    		xor: function(segments, buildLog){ // primary ^ secondary
                    			// above1 below1 above2 below2    Keep?               Value
                    			//    0      0      0      0   =>   no                  0
                    			//    0      0      0      1   =>   yes filled below    2
                    			//    0      0      1      0   =>   yes filled above    1
                    			//    0      0      1      1   =>   no                  0
                    			//    0      1      0      0   =>   yes filled below    2
                    			//    0      1      0      1   =>   no                  0
                    			//    0      1      1      0   =>   no                  0
                    			//    0      1      1      1   =>   yes filled above    1
                    			//    1      0      0      0   =>   yes filled above    1
                    			//    1      0      0      1   =>   no                  0
                    			//    1      0      1      0   =>   no                  0
                    			//    1      0      1      1   =>   yes filled below    2
                    			//    1      1      0      0   =>   no                  0
                    			//    1      1      0      1   =>   yes filled above    1
                    			//    1      1      1      0   =>   yes filled below    2
                    			//    1      1      1      1   =>   no                  0
                    			return select(segments, [
                    				0, 2, 1, 0,
                    				2, 0, 0, 1,
                    				1, 0, 0, 2,
                    				0, 1, 2, 0
                    			], buildLog);
                    		}
                    	};
                    	
                    	module.exports = SegmentSelector;
                    	
                    },{}]},{},[1]);
                };
            };
            
            _canvas_.library.audio.nowReady = function(){
                _canvas_.layers.registerLayerLoaded('library',_canvas_.library);
                _canvas_.library.go.__activate();
            };

            _canvas_.core = new function(){
                this.versionInformation = { tick:0, lastDateModified:{y:2020,m:2,d:8} };
                const core_engine = new Worker("/js/core_engine.js");
                const self = this;
                
                const communicationModuleMaker = function(communicationObject,callerName){
                    const self = this;
                    const devMode = false;
                    this.log = function(){
                        if(!devMode){return;}
                        let prefix = 'communicationModule['+callerName+']';
                        console.log('%c'+prefix+(new Array(...arguments).join(' ')),'color:rgb(235, 52, 131); font-style:italic;' );
                    };
                    this.function = {};
                    this.delayedFunction = {};
                
                    let messageId = 0;
                    const messagingCallbacks = {};
                
                    function generateMessageID(){
                        return messageId++;
                    }
                
                    communicationObject.onmessage = function(encodedPacket){
                        let message = encodedPacket.data;
                
                        if(message.outgoing){
                            if(message.cargo.function in self.function){
                                if(message.cargo.arguments == undefined){message.cargo.arguments = [];}
                                if(message.id == null){
                                    self.function[message.cargo.function](...message.cargo.arguments);
                                }else{
                                    communicationObject.postMessage({
                                        id:message.id,
                                        outgoing:false,
                                        cargo:self.function[message.cargo.function](...message.cargo.arguments),
                                    });
                                }
                            }else if(message.cargo.function in self.delayedFunction){
                                if(message.cargo.arguments == undefined){message.cargo.arguments = [];}
                                if(message.id == null){
                                    self.delayedFunction[message.cargo.function](...message.cargo.arguments);
                                }else{
                                    cargo:self.delayedFunction[message.cargo.function](...[function(returnedData){
                                        communicationObject.postMessage({ id:message.id, outgoing:false, cargo:returnedData });
                                    }].concat(message.cargo.arguments));
                                }
                            }else{
                            }
                        }else{
                            messagingCallbacks[message.id](message.cargo);
                            delete messagingCallbacks[message.id];
                        }
                    };
                    this.run = function(functionName,argumentList=[],callback,transferables){
                        let id = null;
                        if(callback != undefined){
                            id = generateMessageID();
                            messagingCallbacks[id] = callback;
                        }
                        communicationObject.postMessage({ id:id, outgoing:true, cargo:{function:functionName,arguments:argumentList} },transferables);
                    };
                };
                const communicationModule = new communicationModuleMaker(core_engine,'core_console');
                this.__com = communicationModule;
                
                _canvas_.setAttribute('tabIndex',1);
                
                const dev = new function(){
                    const prefix = 'core_console';
                    const active = {
                        elementLibrary:{
                            genericElementProxyTemplate:false,
                            rectangle:false,
                            rectangleWithOutline:false,
                
                            group:false,
                            circle:false,
                            circleWithOutline:false,
                            polygon:false,
                            polygonWithOutline:false,
                            path:false,
                            image:false,
                            canvas:false,
                            character:false,
                            characterString:false,
                        },
                        service:false,
                        interface:false,
                    };
                
                    this.log = {};
                    Object.entries(active).forEach(entry => {
                        if(typeof entry[1] == 'object'){
                            this.log[entry[0]] = {};
                            Object.keys(active[entry[0]]).forEach(key => {
                                this.log[entry[0]][key] = function(){
                                    if(active[entry[0]][key]){ 
                                        console.log( prefix+'.'+entry[0]+'.'+key+arguments[0], ...(new Array(...arguments).slice(1)) );
                                    }
                                };
                            });
                        }else{
                            this.log[entry[0]] = function(){
                                if(active[entry[0]]){ 
                                    console.log( prefix+'.'+entry[0]+arguments[0], ...(new Array(...arguments).slice(1)) );
                                }
                            };
                        }
                    });
                
                    const countActive = !false;
                    const countMemory = {};
                    this.count = function(commandTag){
                        if(!countActive){return;}
                        if(commandTag in countMemory){ countMemory[commandTag]++; }
                        else{ countMemory[commandTag] = 1; }
                    };
                    this.countResults = function(){return countMemory;};
                };

                let elementRegistry = [];
                const elementLibrary = new function(){
                    const genericElementProxy = function(_type, _name){
                        const self = this;
                    
                        //type
                            const type = _type;
                            this.getType = function(){return type;};
                    
                        //id
                            let id = -1;
                            this.getId = function(){return id;};
                            this.__idReceived = function(){};
                            this.__id = function(a,updateIdOnly=false){
                                id = a;
                                if(updateIdOnly){return;}
                    
                                //repush
                                    _canvas_.core.element.__executeMethod(id,'unifiedAttribute',[cashedAttributes]);
                                    Object.entries(cashedCallbacks).forEach(entry => { _canvas_.core.callback.attachCallback(this,entry[0],entry[1]); });
                                    if(this.__repush != undefined){this.__repush();}
                    
                                if(this.__idReceived){this.__idReceived();}
                            };
                    
                        //name
                            let name = _name;
                            this.getName = function(){return name;};
                            // this.setName = function(a){
                            //     name = a;
                            // };
                    
                        //hierarchy
                            this.parent = undefined;
                            this.getAddress = function(){
                                return (this.parent != undefined && this.parent.getId() != 0 ? this.parent.getAddress() : '') + '/' + name;
                            };
                            this.getOffset = function(){
                    
                                let output = {x:0,y:0,scale:1,angle:0};
                    
                                if(this.parent){
                                    const offset = this.parent.getOffset();
                                    const point = _canvas_.library.math.cartesianAngleAdjust(cashedAttributes.x,cashedAttributes.y,offset.angle);
                                    output = { 
                                        x: point.x*offset.scale + offset.x,
                                        y: point.y*offset.scale + offset.y,
                                        scale: offset.scale * cashedAttributes.scale,
                                        angle: offset.angle + cashedAttributes.angle,
                                    };
                                }else{
                                    output = {x:cashedAttributes.x ,y:cashedAttributes.y ,scale:cashedAttributes.scale ,angle:cashedAttributes.angle};
                                }
                    
                                return output;
                            };
                    
                        //attributes
                            const cashedAttributes = {};
                            this.setupSimpleAttribute = function(name,defaultValue){
                                cashedAttributes[name] = defaultValue;
                                this[name] = function(a){
                                    if(a == undefined){ return cashedAttributes[name]; }
                                    if(a == cashedAttributes[name]){ return; } //no need to set things to what they already are
                                    cashedAttributes[name] = a;
                                    if(this.getId() != -1){ _canvas_.core.element.__executeMethod(this.getId(),name,[...arguments]); }
                                };
                            }
                            Object.entries({
                                ignored: false,
                                scale: 1,
                            }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                            this.unifiedAttribute = function(attributes){
                                if(attributes == undefined){ return cashedAttributes; }
                                Object.keys(attributes).forEach(key => { cashedAttributes[key] = attributes[key]; });
                                if(id != -1){ _canvas_.core.element.__executeMethod(id,'unifiedAttribute',[attributes]); }
                            };
                    
                        //callbacks
                            const cashedCallbacks = {};
                            this.getCallback = function(callbackType){
                                return cashedCallbacks[callbackType];
                            };
                            this.attachCallback = function(callbackType, callback){
                                cashedCallbacks[callbackType] = callback;
                                if(id != -1){ _canvas_.core.callback.attachCallback(this,callbackType,callback); }
                            }
                            this.removeCallback = function(callbackType){
                                delete cashedCallbacks[callbackType];
                                if(id != -1){ _canvas_.core.callback.removeCallback(this,callbackType); }
                            }
                    
                        //info dump
                            this._dump = function(){
                                _canvas_.core.element.__executeMethod(id,'_dump',[]);
                            };
                    };
                    
                    // this.getType
                    // this.getId
                    // this.__idReceived
                    // this.__id
                    // this.__repush
                    // this.getName
                    // this.setName
                    // this.parent
                    // this.getAddress
                    // this.getOffset
                    // this.setupSimpleAttribute
                    // this.unifiedAttribute
                    // this.getCallback
                    // this.attachCallback
                    // this.removeCallback
                    // this._dump
                    
                    this.group = function(_name){
                        genericElementProxy.call(this,'group',_name);
                    
                        Object.entries({
                            heedCamera: false,
                            x: 0,
                            y: 0,
                            angle: 0,
                            clipActive: false,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    
                    
                        const self = this;
                    
                        let children = [];
                        let childRegistry = {};
                        let stencilElement = undefined;
                    
                        let clearingLock = false;
                        function lockClearingLock(){
                            clearingLock = true;
                        }
                        function unlockClearingLock(){
                            self.__repush();
                            clearingLock = false;
                        }
                    
                        function checkForName(name){ return childRegistry[name] != undefined; }
                        function isValidElement(elementToCheck){
                            if( elementToCheck == undefined ){ return false; }
                            if( elementToCheck.getName() == undefined || elementToCheck.getName().length == 0 ){
                                console.warn('group error: element with no name being inserted into group "'+self.getAddress()+'", therefore; the element will not be added');
                                return false;
                            }
                            if( checkForName(elementToCheck.getName()) ){
                                console.warn('group error: element with name "'+elementToCheck.getName()+'" already exists in group "'+self.getAddress()+'", therefore; the element will not be added');
                                return false;
                            }
                    
                            return true;
                        }
                    
                        this.__repush = function(){
                            if(stencilElement != undefined){
                                function readdStencil(){
                                    if( stencilElement.getId() == -1 ){ setTimeout(readdStencil,1); }
                                    else{ _canvas_.core.element.__executeMethod(self.getId(),'stencil',[stencilElement.getId()]); }
                                }
                                readdStencil();
                            }
                    
                            communicationModule.run('element.executeMethod',[self.getId(),'clear'],() => {
                                function readdChildren(){
                                    const childIds = children.map(child => child.getId());
                                    if( childIds.indexOf(-1) != -1 ){ setTimeout(readdChildren,1); }
                                    else{ _canvas_.core.element.__executeMethod(self.getId(),'syncChildren',[childIds]); }
                                }
                                readdChildren();
                            });
                        };
                        
                        this.getChildren = function(){ 
                            return children;
                        };
                        this.getChildByName = function(name){
                            return childRegistry[name];
                        };
                        this.getChildIndexByName = function(name){
                            return children.indexOf(childRegistry[name]);
                        };
                        this.contains = function(elementToCheck){
                            return children.indexOf(elementToCheck) != -1;
                        };
                        this.append = function(newElement){
                    
                            if( !isValidElement(newElement) ){ return false; }
                            newElement.parent = this;
                            children.push(newElement);
                            childRegistry[newElement.getName()] = newElement;
                            if(newElement.getCallback('onadd')){newElement.getCallback('onadd')();}
                    
                            if(clearingLock){ return; }
                    
                            if(newElement.getId() == -1){
                                newElement.__calledBy = this.getAddress();
                                newElement.__idReceived = function(){
                                    if(self.getId() != -1){ 
                                        if(children.indexOf(newElement) != -1){
                                            _canvas_.core.element.__executeMethod(self.getId(),'append', [newElement.getId()]);
                                        }else{
                                        }
                                    }else{
                                    }
                                };
                            }else{
                                if(self.getId() != -1){
                                    _canvas_.core.element.__executeMethod(self.getId(),'append', [newElement.getId()]);
                                }else{
                                }
                            }
                        };
                        this.prepend = function(newElement){
                    
                            if( !isValidElement(newElement) ){ return false; }
                            newElement.parent = this;
                            children.unshift(newElement);
                            childRegistry[newElement.getName()] = newElement;
                            if(newElement.getCallback('onadd')){newElement.getCallback('onadd')();}
                    
                            if(clearingLock){ return; }
                    
                            if(newElement.getId() == -1){
                                newElement.__idReceived = function(){
                                    if(children.indexOf(newElement) != -1 && self.getId() != -1){ 
                                        _canvas_.core.element.__executeMethod(self.getId(),'prepend', [newElement.getId()]);
                                    }else{
                                    }
                                };
                            }else{
                                if(self.getId() != -1){
                                    _canvas_.core.element.__executeMethod(self.getId(),'prepend', [newElement.getId()]);
                                }else{
                                }
                            }
                        };
                        this.remove = function(elementToRemove){
                            children.splice(children.indexOf(elementToRemove), 1);
                            delete childRegistry[elementToRemove.getName()];
                            elementToRemove.parent = undefined;
                            if(elementToRemove.getCallback('onremove')){elementToRemove.getCallback('onremove')();}
                    
                            if(clearingLock){ return; }
                    
                            if(elementToRemove.getId() == -1){
                                elementToRemove.__idReceived = function(){
                                    if(children.indexOf(elementToRemove) == -1 && self.getId() != -1){ 
                                        _canvas_.core.element.__executeMethod(self.getId(),'remove', [elementToRemove.getId()]);
                                    }else{
                                    }
                                };
                            }else{
                                if(self.getId() != -1){
                                    _canvas_.core.element.__executeMethod(self.getId(),'remove', [elementToRemove.getId()]);
                                }else{
                                }
                            }
                        };
                        this.clear = function(){
                            children = [];
                            childRegistry = {};
                            if(self.getId() != -1){ 
                                lockClearingLock();
                                communicationModule.run('element.executeMethod',[self.getId(),'clear',[]],unlockClearingLock);
                            }else{
                            }
                        };
                        this.getElementsUnderPoint = function(x,y){
                            if(self.getId() != -1){
                                return new Promise((resolve, reject) => {
                                    _canvas_.core.element.__executeMethod(self.getId(),'getElementsUnderPoint',[x,y],result => resolve(result.map(elementId => elementRegistry[elementId])) );
                                });
                            }
                        };
                        this.getTree = function(){
                    
                            const result = {name:this.getName(), type:this.getType(), id:this.getId(), children:[]};
                            children.forEach(function(a){
                                if(a.getType() == 'group'){ result.children.push( a.getTree() ); }
                                else{ result.children.push({ type:a.getType(), name:a.getName(), id:a.getId() }); }
                            });
                            return result;
                        };
                        this.stencil = function(newStencilElement){
                            if(newStencilElement == undefined){ return stencilElement; }
                            stencilElement = newStencilElement;
                    
                            if(newStencilElement.getId() == -1){
                                newStencilElement.__idReceived = function(){
                                    if(self.getId() != -1){ _canvas_.core.element.__executeMethod(self.getId(),'stencil', [newStencilElement.getId()]); }
                                };
                            }else{
                                if(self.getId() != -1){ _canvas_.core.element.__executeMethod(self.getId(),'stencil', [newStencilElement.getId()]); }
                            }
                        };
                    };
                    
                    this.rectangle = function(_name){
                        genericElementProxy.call(this,'rectangle',_name);
                    
                        Object.entries({
                            x: 0,
                            y: 0,
                            angle: 0,
                            colour: {r:1,g:0,b:0,a:1},
                            anchor: {x:0,y:0},
                            width: 10,
                            height: 10,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    };
                    this.rectangleWithOutline = function(_name){
                        genericElementProxy.call(this,'rectangleWithOutline',_name);
                    
                        Object.entries({
                            x: 0,
                            y: 0,
                            angle: 0,
                            colour: {r:1,g:0,b:0,a:1},
                            lineColour: {r:1,g:0,b:0,a:1},
                            anchor: {x:0,y:0},
                            width: 10,
                            height: 10,
                            thickness: 0,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    };
                    this.circle = function(_name){
                        genericElementProxy.call(this,'circle',_name);
                    
                        Object.entries({
                            x: 0,
                            y: 0,
                            colour: {r:1,g:0,b:0,a:1},
                            radius: 10,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    };
                    this.circleWithOutline = function(_name){
                        genericElementProxy.call(this,'circleWithOutline',_name);
                    
                        Object.entries({
                            x: 0,
                            y: 0,
                            colour: {r:1,g:0,b:0,a:1},
                            lineColour: {r:1,g:0,b:0,a:1},
                            radius: 10,
                            thickness: 0,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    };
                    this.polygon = function(_name){
                        genericElementProxy.call(this,'polygon',_name);
                    
                        Object.entries({
                            colour: {r:1,g:0,b:0,a:1},
                            points: [], 
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    
                        function XYArrayToPoints(XYArrray){
                            return XYArrray.flatMap(i => [i.x,i.y]);
                        }
                        function pointsToXYArray(points){ 
                            const output = [];
                            for(let a = 0; a < points.length; a+=2){ output.push({x:points[a], y:points[a+1]}); }
                            return output;
                        }
                    
                        this.pointsAsXYArray = function(XYArrray){
                            if(XYArrray == undefined){ return pointsToXYArray(this.points()); }
                            this.points(XYArrayToPoints(XYArrray));
                        };
                    
                        const __unifiedAttribute = this.unifiedAttribute;
                        this.unifiedAttribute = function(attributes){
                            __unifiedAttribute(attributes);
                            if(attributes.points != undefined){
                                attributes.pointsAsXYArray = pointsToXYArray(attributes.points);
                                return attributes;
                            }
                            if(attributes.pointsAsXYArray != undefined){
                                attributes.points = XYArrayToPoints(attributes.pointsAsXYArray);
                                return attributes;
                            }
                        };
                    };
                    this.polygonWithOutline = function(_name){
                        genericElementProxy.call(this,'polygonWithOutline',_name);
                    
                        Object.entries({
                            colour: {r:1,g:0,b:0,a:1},
                            lineColour: {r:1,g:0,b:0,a:1},
                            points: [],
                            thickness: 0,
                            jointDetail: 25,
                            jointType: 'sharp',
                            sharpLimit: 4,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    
                        function XYArrayToPoints(XYArrray){
                            return XYArrray.flatMap(i => [i.x,i.y]);
                        }
                        function pointsToXYArray(points){ 
                            const output = [];
                            for(let a = 0; a < points.length; a+=2){ output.push({x:points[a], y:points[a+1]}); }
                            return output;
                        }
                    
                        this.pointsAsXYArray = function(XYArrray){
                            if(XYArrray == undefined){ return pointsToXYArray(this.points()); }
                            this.points(XYArrayToPoints(XYArrray));
                        };
                    
                        const __unifiedAttribute = this.unifiedAttribute;
                        this.unifiedAttribute = function(attributes){
                            __unifiedAttribute(attributes);
                            if(attributes.points != undefined){
                                attributes.pointsAsXYArray = pointsToXYArray(attributes.points);
                                return attributes;
                            }
                            if(attributes.pointsAsXYArray != undefined){
                                attributes.points = XYArrayToPoints(attributes.pointsAsXYArray);
                                return attributes;
                            }
                        };
                    };
                    
                    this.path = function(_name){
                        genericElementProxy.call(this,'path',_name);
                    
                        Object.entries({
                            colour: {r:1,g:0,b:0,a:1},
                            points: [], 
                            thickness: 0,
                            capType: 'none',
                            jointDetail: 25,
                            jointType: 'sharp',
                            sharpLimit: 4,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    
                        function XYArrayToPoints(XYArrray){
                            return XYArrray.flatMap(i => [i.x,i.y]);
                        }
                        function pointsToXYArray(points){ 
                            const output = [];
                            for(let a = 0; a < points.length; a+=2){ output.push({x:points[a], y:points[a+1]}); }
                            return output;
                        }
                    
                        this.pointsAsXYArray = function(XYArrray){
                            if(XYArrray == undefined){ return pointsToXYArray(this.points()); }
                            this.points(XYArrayToPoints(XYArrray));
                        };
                    
                        const __unifiedAttribute = this.unifiedAttribute;
                        this.unifiedAttribute = function(attributes){
                            __unifiedAttribute(attributes);
                            if(attributes.points != undefined){
                                attributes.pointsAsXYArray = pointsToXYArray(attributes.points);
                                return attributes;
                            }
                            if(attributes.pointsAsXYArray != undefined){
                                attributes.points = XYArrayToPoints(attributes.pointsAsXYArray);
                                return attributes;
                            }
                        };
                    };
                    
                    this.image = function(_name){
                        genericElementProxy.call(this,'image',_name);
                    
                        Object.entries({
                            x: 0,
                            y: 0,
                            angle: 0,
                            anchor: {x:0,y:0},
                            width: 10,
                            height: 10,
                            url:'',
                            bitmap: undefined,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    };
                    this.canvas = function(_name){
                        genericElementProxy.call(this,'canvas',_name);
                    
                        Object.entries({
                            x: 0,
                            y: 0,
                            angle: 0,
                            anchor: {x:0,y:0},
                            width: 10,
                            height: 10,
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    
                        //subCanvas
                            const subCanvas = { object:document.createElement('canvas'), context:undefined, resolution:1 };
                            subCanvas.context = subCanvas.object.getContext('2d');
                    
                            function updateDimentions(self){
                                subCanvas.object.setAttribute('width',self.width()*subCanvas.resolution);
                                subCanvas.object.setAttribute('height',self.height()*subCanvas.resolution);
                            }
                            updateDimentions(this);
                    
                            this._ = subCanvas.context;
                            this.$ = function(a){return a*subCanvas.resolution;};
                            this.resolution = function(a){
                                if(a == undefined){return subCanvas.resolution;}
                                subCanvas.resolution = a;
                                updateDimentions(this);
                            };
                            this.requestUpdate = function(){
                                createImageBitmap(subCanvas.object).then(bitmap => {
                                    if(this.getId() != -1){ _canvas_.core.element.__executeMethod(this.getId(),'imageBitmap',[bitmap],undefined,[bitmap]); }
                                });
                            };
                            this.requestUpdate();
                            this.__repush = function(){ this.requestUpdate(); };
                    
                    
                        const __unifiedAttribute = this.unifiedAttribute;
                        this.unifiedAttribute = function(attributes){
                            if(attributes.resolution != undefined){
                                this.resolution(attributes.resolution);
                                delete attributes.resolution;
                            }
                            __unifiedAttribute(attributes);
                            updateDimentions(this);
                        };
                    };
                    
                    this.character = function(_name){
                        genericElementProxy.call(this,'character',_name);
                    
                        Object.entries({
                            colour: {r:1,g:0,b:0,a:1},
                            x: 0,
                            y: 0,
                            angle: 0,
                            anchor: {x:0,y:0},
                            width: 10,
                            height: 10,
                            font: 'defaultThin',
                            character: '',
                            printingMode: { horizontal:'left', vertical:'bottom' },
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    };
                    this.characterString = function(_name){
                        genericElementProxy.call(this,'characterString',_name);
                    
                        Object.entries({
                            colour: {r:1,g:0,b:0,a:1},
                            x: 0,
                            y: 0,
                            angle: 0,
                            width: 10,
                            height: 10,
                            font: 'defaultThin',
                            string: '',
                            spacing: 0.5,
                            interCharacterSpacing: 0,
                            printingMode: { widthCalculation:'absolute', horizontal:'left', vertical:'bottom' },
                        }).forEach(([name,defaultValue]) => this.setupSimpleAttribute(name,defaultValue) );
                    
                        const cashedAttributes_presentationOnly = {
                            resultingWidth: 0, 
                        };
                        const cashedCallbacks_elementSpecific = {
                            onFontUpdateCallback:function(){},
                        };
                        this.__updateValues = function(data){
                            Object.keys(data).forEach(key => { cashedAttributes_presentationOnly[key] = data[key]; });
                        };
                        this.__runCallback = function(data){
                            Object.entries(data).forEach(([name,values]) => {
                                if(name in cashedCallbacks_elementSpecific){ cashedCallbacks_elementSpecific[name](values); }
                            });
                        };
                        this.resultingWidth = function(){
                            return cashedAttributes_presentationOnly.resultingWidth;
                        };
                    
                        const __getCallback = this.getCallback;
                        this.getCallback = function(callbackType){
                            if(callbackType in cashedCallbacks_elementSpecific){
                                return cashedCallbacks_elementSpecific[callbackType];
                            }
                            __getCallback(callbackType);
                        };
                        const __attachCallback = this.attachCallback;
                        this.attachCallback = function(callbackType, callback){
                            if(callbackType in cashedCallbacks_elementSpecific){
                                cashedCallbacks_elementSpecific[callbackType] = callback;
                                return;
                            }
                            __attachCallback(callbackType);
                        }
                        const __removeCallback = this.removeCallback;
                        this.removeCallback = function(callbackType){
                            if(callbackType in cashedCallbacks_elementSpecific){
                                delete cashedCallbacks_elementSpecific[callbackType];
                                return;
                            }
                            __removeCallback(callbackType);
                        }
                    };

                };
                
                this.go = new function(){
                    const functionList = [];
                
                    this.add = function(newFunction){ functionList.push(newFunction); };
                    this.__activate = function(){ functionList.forEach(f => f()); };
                };
                
                this.meta = new function(){
                    this.areYouReady = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('areYouReady',[],resolve);
                        });
                    };
                    this.refresh = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('refresh',[],resolve);
                        });
                    };
                    this.getElementFromId = function(id){
                        return elementRegistry[id];
                    };
                };
                
                this._dump = new function(){
                    this.elememt = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('_dump.element',[],resolve);
                        });
                    };
                    this.arrangement = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('_dump.arrangement',[],resolve);
                        });
                    };
                    this.render = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('_dump.render',[],resolve);
                        });
                    };
                    this.viewport = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('_dump.viewport',[],resolve);
                        });
                    };
                    this.callback = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('_dump.callback',[],resolve);
                        });
                    };
                };
                
                this.element = new function(){
                    this.getAvailableElements = function(){
                        return Object.keys(elementLibrary);
                    };
                
                    this.create = function(type,name,forceId,updateIdOnly){
                
                        if(elementLibrary[type] == undefined){
                            console.warn('interface.element.create - unknown element type "'+type+'"');
                            return;
                        }
                
                        const newElementProxy = new elementLibrary[type](name);
                        if(forceId == undefined){
                            communicationModule.run('element.create', [type,name], id => {
                                newElementProxy.__id(id);
                                elementRegistry[id] = newElementProxy;
                            });
                        }else{
                            newElementProxy.__id(forceId,updateIdOnly);
                            elementRegistry[forceId] = newElementProxy;
                        }
                        return newElementProxy;
                    };
                    this.delete = function(ele){
                        communicationModule.run('element.delete',[ele.getId()]);
                        elementRegistry[element.getId()] = undefined;
                    };
                    this.deleteAllCreated = function(){
                        communicationModule.run('element.deleteAllCreated',[]);
                        elementRegistry = [];
                    };
                
                    this.__executeMethod = function(id,attribute,argumentList,callback,transferables){
                        communicationModule.run('element.executeMethod',[id,attribute,argumentList],callback,transferables);
                    };
                };
                this.arrangement = new function(){
                    const design = self.element.create('group','root',0,true)
                
                    this.new = function(){
                        communicationModule.run('arrangement.new');
                        design.clear();
                        design.unifiedAttribute({
                            x: 0,
                            y: 0,
                            angle: 0,
                            scale: 1,
                            heedCamera: false,
                            // static: false,
                        });
                    };
                    this.get = function(){
                        return design;
                    };
                    this.prepend = function(element){
                        return design.prepend(element);
                    };
                    this.append = function(element){
                        return design.append(element);
                    };
                    this.remove = function(element){
                        return design.remove(element);
                    };
                    this.clear = function(){
                        return design.clear();
                    };
                    this.getElementByAddress = function(address){
                        
                        const route = address.split('/');
                        route.shift();
                
                        let currentObject = design;
                        route.forEach((a) => {
                            currentObject = currentObject.getChildByName(a);
                        });
                
                        return currentObject;
                    };
                    this.getElementsUnderPoint = function(x,y){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('arrangement.getElementsUnderPoint',[x,y],results => {
                                resolve(results.map(result => elementRegistry[result]));
                            });
                        });
                    };
                    this.getElementsUnderArea = function(points){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('arrangement.getElementsUnderArea',[points],results => {
                                resolve(results.map(result => elementRegistry[result]));
                            });
                        });
                    };
                    this.printTree = function(mode='spaced',local=false,includeTypes=false){
                
                        if(local){
                            function recursivePrint(grouping,prefix=''){
                                grouping.children.forEach(function(a){
                                    const data = '('+a.id + (includeTypes ? ' : '+a.type : '') +')';
                
                                    if(mode == 'spaced'){
                                        console.log(prefix+' -  '+a.name+' '+data);
                                        if(a.type == 'group'){ recursivePrint(a, prefix+' - ') }
                                    }else if(mode == 'tabular'){
                                        console.log(prefix+'\t-\t\t'+a.name+' '+data);
                                        if(a.type == 'group'){ recursivePrint(a, prefix+'\t-\t') }
                                    }else if(mode == 'address'){
                                        console.log(prefix+'/'+a.name+' '+data);
                                        if(a.type == 'group'){ recursivePrint(a, prefix+'/'+a.name) }
                                    }
                                });
                            }
                    
                            if(design.getChildren().length == 0){console.log('-empty-');}
                            console.log(design.getName()+' ('+design.getId()+')');
                            recursivePrint(design.getTree(), '');
                        }else{
                            communicationModule.run('arrangement.printTree',[mode,includeTypes]);
                        }
                    };
                    this.printSurvey = function(local=true){
                        if(local){
                            const results = {};
                
                            function recursiveSearch(grouping){
                                grouping.children.forEach(child => {
                                    results[child.type] = results[child.type] == undefined ? 1 : results[child.type]+1;
                                    if(child.type == 'group'){
                                        recursiveSearch(child)
                                    }
                                });
                            }
                
                            recursiveSearch(design.getTree());
                            return results;
                        }else{
                            return new Promise((resolve, reject) => {
                                communicationModule.run('arrangement.printSurvey',[],results => {
                                    resolve(results);
                                });
                            });
                        }
                    };
                    this.areParents = function(element,potentialParents=[]){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('arrangement.areParents',[element.getId(),potentialParents.map(parent => parent.getId())],resolve);
                        });
                    };
                    this._dump = function(local=true,engine=true){
                
                        if(local){
                            console.log(design.getAddress(),'._dump()');
                            console.log(design.getAddress(),'._dump -> id: '+design.getId());
                            console.log(design.getAddress(),'._dump -> type: '+design.getType());
                            console.log(design.getAddress(),'._dump -> name: '+design.getName());
                            console.log(design.getAddress(),'._dump -> address: '+design.getAddress());
                            console.log(design.getAddress(),'._dump -> parent: ',design.parent);
                            console.log(design.getAddress(),'._dump -> ignored: '+design.ignored());
                            console.log(design.getAddress(),'._dump -> x: '+design.x());
                            console.log(design.getAddress(),'._dump -> y: '+design.y());
                            console.log(design.getAddress(),'._dump -> angle: '+design.angle());
                            console.log(design.getAddress(),'._dump -> scale: '+design.scale());
                            console.log(design.getAddress(),'._dump -> heedCamera: '+design.heedCamera());
                            // console.log(design.getAddress(),'._dump -> static: '+design.static());
                            console.log(design.getAddress(),'._dump -> children.length: '+design.getChildren().length);
                            console.log(design.getAddress(),'._dump -> children: ',design.getChildren());
                            console.log(design.getAddress(),'._dump -> clipActive: '+design.clipActive());
                        }
                        if(engine){
                            _canvas_.core.element.__executeMethod(design.getId(),'_dump',[]);
                        }
                    };
                };
                this.render = new function(){
                    const cachedValues = {
                        clearColour:{r:1,g:1,b:1,a:1},
                        frameRateLimit:30,
                        allowFrameSkipping:true,
                        active:false,
                        activeLimitToFrameRate:false,
                    };
                
                    this.refresh = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('render.refresh',[],resolve);
                        });
                    };
                    this.clearColour = function(colour){
                        if(colour == undefined){return cachedValues.clearColour;}
                        cachedValues.clearColour = colour;
                        return new Promise((resolve, reject) => {
                            communicationModule.run('render.clearColour',[colour],resolve);
                        });
                    };
                    this.adjustCanvasSize = function(newWidth, newHeight){
                        communicationModule.run('render.adjustCanvasSize',[newWidth, newHeight]);
                    };
                    this.getCanvasSize = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('render.getCanvasSize',[],resolve);
                        });
                    };
                    this.activeLimitToFrameRate = function(active){
                        if(active == undefined){return cachedValues.activeLimitToFrameRate;}
                        cachedValues.activeLimitToFrameRate = active;
                        return new Promise((resolve, reject) => {
                            communicationModule.run('render.activeLimitToFrameRate',[active],resolve);
                        });
                    };
                    this.frameRateLimit = function(rate){
                        if(rate == undefined){return cachedValues.frameRateLimit;}
                        cachedValues.frameRateLimit = rate;
                        return new Promise((resolve, reject) => {
                            communicationModule.run('render.frameRateLimit',[rate],resolve);
                        });
                    };
                    this.allowFrameSkipping = function(active){
                        if(active == undefined){return cachedValues.allowFrameSkipping;}
                        cachedValues.allowFrameSkipping = active;
                        return new Promise((resolve, reject) => {
                            communicationModule.run('render.allowFrameSkipping',[active],resolve);
                        });
                    };
                    this.fra
                    this.frame = function(){
                        communicationModule.run('render.frame',[]);
                    };
                    this.active = function(active){
                        if(active == undefined){return cachedValues.active;}
                        cachedValues.active = active;
                        return new Promise((resolve, reject) => {
                            communicationModule.run('render.active',[active],resolve);
                        });
                    };
                };

                this.viewport = new function(){
                    const cachedValues = {
                        position:{x:0,y:0},
                        scale:1,
                        angle:0,
                        stopMouseScroll:false,
                    };
                    const mouseData = { 
                        x:undefined, 
                        y:undefined, 
                    };
                
                    //adapter
                        this.adapter = new function(){
                            this.windowPoint2workspacePoint = function(x,y){
                                const position = cachedValues.position;
                                const scale = cachedValues.scale;
                                const angle = cachedValues.angle;
                
                                let tmp = {x:x, y:y};
                                tmp.x = (tmp.x - position.x)/scale;
                                tmp.y = (tmp.y - position.y)/scale;
                                tmp = _canvas_.library.math.cartesianAngleAdjust(tmp.x,tmp.y,-angle);
                
                                return tmp;
                            };
                            // this.workspacePoint2windowPoint = function(x,y){
                                // const position = cachedValues.position;
                                // const scale = cachedValues.scale;
                                // const angle = cachedValues.angle;
                
                            //     let point = _canvas_.library.math.cartesianAngleAdjust(x,y,angle);
                
                            //     return {
                            //         x: (point.x+position.x) * scale,
                            //         y: (point.y+position.y) * scale
                            //     };
                            // };
                        };
                
                    this.refresh = function(){
                        communicationModule.run('viewport.refresh',[]);
                    };
                    this.position = function(x,y){
                        if(x==undefined || y==undefined){ return cachedValues.position; }
                        cachedValues.position = {x:x,y:y};
                        return new Promise((resolve, reject) => {
                            communicationModule.run('viewport.position',[x,y],resolve);
                        });
                    };
                    this.scale = function(s){
                        if(s==undefined){ return cachedValues.scale; }
                        if(s == 0){console.error('cannot set scale to zero');}
                        cachedValues.scale = s;
                        return new Promise((resolve, reject) => {
                            communicationModule.run('viewport.scale',[s],resolve);
                        });
                    };
                    this.angle = function(a){
                        if(a==undefined){ return cachedValues.angle; }
                        cachedValues.angle = a;
                        return new Promise((resolve, reject) => {
                            communicationModule.run('viewport.angle',[a],resolve);
                        });
                    };
                    this.getElementsUnderPoint = function(x,y){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('viewport.getElementsUnderPoint',[x,y],resolve);
                        });
                    };
                    this.getElementsUnderArea = function(points){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('viewport.getElementsUnderArea',[points],resolve);
                        });
                    };
                    this.getMousePosition = function(x,y){
                        if(x == undefined || y == undefined){ return mouseData; }
                        mouseData.x = x;
                        mouseData.y = y;
                        communicationModule.run('viewport.getMousePosition',[x,y]);
                    };
                    this.getBoundingBox = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('viewport.getBoundingBox',[],resolve);
                        });
                    };
                    this.stopMouseScroll = function(bool){
                        if(bool==undefined){ return cachedValues.stopMouseScroll; }
                        cachedValues.stopMouseScroll = bool;
                        communicationModule.run('viewport.stopMouseScroll',[bool]);
                    };
                
                    this.cursor = function(type){
                        //cursor types: https://www.w3schools.com/csSref/tryit.asp?filename=trycss_cursor
                        if(type == undefined){return document.body.style.cursor;}
                        document.body.style.cursor = type;
                    };
                };
                this.stats = new function(){
                    this.active = function(active){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('stats.active',[active],resolve);
                        });
                    };
                    this.getReport = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('stats.getReport',[],resolve);
                        });
                    };
                
                    let autoPrintActive = false;
                    let autoPrintIntervalId = undefined;
                    this.autoPrint = function(bool){
                        if(bool == undefined){ return autoPrintActive; }
                        autoPrintActive = bool;
                
                        if(autoPrintActive){
                            autoPrintIntervalId = setInterval(() => {
                                _canvas_.core.stats.getReport().then(console.log)
                            }, 500);
                        }else{
                            clearInterval(autoPrintIntervalId);
                        }
                    };
                
                    let onScreenAutoPrint_active = false;
                    let onScreenAutoPrint_intervalId = false;
                    let onScreenAutoPrint_section = undefined;
                    this.onScreenAutoPrint = function(bool){
                        if(bool == undefined){ return onScreenAutoPrint_active; }
                        onScreenAutoPrint_active = bool;
                
                        _canvas_.core.stats.active(bool);
                
                        if(onScreenAutoPrint_active){
                            onScreenAutoPrint_section = document.createElement('section');
                                onScreenAutoPrint_section.style = 'position:fixed; z-index:1; margin:0; font-family:Helvetica;';
                                document.body.prepend(onScreenAutoPrint_section);
                                
                            onScreenAutoPrint_intervalId = setInterval(() => {
                                onScreenAutoPrint_section.style.top = (window.innerHeight-onScreenAutoPrint_section.offsetHeight)+'px';
                                _canvas_.core.stats.getReport().then(data => {
                                    const position = _canvas_.core.viewport.position();
                
                                    const potentialFPS = data.secondsPerFrameOverTheLastThirtyFrames != 0 ? (1/data.secondsPerFrameOverTheLastThirtyFrames).toFixed(2) : 'infinite ';
                        
                                    onScreenAutoPrint_section.innerHTML = ''+
                                        '<p style="margin:1px"> position: x:'+ position.x + ' y:' + position.y +'</p>' +
                                        '<p style="margin:1px"> scale:'+ _canvas_.core.viewport.scale() +'</p>' +
                                        '<p style="margin:1px"> angle:'+ _canvas_.core.viewport.angle()+'</p>' +
                                        '<p style="margin:1px"> framesPerSecond: '+ data.framesPerSecond.toFixed(2) +'</p>' +
                                        '<p style="margin:1px"> secondsPerFrameOverTheLastThirtyFrames: '+ data.secondsPerFrameOverTheLastThirtyFrames.toFixed(5) +' (potentially '+ potentialFPS +'fps)</p>' +
                                        '<p style="margin:1px"> renderNonRenderSplitOverTheLastThirtyFrames: '+ data.renderNonRenderSplitOverTheLastThirtyFrames.toFixed(2) +'</p>' +
                                    '';
                                });
                            }, 100);
                        }else{
                            clearInterval(onScreenAutoPrint_intervalId);
                            if(onScreenAutoPrint_section != undefined){ onScreenAutoPrint_section.remove(); }
                            onScreenAutoPrint_section = undefined;
                        }
                    };
                };
                this.callback = new function(){
                    this.listCallbackTypes = function(){
                        return new Promise((resolve, reject) => {
                            communicationModule.run('callback.listCallbackTypes',[],resolve);
                        });
                    };
                
                    const callbackRegistry = new function(){
                        const registeredShapes = {};
                
                        this.getCallback = function(id,callbackType){
                            if(id == undefined || registeredShapes[id] == undefined || registeredShapes[id][callbackType] == undefined){return;}
                            return registeredShapes[id][callbackType];
                        };
                        this.register = function(id,callbackType,callback){
                            if(!(id in registeredShapes)){ registeredShapes[id] = {}; }
                            registeredShapes[id][callbackType] = callback;
                        };
                        this.remove = function(id,callbackType){
                            registeredShapes[id][callbackType] = undefined;
                            delete registeredShapes[id][callbackType];
                        };
                        this.call = function(id,callbackType,x,y,event){
                            if(id == undefined || registeredShapes[id] == undefined || registeredShapes[id][callbackType] == undefined){return false;}
                            registeredShapes[id][callbackType](x,y,event);
                            return true;
                        };
                    };
                    this.getCallback = function(element, callbackType){
                        callbackRegistry.getCallback(element.getId(), callbackType);
                    };
                    this.attachCallback = function(element, callbackType, callback){
                        callbackRegistry.register(element.getId(), callbackType, callback);
                        communicationModule.run('callback.attachCallback',[element.getId(),callbackType]);
                    };
                    this.removeCallback = function(element, callbackType){
                        callbackRegistry.remove(element.getId(), callbackType);
                        communicationModule.run('callback.removeCallback',[element.getId(),callbackType]);
                    };
                
                    let callbackActivationMode = 'firstMatch'; //topMostOnly / firstMatch / allMatches
                    this.callbackActivationMode = function(mode){
                        if(mode==undefined){return callbackActivationMode;}
                        callbackActivationMode = mode;
                    };
                
                    this.functions = {};
                    this.listCallbackTypes().then(callbackNames => {
                        callbackNames.forEach(callbackName => {
                            _canvas_[callbackName] = function(event){
                                let sudoEvent = {};
                                if(event instanceof KeyboardEvent){
                                    sudoEvent = {
                                        key: event.key,
                                        code: event.code,
                                        keyCode: event.keyCode,
                                        altKey: event.altKey,
                                        ctrlKey: event.ctrlKey,
                                        metaKey: event.metaKey,
                                        shiftKey: event.shiftKey,
                                    };
                                }else if(event instanceof WheelEvent){
                                    sudoEvent = { 
                                        X: event.offsetX,
                                        Y: event.offsetY,
                                        wheelDelta: event.wheelDelta,
                                        wheelDeltaX: event.wheelDeltaX,
                                        wheelDeltaY: event.wheelDeltaY,
                                        altKey: event.altKey,
                                        ctrlKey: event.ctrlKey,
                                        metaKey: event.metaKey,
                                        shiftKey: event.shiftKey,
                                    };
                                }else if(event instanceof MouseEvent){
                                    sudoEvent = { 
                                        X: event.offsetX, 
                                        Y: event.offsetY,
                                        altKey: event.altKey,
                                        ctrlKey: event.ctrlKey,
                                        metaKey: event.metaKey,
                                        shiftKey: event.shiftKey,
                                        buttons: event.buttons,
                                    };
                                    if(callbackName == 'onmousemove'){
                                        _canvas_.core.viewport.getMousePosition(sudoEvent.X,sudoEvent.Y);
                                    }
                                }else{
                                    console.warn('unknown event type: ',event);
                                }
                                
                                communicationModule.run('callback.coupling_in.'+callbackName,[sudoEvent]);
                            };
                
                            //service
                                communicationModule.function['callback.'+callbackName] = function(x,y,event,elements){
                                    if(self.callback.functions[callbackName]){
                                        self.callback.functions[callbackName](x,y,event,{
                                            all: elements.all.map(id => elementRegistry[id]),
                                            relevant: elements.relevant ? elements.relevant.map(id => elementRegistry[id]) : undefined,
                                        });
                                    }
                
                                    elements.relevant.forEach(id => callbackRegistry.call(id,callbackName,x,y,event) );
                                };
                
                        });
                    });
                };

                communicationModule.function.go = function(){
                    _canvas_.layers.registerLayerLoaded('core',_canvas_.core);
                    self.go.__activate();
                };
                communicationModule.function.printToScreen = function(imageData){
                    _canvas_.getContext("bitmaprenderer").transferFromImageBitmap(imageData);
                };
                // communicationModule.function.onViewportAdjust = function(state){
                //     console.log('onViewportAdjust -> ',state); /* callback */
                // };
                
                communicationModule.function.updateElement = function(elem, data={}){
                    const proxyElement = _canvas_.core.meta.getElementFromId(elem);
                    if(proxyElement.__updateValues != undefined){ proxyElement.__updateValues(data); }
                };
                communicationModule.function.runElementCallback = function(elem, data={}){
                    const proxyElement = _canvas_.core.meta.getElementFromId(elem);
                    if(proxyElement.__runCallback != undefined){ proxyElement.__runCallback(data); }
                };
                
                communicationModule.function.getCanvasAttributes = function(attributeNames=[],prefixActiveArray=[]){
                    return attributeNames.map((name,index) => {
                        return _canvas_.getAttribute((prefixActiveArray[index]?__canvasPrefix:'')+name);
                    });    
                };
                communicationModule.function.setCanvasAttributes = function(attributes=[],prefixActiveArray=[]){
                    attributes.map((attribute,index) => {
                        _canvas_.setAttribute((prefixActiveArray[index]?__canvasPrefix:'')+attribute.name,attribute.value);
                    });
                };
                communicationModule.function.getCanvasParentAttributes = function(attributeNames=[],prefixActiveArray=[]){
                    return attributeNames.map((name,index) => {
                        return _canvas_.parentElement[(prefixActiveArray[index]?__canvasPrefix:'')+name];
                    });
                };
                
                communicationModule.function.getDocumentAttributes = function(attributeNames=[]){
                    return attributeNames.map(attribute => {
                        return eval('document.'+attribute);
                    });
                };
                communicationModule.function.setDocumentAttributes = function(attributeNames=[],values=[]){
                    return attributeNames.map((attribute,index) => {
                        eval('document.'+attribute+' = "'+values[index]+'"');
                    });
                };
                communicationModule.function.getWindowAttributes = function(attributeNames=[]){
                    return attributeNames.map(attribute => {
                        return eval('window.'+attribute);
                    });
                };
                communicationModule.function.setWindowAttributes = function(attributes=[]){
                    attributes.map((attribute,index) => {
                        eval('window.'+attribute.name+' = "'+attribute.value+'"');
                    });
                };

            };
            _canvas_.system = new function(){
                this.versionInformation = { tick:0, lastDateModified:{y:2019,m:12,d:28} };
                this.mouseReady = false;
            
                this.go = new function(){
                    const functionList = [];
            
                    this.add = function(newFunction){ functionList.push(newFunction); };
                    this.__activate = function(){ functionList.forEach(f => f()); };
                };
            };
            _canvas_.system.mouse = new function(){
                //setup
                    const mouse = this;
                
                    this.tmp = {};
                    this.functionList = {};
                    this.functionList.onmousedown = [];
                    this.functionList.onmousemove = [];
                    this.functionList.onmouseup = [];
                    this.functionList.onmouseleave = [];
                    this.functionList.onmouseenter = [];
                    this.functionList.onwheel = [];
                    this.functionList.onclick = [];
                    this.functionList.ondblclick = [];
                
                //save the listener functions of the canvas
                    _canvas_.core.go.add( function(){
                        _canvas_.system.mouse.original = {
                            onmousemove: _canvas_.onmousemove,
                            onmouseleave: _canvas_.onmouseleave,
                            onmouseup: _canvas_.onmouseup,
                        };
                        _canvas_.system.mouseReady = true;
                    } );
                
                //utility functions
                    this.mouseInteractionHandler = function(moveCode, stopCode){
                        //replace listener code
                            //movement code
                                _canvas_.onmousemove = function(event){ 
                                    if(moveCode!=undefined){
                                        event.X = event.offsetX; event.Y = event.offsetY;
                                        const XY = _canvas_.core.viewport.adapter.windowPoint2workspacePoint(event.X,event.Y);
                                        moveCode(XY.x,XY.y,event);
                                    }
                                };
                            //stopping code
                                _canvas_.onmouseup = function(event){
                                    if(stopCode != undefined){ 
                                        event.X = event.offsetX; event.Y = event.offsetY;
                                        const XY = _canvas_.core.viewport.adapter.windowPoint2workspacePoint(event.X,event.Y);
                                        stopCode(XY.x,XY.y,event);
                                    }
                
                                    _canvas_.onmousemove = mouse.original.onmousemove;
                                    _canvas_.onmouseleave = mouse.original.onmouseleave;
                                    _canvas_.onmouseup = mouse.original.onmouseup;
                                    _canvas_.onmouseup(event);
                                };
                                _canvas_.onmouseleave = _canvas_.onmouseup;
                    };
                
                    this.forceMouseUp = function(){ _canvas_.onmouseup(); };
                
                //connect callbacks to mouse function lists
                    this.setUpCallbacks = function(){
                        [ 'onmousedown', 'onmouseup', 'onmousemove', 'onmouseenter', 'onmouseleave', 'onwheel', 'onclick', 'ondblclick', 'onmouseenterelement', 'onmouseleaveelement' ].forEach(callback => {
                            _canvas_.core.callback.functions[callback] = function(x,y,event,elementIds){
                                if(elementIds.relevant.length == 0){
                                    _canvas_.library.structure.functionListRunner( mouse.functionList[callback], _canvas_.system.keyboard.pressedKeys )({x:event.X,y:event.Y,event:event}); 
                                }
                            }
                        });
                    }
                    this.setUpCallbacks();
            };
            _canvas_.system.keyboard = new function(){
                //setup
                    const keyboard = this;
                    this.pressedKeys = {
                        control:false,
                        alt:false,
                        meta:false,
                    };
                    this.functionList = {};
                    this.functionList.onkeydown = [];
                    this.functionList.onkeyup = [];
                
                //utility functions
                    function customKeyInterpreter(event,press){
                        const pressedKeys = keyboard.pressedKeys;
                        if(event.code == 'ControlLeft' || event.code == 'ControlRight'){  pressedKeys.control = press; }
                        else if(event.code == 'AltLeft' || event.code == 'AltRight'){     pressedKeys.alt = press;     }
                        else if(event.code == 'MetaLeft' || event.code == 'MetaRight'){   pressedKeys.meta = press;    }
                        else if(event.code == 'ShiftLeft' || event.code == 'ShiftRight'){ pressedKeys.shift = press;   }
                
                        //adjustment for mac keyboards
                            if( window.navigator.platform.indexOf('Mac') != -1 ){
                                pressedKeys.option = pressedKeys.alt;
                                pressedKeys.command = pressedKeys.meta;
                            }
                    }
                    this.releaseAll = function(){
                        Object.keys(this.pressedKeys).forEach(a => keyboard.releaseKey(a))
                    };
                    this.releaseKey = function(code){
                        _canvas_.onkeyup( new KeyboardEvent('keyup',{code:code}) );
                    }
                
                //connect callbacks to keyboard function lists
                    _canvas_.core.callback.functions.onkeydown = function(x,y,event,shapes){
                        //if key is already pressed, don't press it again
                            if(keyboard.pressedKeys[event.code]){ return; }
                            keyboard.pressedKeys[event.code] = true;
                            customKeyInterpreter(event,true);
                
                        // //ESCAPE operation code
                        //     if(event.key == 'Escape'){ 
                        //         console.log('%cEscape key pressed', 'color:White; background-color: Black;'); 
                        //         keyboard.releaseAll();
                        //         _canvas_.onmouseup({offsetX:0,offsetY:0});
                        //         _canvas_.system.mouse.setUpCallbacks();
                        //     }
                        
                        //perform action
                            _canvas_.library.structure.functionListRunner( keyboard.functionList.onkeydown, keyboard.pressedKeys )({x:event.X,y:event.Y,event:event});
                    };
                
                    _canvas_.core.callback.functions.onkeyup = function(x,y,event,shapes){
                        //if key isn't pressed, don't release it
                            if(!keyboard.pressedKeys[event.code]){return;}
                            delete keyboard.pressedKeys[event.code];
                            customKeyInterpreter(event,false);
                        
                        //perform action
                            _canvas_.library.structure.functionListRunner( keyboard.functionList.onkeyup, keyboard.pressedKeys )({x:event.X,y:event.Y,event:event});
                    };
            };
            
            //add main panes to arrangement
            _canvas_.system.pane = {};
            
            _canvas_.core.go.add( function(){
                //background
                    _canvas_.system.pane.background = _canvas_.core.element.create('group','background');
                    _canvas_.system.pane.background.ignored(true);
                    _canvas_.core.arrangement.append( _canvas_.system.pane.background );
            
                //middleground
                    _canvas_.system.pane.middleground = _canvas_.core.element.create('group','middleground');
                    _canvas_.system.pane.middleground.heedCamera(true);
                    _canvas_.core.arrangement.append( _canvas_.system.pane.middleground );
                    //back
                        _canvas_.system.pane.middleground_back = _canvas_.core.element.create('group','back');
                        _canvas_.system.pane.middleground.append( _canvas_.system.pane.middleground_back );
                    //middle
                        _canvas_.system.pane.middleground_middle = _canvas_.core.element.create('group','middle');
                        _canvas_.system.pane.middleground.append( _canvas_.system.pane.middleground_middle );
                    //front
                        _canvas_.system.pane.middleground_front = _canvas_.core.element.create('group','front');
                        _canvas_.system.pane.middleground.append( _canvas_.system.pane.middleground_front );
            
                //foreground
                    _canvas_.system.pane.foreground = _canvas_.core.element.create('group','foreground');
                    _canvas_.core.arrangement.append( _canvas_.system.pane.foreground );
            
                //shortcuts
                    _canvas_.system.pane.b = _canvas_.system.pane.background;
                    _canvas_.system.pane.mb = _canvas_.system.pane.middleground_back;
                    _canvas_.system.pane.mm = _canvas_.system.pane.middleground_middle;
                    _canvas_.system.pane.mf = _canvas_.system.pane.middleground_front;
                    _canvas_.system.pane.f = _canvas_.system.pane.foreground;
            } );
            
            //utility
                _canvas_.system.pane.getMiddlegroundPane = function(element){
                    let tempElement = element;
                    while(tempElement != undefined){
                        if(tempElement == _canvas_.system.pane.mb){ return _canvas_.system.pane.mb; }
                        if(tempElement == _canvas_.system.pane.mm){ return _canvas_.system.pane.mm; }
                        if(tempElement == _canvas_.system.pane.mf){ return _canvas_.system.pane.mf; }
                        tempElement = tempElement.parent;
                    }
                };
            
            const checkingInterval = setInterval(() => {
                if(
                    _canvas_.system.pane != undefined &&
                    _canvas_.system.pane.b != undefined &&
                    _canvas_.system.pane.b.getId() != -1 &&
                    _canvas_.system.pane.mb.getId() != -1 &&
                    _canvas_.system.pane.mm.getId() != -1 &&
                    _canvas_.system.pane.mf.getId() != -1 &&
                    _canvas_.system.pane.f.getId() != -1 &&
                    _canvas_.system.mouse.original != undefined
                ){
                    clearInterval(checkingInterval);
                    _canvas_.layers.registerLayerLoaded('system',_canvas_.system);
                    _canvas_.system.go.__activate();
                }
            }, 100);
        }
    }
})();
