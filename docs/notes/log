 ------- ------- ------- ------- ------- ------- ------- ------- ------- -------
2018-09-30
  - all current objects have had their key_rect and button_rect elements switch
    to button_rect_3
  - button_rect_3 now has that key-rolling thing working (broke menubar in the
    process)
  - fixed menubar
  - added "New Scene" function to clear the scene (no safty on that, so be
    careful)

  Compliation Results
  - workspace.js                        877 Kb  (100%)
  - workspace.min.js                    301 Kb  (34.37%)



2018-09-29
  - button_rect_3 now has 'pressable' option, which determines if the graphics
    should change when the button is pressed
  - button_rect_3 handles selection of itself now (click to toggle)
  - created new version of the list control element, replacing the old
  - updated menubar to have better drop-down lists, with all the functionality
    currently available


2018-09-18
  - fixed bug where one could drag the menu bar around


2018-09-16
  - developed button_rect_3 which replaces list.item (now with 'active' setting)
  - all sorts of giffing

  future ideas
  - object collision
	
  to do
  - replace all button_rect and key_rect parts with button_rect_3
  - add text edit control to button_rect_3
  

2018-09-15
  - updated README to point to this log
  - object view reordering, now is aware of what pane it's working on, and can
    rearrange objects within their panes
  - the utility 'disconnectEverything' is back and looking good
  - new utility 'deteleObject' which is well named
  - the two additions above replace most of the code that was in
    __globals.selection.delete
  - wrote up the list part (and it's sub-part, the list.item)(complete with 
    scrollability, selection of items, glowing, range selection (with shift)
    adding items, removing items and all sorts of styling options)
  - created rudimentary object creation menu panel (with automatic object list
    population, a 'close' button and header grapple thing)(needs a way of 
    opening it once it's been closed..maybe a key combo?)
  - 'help button' changed from "ctrl+f1" to just F1, also added
    '__globals.keyboardInteraction.releaseAll' to keyboardInteraction.js
  - added object metadata code for better help url listing and object "Screen 
    Names" to all objects
  - began working on button_rect replacement (currently button_rect_2) based
    off list.item
  - added 'menu bar' which sits at the top of the window. There's one 'objects'
    button which calls forth the object creation menu panel thing (the menu 
    pane has the object reordering like other frames, but it makes it possible
    to trap the panel behind the bar. I'd like to limit how high you can drag
    the panel (like on a desktop), load and save buttons and a little report
    thing in the top right (I'm having trouble getting the HTML to update while
    around load/save operations)

  check out for problems with
  - pressing the button for loading an audio file, then hitting cancel and 
    trying to work with the object again
	
  Compliation Results
  - workspace.js        864 Kb  (100%)
  - workspace.min.js    296 Kb  (34.30%)

2018-09-08
  - equaliser levels fixed (along with that update problem)
  - multiband filter v2 now has a more advanced frequency response updater (it 
    tries no not do recalculations when it's not necessary)
  - multiband filter v2 creation has option to select between having high/low
    pass filters for the highest and lowest bands ("frames"), or just band 
    passes everywhere
  - multiband filter (object and circuit) pushed to main objects and circuits
    lists (removed the 'v2')
  - selecting an object now pulls it to the front of the view order

  bugs found
  - looper symbol isn't allowing mouse clicks through

  future ideas
  - drop shadows

  Compliation Results
  - workspace.js                        825 Kb  (100%)
  - workspace.min.js                    281 Kb  (34.15%)

2018-09-01
  - further work on the equaliser, things are going well; it's got a nicer
    object with colour coded channels, manually selected channel frequencies
    and a master out (still working on getting the 'zero' levels correct)

  future ideas
  - slide panel spacing argument, handle width, slot width

2018-08-31
  - fixed demo 1
  - more work on the super adjustable equaliser (weird thing where auto setting 
    values isn't pushing the changes through to the actual filter circuit. Also 
    the frequency spread is nice, but for a human it's kinda silly)

  bug found
  - it seems the BiquadFilter's "getFrequencyResponse" method doesn't always
    work. Sometimes it just returns an array of just zeros.

2018-08-19
  - pushed the new filter to the main objects list
  - fixed some backwards logic in the sequencer
  - added glow options to the dials
  - began work on the super adjustable equaliser
  

2018-08-15
  - added 'relativeDistance' and 'lineCorrecter' to utility.math (added some
    tests)
  - redid graphers (pulled some of the functionality out into utility)


2018-08-14
  - (you're going to have to fix the viewbox thing in graphSVG (and probably 
    grapherCanvas too))
  - developed the grapherSVG and filder obejct further. Filter now has a freq 
    range of 0 to 20000, and the graph is logarithmic. Needs more detail though.
    (Grapher part needs development overall)

  future ideas
  - the filter object's dials should glow and unglow when they become active and
    unactive

  Compliation Results
  - workspace.js                        783 Kb  (100%)
  - workspace.min.js                    265 Kb  (33.83%)
  - workspace.min.js (web compressed)   94.4 Kb (12%)

  (there seems to be a nice consistancy of removing 2/3 of the original size)


2018-08-13
  - tried rewriting the sequencer in canvas, but it's way way too slow. The fix
    I made for the canvas in forignObject bug thing, causes hugh lag when the
    pixels are transfered into the image. I think that things will get much
    faster when the bug is fixed in Chrome. Until then...
  - updated how things are done in the sequencer and in the get and set
    transform utilities, which seems to have sped things up a bit..its still not
    enough though. Alot of time is being spent on recalculation and rendering,
    so that canvas equilivent is becoming a requirement :/
  - fixed grapherSVG to do background lines and text better (no drawing outside
    the box (mostly), more control of what the text is)


2018-08-09
  issues:
  - sequencer is very slow when alot of notes are added. Panning is fine, global
    panning is fine; but zooming causes huge lag. Removing the background 
    doesn't help, it seems most time is spent recalculating the size of the 
    note blocks. I'm not sure that converting it to canvas would help.


2018-08-08
  - corrected small thing in noteRegistry where a judegment was being done when
    'rightLimit' was set to -1. Fixed so that the judegment is ignored in this
    case
  - 'generateSelectionArea' was using 'temp' as a global instead of a local.
    Changed that
  - working on midi import; the direct conversion to noteRegistry seems to work
    pretty well. I'll have to rewrite the sequencer object though.
  - updated 'basicSequencer_midiOut' object to deal with midi numbers better.
    Also added a viewArea attribute to the import/export functions. Also added
    Vertical zoom/scroll rangeslide
  - updated demo 2 to use new midi sequencer better
    

2018-08-07
  - further experimentation with parsing midi files


2018-08-06
  - updated utilirt.misc.openFile to have an argument for "readAsType". One can 
    select between 'readAsBinaryString' (the default) and 'readAsArrayBuffer'


2018-08-03
  - rejiggered the system testing folder a little 
  - added 'blendColours' and 'multiBlendColours' to utility.misc (also added 
    tests for them)
  - added colour change effects to the sequencer note blocks (depending on their
    strength)
  - click-control dragging on sequencer note blocks changes their strength
  - did up the colours on the sequencer note blocks
  - sequencer note blocks now ignore mouse clicks when spacebar is pressed (
    redirecting to the interaction pane)
  - sequencer note blocks now have a minimum length (so that they don't just
    disappear when their length is zero)
  - changed "double click on sequencer note block body" from 'delete' to 'reset
    strength to default' (also added a default strength variable)

  Compliation Results
  - workspace.js                        768 Kb  (100%)
  - workspace.min.js                    261 Kb  (34.04%)
    (almost a megabyte on the raw version. Crazy crazy crazy. ~12,000 lines)

  bug update
  - things from yesterday continues; seems to also happen in the "elements test"
    test situation, but only sometimes.

  future ideas
  - need to look into better filters, which puts us on route for more advanced
    synthesizers


2018-08-02
  - added zooming method to the new sequencer (its a 'select view area' thing)
  - pushed updated sequencer, and did-up the sequencer objects (it now has a
    second rangeslide just for moving around and zooming, and a check box that
    when checked will try to keep the playhead in view by moving the rangeslide
    (ish..it's moves the view then tells the rangeslide ot move))

  bug found
  - seems that sometimes, the sequencer's viewport clip-path is not cutting
    correctly, resulting in the notes and backing and such leaking out the left
    side, and leaving a little black line on the right. It's recreatable
    currently in the second demo on the top two sequencers, but not the bottom
    one. The bottom one is the same object as the middle. Even copying the
    objects perserves the glitch in the new objects. Recreating the scene isn't
    helping. I can't find anything different between the objects in the elements
    listing.
      One can manually change the clip-path from
    polygon(0px 0px, 0px 170px, 780px 170px, 780px 0px)
    to
    polygon(1.5px 0px, 781.5px 0px, 781.5px 170px, 1.5px 170px) which will fix
    things, but ofcourse, using the objects view adjust undos all this. It 
    appears as though the clip-path itself is missaligned by 1.5px to the left.
    Shifting the element that contains this attribute doesn't help, it just the
    problem with it.
                    As it is; I've no idea what is causing this.



2018-08-01
  - updated keyboard interaction further; so that it now checks every element
    for an event handler.
  - finishing up on the unlimited-length sequencer (delete/backspace key to
    erase, now with kinda-sorta zoom functionality)
  - pushed the new sequencer, replacing old one (the change seems to havae gone
    well, though it seems the right side of the loop is missing in demo 2...
    curious. Stranger still; one of the three objects is fine, and it has the
    same sequencer dimentions as another ):/ )

  future ideas
  - package workspace up into a proper little package thing. Currently there's
    three globals '__globals', 'parts' and 'objects' Which causes problems when
    one tried to have multiple workspace elements in a page (though frankly, the
    system was never designed to have multiple instances of itself)
      One could use the old Presenter idea, and bundle things up into the main 
    SVG element. I'm also thinking about expanding the production line, so that
    there's 'stable' versions and 'dev' versions, instead of hoping that my
    updates don't break the demos.

      With a cursoury test, it's clear that two or more workspace elements won't
    work, the way things are now. Moreover, the sealing I tried ages ago and
    commented out for 'dev' purposes, also breaks things when uncommented, when
    there's two or more instances. It seems to work alright when there's only
    one.


2018-07-31
  - updated keyboard interaction to allow for individual elements to accept key
    events. It currently prioritizes object input over individual elements,
    though I could change that if necessary.
  - further work on the unlimited-length sequencer (there's panning now, and you
    can create notes)


2018-07-30
  - started into unlimited-length sequencer
  
  future ideas
  - slide: click to empty area then drag


2018-07-28
  - fixed rageslide


2018-07-27
  - added 'staticBackground' pane to very back of hmtl strucure, plus a
    'setStaticBackgroundStyle' utility which creates a 100% rect in it. Thus,
    you can now set the background with a solid colour


2018-07-26
  - the viewport position is now saved in a save file
  - scene loading now runs the clear command to wash out the pervious scene
  - during saving and loading a scene, master volume is set to zero (to stop
    hanging notes ringing out as the machine is busy)
  - added super global interaction switches /enable/disable mouse wheel zoom
    "mouseWheelZoomEnabled", mouseGripPanningEnabled" and "readOnlyMode"
  - started on a help site for the basicSynthesizer, using a windowed version of
    workspace (group select doesn't work (the mouse point is off) but I disable
    that anyway)

  future ideas
  - some kind of function that can fill the background with a solid colour
  - better windowed mouse selection


2018-07-25
  - 'tester' can now compare function code
  - importScene/exportScene now uses a slightly mroe efficient way of storing 
    constructor functions in file (and the option to not store them at all)
  - got a compression library (first thirdparty code) for saveload.serialize
    (it's in tests still, but currently we're getting 61.7% removed)
  - all kinds of funky new functionality added to utility (along with a little
    rearranging)(is utility getting too big? ~1600 lines..it's just a collection
    of functions...)
  - saveload has been completely moved to utility.workspace
  - added the ability to load scenes from files from the internet (should
    simplify demos alot)

  future ideas
  - have the ability to adjust master volume, independent of any object. Shut
    sound off during a save or load operation (where the machine will hang from
    all the processing) 


2018-07-24
  - more work on saving and loading (moved the file into a test area)(also tests
    are being made)(also removed some things from utility, that were put there
    yesterday related to all this) going pretty well though

  future ideas
  - add string compression to saveload.serialize


2018-07-23
  - added "saveData" and "loadData" to utility
  - began work on a way to save scenes (the 'saveload.js' system file)


2018-07-22
  - created new 'basicSequencer_midiOut' object, which is like a sequencer, but
    outputs midi commands
  - fixed bug where sequencer playhead wasn't being accessed properly, thus was
    causing problems when multiple sequencers were in a scene. Just had to
    change 'playheadPosition' to use 'obj.children.playhead' instead of just
    'playhead' for the 'setTransform_XYonly'
  - added interface methods to basicSynthesizer object
  - redid demo 2 to have drum and bass sections (and a chord section that is
    left disconnected)
  - cleaned up notes file into notes folder
  - fixed bug in 'sequencer.noteRegistry' where the updating of note positions
    wasn't being delt with properly and things were ending up off the side. The
    logic has been re-written to be better now (new tests for it too)
  - added help/save/load function keys (F1, F2 and F3)
  - began help folder, which can be linked to from the app by pressing F1 ove an
    object

  Compliation Results
  - workspace.js                        688 Kb  (100%)
  - workspace.min.js                    242 Kb  (35.25%)
  - workspace.min.js (web compressed)   47.3 Kb (6.8%)


2018-07-20
  - pushed pianoroll part into main parts (now called sequencer)
  - shipped all the sequencer testing code over into testSituation 1, and then
    redid the testing code that was already there to use the snazzy new test
    checker function thing (it all looks very nice now)
  - wrote together a nice new basic sequencer object (and pushed it)
  - updated oneShot_multi_multiTrack to accept 'pulse' and 'hit' data signals
  - removed 'trash folder' (have it saved elsewhere for now, but will probably 
    delete fully later)

  bugs found
  - rangeslide handle movement is a bit weird

  Compliation Results
  - workspace.js                        733 Kb (100%)
  - workspace.min.js                    254 Kb (34.76%)
  - workspace.min.js (web compressed)  49.6 Kb (6.76%)
  


2018-07-19
  - continued work on pianoroll, slowly adding features back in, in a nice way 


2018-07-18
  - added code that checks the URL for a dev parameter. If it is present, the
    page unload code won't be activated
  - started on the next verion of the pianoroll part..starting with testing the
    sub parts


2018-07-17
  - wrote up rudimentary 8 channel audio mixer and channelMultiplier part (both
    pushed)
  - fixed musical keyboard cloner, which was trying to make a launchpad


2018-07-16
  - added code to stand in the way of a page unload (just the standard "are you 
    sure" box that comes built in with the browser)(commented out for dev 
    purposes. It's (currerntly) the first line in system/misc.js)
  - added workspace.mouseInteractionHandler to utiltiy (so now hopefully we
    don't have another one of those rangeslide incidents)(perhaps change
    everything to use this?)
  - added veloticy interface to musicalkeybaord
  - updated rangeslide so that the values are stored only as 'start' and 'end'
    (instead of having mixed in array indexes)
  - changed some of the pianoroll interaction, to make mousing around easier

  future ideas
  - adjustable keyboard mapping (when switching between mac or linux or windows)


2018-07-15
  - updaed pianoroll a little to make it easuer to change the x count
  - wrote different music into demo 2 and added reverb
  - added bits of interface to the reverb object
  - fixed rangeslide which had sloppy mouse-move code, which would replace the 
    main system's mouse interaction code and never put it back


2018-07-13
  - pianoroll inner workings improved; now it keeps track of what notes are
    playing. So when it's progression loops; it will insert the ends of those 
    notes into the loop-start events. In effect; stopping notes that have end
    events which are outside the loop from sounding forever. It also means I can
    get rid off all that silly -1/100000 stuff, so things are sounding better
  - key_rect callbacks 'onkeydown' and 'onkeyup' remaned to 'keydown' and 
    'keyup', as the previous names were clashing with the keyboardInteraction 
    system (this could be a wider problem, but probably only for this part (due
    to it's name))
  - fixed detectOverlap again; turns out the order that the boundingBox points
    are in is very important. I've added sortation code, but have also tried to
    make it so code that provides bounding boxes, always puts the higher-valued
    point at the start of the array (the 'left/right'/'top/bottom' metaphore and
    naming scheme I used is pretty mangled now)
  - rushed pianoroll part and object through so that I could put together demo 2
    The way things are, one can continue to develop those items without
    affecting the demo, thus the demo can be updated at a leasurly pace.

                * Workspace (unminified) surpasses 10,000 lines *

  future ideas
  - slide needs to be rewritten. It's just old and rangeslide does things in a 
    nicer way
  - audio mixer

  Compliation Results
  - workspace.js                        655 Kb  (100%)
  - workspace.min.js                    231 Kb  ( 35%)
  - workspace.min.js (web compressed)    46 Kb  (  7%)


2018-07-12
  - added argument to the audio_in object and part, to make it not instantly try
    to connect when it's created
  - wrote up data-duplicator and pushed it into the 'finished' objects pile


2018-07-11
  - fixed the bug from yesterday; turned out, the number convertion is normal,
    and it was my own 'getTransform' code that was not reading the produced 
    style string correctly. I redid the regex, things seem to be working better
    now (though it all seems a little inefficient)
  - fixed smoothSet in rangeselector to actually work properly now (and get the
    timings right)
  - pushed rageslide to main parts
  - replaced both slide in the pianoroll object with the new rangeslide


2018-07-10
  - wrote up rangeselector part (which allows one to select a range on a
    slide-like area. Comes complete with handles that bumb off eachother, area
    panning and expand/shrink mouse wheel)
  
  bug found
  - __globals.utility.element.setTransform setting very small numbers 
    (eg. 0.000097500000000) causes something somewhere to convert them to 
    exponent notation (9.75e-05) which breaks the style string


2018-07-09
  - in light of the ctrl key not working on Mac, and the Meta key not working on
    linux; I've created a "super globals" file which controls what key to watch
    in an event. Hopefully this means the system can adjust depending on the
    host
  - faffed with the pianoroll a bit more, and managed to cobble together a 
    basic "advanced launchpad" playing the guitar riff off Thunder Struck. Works
    pretty alright too.
  - added sorting section to the 'eventsBetween' function of the 'noteRegistry'
    as there was a problem where notes that started and ended within the
    selected range, weren't having their events performed in the correct order
  - added way of selecting the looped region in the pianoroll object..it's a bit
    terrible, but it works. I probably need to write a new control object for it


2018-07-06
  - fifth rewrite on the pianoroll, things are going pretty well this time. The
    'noteBlock' element has gotten an upgrade and the mouse interaction is being
    made a little nicer. So far there's alt-click to add, click-n-drag, 
    shift-click-n-drag to group select, click anyway to deselect, alt-drag to
    clone, right and left handle drag to lengthen, and all that springy
    boundries thing. Still playing with the interaction logic of it all till it
    feels natural.
  - fixed duplicate events problem in noteRegistry


2018-07-05
  - another draft started of the pianoroll (4) this time I'm trying to split
    more of the functionality into the block elements..we'll see how it goes


2018-07-04
  - re-wrote the pianoroll.noteRegistry for better storage and retrival
  - created rudimentary playback for pianoroll (seems to work rather well,
    there's no needle yet however)


2018-07-03
  - multi-delete note blocks in the piano roll editor
  - fixed problem in detectOverlap bounding box judgement (which just didn't 
    work)
  - click-n-drag group selection note blocks in the piano roll editor


2018-07-02
  - single block ctrl-drag duplication on the piano-roll editor
  - multi-block select, movement and length adjust
  - multi-block alt-drag duplication on the piano-roll editor (changed from 
    ctrl-drag)


2018-07-01
  - piano rool editor now uses the noteRegistry more vigorously, allowing it to
    set limitations such as maximum note length and maximum limit to an event on
    the right. Also added method that can return notes who have events between
    two defined times


2018-06-29
  - further development into the piano roll editor (which is starting life as an
    advanced launchpad)
    future development ideas
    - ctrl-drag to clone
    - ability to sectect groups of notes (and move around/clone)
    - shift-drag empty space to select area
    - shift/alt-drag used space to adjust velocity (and colour)
    - playfield that goes off the slides (zooming, panning, etc)


2018-06-28
  - fixed synthesizer octave adjust which wasn't doing anything (I'd changed the
    '__globals.audio.num2freq' argument list)
  - the basicSynthesizer and audio_duplicator have interesting backings. They]
    create the regular backing, bet set it's alpha colour to 0, then create a
    new shape with the same points to act as a backing with the desired colour. 
    This allows for the connection nodes to sit under the shape, thus saving on
    all that precise point placement.
  - began work on the piano roll editor


2018-06-27
  - fixed that lanuchpad sequence data duplication copy bug thing
  - added closure-compiler to build chain, creating a 'heavyComp' command along
    the way (to differentiate between the dev 'comp' command) 'heavyComp' runs 
    gravity on only 'main.js' (and can detect if an error occurs stopping the
    script if so) and produces 'workspace.js'. This file is given to the closure
    compiler, which produces 'workspace.min.js'
  - closure managed to find two places where things weren't written right; good
    job closure. (one where i was setting a value to null, then attempting to 
    delete that value; another where i was producing a string to print as a
    warning, but had never actually put that string in a printing function)
  - heavyComp now has a handy little report on the reduction performance
  - added sync button and connection node to pulseGenerator
  - created a musicalkeybaord object
  - fixed non-functional panic button in the basicSynthesizer
  - added musicalkeybaord object to 'finished objects' area
  - fixed universalreadout to interperate the 'data' segment a bit nicer (by
    converting things to JSON)


2018-06-26
  - updated oneShot_multi circuit to have a panic and playback rate features
  - added rate slider and panic button to oneShot_multi object
  - added rate slider and panic button to oneShot_multi_multiTrack object (also
    changed the 'dynamic design' section to use closures in functions instead of
    parsing the IDs of their parents)
  - accidentally left is possbible to set the playback to 0 in the oneShot_multi
    circuit (which the browser did not like) the minimum is now set at 1/1000000
  - loadURL interface added to the oneShot_multi object (these interfaces should
    save time when doing scripted jobs)
  - some more interface work on oneShot_multi_multiTrack and the pulse generator
  - reworded demo 1 a little bit, what with all these interface changes
  - updated demo 1 again, now including riffs from the old party calculator app
    and extra launchpads

  bug found
  - copying launchpads duplicates the internal sequence data, but doesn't copy 
    it


2018-06-25
  - added light feature to the multitrack and single track miltishot audio file
    players
  - also added the ability to select a region to use within the audio track
  - forgot to hook up the fdail in the reverb object

  bug update: I'm really not sure of how to fix this missing playhead thing..
              it really seems like a processing issue; if you step through the
              program manually, everything is set..It seems to work fine
              sometimes and not others..I think I'll leave it for now. I've
              added lights to the multi track object anyway.

  future ideas
  - multi track multi shot thing, should have a panic button
  - zoom features on waveWorkspaces


2018-06-23
  - updated demo1 to have sound and sequencing
  - launchpad object importData method updated to deal with missing values
    (something that sould be done everywhere probably)
  - oneShot_multi circuit load method callback protected against missing 
    function
  - launchpad circuit now runs the pageChange callback after importPage or 
    importPages


2018-06-22
  - added symbols to the rest of the audio file players
  - pushed the audio players and circuits to the 'finished' folder
  - pushed audio recorder and circuit to the 'finished' folder
  - created and added a universalreadout and launchpad to the 'finished' folder
    ('launchpad' has been split up into the object and internal circuitry, in
    turn creating a parts.circuits.sequencing area, and 
    parts.circuits.sequencing.launchpad circuit (which probably needs a rename))
    (also the universal readout doesn't print to the console, but to some text
    in the viewport)
  - reated and added a puse generator
  - did import/export code for the launchpad
  - redid the comp command, so now there's two files produced; a 'test' edition
    thats the same as the old one, and a 'regular' one that has none of the test
    situation code. In this way I can now test and develop like normal, while
    having demo pages that are unaffected. Both still don't have the wrapping
    enabled, so, there's work to be done still.
  - created demo file of the multi-track audio file player hooked into a 
    launchpad and pulse generator..still needs audio files ofcourse

  bug found
  - odd bug in audio file player looper, where hitting the play button
    repeatidly would always restart the audio, but sometimes the play head would
    disappear. Seems to be caused by the style of the needle not being set in 
    time before the request to move the needle to the other side of the viewbox
    occurs (the style has a transition setting). The commands are being 
    performed in the correct order..it might be the browser not computing the
    style in time


2018-06-21
  - updated continuous dial callbacks to be wrapped in try/catch blocks
  - redid the distortion unit and moved it to the developed objects folder
  - jumped ahead and reorganised all the parts into 'elements' and 'circuits'. 
    Have to rewrite alot of stuff to use the elementMaker now
  - pushed distortion, reverb and filter into the "finished" objects area
  - added symbols to some of the audio file players

  future ideas
  - splitting up 'parts' into 'elements' and 'circuitry', where 'elements' are
    the graphical parts that a user would interact with (slides, dials, button,
    graphs, labels, lights, etc) and 'circuitry' are parts of pure code that do
    work (like distortion units and data processors)
      Right now, 'parts' is almost entirely 'elements', so I'll wait till the 
    circuitry parts come out of development more. I'd have to rewrite the 
    element maker..though it's name and function is already correct


2018-06-20
  - created a rudimentary multi-track oneShot file player object. The idea is
    that one could load up drum beats, hook that into a launchpad or some pulse
    generator, and have it perform drum beats for you
  - added math.normalizeStretchArray to utilities (and fixed it up along the 
    way)
  - added math.curvePoint functions to utility, and fixed up other aspects of 
    curve generation
  - udpated smoothSet in the slider and continuous dial parts, in a bid to make
    them more efficient and time conscious..I think it's worked
  - started on revamping the testSituations folder

  future ideas
  - continue with 'testSituations' do-over, while updating partially developed
    objects, and pushing them to the main list


2018-06-18
  - wrote up a recorder object (with state lights and time readout)(the controls
    are honestly a little more clunkly that I'd like, but it works)


2018-06-15
  - added 'export' functionality into recorder2 (in prep for the audio disk)
  - little bit of development on audio disks (which I'm going to shelve for now)


2018-06-14
  future ideas
  - audio disks (that you can move in and out of audio recording devices and
    playback devices, etc)(they'd be a simple object that just contained one
    audio-encoded blob)


2018-06-13
  - developed audio recording object and circuitry to include pause/resume
    functionality, along with the ability to get the recording length at any 
    time. I've also simplified the input/output audio nodes somewhat. The 
    object is pretty sparse at current however.
  - worked on simplifing audio channels; turns out things are already pretty
    simple as they are (I was worried that the audio streams were mixing channel
    counts, and didn't know how that was effecting things. Seems only the audio
    file player was suffering from this. Need to be more vigilent about channels
    and streams in future)

2018-06-12
  - created rudimentary audio recording object. Currently all it does is record 
    the audio given to it, and then save that audio to a file when you  press
    the stop button.

  future ideas
  - going to have to change all audio connections to single channel, instead of
    this sudo-single channel we have currently


2018-06-08
  - there's now different types of oneShot circuitry; one that allows multiple 
    instances to play, and one that doesn't (named oneShot_single and 
    oneShot_multi)
  - wrote up looper circuitry and object. It just takes a file and always loops
    it while playing. The circuitry has the ability to loop a sub-section of the
    file, but the object doesn't have that feature
  - wrote up new verison of the generic audio file player, which is written a 
    bit nicer, with some small changes
  - test situation 10 / 2 / 2 is looking good, now with each player type in an
    object (and labels)


2018-06-06
  - upgraded the needle-positioning on the oneShot player object. It now uses
    a transition instead of constant updates to the position.. I need to
    investigate whether a similar technique could be used for other players
  - needleOverlay now has the ability to disable regular selection and area
    selection
  - gave the oneShot object a trigger data input
    

2018-06-05
  - turns out there was a flaw in how 'positionFromMousePoint' was being used.
    'getCumulativeTransform' doesn't do a great job in getting the actual X/Y
    point, so 'getTruePoint' has been created which does much better
  - 'positionFromMousePoint' replaced with 'getPositionWithinFromMouse' which 
    has the same functionality, but a nicer interface
  - updated grapher_audioScope and grapher_PeriodicWave to the new way of
    selecting what type of graph you want
  - updated testObject to have all the latest graphers
  - added 'loadAudioBuffer' to utility.audio
  - wrote up 'oneShot' audio file player circuit and object (object needs work)


2018-06-04
  - needleOverlay work complete, seems pretty solid now
  - worked on integrating the needleOverlay with the audioFilePlayer object. You
    can now select the loop region, move it around and disactivate it. It's a 
    bit rickity, but it works (you might want to check up on the 'loopCompute'
    and anything to do with getting the current time in the audioFilePlayer
    audio part. It works on my machine!)
  - cleaned things up a bit in test situation 10 - 2


2018-06-03
  - more work on the needleOverlay; seem to have basic mouse interaction working
    now


2018-06-01
  - redid the original grapher to be more like the new canvas grapher, and
    subsequently made it possible (and easy) to switch between the two. Parts
    that use a grapher part, now give the ability to chose which you want to use
    (canvas is default)
  - upgraded the slider to to have 'click to go to this position' 
    functionality. Also the handle has a little more grapple area than is
    visible
  - began on overlay control object (which will be used with the waveWorkspace
    later)


2018-05-31
  - finished off canvas-based grapher, and put it into the audioFilePlayer 
    object
    this move better now (as expected)
  - created wave form workspace with grapherCanvas. It's pretty nice too.
  - added rudimentary selection-area to grapher_waveWorkspace (need to work
    on backward selection)


2018-05-30
  - there's a problem with putting a canvas in a svg element. It appears to be a
    known bug on chrome, but no-one has dealt with it since 2015. There's a note
    on the bug reporting site that's from 2018-02-14 that seems to claim that 
    they'll be able to fix this bug..nothing after this though.
      It seems I can hack together a fix where an image element is actually 
    used, and a canvas element is hidden. The canvas is drawn to, and then a
    'print' command can be run which prints the canvas data to the image
    element. It's essentially the same (I think). Problems now are to do with
    detail, but I think that can be fixed...probably user selected


2018-05-29
  - current time in audioFilePlayer now accounts for playback rate (but not
    detune, which is just a different way of changing the playback rate, so I've
    removed that feature)
  - developed rudimentary waveform viewer; but its causing a lot of strain of 
    then browser. I'm working on integrating a canvas element to deal with
    this. There's still a lot of time spent on gathering the points to graph
    though..


2018-05-28
  - redid the slider and slider panel; things are simpler now and I've thrown   
    out the horizontal and vertical versions of both, in favour of just using an
    angle value.
  - wrote up new version of the audioFilePlayer (developing with a new object)
    (the 'currentTime' method doesn't account for playback rate changes..need to
    fix that)


2018-05-25
  - added 'seconds2time' and 'padString' utilities under math (the second isn't
    really math though..I should make a 'string' catagory or something...)
  - fixed up play/pause/stop functionality in the audio file player, and added
    the ability to get the current time
  - horizontal slider has been updated to override programmactic 'set' calls
    when the user is pulling the handle..it works, but needs work. Also it needs
    to be copied to other such controls
  - audio file player object now has a scrubber (everything needs work)

  future ideas
  - theres some 'detune' and 'play rate' methods in the audio source buffer
    thing somewhere..


2018-05-24
  - got upload of audio files to work. there's features for looping, starting
    mid track and graphing the waveform too that need to be worked on now
  - expanding audio file playing object to display the name of the loaded track,
    and have play/stop buttons (pause is under development)


2018-05-23
  - began work on the overlay menu
  - updated svg element layout to have different global panes, also there's an
    improved system for finding the scale of those global panes
  - changed how object.requestInteraction works; now it requires a global pane
    name to work with. This is so one can differentiate between actions for the
    workspace and ones for the menu. Currently, most mouse actions aren't really
    necessary - buttons and sliders work by their own anyway, and menu items
    aren't moveable - but things change and things should be open to this.


2018-05-22
  - redid audio_scope and audio_duplicator in new style, and put them in the 
    objects folder
  - successfully got the audio producing node to split the loaded track into its
    left and right channels


2018-05-21
  - another day, another attempt at that shebang thing in gravity
  - redid the basic synthesizer object with the new object builder system
  - created basic audio playback object (still working on 'uploading' files)


2018-05-18
  - redid the paste fix from yesterday, to put the 'declareObjectGrapple' back
    into the object builder
  - fix in autio_meter_level, where not setting the angle value would produce
    the element upside-down. It now defaults to 0 so that doesn't happen.
  - redid object builder to have z position control, it's also just flatly
    better now
  - making all the element callbacks lower case (it was inconsistent before)
  - another attempt at making gravity work everywhere (now mac works..we'll 
    see)


2018-05-17
  - fixed keyboard interaction from yesterday (the logic was broken) there's
    now also the option of 'all' so you don't have to declare everything
  - fixed onmouseup problem in button_rect (it's that this/timeout thing)

  bugs
  - the new object-design concept has totally broken the paste functionality :/
  -> scratch that; I fixed it by pulling the 'declareObjectGrapple' function 
    out ..still a little wonky I feel


2018-05-16
  - created readout using sixteen segment display
  - wrote up a pretty snazzy audio-input object with input select

  bugs
  - the logic in keyboardInteraction/declareKeycaptureObject/keyProcessor is 
    broken


2018-05-15
  - created sixteen segment display


2018-05-14
  - updated gravity shebang so it'll work in other systems (hopefully)


2018-05-11
  - fixed preservation of indentation in gravity
  - wrote up objectBuilder (a bit crude, but it's there)

  future ideas
  - you could probably delete that 'parts/modifiers' folder


2018-05-10
  - test situation 10 "recorded audio" / 1 "microphones" works, and rather
    simply too. All very gentle and nice
  - created rudimentary audio-in object


2018-05-09
  future ideas
  - audio in / import-export / playback / record / edit
  - look into "DynamicsCompressorNode", "DelayNode" and "IIRFilterNode"


2018-05-08
  - seems the feedback problem was caused by the 'Q' being set way too high. It
    used to be at 10000, but now it's at 0.1 and things are much more 
    reasonable
  - wrote up simple filter object

  future ideas
  - none of that 'power on' stuff to get round the new "no auto-play" features,
    instead, I'll just rely on some other activation method external to the
    main system. Keeps things clean I think


2018-05-04
  - chrome's "no autoplay" feature has arrived, and it's causing problems. You
    can go into 'chrome://flags/' and turn it off, but this is only a 
    development solution. There's going to have to be some sort of activation
    method..perhaps a gain dial on the audio sink that's set to zero.
    - added a 'power' button to the audio sink, but this will have to be
      changed to something else eventually
  - wrote synthesizer 3 which is gainJourney based (though it accommodates the
    velocity of a note)
  - wrote up a reverb unit and object, which uses those impulse responses from
    before. There's an output gain dail, a method of selecting between the ~38
    types and a wet/dry dial

  - filter unit has strange feed-back loop I can't seem to find the root of ):/


2018-05-02
  - wrote a pile of notes on synthesizers
  - fixed a little problem in basicSynth_2 where setting the rate dials to max
    would stop the wobble completely
  - start test situation 9 "audio effect units"
  - pushed 'changeAudioParam' to '__globals.utility.audio.changeAudioParam'
  - wrote up simplistic distortion box (complete with in/out gain adjust,
    distortion, resolution and over-sample controls. Seems to work pretty well)
  - added 'onRelease' callback to 'dial_discrete'
  - the 'onChange' callback for 'dial_discrete' is now only called when the
    value actually changes
  
  future ideas
  - reverb unit
  - EQ unit
  - multi-band distortion unit
  - mixing units


2018-05-01
  - added adjustment dials to new gain-wobble synthesizer (for period and depth)
  - updated gravity to ignore files which have names that begin with a dot
  - created synthesizer 2 and it's object (which incorporates gain and detune
    wobble; with dials for depth and rate)

  future ideas
  - need to do layouts of potential new synthesizers


2018-04-30
  - rewrote basicSynth into new style (it's actually longer than the original)
  - pushed the new synthesizer into main place (should probably rename it)
  - renamed synthesizer to synthesizer_basic
  - wrote up prototype versions of a synthesizer with gain and detune wobble
    (much better efficiency) and a prototype synthesizer object with gain wobble

  future ideas
  - we're going to have to make more self-contained synthesizers instead of this
    multi-unit idea, as things are pretty heavy on the processor, and there 
    seems to be a lot of time spent on fixing things that aren't that necessary
    (like the warbler sending the correct gain adjust signals fast enough, and
    the dial being able to keep up..slow moves are pretty much fine)
      It goes slightly against my desire to do everything in atomic parts (or at
    least, have the option to) but here we are. Audiotool is contained like 
    that. Logic, Acid, etc. all the same. I suppose its a battle between
    wanting to make things as open as possible, which led me to this
    everything-atomic way, but I think I can provide the same level of control
    with a more integrated (and efficient) units.


2018-04-27
  - new audio sink now has left and right audio channel input and a meter for 
    each
  - fixed a problem with cable redrawing which I hadn't noticed before
  - fixed slow duplication on the periodicWaveMaker, which had to do with
    calling update loops with the slidepanels. Slidepanels now use their own
    code more and don't rely on the individual sliders for panel-wide updates
  - audio meter part; complete with level; slow-moving background level and 
    markings (looks pretty pro too)
  - tried making a 'warbler' which changes the gain of a synthesizer a lot. 
    Seems to break manual control though, and if you go fast enough the dial
    doesn't move 
  

2018-04-26
  - finished redoing utility (that was bigger than I expected)
  - rearranged test situation 8 and some of the objects to look nicer
  - periodicWaveMaker now sends its settings on connecting
  - worked on redoing the audio sink to have an audio meter (working on an audio
    meter while I'm there)


2018-04-25
  - redoing utility


2018-04-24
  - redoing utility


2018-04-23
  - redoing utility


2018-04-20
  - updated keyboard interaction, so now objects have to declare what keys they
    want to use, and what modifiers will go with them (none, meta, control, alt
    and shift) The system behind handles everything else, and knows to run the
    global functions if nothing matches. Objects will also be told about 
    modifier keys that accompany a key.
  - wrote up an audio duplicator and added it to test situation 8

  future ideas
  - onmouseleave for objects?


2018-04-19
  - periodicWaveMaker's slides were entering values upside-down, so, fixed that
  - renamed 'compiler.py' to 'gravity' on Dylan's suggestion as it sounds cooler

  future ideas
  - make the audio connection nodes and cables flicker with the audio that they
    are carrying
  - redo keyboard capture, so object don't capture the entire thing when they
    only want one key. Have the objects declare what keys they want.


2018-04-18
  - fixed a problem with the dial_continuous, slide_horizontal and 
    slidePanel_vertical where applying overlapping smoothSets caused confusion
    in the animation. Now, the previous one is just cancelled and the new one
    takes over from where the old one left off
  - updated the synthesizer to incorporate different transition curves in attack
    and release (exponential still doesn't work though)
  - had to reverse sin/cos periodic wave input in the synthesizer..curious
  - began work on an audio scope, it can accept audio data and visualize it,
    there's also a 'hold' key and a dial for adjusting the refresh rate

  future ideas
  - audio duplicator
  - audio combiner


2018-04-17
  - fixed key_rect in test situation 1 test object (remember not to on
    onmouse-anything. It's all onkey-something)
  - added curve maker into utilities (linear, reverse_linear, sin, cos, s,
    exponential)
  - added smoothSet to dial_continuous, slide_vertical, slide_horizontal,
    slidePanel_vertical and slidePanel_horizontal
  - in test situation one, the rect_button now causes some new functions
  - updated the synthesizer to have smooth transition options when setting gain
    and detune (exponential doesn't seem to work though; but user-defined does
    ..curious)
  - updated basicSynth to accept smooth changing values for gain and detune, and
    adjust the dials and synthesizer accordingly along with the stored value for
    any new oscillators that are created during the time of transition

  future ideas
  - change attack and release in basicSynth and the synthesizer to incorporate
    different transition curves


2018-04-16
  - started log
  - added glowbox to test object in test situation one
  - deleted unneeded files
  - fixed up the first test situation a little to use the latest writings
  - looked into adding curve-based movement to the synth and continuous dials
    dials
