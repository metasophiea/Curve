 ------- ------- ------- ------- ------- ------- ------- ------- ------- -------
2019-01-23
  future ideas
  - core version 2? this time in webGL and with little changes to how some 
    other things are done ('getShapeUnderPoint' to actually return all shapes
    that are under said point, in the order they are layered)
<<<<<<< HEAD
    We could probably use roughly the same data structure for describing and
    organising shapes.
    ...now that I think about it..the "webGL" element needs only ot apply to
    the actual render of the shapes; and not to do with the graphical structure
    or anything like that..this could save alot of development time...maybe.
=======
    We could probable use roughly the same data structure for describing and
    organising shapes.
    ...now that I think about it..the "webGL" element needs only ot apply to
    the actual render of the shapes; and not to do with the graphical structure
    of anything like that..this could save alot of development time...maybe.
>>>>>>> c6518881b9bcdf4ac474a5aec7b751c73f97c949
    I'll start a webGL experiment in the workspace at some point


2019-01-22
  - added way of selecting which colour to clear the canvas with (accessable
    with workspace.core.render.clearColour)
  - added similar method to control; workspace.controlscene.backgroundColour
  - played around with adding "tron-like" stylings to the basicSynthesizer
    (with some success)
  - added slidePanel_image (which has an overlay texture)
  - fixed slide_image a little. Seems to be a thung with the way shapes are
    selected from a point with a callback. Core will search down for a shape that
    has the callback, while system will use the frontmost shape and search up
    through parents. This sometimes means that callbacks attached to groups are
    not found. A solution is to use shape covers for callbacks that span over an
    entire object (layering other elememts as necessary so that other
    functionality isn't lost)
     Updated slide along the way. Both are working better now.
  - added rangeSlide_image (fixing some things about rangeSlide along the way)
  - added list_image
  - added checkbox_ (similar to the generic version of button) also
    checkbox_rectangle, checkbox_circle, checkbox_polygon and checkbox_image
  - fixed curve's menubar's calls to control functions
  - borked curve unit descriptions along the way (but also fixed them)

  bugs
  - strokeWidth's dissapear sometimes, making outlines very thin


2019-01-21
  - upgraded button_image, dial_continuous and dial_discrete to be able to deal
    with no image links (they just default to the non-image version)
  - added slide_image (with defaulting)

  future ideas
  - texture packs (of images so that all units can look the same thematically)
    It would be good to store them in /docs aswel, making them accessible to the
    web, and not impeding on /docs/images

      docs
        texture
          curve
            part
              button
                overlay.png
                off.png
                up.png                 press.png
                select.png             select_press.png
                glow.png               glow_press.png
                glow_select.png        glow_select_press.png
                hover.png              hover_press.png
                hover_select.png       hover_select_press.png
                hover_glow.png         hover_glow_press.png
                hover_glow_select.png  hover_glow_select_press.png
              dial
                overlay.png
                handle.png  slot.png  neelde.png
              slide
                overlay.png
                handle.png  slot.png  backing.png
              slidePanel
                overlay
                handle.png  slot.png  backing.png
              ...
            unit
              basicSynthesizer.png
              distortionUnit.png
              ...

    it makes sense that these textures are sorted as being specific to curve,
    as then one can also bundle in the unit textures. One could drag the part
    textures to other projects, but they aren't specific to the interface layer.
      They're specific to curve, as the part textures are to match the unit 
    textures.
      The question is; what should the default textures should be? Right now,
    I'm currently making them default to their non-image based cousins and in
    turn using their defaults


2019-01-20
  - fixed curve's dropdown problem from yesterday by adding category data to the
    unit's metadata 
  - added button_ (a generic version, for making more types of buttons faster
    and easier)
  - replaced button_rect with button_rectangle (a more advanced version)
  - added button_circle
  - added button_polygon
  - added button_image
  - added dial_image_continuous and dial_image_discrete
  - continued the basicSynthesizer (with an image for a background) to give it
    dials that had images for their parts.. doesn't look great (mainly because I
    spent 0 time on what the images are), but it totally works :D

  Compilation Results
  - workspace.js                         1243 Kb  (100%)
  - workspace.min.js                      378 Kb  (30.42%)

2019-01-19
  - improved workspace.library.math.fitPolyIn initial position finding routine
    by making is search in increasing circles of size, where the step between
    each circle's radius also increases, thus allowing for more accurate poly
    placement (particularly when sandwiched between two other polys)
  - created basicSynthesizer with an image for a background
  - removed the concept of "categories" from units
  - removed the concept of "alpha" from parts, and replaced with "collection"
  - began developing more advanced versions of parts, starting with buttons

  bugs
  - borked curve's create dropdown along the way

  future ideas
  - transparent image overlays for parts and units


2019-01-18
  - workspace.library.math.fitPolyIn is now working wonderfully
  - workspace.control.scene.rectifyUnitPosition has also been updated, which
    applies fitPolyIn to all units. Things are pretty sweet.
  - fixed problem of rotating a unit and the space not rotating with it
  - added 'enableUnitCollision' to control.interaction 
  - added "clippedImage" basic part to interface layer

  Compilation Results
  - workspace.js                         1196 Kb  (100%)
  - workspace.min.js                      354 Kb  (29.65%)

  bugs
  - when moving a group of things; they shouldn't collide off eachother
    ...probably?
  -  control.scene.getUnitsByType just doesn't work


2019-01-17
  - latest version of workspace.library.math.fitPolyIn is working pretty
    beautifully; it's still based on the brute method from before, but now does
    things is a more efficient way, and seems to be able to deliver an accurate
    offset very quickly.
   - developing workspace.library.math.fitPolyIn2 (almost there)

  bugs
  - rotation of unit doesn't rotate it's space at all


2019-01-16
  - redid control switches as "interaction"
  - added "getAllUnits" method to control.scene
  - added 'enableUnitInteractable' and 'enableCableDisconnectionConnection'
    methods to control.interaction (which runs through all units in the scene
    and activates their 'allowIOConnections', 'allowIODisconnections' and
    'interactable' functions as necessary)
  - activating devMode stops all changes to control.interaction from working (it
    essentially locks things in place, back before any of the interaction
    settings were changed to 'false')
  - renamed 'testUnit' to 'testUnit_1'
  - created new test unit 'testUnit_2'
  - added workspace.library.math.fitPolyIn, which is used for finding the closet
    place a poly can fit in a field. To be used with
    workspace.control.scene.rectifyUnitPosition
    ..it kinda works? Right now it's using a simple spiral algorithm, which does
    the job, just not very efficiently..or that well. Doesn't get the closet fit
    either. Needs work. Need to set up a proper testing environment for it.

    developed future to include a correction part..its really inefficient, but
    actually returns better accuracy, and is less jumpy too. Needs more work
    though
  - filled in workspace.control.scene.rectifyUnitPosition to use 
    workspace.library.math.fitPolyIn..which doesn't totally work yet, but we're
    getting there


2019-01-15
  - added "interactable" argument and methods to (all control parts)
      button_rect
      slide
      slidePanel
      rangeSlide,
      checkbox_rect
      dial_continuous
      dial_discrete
      list
      needleOverlay
      grapher_waveWorkspace
      rastorgrid
      sequencer
  - fixed problem with needleOverlay mouse interaction movement being borked
    by commenting out some "/2"s...need to check again how it is on mac (with
    its high density pixel display) and if things are good, remove the
    aforementioned commented out parts.
  - added "interactable" method to units, to allow blanket setting of all
    control parts (except connection nodes)
  - added "interactable" methods to units, to allow blanket setting of all
    IO connection nodes: "allowIOConnections" and "allowIODisconnections"
  - renamed "enableSceneModification" to "enableUnitAdditionRemoval"


2019-01-14
  - removed all shadow related things from core shapes and interface (which is
    everywhere)
  - updated connectionNodes so that one can disactivate mouse-started
    connection and disconnetion (while allowing programmable changes)

  notes
  - need to do this "disable mouse interaction" thing to all control parts, then
    add complimentary functionality to units


2019-01-13
  - fixed menubar scaling

  Compilation Results
  - workspace.js                         1202 Kb  (100%)
  - workspace.min.js                      349 Kb  (29.10%)
  - workspace.min.js (web compressed)     71.4Kb  (5.94%)


2019-01-11
  - updated the readme a little
  - put the test unit back into the interface layer, under a 'test' collection
  - redid the way testing is done, because it was over complicated. Now there's
    just one testing program file, and one html file to run it. No frils.
    The test.js master file in main now only includes the test/main.js file. The
    test files it includes are incharge in including what layers they need and
    starting rendering on their own. It's all a bit cleaner.

  future ideas
  - give parts a method to turn off human interface editability
  - give units a method to turn off human interface editability for individual
    or all parts, as well as a method to stop their own movement or copying etc
    by human interaction


2019-01-10
  - added new layer "5 - curve" which will contain much of what makes the "music
    application" different from anything else one could make from the layers]
    below. The main JS file is now called curve.js (and curve.min.js) and also
    there is workspace.js (and workspace.min.js) which won't have any of the
    code from this 5th layer
  - moved the contents of control's menubar to "5 - curve"
  - moveed all the units into "5 - curve". They're all kinda prticular to what
    curve is about, so it makes some sense. The original unit folders are still
    there, they're just empty now.
  - edited comp.sh and heavyComp.sh alot to reduce their size and amount of
    copy-pasted code
  - redid layout a little. Now there's three .js files to choose from; core, 
    workspace and curve. Each with their own .min.js, and their own .test.js
    All these files are now in a /js folder too. All the corresponding html
    files are still in the /docs folder
      Tests have changed too, they're now named, one for each of the .js files,
    with each of them setup to access different tests.
      The index file is just a copy of curve.html.

  bugs
  - there seems to be an issue with window resizing, when scrollbars are
    allowed. The function core.viewport.refresh/adjustCanvasSize/dimensionAdjust
    appears to adjust the size for when the scrollbars are present, but upon the
    next refresh only remove the horizontal bar's space, leaving an empty space
    on the right side where the vertical scrollbar used to be. The function has
    code to stop itself being run when there are no changes in window size.
    Removing this check allows the system to correct itself. So, the challange
    becomes how can one detect this issue and allow the function to run.


2019-01-09
  - fixed rendering issue with rectangles and images, and the anchor value (it 
    was being calculated fine for extremities, but not for the actual render)

  Compilation Results
  - workspace.js                         1211 Kb  (100%)
  - workspace.min.js                      340 Kb  (28.07%)


2019-01-08
  - fixed comp script to rename the workspace renaming from "core" (which was
    interfering with other definitions of core within core) to "coreGraphics"
  - fixed core.viewport/adjustCanvasSize/dimensionAdjust to add in 'px' when
    dealing with values that aren't percentages
  - added another demo to core.html (plus a little URL way of accessing them)


2019-01-07
  - menubar is not scaled correctly on non-hdp screens. Have added scale
    argument to menubar builder (and to control.gui)
  - updated heavyComp.sh to work better on different systems
  - removed "workspace.system.keyboard.pressedKeys" from structure.js (it
    violated the layered referencing thing. Now the function takes an array of
    "activeKeys" to perform the same job)
  - wrapped main code in encapsulation code, so 'workspace' isn't an accessible
    global anymore
  - added renaming stage for core.js to comp.sh, to rename 'workspace' to 'core'
    ..it's kinda pointless as the variable isn't accessible anyway


2019-01-06
  - moved trash into archive
  - got closure compiler working again, by having heavyComp automatically edit
    workspace.js to change the offending terms (namly "static" and "interface")
    (just two sed commands and a temporary file) Still a warning about
    "Suspicious" though, which I haven't been able to remove
  - added compilation for core.js, and added back in it's html demo

  Compilation Results
  - workspace.js                         1110 Kb  (100%)
  - workspace.min.js                      344 Kb  (31.04%)
  - workspace.min.js (web compressed)    69.4 Kb  (6.24%)


2019-01-03
  - demo location has been fixed
  - canvas experiment
    - fixed player unit's import of audio data
    - fixed oneShot_x not displaying needle position correctly
    - fixed adjustment of needleOverlay selected area
    - fixed problem with double-clicking and clicking on slider on unit (it
      would select the unit instead)(fixed by adding a useless "onmousedown"
      listener to slide. Have done something similar for the rangeSlide. Kinda
      kludgy)
    - can now adjust signal strength on sequencer on mac (the blocks now watch
      for 'command' in addition to control)
    - midi sequencer now has a background pattern that looks like a keyboard
    - fixed sequencer part (where the front interactionPlane wasn't being
      resized during zoom)
    - fixed double clicking slider on oneShot 8 track to reset
    - fixed pressing stop on oneShot 8 track leaving lots of mark behind
    - fixed midi sequencer not stopping signals on loop (things were still named
      "note")
    - fixed synthesizer not applying gui wave type setting on file load (the
      dial_discrete part wasn't running onchange properly)
    - fixed sequencers not remembering view areas (there was no import/export
      for it)
    - fixed "New Scene" not stopping audio (the function only cleared the
      shapes, now it selects all the units and deletes them)
    - fixed connectionNode_data flashing (classic timeout with things changing
      issue)
    - fixed problem with documentUnits and unit connections (the way they were 
      being documented was wrong (and over-complicated))
    - system now stops you from leaving the page with a little alert
    - new demo mode (which currently just skips the leave-page alert)
    - new demo scene made
    - fixed problem with pasting units, and their positions being weird (classic
      case of converting windowPoint to workspacePoint twice)
    - added some master switches
        mouseWheelZoomEnabled
        mouseGripPanningEnabled
        mouseGroupSelect
        enableSceneSave
        enableSceneLoad
        enableMenubar
        enableWindowScrollbarAutomaticRemoval
        enableUnitSelection
        enableSceneModification
    - a few of the shapes didn't have code for adjusting to being staic, so I 
      changed that
        
    - canvas experiment has just become the main version!

    future ideas
    - the ability to stop interaction with cables and units, on a global and 
      case-by-case bases

    bugs
    - it appears that closure is unable to deal with the word "static" as a
      variable, so, looks like I'm going to have to rename some things in core
    - still need to do something for that autoplay policy thing


2019-01-02
  - canvas experiment
    - added code to the 'system' to account for mac keyboards. Now, when the 
      "command" key is pressed (which the browser interprets as "meta") and if
      the program is being run on a mac, a new pressedKey value of "command"
      will be added. Same for "option"
    - updated core.viewport.scale, so that if you set it to zero, it sets to the
      default scale instead
    - striped documenting/printing of units code out of copy/paste and into  
      their own functions under control.scene.
    - added scene export and import methods
    - added file load/save functionality
    - updated all alpha units to accept angle creation arguments

  issues:
  - the 'player' unit, doesn't seem to be exporting/importing audio data
    correctly. One should check the other file players too
  - saving units with audio data is slow


2019-01-01
  - canvas experiment
    - fixed problem in connection node rotation
    - added rudimentary unit rotation (shift and alt)
    - added 'forceMouseLeave' to button_rect, so now the list part doesn't have
      that left-over hovering when you scroll around
    - menubar dropdowns now close when there's a click in the main work area
    - added alt-click-drag to duplicate selection
    - upgraded functionListRunner to allow for the concept of 'or' so now, one
      can select different collections of required keys (previously "special
      keys") that are to be considered valid. A good example in deleting units,
      which can be done with the delete key or the backspace key
    - added keyboard hot keys for cut, copy, paste, duplicate and delete

  
2018-12-28
  - canvas experiment
    - fixed up unit copy/paste code (looking good now)
    - added in plumbing code for unit position rectification
      ( workspace.control.scene.rectifyUnitPosition(unit) )
    - added viewport size adjustment code to control, so now when the window is
      resized, the canvas will be too.
    - created menubar (with automatic width adjustment)(many functions still
      missing actual functionality)
    - disabled text shape derender (as its just not working)


2018-12-27
  - canvas experiment
    - added copy/paste code (needs a rewrite)


2018-12-26
  - canvas experiment
    - added click-and-drag group selection
    - added generic selection glow to all units (based on their space)
    - added update code to the unit builder so that it's personal space will be
      updated on moving it around
    - added 'delete all selected' function to selection control
    - added 'disconnectEverything' function to unit


2018-12-25
  - canvas experiment
    - began work on unit grapple and selection
    - unit movement working


2018-12-23
  - canvas experiment
    - created looper (unborked)
    - created oneShot_single
    - created oneShot_multi
    - created oneShot_multi_multiTrack
    - discovered that window.devicePixelRatio is a thing, and now things are 
      looking a little prettier
    - began work on "4 - Control"


2018-12-20
  - canvas experiment
    - turns out, you don't need to have the image element to draw a canvas onto
      another canvas; so now the canvas shape just direct draws it's internal
      canvas. This has made updaing the shape sooooo much smoother

    - I've decided to make sub-canvas versions of some of the more heavy parts
      in a bid for speed. This actually seems like a great idea, as it will
      reduce the render load on the main renderer (though it does sorta throw 
      away alot of the work done on core (derendering, shapes, etc..))
        I mean.. you don't really need to de-render the elements with a canvas,
      its just an image..it's really up to the part itself if it want's to
      optimise the drawing of itself.
        Core has all this functionality for shapes, hierarchys, derendering,
      viewports and interation and all sorts. The canvas shape is just a
      direct-draw method. Which for things like the grapher or other display 
      parts, is perfect, because they're all about how they look, and nothing 
      about how the user interacts with them...maybe I'm feeling something that 
      isn't there

    - created sevenSegmentDisplay_static
    - created sixteenSegmentDisplay_static
    - created readout_sixteenSegmentDisplay_static
    - updated multibandFilter to use readout_sixteenSegmentDisplay_static
    - marked improvement on performance now. Hovering arond 33fps now. This
      could be the answer to all our fps problems
      
    - updated pulseGenerator and pulseGenerator_hyper to use
      readout_sixteenSegmentDisplay_static
    - another performance boost; up at ~37fps now. Touching 40fps

    - removing the sequencers boosts things to around 43fps, that might be the
      next part to make static

    - shape count: 2292 (~1500 less shapes)

    - created recorder
    - began work on looper (seriously borked)

  notes
    the problem we have is that the main render loop has a lot of shapes to draw
    every cycle, which ofcourse is heavy on the machine. We've solved this with
    the grapher by saying "hay, these shapes don't change all that much; how 
    about I'll handle their particular renderings and you can just render this
    still image on your cycle"
      Which brings the question: maybe all parts could be sub-canvases? Or all
    units? Either way, we can certianly start with the readout part. That seems
    to have the most parts right now.


2018-12-19
  - canvas experiment
    - created grapher_static part (and renamed 'grapher' to grapher_active)
      which uses the new canvas shape to draw graphs. The update is a little
      glitchy-looking; but it works fine and speeds things up wonderfully.
    - slowed down readout_sixteenSegmentDisplay's text scrolling a little bit
    - created player

    I've just noticed that with all these unit's added to the one scene; the
    app is only running at 25fps (50+ is with nothing) This bugs me, as one of
    the main reasons for doing this canvas thing was to make things faster than
    SVG. Research is ongoing
    - shape count: 3781

    .. I think it might just be a overall speed thing :/

    ideas
    - maybe replace those readout displays with a sub-canvas version? There
      seemed to be a bit of a slow down when they entered the viewport. I need
      to improve their refresh however, it's a bit flashy right now.


2018-12-18
  - canvas experiment
    - redid layout
      0 - library
      1 - core
      2 - system
      3 - interface
      4 - control
    - also, renamed 'object' to 'unit', and 'canvas' to 'workspace'
    - pulled circuits out of 'parts' and into its own folder in '3 - interface'
    - did what I could to try and contain references to 'workspace' from within
      part and unit files.
    - compartmented circuits, parts and units into 'alpha' colletions
    - created pulseGenerator_hyper
    - created player (audio playback is pretty bad, and reduces the framerate
      to ~16)

    it appears that having a large waveform in the player slows rendering down
    temendously, so work is needed there to have still images. Even so, 
    removing that factor doesn't improve playback at all
    (possibly a position update feedback problem)

    - It was a position update feedback problem. Waveform image thing should
      still be done though.
    - added canvas shape to core, which is like an image you can use like a
      canvas. With resolution control, and direct access to the standard
      canvas methods.

  ideas
  - grapher needs a 'static' mode; where the graph is drawn to an image, and 
    that image is displayed instead. Only when the graph's "draw" command is 
    run, should the image be updated. This was sortof how it was done on the 
    old system. One would also have to select an image size, to account for 
    zooming around.
  - image shape needs image caching, so that a smaller copy of the image is
    generated when an image is loaded, and this copy is used when the shape
    is being drawn very small. A number of versions could be made in this vain.
    

2018-12-17
  - canvas experiment
    - created filterUnit
    - created reverbUnit
    - created multibandFilter
    - created launchpad
    - fixed problem with rangeSlide, where the onmousedown callback wasn't being
      attached to the invisible handle, but the handle group
    - created basicSequencer
    - created basicSequencer_midiOut (probably a little shakey)

  ideas
  - the cable will need to be able to access the 'space' value of objects, thus
    needs to know that objects are a thing, thus breaking the wall between
    section 3 and 4. My idea is to combine the two.
  - I'm probably going to pull the 'circuits' out of 'parts' too. One could make
    a strong argument for putting them in the library section

  note
  - the compiled file is almost the same size and the old one now. ~12,000 lines
    compared to ~13,000 lines. I imagine that once this transition process is
    complete, it'll be more that the old one.


2018-12-16
  - canvas experiment
    - twas less of a bug, more that I hadn't finished uncommenting everything
    - created distortionUnit


2018-12-15
  - canvas experiment
    - fixed text scaling problem (note: don't use the 'size' parameter again!
      only use the font string to define size)
    - created basicSynthesizer object
    - created audioScope object
    - created audioSink object
    - created audioIn object (audio working)
    - created musicalKeybaord

  bugs
  - musicalKeybaord's velocity dial doesn't effect anything apparently


2018-12-14
  - canvas experiment
    - created universalreadout object


2018-12-13
  - canvas experiment
    - created pulse generator object


2018-12-12
  - canvas experiment
    - wrote up the object builder
    - added 'declare object grapple' code, which has been renamed slightly to
      "canvas.object.builder.objectGrapple.declare"
    - shifting object movment, copying and selection code out into control
    - created test object (test/4 - object/2.js)
    - updated needleOverlay to have mouse interaction (which I guess I left out)
      shift-click for area, regular-click for select
    - created the object collections and the alpha colletion (with just the
      testObject right now)
    - copied all the circuitry parts in
    - created audio_duplicator object
    - created basicMixer object

  future ideas
  - might have to make the conection nodes a little darker


2018-12-11
  - canvas experiment
    - more polishing with the sequencer cursor
    - bug where if you held down both alt and space; an infinate loop would
      occur. Fixed it by not allowing interactionPlane_back.onmousedown to run
      if that was the case.
    - began work on object builder


2018-12-10
  - canvas experiment
    - added signal draw interaction to sequencer
    - added playhead and it's functionality to sequencer
    - added some more signal controls to sequencer
    - expanded system's keyboard functionality so that it now captures
      left/right commands as singular buttons (so, RightAlt and LeftAlt, both 
      activate an 'Alt' key, that can be found in the 'pressedKeys' object)
      This new code also opens the door for key translation (ie. converting 
      input depending on the OS being used)
    - further jiggering of the cursor changes in the sequencer (I think I've
      gotten things right now)

  future ideas
  - a more complex callback passthrough system? Kinda like the functionList way,
    where a callback say decide that the signal can be passed through to shapes
    below it


2018-12-09
  - canvas experiment
    - added second interaction plan to sequencer
    - added delete interaction to sequencer
    - added group selection to sequencer
    
    problems:
    - sequencer interaction is a bit borked (mainly concerning cursors)


2018-12-08
  - added CNAME to docs, so now curve.metasophiea.com is a thing n_n
  - canvas experiment
    - fixed buggy control problem on mac
    - more cursor types for sequencer events


2018-12-07
  - canvas experiment
    - started add cursor types to sequencer events
    - added shape-related callback detection to system


2018-12-05
  - canvas experiment
    - renamed blockRegistry to signalRegistry
    - added in signalRegistry test code (just the noteRegistry test code from
      before)
    - more sequencer work (added in block movement and resize)(which also works
      with multi selected blocks)


2018-12-03
  - canvas experiment
    - work continues on the sequencer
    - added blockRegistry to structures list (in library. Previously this was
      called the noteRegistry)


2018-12-02
  - canvas experiment
    - work begins on the sequencer


2018-12-01
  - canvas experiment
    - finished up on the needleOverlay
    - updated grapher so that one can position the background text in accordance
      with the viewbox values, instead of the grapher width/height itself
    - added the grapher_waveWorkspace (surprisingly short part)

    which ofcourse, now just leaves the beast:

    - parts left to do
        control
        - sequencer


2018-11-30
  - canvas experiment
    - added the ability to change the cursor, in core.viewport
    - still working on this needleOverlay (getting mouse interaction to work)


2018-11-29
  - canvas experiment
    - updated grapher a little to make the drawing of lines more efficient. No
      longer are lines drawn in segments, but the entire line is a single 'path'
      shape. Thus where once there was a thousand little straight paths in the
      group making up the line; now there is a single path.
        Also added back in the functionality to turn background text printing
      on and off, and also access to the text offset
    - added grapher_periodicWave display part
    - added grapher_audioScope display part
    - added 'contains' method to the group shape
    - began on needleOverlay

    - parts left to do
        control
        - needleOverlay
        - grapher_waveWorkspace
        - sequencer

  problems found:
  - if you click-and-drag a slider handle, then release the mouse button over
    the 'backingAndSlot' group of a different slider; that slider will take that
    as an 'onclick' call and subsequently move the handle to that spot.


2018-11-28
  - canvas experiment
    - added clipping functionality too the cirle and polygon shapes (and updated
      rectangle's a little) Text doesn't have a simple way of being added, image
      is just a rectangle and I've just left path out.
    - updated text shape a little, to allow one to set the text size (instead of
      just the font size)
    - wrote up the grapher display part

    - parts left to do
        display
        - grapher_audioScope
        - grapher_periodicWave
        control
        - needleOverlay
        - grapher_waveWorkspace
        - sequencer


2018-11-27
  - canvas experiment (which is now just the canvas future, now that I think
    about it)
    - wrote up the guts of the list control part, though it still doesn't have
      any way of hiding items
    - fixed up button_rect along the way
    - wrote up modifications to the 'group' shape, which allow for clipping.
      It works with other shapes to do the actual job of clipping, and requires
      them to have clipping ability (currently, only rect has this) It also
      doesn't do render-judgement for internally clipped shapes..it seems to
      work though
    - modifications to 'group' shape make hiding quite straight-forward for the
      'list' part
    - little bit of streamlining to group's render function


2018-11-26
  - canvas experiment
    - updated 'getElementUnderPoint' function, to add an argument that allows
      the function to gather every shape that the point touches (as an array)
    - updated core's callbacks, so that if the shape under a point doesn't have
      the callback core's looking for; it will search again and look for the
      next shape that does. (the callback 'onmousemove' seems pretty
      inefficient :/ ) Heavily commented

  continue:
  -> writing up the list shape


2018-11-25
  - canvas experiment
    - connectionNode_signal was kinda shaky, which just lead me to redoing all
      the connection nodes, resulting in the generic connection node from which
      all others are made. Works pretty well too. There's now one for audio,
      data, voltage (a number) and signals (true/false)

  future ideas:
  - tiny thing; stop mouse-wheel when mousedown event occurs? Sometimes when I'm
    on the mac and click-dragging it scrolls around sometimes. It's a little
    annoying.


2018-11-24
  - canvas experiment
    - fixed that weird problem with the button_rect sometimes having an outline
      (something to do with setting the strokeStyle to undefined)
    - finished up on the connectionNode_data (in blue)
    - addded connectionNode_signal (in red)
    - addded connectionNode_audio (in orange)
    - jiggered cable adding about as in the past, shape names weren't mandatory
      as they are in this system. Cables are still added to the
      middle/middleground pane, but now have a name based off their owner's
      address, for example:
      "cable-/root/middleground/middle/dynamic/test_connectionNode_audio2/"

  notes
  - one could argue that the connectionNodes should all be based of some generic
    connection node part thing, but I've already written them now, and it feels
    unlikely that I'll need to make new ones any time soon. Something to do once
    we've fully replaced the SVG version I guess.
    ....the signal version needs a rethink anyway.
  - parts left to do
      display
      - grapher
      - grapher_audioScope
      - grapher_periodicWave
      control 
      - list
      - grapher_waveWorkspace
      - needleOverlay
      - sequencer


2018-11-23
  - canvas experiment
    - button_rect unborked. There's still an odd problem though when you
      position the viewport just right, that an outline appears around the
      backing rectangle.
    - added level, meter_level and half of audio_meter_level (it needs the audio
      library stuff)
    - added 'stopMouseScroll' setting to core's surface, and changed things so
      one has to enable the functionality (which is now done in system/main.js)
    - added rastorGrid
    - added cable, halfway though adding the connectionNode_data


2018-11-22
  - canvas experiment
    - rewrote dial_continuous a bit to be a little nicer
    - added dial_discrete (which now uses the dial_continuous dial as it's base)
    - added button_rect (only a little bit of a mess. The text points calculator
      is still a bit iffy. The style arguments are crazy)(it's borked when
      rotated ):/ )
    - added checkbox_rect
    - added rastorgrid


2018-11-21
  - canvas experiment
    - turns out, 'deep compute' was broken, so that's now fixed
    - improved 'computeExtremities' a little, so that deepCompute-ing a shape,
      doesn't make every shape update all parents (it's kinda complicated, but 
      it works)
    - added rangeslide
    - added getters and setters to shapes, so that they will recalculate their
      extremities (groups do deepCompute) upon any change
    - added dial_continuous (which could do with a rewrite to look a bit more
      like the slider code. Thankfully the construction of the system means
      that poor coding can be easily contained)
      

2018-11-20
  - canvas experiment
    - added onclick and ondblclick to core callbacks
    - expanded mouse.js to iteratie over shape's (and their parent's) listeners
    - fix: group wasn't passing parent angle through correctly
    - created 'system.mouse.mouseInteractionHandler' function, for handling
      mouse interaction that centres around taking over the canvas mousemove
      input while the mouse is down
    - 'slide' part is now fully interactive

  bugs:
  - there's something wrong with how extremities are being calculated..or how
    rendering is being done...it's totally broken, basically


2018-11-19
  - canvas experiment
    - it appears that html canvas doesn't have a way of measuring height, but if
      you define a font's size in 'pt'; that number is the height. So,
      'pointsOfText' now assumes that the font's size is set in this way. With
      that said; this doesn't account for strings with no capitals, or letters
      with hanging portions..from what I understand, they're working on
      expanding the functionality to add ways of gathering this information, but
      it seems a little while off yet. Either way, text is unlikly to be used
      much, in favour of images of text. So I'm going to leave it like it is for
      now.
    - added path shape to core
    - reintegrated core with 'parts', I'm now adding back in all the parts (some
      rewriting necessary)
      - glowbox_rect
      - sevenSegmentDisplay
      - sixteenSegmentDisplay
      - readout_sixteenSegmentDisplay
    - ignored shapes are now a thing
    - static shapes are now a thing


2018-11-15
  - canvas experiment
    - core.js v4.1 ...ok, v5. But this really is the last one. This version
      wraps shape functionality up into the shapes themselves (as opposed to
      that sudo-object way I was doing before) It's cleaner. It also bites the
      bullet and makes a group shape the root arrangement node. Things are 
      pretty nice.
      
      To be implemented:
      - static shapes
      - ignored shapes
      - the text shape's hit box function (it's currently just using the
        rectangle)

      To be Fixed:
      - 'pointsOfText' function in library.math


2018-11-16
  - canvas experiment
    - core.js v4. Last one, I really mean it this time.

  notes
  - looks like we're heading for v4 of core. I need to rework static elements, 
    add in the new extremities calculation methods and add render judgement.
    ..this thing is getting pretty complex. Pretty advanced.


2018-11-15
  - canvas experiment
    - added circle shape
    - added 'library.math.pointsOfCircle' which can return a defined number of
      points of a circle
    - added "pointWithinCustomHitBox" function concept to core element library
      shapes (used within arrangement.getElementUnderPoint) so that calculation
      of whether a piont is within a shape's bounds doesn't have to rely on the
      shapes extremities.points for judgement (which is easy for a rectangle,
      hard for a circle, but frighful for text or any polygon of similar
      complexity)
        Calculation of extremities is still required though, mainly for
      judgement on rendering (and anyting to do with boundingBoxes)


2018-11-14
  - canvas experiment
    - added "append", "prepend" and "remove" methods to group element
    - added image and polygon shapes to core
    - connected new core to system and parts
    - added functionality for touch events to core
    - pulled common 'computeExtremities' code out of elements, and into a core
      function that they can use
    - expanded polygon functionality to deal with more complex connecting lines
      (quite badly though)


2018-11-13
  - canvas experiment
    - started new version of core. This one wraps itself in a ‘surface’ object,
      to cover over any important handles core uses publicly. It also has the
      group element as a plugged-in element and further pushes code out into
      those plugged-in element files. I’m planning on adding “.add” and
      “.remove” methods to the group object
      Hopefully this will be the last version; though the ‘surface’ object helps
      separate the code out more; becoming essentially an interface. Potentially
      making the upgrade to other graphical backends a little smoother.


2018-11-11
  - canvas experiment
    - redid layout
      the idea of the re-layout is to better enforce the concept of levels
      within the code, and of how lower levels shouldn't have code that deals
      with higher concepts (as described a little in 2018-11-10 's log)
        In addition though, I add level 0 "library" which is for code that isn't
      necessarily for any particular level, and could conceivably be used in an
      entirely different project (eg. mathematical functions or a wrapper for
      the browsers audio functions)
 
      Conceptual Layout:
        browser canvas -> core -> system -> parts -> objects -> control
        utility ->
        audio ->
      Actual Layout
        0 - library
            - main.js
            - math.js
            - audio.js
            - structure.js
        1 - core
            - main.js
            - core.js
        2 - system
            - main.js
            - mouse.js
            - keyboard.js
        3 - part
            - main.js
        4 - object
            - main.js
        5 - control
            - main.js

    - added anti-page scrolling option to core
    - started on part.builder
    - developed version 3 of core, which pulls out the drawable shape's code
      out into objects, within a separate 'coreElements' object


2018-11-10
  - canvas experiment
    - added keyboard events

  ideas:
  I'm splitting out some of the functionality that is in the equivalent system
  code chunks in the main version, as I want to create more of a distinction
  between levels of functionality. For example; the "declareKeycaptureObject"
  function should be up with the other object code, instead of down with the
  lower system code.
    Hopefully I can write in a way that will allow one to augment the system
  level code at a later date (thus allowing this separation)


2018-11-09
  - canvas experiment
    - added stat collection back into core (just frame rate right now)


2018-11-08
  - canvas experiment
    - finished work on core2 (which is now just core) fixing some bugs along the
      way) Things are pretty nice now I think


2018-11-07
  - canvas experiment
    - began work on core2 (a second draft of core, which just lays things out a
      little nicer)


2018-11-06
  - canvas experiment
    - static derender adjustment working

    future ideas:
    - core probably needs some renaming and rearranging of handles


2018-11-04
  - canvas experiment
    - renamed element.recompute to element.computeExtremities
    - element.getElementUnderPoint now checks a group's bounding box to see if 
      the point is within it (no longer just checked every element everywhere)
    - rearranged functions into objects
    - added getters/setters to the viewport location values
    - added element names and addressing
    - added the ability to declare an object as to be ignored (thus,
      getElementUnderPoint will not return it, or any of its children)
    - working on static elements, have getElementUnderPoint functioning, general
      rendering working, but derender still thinks they're moving 

    test:
    - my desktop seems quite happy to draw 10,000 rects. 20,000 slows things to
      ~27 fps
    
    future ideas:
    - the ability to set groups as immune to the viewport location values


2018-11-03
  - canvas experiment
    - fixed up canvas.system.core.element.recompute


2018-11-01
  - canvas experiment
    - expanded element.recompute to create bounding boxes for groups
    - expanded element.recompute to add parent elements to element (if parent is
      undefined, it means that this element is at the top of the tree, making
      the parent the arrangement)
    - added element.getPerent and element.getChildren functions
    - added element.getArrangement function
    - added add and remove functions (which now perform the element.recompute
      function when elements are added or removed, instead of the render
      function)
    - replaced context.translate in element.draw.rect with custom a function for
      performing the same task. Things are a bit faster now
    - no-render judgement moved so now it's the first thing that happens when 
      any element is rendered
    - began work on new element.recompute code. Going well but needs testing

  findings
  - the framerate is usually around 50fps on my laptop, but drops to 30 or so
    when I add 10,000 elements to the scene... I'm not sure if this will be a
    problem or not. Upon inspection; we're spending alot of time 'translating'
    the canvas. Perhaps the development of a drawing method that does not
    require this function is in order. Luckily, doing so won't effect the
    operation of the rest of the system in any way.
              - removes context.translate from element.draw.rect -
    things are faster now, sitting at around 47 when adding 10,000 elements.
    More work still needed (perhaps replacing the internals of rect with calls
    to poly? No canvas rotation needed that way)
              - tests with lots of polys -
    30fps. No translate there to remove either. Tell you what though; 10,000 
    polys off screen (and thus not being rendered)? ~52fps

  bugs
  - element.recompute isn't recomputing individual elements correctly
    (currently, one needs to compute from the arrangement) Need to expand it so
    that it goes up through the tree collecting x, y and angle offsets; returns
    with these calculated then computes all the lower elements
    (adding lots of elememts is quite slow)


2018-10-31
  - canvas experiment
    - rearranged the functions a little
    - renamed 'zoom' to 'scale' because it was bugging me
    - added rendered element getters/setters (none functional)
    - added element bounding box and points computer (stripping out this
      functionality from the 'renderElement' function)(in future, this function 
      will only be run when edits are made to the element arrangement list
      itself (and even then, only the elements that have been changed), instead
      of in every render loop)


2018-10-30
  : yesterday and today; I've been working on a canvas-only version of workspace
    It's currently only in the experiment area, but things are going well.
    Currently; I have what I'm calling the 'core' of the rendering system mostly
    down, which basically equates to the SVG system of the current main version,
    and bits of the "system".
    Development is ongoing, and I hope to incorporate much of the code that is 
    already created; though this is essentially an overhaul of the entire app,
    so, development won't be super quick. Could potentially allow for future
    graphical acceleration changes to be made in future though

    canvas version currently has:
    - core rendering object attached to canvas using 'animation frame' 
      rendering
    - rect, poly, image and dot elements; along with a 'group' element for
      grouping (what a coincidence)
    - image data caching
    - canvas element section from XY position
    - automatic canvas sizing (using custom html element attributes)
    - 'unseen' element non-rendering
    - some stat collection on canvas performance (currently just frame rate)
    - element grouping object, which contains all shapes to be rendered
    - mouse interface (missing a lot of functionality however)
    - panning and zooming (functional when angled too)
  
    currently works on chrome, firefox and safari


2018-10-18
  - split utility up into it's own little folder of code


2018-10-14
  - added super switch to disable object clipping (which is now disabled by
    default)
  - worked on shortening and tightening the system.mouse code
  - worked on shortening and tightening the system.keyboard code
  - fixed issue where the key 'V' wasn't being raised after a ctrl-V, as the OS
    was capturing it and taking focus from the window. Fixed by adding 
    "system.keyboard.releaseKey('KeyV');" into control's paste code
  - redid copy/paste code to use keys instead of that weird numbering system

  bugs found
  - pasting not working perfectly (don't seem to paste groups of objects in the
    right place (all to the right and below the pointer))

  future ideas
  - probably need to remove my usage of "system.svgElement" for storing
    temporary data

  Compilation Results
  - workspace.js                        885 Kb  (100%)
  - workspace.min.js                    290 Kb  (32.8%)


2018-10-07
  - menubar resizes when the window does
  - added object clipping (it's rather clunky, groups that move together too
    quickly will bounce off eachother and there's no sliding along object's 
    sides.... but it works. There's also a new design option to turn off
    clipping (that's accessible from the object instance aswel))


2018-10-06
  - removed gif
  - prefixed all the alpha objects with 'alpha'
  - fixed up loading / saving a scene
  - fixed "new scene" (clearing objects wasn't being done right)

  things to look into
  - system.utility.workspace.clear is now stuck on removing objects from the 
    middleground
  - adjusting the window should change the menubar size


2018-10-05
  - renamed "parts" to "part"
  - renamed "objects" to "object"
  - shifted 'elementMaker' into parts section, with the new name "builder"
    (system.utility.misc.elementMaker -> part.builder)
  - shifted 'objectBuilder' into objects section, with the new name "builder"
    (system.utility.misc.elementMaker -> object.builder)
  - renamed part.circuits to part.circuit
  - renamed part.elements to part.element

  future ideas
  - view controls in menubar (reset mainly)

2018-10-04
  - major upheaval to project structure
      we have only four global variables;
        system
        parts
        objects
        control
      which in turn, follow the dependencies track (and folder names)
      Perhaps folders could be rearranged aswel, to keep these four sections in 
      a section to themselves (and just for a general reorganisation):

    - renamed '__globals' to 'system'
    - renamed 'mouseInteraction' to 'mouse'
    - renamed 'keyboardInteraction' to 'keyboard'
    - redid folder layout:
        compilation/
          closure-compiler.jar
          gravity
          notes
          comp
          heavyComp
        docs/
          demos/      help/
          gifs/       notes/
          404.html    workspace.js
          index.html  workspace.min.js
          test.html   workspaceTest.js        
        main/
          control/
          objects/
          parts/
          system/
          main.js
          testMain.js
        trash/
        workshop/
          0 - experiment area/
          1 - system testing/
          2 - part|object development/
            elements testing/
            sequencer/
          3 - object finishing/
        README.md
  - rewrote the 'structure' section of the readme
  - rearranged the files within 'objects' (in a way that doesn't matter to the
    system, so, could be put in any way really, and this way isn't that great
    as it is)

  future ideas
  - just redo system.pane

  bugs
  - bugs everywhere. The change was slightly poorly done, so things are broken
    due to renaming of other things. Tests are passing however

  Compilation Results
  - workspace.js                        870 Kb  (100%)
  - workspace.min.js                    292 Kb  (33.63%)


2018-10-03
  - list breaks and spaces, a little more stable now
  - create menu is now sorted
  - group select works again
  - menubar has edit items now (that "bug" from yesterday was actually just me
    being silly (turns out; if you don't program it to do anything, it won't do
    anything))
  - button_rect now has 'text from centre' (which is the default for 'text')
  - fixed tiny thing in musical_keyboard
  - fixed issue with players where 'fire' connections were only pushing the
    'fire' buttons, and not releasing them
  - put safety on the 'new scene' menubar function, so now an alert pops up that
    you have to press "ok" on
  - shifted alot of code from 'keyboardInteraction' to 'control' (mainly scene
    effecting controls, like cut, copy and paste)(left things commented out,
    because this feels a little risky)
  - 'control' now holds the scene name
  - saveload.load now has a callback for when the load is complete, providing
    it with the metadata


2018-10-02
  - updated menubar dropdown colouring to match the menubar 
  - removed button_rect and button_rect_2, and changed the name of button_rect_3
    to button_rect (so, clean replacement)
  - clicking anywhere while a dropdown is open, closes the dropdown
  - renamed 'menu' to 'control' (need better names)
  - consolidating control and it's pane (I'm giving myself all sorts of ideas
    with this one)
  - fixed musicalkeyboard's release and midiIn problems
  - removed key_rect
  - button_rect now has 'text from left' and 'text from right' arguments (though
    you can still use just 'text' to mean 'text from left')
  - swapped save=ctrl-f2 and load=ctrl-f3, so it's now save=ctrl-f3 and 
    load=ctrl-f2
  - added 'breaks' and 'spaces' to lists (little wonky)

  

2018-09-30
  - all current objects have had their key_rect and button_rect elements switch
    to button_rect_3
  - button_rect_3 now has that key-rolling thing working (broke menubar in the
    process)
  - fixed menubar
  - added "New Scene" function to clear the scene (no safety on that, so be
    careful)

  Compilation Results
  - workspace.js                        877 Kb  (100%)
  - workspace.min.js                    301 Kb  (34.37%)



2018-09-29
  - button_rect_3 now has 'pressable' option, which determines if the graphics
    should change when the button is pressed
  - button_rect_3 handles selection of itself now (click to toggle)
  - created new version of the list control element, replacing the old
  - updated menubar to have better drop-down lists, with all the functionality
    currently available


2018-09-18
  - fixed bug where one could drag the menu bar around


2018-09-16
  - developed button_rect_3 which replaces list.item (now with 'active' setting)
  - all sorts of giffing

  future ideas
  - object collision
	
  to do
  - replace all button_rect and key_rect parts with button_rect_3
  - add text edit control to button_rect_3
  

2018-09-15
  - updated README to point to this log
  - object view reordering, now is aware of what pane it's working on, and can
    rearrange objects within their panes
  - the utility 'disconnectEverything' is back and looking good
  - new utility 'deleteObject' which is well named
  - the two additions above replace most of the code that was in
    __globals.selection.delete
  - wrote up the list part (and it's sub-part, the list.item)(complete with 
    scrollability, selection of items, glowing, range selection (with shift)
    adding items, removing items and all sorts of styling options)
  - created rudimentary object creation menu panel (with automatic object list
    population, a 'close' button and header grapple thing)(needs a way of 
    opening it once it's been closed..maybe a key combo?)
  - 'help button' changed from "ctrl+f1" to just F1, also added
    '__globals.keyboardInteraction.releaseAll' to keyboardInteraction.js
  - added object metadata code for better help url listing and object "Screen 
    Names" to all objects
  - began working on button_rect replacement (currently button_rect_2) based
    off list.item
  - added 'menu bar' which sits at the top of the window. There's one 'objects'
    button which calls forth the object creation menu panel thing (the menu 
    pane has the object reordering like other frames, but it makes it possible
    to trap the panel behind the bar. I'd like to limit how high you can drag
    the panel (like on a desktop), load and save buttons and a little report
    thing in the top right (I'm having trouble getting the HTML to update while
    around load/save operations)

  check out for problems with
  - pressing the button for loading an audio file, then hitting cancel and 
    trying to work with the object again
	
  Compilation Results
  - workspace.js        864 Kb  (100%)
  - workspace.min.js    296 Kb  (34.30%)

2018-09-08
  - equaliser levels fixed (along with that update problem)
  - multiband filter v2 now has a more advanced frequency response updater (it 
    tries no not do recalculations when it's not necessary)
  - multiband filter v2 creation has option to select between having high/low
    pass filters for the highest and lowest bands ("frames"), or just band 
    passes everywhere
  - multiband filter (object and circuit) pushed to main objects and circuits
    lists (removed the 'v2')
  - selecting an object now pulls it to the front of the view order

  bugs found
  - looper symbol isn't allowing mouse clicks through

  future ideas
  - drop shadows

  Compilation Results
  - workspace.js                        825 Kb  (100%)
  - workspace.min.js                    281 Kb  (34.15%)

2018-09-01
  - further work on the equaliser, things are going well; it's got a nicer
    object with colour coded channels, manually selected channel frequencies
    and a master out (still working on getting the 'zero' levels correct)

  future ideas
  - slide panel spacing argument, handle width, slot width

2018-08-31
  - fixed demo 1
  - more work on the super adjustable equaliser (weird thing where auto setting 
    values isn't pushing the changes through to the actual filter circuit. Also 
    the frequency spread is nice, but for a human it's kinda silly)

  bug found
  - it seems the BiquadFilter's "getFrequencyResponse" method doesn't always
    work. Sometimes it just returns an array of just zeros.

2018-08-19
  - pushed the new filter to the main objects list
  - fixed some backwards logic in the sequencer
  - added glow options to the dials
  - began work on the super adjustable equaliser
  

2018-08-15
  - added 'relativeDistance' and 'lineCorrecter' to utility.math (added some
    tests)
  - redid graphers (pulled some of the functionality out into utility)


2018-08-14
  - (you're going to have to fix the viewbox thing in graphSVG (and probably 
    grapherCanvas too))
  - developed the grapherSVG and filter object further. Filter now has a freq 
    range of 0 to 20000, and the graph is logarithmic. Needs more detail though.
    (Grapher part needs development overall)

  future ideas
  - the filter object's dials should glow and dim when they become active and
    inactive

  Compilation Results
  - workspace.js                        783 Kb  (100%)
  - workspace.min.js                    265 Kb  (33.83%)
  - workspace.min.js (web compressed)   94.4 Kb (12%)

  (there seems to be a nice consistency of removing 2/3 of the original size)


2018-08-13
  - tried rewriting the sequencer in canvas, but it's way way too slow. The fix
    I made for the canvas in foreignObject bug thing, causes hugh lag when the
    pixels are transferred into the image. I think that things will get much
    faster when the bug is fixed in Chrome. Until then...
  - updated how things are done in the sequencer and in the get and set
    transform utilities, which seems to have sped things up a bit..its still not
    enough though. Alot of time is being spent on recalculation and rendering,
    so that canvas equivalent is becoming a requirement :/
  - fixed grapherSVG to do background lines and text better (no drawing outside
    the box (mostly), more control of what the text is)


2018-08-09
  issues:
  - sequencer is very slow when alot of notes are added. Panning is fine, global
    panning is fine; but zooming causes huge lag. Removing the background 
    doesn't help, it seems most time is spent recalculating the size of the 
    note blocks. I'm not sure that converting it to canvas would help.


2018-08-08
  - corrected small thing in noteRegistry where a judgement was being done when
    'rightLimit' was set to -1. Fixed so that the judgement is ignored in this
    case
  - 'generateSelectionArea' was using 'temp' as a global instead of a local.
    Changed that
  - working on midi import; the direct conversion to noteRegistry seems to work
    pretty well. I'll have to rewrite the sequencer object though.
  - updated 'basicSequencer_midiOut' object to deal with midi numbers better.
    Also added a viewArea attribute to the import/export functions. Also added
    Vertical zoom/scroll rangeslide
  - updated demo 2 to use new midi sequencer better
    

2018-08-07
  - further experimentation with parsing midi files


2018-08-06
  - updated utility.misc.openFile to have an argument for "readAsType". One can 
    select between 'readAsBinaryString' (the default) and 'readAsArrayBuffer'


2018-08-03
  - rejiggered the system testing folder a little 
  - added 'blendColours' and 'multiBlendColours' to utility.misc (also added 
    tests for them)
  - added colour change effects to the sequencer note blocks (depending on their
    strength)
  - click-control dragging on sequencer note blocks changes their strength
  - did up the colours on the sequencer note blocks
  - sequencer note blocks now ignore mouse clicks when spacebar is pressed (
    redirecting to the interaction pane)
  - sequencer note blocks now have a minimum length (so that they don't just
    disappear when their length is zero)
  - changed "double click on sequencer note block body" from 'delete' to 'reset
    strength to default' (also added a default strength variable)

  Compilation Results
  - workspace.js                        768 Kb  (100%)
  - workspace.min.js                    261 Kb  (34.04%)
    (almost a megabyte on the raw version. Crazy crazy crazy. ~12,000 lines)

  bug update
  - things from yesterday continues; seems to also happen in the "elements test"
    test situation, but only sometimes.

  future ideas
  - need to look into better filters, which puts us on route for more advanced
    synthesizers


2018-08-02
  - added zooming method to the new sequencer (its a 'select view area' thing)
  - pushed updated sequencer, and did-up the sequencer objects (it now has a
    second rangeslide just for moving around and zooming, and a check box that
    when checked will try to keep the playhead in view by moving the rangeslide
    (ish..it's moves the view then tells the rangeslide ot move))

  bug found
  - seems that sometimes, the sequencer's viewport clip-path is not cutting
    correctly, resulting in the notes and backing and such leaking out the left
    side, and leaving a little black line on the right. It's recreatable
    currently in the second demo on the top two sequencers, but not the bottom
    one. The bottom one is the same object as the middle. Even copying the
    objects preserves the glitch in the new objects. Recreating the scene isn't
    helping. I can't find anything different between the objects in the elements
    listing.
      One can manually change the clip-path from
    polygon(0px 0px, 0px 170px, 780px 170px, 780px 0px)
    to
    polygon(1.5px 0px, 781.5px 0px, 781.5px 170px, 1.5px 170px) which will fix
    things, but ofcourse, using the objects view adjust undoes all this. It 
    appears as though the clip-path itself is misaligned by 1.5px to the left.
    Shifting the element that contains this attribute doesn't help, it just the
    problem with it.
                    As it is; I've no idea what is causing this.



2018-08-01
  - updated keyboard interaction further; so that it now checks every element
    for an event handler.
  - finishing up on the unlimited-length sequencer (delete/backspace key to
    erase, now with kinda-sorta zoom functionality)
  - pushed the new sequencer, replacing old one (the change seems to havae gone
    well, though it seems the right side of the loop is missing in demo 2...
    curious. Stranger still; one of the three objects is fine, and it has the
    same sequencer dimensions as another ):/ )

  future ideas
  - package workspace up into a proper little package thing. Currently there's
    three globals '__globals', 'parts' and 'objects' Which causes problems when
    one tried to have multiple workspace elements in a page (though frankly, the
    system was never designed to have multiple instances of itself)
      One could use the old Presenter idea, and bundle things up into the main 
    SVG element. I'm also thinking about expanding the production line, so that
    there's 'stable' versions and 'dev' versions, instead of hoping that my
    updates don't break the demos.

      With a cursory test, it's clear that two or more workspace elements won't
    work, the way things are now. Moreover, the sealing I tried ages ago and
    commented out for 'dev' purposes, also breaks things when uncommented, when
    there's two or more instances. It seems to work alright when there's only
    one.


2018-07-31
  - updated keyboard interaction to allow for individual elements to accept key
    events. It currently prioritizes object input over individual elements,
    though I could change that if necessary.
  - further work on the unlimited-length sequencer (there's panning now, and you
    can create notes)


2018-07-30
  - started into unlimited-length sequencer
  
  future ideas
  - slide: click to empty area then drag


2018-07-28
  - fixed rageslide


2018-07-27
  - added 'staticBackground' pane to very back of hmtl structure, plus a
    'setStaticBackgroundStyle' utility which creates a 100% rect in it. Thus,
    you can now set the background with a solid colour


2018-07-26
  - the viewport position is now saved in a save file
  - scene loading now runs the clear command to wash out the previous scene
  - during saving and loading a scene, master volume is set to zero (to stop
    hanging notes ringing out as the machine is busy)
  - added super global interaction switches /enable/disable mouse wheel zoom
    "mouseWheelZoomEnabled", mouseGripPanningEnabled" and "readOnlyMode"
  - started on a help site for the basicSynthesizer, using a windowed version of
    workspace (group select doesn't work (the mouse point is off) but I disable
    that anyway)

  future ideas
  - some kind of function that can fill the background with a solid colour
  - better windowed mouse selection


2018-07-25
  - 'tester' can now compare function code
  - importScene/exportScene now uses a slightly more efficient way of storing 
    constructor functions in file (and the option to not store them at all)
  - got a compression library (first thirdparty code) for saveload.serialize
    (it's in tests still, but currently we're getting 61.7% removed)
  - all kinds of funky new functionality added to utility (along with a little
    rearranging)(is utility getting too big? ~1600 lines..it's just a collection
    of functions...)
  - saveload has been completely moved to utility.workspace
  - added the ability to load scenes from files from the internet (should
    simplify demos alot)

  future ideas
  - have the ability to adjust master volume, independent of any object. Shut
    sound off during a save or load operation (where the machine will hang from
    all the processing) 


2018-07-24
  - more work on saving and loading (moved the file into a test area)(also tests
    are being made)(also removed some things from utility, that were put there
    yesterday related to all this) going pretty well though

  future ideas
  - add string compression to saveload.serialize


2018-07-23
  - added "saveData" and "loadData" to utility
  - began work on a way to save scenes (the 'saveload.js' system file)


2018-07-22
  - created new 'basicSequencer_midiOut' object, which is like a sequencer, but
    outputs midi commands
  - fixed bug where sequencer playhead wasn't being accessed properly, thus was
    causing problems when multiple sequencers were in a scene. Just had to
    change 'playheadPosition' to use 'obj.children.playhead' instead of just
    'playhead' for the 'setTransform_XYonly'
  - added interface methods to basicSynthesizer object
  - redid demo 2 to have drum and bass sections (and a chord section that is
    left disconnected)
  - cleaned up notes file into notes folder
  - fixed bug in 'sequencer.noteRegistry' where the updating of note positions
    wasn't being dealt with properly and things were ending up off the side. The
    logic has been re-written to be better now (new tests for it too)
  - added help/save/load function keys (F1, F2 and F3)
  - began help folder, which can be linked to from the app by pressing F1 ove an
    object

  Compilation Results
  - workspace.js                        688 Kb  (100%)
  - workspace.min.js                    242 Kb  (35.25%)
  - workspace.min.js (web compressed)   47.3 Kb (6.8%)


2018-07-20
  - pushed pianoroll part into main parts (now called sequencer)
  - shipped all the sequencer testing code over into testSituation 1, and then
    redid the testing code that was already there to use the snazzy new test
    checker function thing (it all looks very nice now)
  - wrote together a nice new basic sequencer object (and pushed it)
  - updated oneShot_multi_multiTrack to accept 'pulse' and 'hit' data signals
  - removed 'trash folder' (have it saved elsewhere for now, but will probably 
    delete fully later)

  bugs found
  - rangeslide handle movement is a bit weird

  Compilation Results
  - workspace.js                        733 Kb (100%)
  - workspace.min.js                    254 Kb (34.76%)
  - workspace.min.js (web compressed)  49.6 Kb (6.76%)
  


2018-07-19
  - continued work on pianoroll, slowly adding features back in, in a nice way 


2018-07-18
  - added code that checks the URL for a dev parameter. If it is present, the
    page unload code won't be activated
  - started on the next version of the pianoroll part..starting with testing the
    sub parts


2018-07-17
  - wrote up rudimentary 8 channel audio mixer and channelMultiplier part (both
    pushed)
  - fixed musical keyboard cloner, which was trying to make a launchpad


2018-07-16
  - added code to stand in the way of a page unload (just the standard "are you 
    sure" box that comes built in with the browser)(commented out for dev 
    purposes. It's (currently) the first line in system/misc.js)
  - added workspace.mouseInteractionHandler to utility (so now hopefully we
    don't have another one of those rangeslide incidents)(perhaps change
    everything to use this?)
  - added velocity interface to musicalkeybaord
  - updated rangeslide so that the values are stored only as 'start' and 'end'
    (instead of having mixed in array indexes)
  - changed some of the pianoroll interaction, to make mousing around easier

  future ideas
  - adjustable keyboard mapping (when switching between mac or linux or windows)


2018-07-15
  - updated pianoroll a little to make it easier to change the x count
  - wrote different music into demo 2 and added reverb
  - added bits of interface to the reverb object
  - fixed rangeslide which had sloppy mouse-move code, which would replace the 
    main system's mouse interaction code and never put it back


2018-07-13
  - pianoroll inner workings improved; now it keeps track of what notes are
    playing. So when it's progression loops; it will insert the ends of those 
    notes into the loop-start events. In effect; stopping notes that have end
    events which are outside the loop from sounding forever. It also means I can
    get rid off all that silly -1/100000 stuff, so things are sounding better
  - key_rect callbacks 'onkeydown' and 'onkeyup' renamed to 'keydown' and 
    'keyup', as the previous names were clashing with the keyboardInteraction 
    system (this could be a wider problem, but probably only for this part (due
    to it's name))
  - fixed detectOverlap again; turns out the order that the boundingBox points
    are in is very important. I've added sortation code, but have also tried to
    make it so code that provides bounding boxes, always puts the higher-valued
    point at the start of the array (the 'left/right'/'top/bottom' metaphor and
    naming scheme I used is pretty mangled now)
  - rushed pianoroll part and object through so that I could put together demo 2
    The way things are, one can continue to develop those items without
    affecting the demo, thus the demo can be updated at a leisurely pace.

                * Workspace (unminified) surpasses 10,000 lines *

  future ideas
  - slide needs to be rewritten. It's just old and rangeslide does things in a 
    nicer way
  - audio mixer

  Compilation Results
  - workspace.js                        655 Kb  (100%)
  - workspace.min.js                    231 Kb  ( 35%)
  - workspace.min.js (web compressed)    46 Kb  (  7%)


2018-07-12
  - added argument to the audio_in object and part, to make it not instantly try
    to connect when it's created
  - wrote up data-duplicator and pushed it into the 'finished' objects pile


2018-07-11
  - fixed the bug from yesterday; turned out, the number conversion is normal,
    and it was my own 'getTransform' code that was not reading the produced 
    style string correctly. I redid the regex, things seem to be working better
    now (though it all seems a little inefficient)
  - fixed smoothSet in rangeselector to actually work properly now (and get the
    timings right)
  - pushed rageslide to main parts
  - replaced both slide in the pianoroll object with the new rangeslide


2018-07-10
  - wrote up rangeselector part (which allows one to select a range on a
    slide-like area. Comes complete with handles that bump off eachother, area
    panning and expand/shrink mouse wheel)
  
  bug found
  - __globals.utility.element.setTransform setting very small numbers 
    (eg. 0.000097500000000) causes something somewhere to convert them to 
    exponent notation (9.75e-05) which breaks the style string


2018-07-09
  - in light of the ctrl key not working on Mac, and the Meta key not working on
    linux; I've created a "super globals" file which controls what key to watch
    in an event. Hopefully this means the system can adjust depending on the
    host
  - faffed with the pianoroll a bit more, and managed to cobble together a 
    basic "advanced launchpad" playing the guitar riff off Thunder Struck. Works
    pretty alright too.
  - added sorting section to the 'eventsBetween' function of the 'noteRegistry'
    as there was a problem where notes that started and ended within the
    selected range, weren't having their events performed in the correct order
  - added way of selecting the looped region in the pianoroll object..it's a bit
    terrible, but it works. I probably need to write a new control object for it


2018-07-08
  Compilation Results
  - workspace.js                        572 Kb   (100%)
  - workspace.min.js                    200 Kb   ( 34.96%)
  - workspace.min.js (web compressed)   38.8 Kb  (  5.78%)




2018-07-06
  - fifth rewrite on the pianoroll, things are going pretty well this time. The
    'noteBlock' element has gotten an upgrade and the mouse interaction is being
    made a little nicer. So far there's alt-click to add, click-n-drag, 
    shift-click-n-drag to group select, click anyway to deselect, alt-drag to
    clone, right and left handle drag to lengthen, and all that springy
    boundaries thing. Still playing with the interaction logic of it all till it
    feels natural.
  - fixed duplicate events problem in noteRegistry


2018-07-05
  - another draft started of the pianoroll (4) this time I'm trying to split
    more of the functionality into the block elements..we'll see how it goes


2018-07-04
  - re-wrote the pianoroll.noteRegistry for better storage and retrival
  - created rudimentary playback for pianoroll (seems to work rather well,
    there's no needle yet however)


2018-07-03
  - multi-delete note blocks in the piano roll editor
  - fixed problem in detectOverlap bounding box judgement (which just didn't 
    work)
  - click-n-drag group selection note blocks in the piano roll editor


2018-07-02
  - single block ctrl-drag duplication on the piano-roll editor
  - multi-block select, movement and length adjust
  - multi-block alt-drag duplication on the piano-roll editor (changed from 
    ctrl-drag)


2018-07-01
  - piano roll editor now uses the noteRegistry more vigorously, allowing it to
    set limitations such as maximum note length and maximum limit to an event on
    the right. Also added method that can return notes who have events between
    two defined times


2018-06-29
  - further development into the piano roll editor (which is starting life as an
    advanced launchpad)
    future development ideas
    - ctrl-drag to clone
    - ability to select groups of notes (and move around/clone)
    - shift-drag empty space to select area
    - shift/alt-drag used space to adjust velocity (and colour)
    - playfield that goes off the slides (zooming, panning, etc)


2018-06-28
  - fixed synthesizer octave adjust which wasn't doing anything (I'd changed the
    '__globals.audio.num2freq' argument list)
  - the basicSynthesizer and audio_duplicator have interesting backings. They]
    create the regular backing, bet set it's alpha colour to 0, then create a
    new shape with the same points to act as a backing with the desired colour. 
    This allows for the connection nodes to sit under the shape, thus saving on
    all that precise point placement.
  - began work on the piano roll editor


2018-06-27
  - fixed that launchpad sequence data duplication copy bug thing
  - added closure-compiler to build chain, creating a 'heavyComp' command along
    the way (to differentiate between the dev 'comp' command) 'heavyComp' runs 
    gravity on only 'main.js' (and can detect if an error occurs stopping the
    script if so) and produces 'workspace.js'. This file is given to the closure
    compiler, which produces 'workspace.min.js'
  - closure managed to find two places where things weren't written right; good
    job closure. (one where i was setting a value to null, then attempting to 
    delete that value; another where i was producing a string to print as a
    warning, but had never actually put that string in a printing function)
  - heavyComp now has a handy little report on the reduction performance
  - added sync button and connection node to pulseGenerator
  - created a musicalkeybaord object
  - fixed non-functional panic button in the basicSynthesizer
  - added musicalkeybaord object to 'finished objects' area
  - fixed universalreadout to interpret the 'data' segment a bit nicer (by
    converting things to JSON)


2018-06-26
  - updated oneShot_multi circuit to have a panic and playback rate features
  - added rate slider and panic button to oneShot_multi object
  - added rate slider and panic button to oneShot_multi_multiTrack object (also
    changed the 'dynamic design' section to use closures in functions instead of
    parsing the IDs of their parents)
  - accidentally left is possible to set the playback to 0 in the oneShot_multi
    circuit (which the browser did not like) the minimum is now set at 1/1000000
  - loadURL interface added to the oneShot_multi object (these interfaces should
    save time when doing scripted jobs)
  - some more interface work on oneShot_multi_multiTrack and the pulse generator
  - reworded demo 1 a little bit, what with all these interface changes
  - updated demo 1 again, now including riffs from the old party calculator app
    and extra launchpads

  bug found
  - copying launchpads duplicates the internal sequence data, but doesn't copy 
    it


2018-06-25
  - added light feature to the multitrack and single track multishot audio file
    players
  - also added the ability to select a region to use within the audio track
  - forgot to hook up the fdail in the reverb object

  bug update: I'm really not sure of how to fix this missing playhead thing..
              it really seems like a processing issue; if you step through the
              program manually, everything is set..It seems to work fine
              sometimes and not others..I think I'll leave it for now. I've
              added lights to the multi track object anyway.

  future ideas
  - multi track multi shot thing, should have a panic button
  - zoom features on waveWorkspaces


2018-06-23
  - updated demo1 to have sound and sequencing
  - launchpad object importData method updated to deal with missing values
    (something that should be done everywhere probably)
  - oneShot_multi circuit load method callback protected against missing 
    function
  - launchpad circuit now runs the pageChange callback after importPage or 
    importPages


2018-06-22
  - added symbols to the rest of the audio file players
  - pushed the audio players and circuits to the 'finished' folder
  - pushed audio recorder and circuit to the 'finished' folder
  - created and added a universalreadout and launchpad to the 'finished' folder
    ('launchpad' has been split up into the object and internal circuitry, in
    turn creating a parts.circuits.sequencing area, and 
    parts.circuits.sequencing.launchpad circuit (which probably needs a rename))
    (also the universal readout doesn't print to the console, but to some text
    in the viewport)
  - created and added a pulse generator
  - did import/export code for the launchpad
  - redid the comp command, so now there's two files produced; a 'test' edition
    that's the same as the old one, and a 'regular' one that has none of the test
    situation code. In this way I can now test and develop like normal, while
    having demo pages that are unaffected. Both still don't have the wrapping
    enabled, so, there's work to be done still.
  - created demo file of the multi-track audio file player hooked into a 
    launchpad and pulse generator..still needs audio files ofcourse

  bug found
  - odd bug in audio file player looper, where hitting the play button
    repeatedly would always restart the audio, but sometimes the play head would
    disappear. Seems to be caused by the style of the needle not being set in 
    time before the request to move the needle to the other side of the viewbox
    occurs (the style has a transition setting). The commands are being 
    performed in the correct order..it might be the browser not computing the
    style in time


2018-06-21
  - updated continuous dial callbacks to be wrapped in try/catch blocks
  - redid the distortion unit and moved it to the developed objects folder
  - jumped ahead and reorganised all the parts into 'elements' and 'circuits'. 
    Have to rewrite alot of stuff to use the elementMaker now
  - pushed distortion, reverb and filter into the "finished" objects area
  - added symbols to some of the audio file players

  future ideas
  - splitting up 'parts' into 'elements' and 'circuitry', where 'elements' are
    the graphical parts that a user would interact with (slides, dials, button,
    graphs, labels, lights, etc) and 'circuitry' are parts of pure code that do
    work (like distortion units and data processors)
      Right now, 'parts' is almost entirely 'elements', so I'll wait till the 
    circuitry parts come out of development more. I'd have to rewrite the 
    element maker..though it's name and function is already correct


2018-06-20
  - created a rudimentary multi-track oneShot file player object. The idea is
    that one could load up drum beats, hook that into a launchpad or some pulse
    generator, and have it perform drum beats for you
  - added math.normalizeStretchArray to utilities (and fixed it up along the 
    way)
  - added math.curvePoint functions to utility, and fixed up other aspects of 
    curve generation
  - updated smoothSet in the slider and continuous dial parts, in a bid to make
    them more efficient and time conscious..I think it's worked
  - started on revamping the testSituations folder

  future ideas
  - continue with 'testSituations' do-over, while updating partially developed
    objects, and pushing them to the main list


2018-06-18
  - wrote up a recorder object (with state lights and time readout)(the controls
    are honestly a little more clunkly that I'd like, but it works)


2018-06-15
  - added 'export' functionality into recorder2 (in prep for the audio disk)
  - little bit of development on audio disks (which I'm going to shelve for now)


2018-06-14
  future ideas
  - audio disks (that you can move in and out of audio recording devices and
    playback devices, etc)(they'd be a simple object that just contained one
    audio-encoded blob)


2018-06-13
  - developed audio recording object and circuitry to include pause/resume
    functionality, along with the ability to get the recording length at any 
    time. I've also simplified the input/output audio nodes somewhat. The 
    object is pretty sparse at current however.
  - worked on simplifying audio channels; turns out things are already pretty
    simple as they are (I was worried that the audio streams were mixing channel
    counts, and didn't know how that was effecting things. Seems only the audio
    file player was suffering from this. Need to be more vigilant about channels
    and streams in future)

2018-06-12
  - created rudimentary audio recording object. Currently all it does is record 
    the audio given to it, and then save that audio to a file when you press
    the stop button.

  future ideas
  - going to have to change all audio connections to single channel, instead of
    this sudo-single channel we have currently


2018-06-08
  - there's now different types of oneShot circuitry; one that allows multiple 
    instances to play, and one that doesn't (named oneShot_single and 
    oneShot_multi)
  - wrote up looper circuitry and object. It just takes a file and always loops
    it while playing. The circuitry has the ability to loop a sub-section of the
    file, but the object doesn't have that feature
  - wrote up new version of the generic audio file player, which is written a 
    bit nicer, with some small changes
  - test situation 10 / 2 / 2 is looking good, now with each player type in an
    object (and labels)


2018-06-06
  - upgraded the needle-positioning on the oneShot player object. It now uses
    a transition instead of constant updates to the position.. I need to
    investigate whether a similar technique could be used for other players
  - needleOverlay now has the ability to disable regular selection and area
    selection
  - gave the oneShot object a trigger data input
    

2018-06-05
  - turns out there was a flaw in how 'positionFromMousePoint' was being used.
    'getCumulativeTransform' doesn't do a great job in getting the actual X/Y
    point, so 'getTruePoint' has been created which does much better
  - 'positionFromMousePoint' replaced with 'getPositionWithinFromMouse' which 
    has the same functionality, but a nicer interface
  - updated grapher_audioScope and grapher_PeriodicWave to the new way of
    selecting what type of graph you want
  - updated testObject to have all the latest graphers
  - added 'loadAudioBuffer' to utility.audio
  - wrote up 'oneShot' audio file player circuit and object (object needs work)


2018-06-04
  - needleOverlay work complete, seems pretty solid now
  - worked on integrating the needleOverlay with the audioFilePlayer object. You
    can now select the loop region, move it around and deactivate it. It's a 
    bit rickety, but it works (you might want to check up on the 'loopCompute'
    and anything to do with getting the current time in the audioFilePlayer
    audio part. It works on my machine!)
  - cleaned things up a bit in test situation 10 - 2


2018-06-03
  - more work on the needleOverlay; seem to have basic mouse interaction working
    now


2018-06-01
  - redid the original grapher to be more like the new canvas grapher, and
    subsequently made it possible (and easy) to switch between the two. Parts
    that use a grapher part, now give the ability to chose which you want to use
    (canvas is default)
  - upgraded the slider to to have 'click to go to this position' 
    functionality. Also the handle has a little more grapple area than is
    visible
  - began on overlay control object (which will be used with the waveWorkspace
    later)


2018-05-31
  - finished off canvas-based grapher, and put it into the audioFilePlayer 
    object
    this move better now (as expected)
  - created wave form workspace with grapherCanvas. It's pretty nice too.
  - added rudimentary selection-area to grapher_waveWorkspace (need to work
    on backward selection)


2018-05-30
  - there's a problem with putting a canvas in a svg element. It appears to be a
    known bug on chrome, but no-one has dealt with it since 2015. There's a note
    on the bug reporting site that's from 2018-02-14 that seems to claim that 
    they'll be able to fix this bug..nothing after this though.
      It seems I can hack together a fix where an image element is actually 
    used, and a canvas element is hidden. The canvas is drawn to, and then a
    'print' command can be run which prints the canvas data to the image
    element. It's essentially the same (I think). Problems now are to do with
    detail, but I think that can be fixed...probably user selected


2018-05-29
  - current time in audioFilePlayer now accounts for playback rate (but not
    detune, which is just a different way of changing the playback rate, so I've
    removed that feature)
  - developed rudimentary waveform viewer; but its causing a lot of strain of 
    then browser. I'm working on integrating a canvas element to deal with
    this. There's still a lot of time spent on gathering the points to graph
    though..


2018-05-28
  - redid the slider and slider panel; things are simpler now and I've thrown   
    out the horizontal and vertical versions of both, in favour of just using an
    angle value.
  - wrote up new version of the audioFilePlayer (developing with a new object)
    (the 'currentTime' method doesn't account for playback rate changes..need to
    fix that)


2018-05-25
  - added 'seconds2time' and 'padString' utilities under math (the second isn't
    really math though..I should make a 'string' category or something...)
  - fixed up play/pause/stop functionality in the audio file player, and added
    the ability to get the current time
  - horizontal slider has been updated to override programmatic 'set' calls
    when the user is pulling the handle..it works, but needs work. Also it needs
    to be copied to other such controls
  - audio file player object now has a scrubber (everything needs work)

  future ideas
  - there's some 'detune' and 'play rate' methods in the audio source buffer
    thing somewhere..


2018-05-24
  - got upload of audio files to work. there's features for looping, starting
    mid track and graphing the waveform too that need to be worked on now
  - expanding audio file playing object to display the name of the loaded track,
    and have play/stop buttons (pause is under development)


2018-05-23
  - began work on the overlay menu
  - updated svg element layout to have different global panes, also there's an
    improved system for finding the scale of those global panes
  - changed how object.requestInteraction works; now it requires a global pane
    name to work with. This is so one can differentiate between actions for the
    workspace and ones for the menu. Currently, most mouse actions aren't really
    necessary - buttons and sliders work by their own anyway, and menu items
    aren't moveable - but things change and things should be open to this.


2018-05-22
  - redid audio_scope and audio_duplicator in new style, and put them in the 
    objects folder
  - successfully got the audio producing node to split the loaded track into its
    left and right channels


2018-05-21
  - another day, another attempt at that shebang thing in gravity
  - redid the basic synthesizer object with the new object builder system
  - created basic audio playback object (still working on 'uploading' files)


2018-05-18
  - redid the paste fix from yesterday, to put the 'declareObjectGrapple' back
    into the object builder
  - fix in audio_meter_level, where not setting the angle value would produce
    the element upside-down. It now defaults to 0 so that doesn't happen.
  - redid object builder to have z position control, it's also just flatly
    better now
  - making all the element callbacks lower case (it was inconsistent before)
  - another attempt at making gravity work everywhere (now mac works..we'll 
    see)


2018-05-17
  - fixed keyboard interaction from yesterday (the logic was broken) there's
    now also the option of 'all' so you don't have to declare everything
  - fixed onmouseup problem in button_rect (it's that this/timeout thing)

  bugs
  - the new object-design concept has totally broken the paste functionality :/
  -> scratch that; I fixed it by pulling the 'declareObjectGrapple' function 
    out ..still a little wonky I feel


2018-05-16
  - created readout using sixteen segment display
  - wrote up a pretty snazzy audio-input object with input select

  bugs
  - the logic in keyboardInteraction/declareKeycaptureObject/keyProcessor is 
    broken


2018-05-15
  - created sixteen segment display


2018-05-14
  - updated gravity shebang so it'll work in other systems (hopefully)


2018-05-11
  - fixed preservation of indentation in gravity
  - wrote up objectBuilder (a bit crude, but it's there)

  future ideas
  - you could probably delete that 'parts/modifiers' folder


2018-05-10
  - test situation 10 "recorded audio" / 1 "microphones" works, and rather
    simply too. All very gentle and nice
  - created rudimentary audio-in object


2018-05-09
  future ideas
  - audio in / import-export / playback / record / edit
  - look into "DynamicsCompressorNode", "DelayNode" and "IIRFilterNode"


2018-05-08
  - seems the feedback problem was caused by the 'Q' being set way too high. It
    used to be at 10000, but now it's at 0.1 and things are much more 
    reasonable
  - wrote up simple filter object

  future ideas
  - none of that 'power on' stuff to get round the new "no auto-play" features,
    instead, I'll just rely on some other activation method external to the
    main system. Keeps things clean I think


2018-05-04
  - chrome's "no autoplay" feature has arrived, and it's causing problems. You
    can go into 'chrome://flags/' and turn it off, but this is only a 
    development solution. There's going to have to be some sort of activation
    method..perhaps a gain dial on the audio sink that's set to zero.
    - added a 'power' button to the audio sink, but this will have to be
      changed to something else eventually
  - wrote synthesizer 3 which is gainJourney based (though it accommodates the
    velocity of a note)
  - wrote up a reverb unit and object, which uses those impulse responses from
    before. There's an output gain dail, a method of selecting between the ~38
    types and a wet/dry dial

  - filter unit has strange feed-back loop I can't seem to find the root of ):/


2018-05-02
  - wrote a pile of notes on synthesizers
  - fixed a little problem in basicSynth_2 where setting the rate dials to max
    would stop the wobble completely
  - start test situation 9 "audio effect units"
  - pushed 'changeAudioParam' to '__globals.utility.audio.changeAudioParam'
  - wrote up simplistic distortion box (complete with in/out gain adjust,
    distortion, resolution and over-sample controls. Seems to work pretty well)
  - added 'onRelease' callback to 'dial_discrete'
  - the 'onChange' callback for 'dial_discrete' is now only called when the
    value actually changes
  
  future ideas
  - reverb unit
  - EQ unit
  - multi-band distortion unit
  - mixing units


2018-05-01
  - added adjustment dials to new gain-wobble synthesizer (for period and depth)
  - updated gravity to ignore files which have names that begin with a dot
  - created synthesizer 2 and it's object (which incorporates gain and detune
    wobble; with dials for depth and rate)

  future ideas
  - need to do layouts of potential new synthesizers


2018-04-30
  - rewrote basicSynth into new style (it's actually longer than the original)
  - pushed the new synthesizer into main place (should probably rename it)
  - renamed synthesizer to synthesizer_basic
  - wrote up prototype versions of a synthesizer with gain and detune wobble
    (much better efficiency) and a prototype synthesizer object with gain wobble

  future ideas
  - we're going to have to make more self-contained synthesizers instead of this
    multi-unit idea, as things are pretty heavy on the processor, and there 
    seems to be a lot of time spent on fixing things that aren't that necessary
    (like the warbler sending the correct gain adjust signals fast enough, and
    the dial being able to keep up..slow moves are pretty much fine)
      It goes slightly against my desire to do everything in atomic parts (or at
    least, have the option to) but here we are. Audiotool is contained like 
    that. Logic, Acid, etc. all the same. I suppose its a battle between
    wanting to make things as open as possible, which led me to this
    everything-atomic way, but I think I can provide the same level of control
    with a more integrated (and efficient) units.


2018-04-27
  - new audio sink now has left and right audio channel input and a meter for 
    each
  - fixed a problem with cable redrawing which I hadn't noticed before
  - fixed slow duplication on the periodicWaveMaker, which had to do with
    calling update loops with the slidepanels. Slidepanels now use their own
    code more and don't rely on the individual sliders for panel-wide updates
  - audio meter part; complete with level; slow-moving background level and 
    markings (looks pretty pro too)
  - tried making a 'warbler' which changes the gain of a synthesizer a lot. 
    Seems to break manual control though, and if you go fast enough the dial
    doesn't move 
  

2018-04-26
  - finished redoing utility (that was bigger than I expected)
  - rearranged test situation 8 and some of the objects to look nicer
  - periodicWaveMaker now sends its settings on connecting
  - worked on redoing the audio sink to have an audio meter (working on an audio
    meter while I'm there)


2018-04-25
  - redoing utility


2018-04-24
  - redoing utility


2018-04-23
  - redoing utility


2018-04-20
  - updated keyboard interaction, so now objects have to declare what keys they
    want to use, and what modifiers will go with them (none, meta, control, alt
    and shift) The system behind handles everything else, and knows to run the
    global functions if nothing matches. Objects will also be told about 
    modifier keys that accompany a key.
  - wrote up an audio duplicator and added it to test situation 8

  future ideas
  - onmouseleave for objects?


2018-04-19
  - periodicWaveMaker's slides were entering values upside-down, so, fixed that
  - renamed 'compiler.py' to 'gravity' on Dylan's suggestion as it sounds cooler

  future ideas
  - make the audio connection nodes and cables flicker with the audio that they
    are carrying
  - redo keyboard capture, so object don't capture the entire thing when they
    only want one key. Have the objects declare what keys they want.


2018-04-18
  - fixed a problem with the dial_continuous, slide_horizontal and 
    slidePanel_vertical where applying overlapping smoothSets caused confusion
    in the animation. Now, the previous one is just cancelled and the new one
    takes over from where the old one left off
  - updated the synthesizer to incorporate different transition curves in attack
    and release (exponential still doesn't work though)
  - had to reverse sin/cos periodic wave input in the synthesizer..curious
  - began work on an audio scope, it can accept audio data and visualize it,
    there's also a 'hold' key and a dial for adjusting the refresh rate

  future ideas
  - audio duplicator
  - audio combiner


2018-04-17
  - fixed key_rect in test situation 1 test object (remember not to on
    onmouse-anything. It's all onkey-something)
  - added curve maker into utilities (linear, reverse_linear, sin, cos, s,
    exponential)
  - added smoothSet to dial_continuous, slide_vertical, slide_horizontal,
    slidePanel_vertical and slidePanel_horizontal
  - in test situation one, the rect_button now causes some new functions
  - updated the synthesizer to have smooth transition options when setting gain
    and detune (exponential doesn't seem to work though; but user-defined does
    ..curious)
  - updated basicSynth to accept smooth changing values for gain and detune, and
    adjust the dials and synthesizer accordingly along with the stored value for
    any new oscillators that are created during the time of transition

  future ideas
  - change attack and release in basicSynth and the synthesizer to incorporate
    different transition curves


2018-04-16
  - started log
  - added glowbox to test object in test situation one
  - deleted unneeded files
  - fixed up the first test situation a little to use the latest writings
  - looked into adding curve-based movement to the synth and continuous dials
    dials
