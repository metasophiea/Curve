working on smooth node transitions
    main curve types seem to be
        instant
        linear
        exponential
        user-defined

    target - a value between 0 and 1
    time   - the time taken to get to the target value
    curve  - 
            cancelScheduledValues(startTime)
                Cancels all scheduled future changes to the AudioParam
            cancelAndHoldAtTime(cancelTime)  (experimental technology)
                Cancels all scheduled future changes to the AudioParam but holds its value at
                a given time until further changes are made using other methods. The new value
                is given in the value parameter.


            setValueAtTime(value, startTime) 
                Schedules an instant change to the value of the AudioParam at a precise time,
                as measured against AudioContext.currentTime. The new value is given in the
                value parameter
                - instant

            linearRampToValueAtTime(value, endTime)
                Schedules a gradual linear change in the value of the AudioParam. The change
                starts at the time specified for the previous event, follows a linear ramp to
                the new value given in the value parameter, and reaches the new value at the
                time given in the endTime parameter.
                - linear

            exponentialRampToValueAtTime(value, endTime)
                Schedules a gradual exponential change in the value of the AudioParam. The
                change starts at the time specified for the previous event, follows an
                exponential ramp to the new value given in the value parameter, and reaches
                the new value at the time given in the endTime parameter.
                - exponential


            setTargetAtTime(target, startTime, timeConstant)
                Schedules the start of a change to the value of the AudioParam. The change
                starts at the time specified in startTime and exponentially moves towards the
                value given by the target parameter. The exponential decay rate is defined by
                the timeConstant parameter, which is a time measured in seconds.
                - exponential

            setValueCurveAtTime(values, startTime, duration)
                Schedules the values of the AudioParam to follow a set of values, defined by
                the values Float32Array scaled to fit into the given interval, starting at
                startTime, and having a specific duration.
                - user defined














utility code functions
    //workspace
        getPosition                         ()
        gotoPosition                        (x, y, z, r=0)
        getObjectUnderPoint                 (x,y)
        getPane                             (element)
        dotMaker                            (x,y,text,r=2,style='fill:rgba(255,100,255,0.75); font-size:3; font-family:Helvetica;')
        pointconverter_browserWorkspace     (x,y)
        pointconverter_workspaceBrowser     (x,y)
        requestInteraction                  (x,y,type)
        getBoundingBox                      (SVG)

    //positional
        getTransform                        (element)
        setTransform                        (element, transformData)
        updateTransform_XY                  (element, x, y)
        getCumulativeTransform              (element)
        setRotation                         (element, rotation)

    //object modifiers
        makeUnselectable                    (element)
        generateSelectionArea               (points, _mainObject)
        setStyle                            (element, style)
        disconnectEverything                (object)

    //pure math
        getCartesian                        (ang,dis)
        getPolar                            (x,y)
        getBoundingBoxFromPoints            (points)
        getIntersectionOfTwoLineSegments    (segment1_point1_x, segment1_point1_y, segment1_point2_x, segment1_point2_y, segment2_point1_x, segment2_point1_y, segment2_point2_x, segment2_point2_y)
        detectOverlap                       (a_poly, b_poly, a_box=null, b_box=null)
        curve
            linear                          (stepCount)
            reverse_linear                  (stepCount)
            sin                             (stepCount, start=0, distance=1)
            cos                             (stepCount, start=0, distance=1)
            s                               (stepCount, sharpness)
            exponential                     (stepCount)


-- renamed -- 
    utility
        workspace
            currentPosition                 ()
            gotoPosition                    (x,y,z,r)
            getPane                         (element)
            objectUnderPoint                (x,y) (browser position)
            pointConverter
                browser2workspace           (x,y)
                workspace2browser           (x,y)
            dotMaker                        (x,y,text,r=0,style='fill:rgba(255,100,255,0.75); font-size:3; font-family:Helvetica;')

        element
            getTransform                    (element)
            getCumulativeTransform          (element)
            setTransform                    (element, transform:{x:0, y:0, s:1, r:0})
            setTransform_XYonly             (element, x, y)
            setStyle                        (element, style)
            setRotation                     (element, rotation)
            getBoundingBox                  (element)
            makeUnselectable                (element)

        object
            requestInteraction              (x,y,type) (browser position)
            disconnectEverything            (object)
            generateSelectionArea           (points:[{x:0,y:0},...], object)

        math
            polar2cartesian                 (angle,distance)
            cartesian2polar                 (x,y)
            boundingBoxFromPoints           (points:[{x:0,y:0},...])
            intersectionOfTwoLineSegments   (segment1:{{x:0,y:0},{x:0,y:0}}, segment2:{{x:0,y:0},{x:0,y:0}})
            detectOverlap                   (poly_a:[{x:0,y:0},...], poly_b:[{x:0,y:0},...], box_a:[{x:0,y:0},{x:0,y:0}]=null, box_b:[{x:0,y:0},{x:0,y:0}]=null)
            curveGenerator
                linear                      (stepCount, start=0, end=1)
                sin                         (stepCount, start=0, end=1)
                cos                         (stepCount, start=0, end=1)
                s                           (stepCount, start=0, end=1, sharpness=8)
                exponential                 (stepCount, start=0, end=1)
